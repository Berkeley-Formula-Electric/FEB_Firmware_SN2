
LVPDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004efc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f4  080050f4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050fc  080050fc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000008c  08005190  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08005190  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1b1  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce4  00000000  00000000  0002e26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  00030a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220aa  00000000  00000000  00031540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb5c  00000000  00000000  000535ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd827  00000000  00000000  00062146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f96d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003020  00000000  00000000  0012f9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000008c 	.word	0x2000008c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080050ac 	.word	0x080050ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000090 	.word	0x20000090
 8000204:	080050ac 	.word	0x080050ac

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000884:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000888:	f000 b974 	b.w	8000b74 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	4604      	mov	r4, r0
 80008ac:	468e      	mov	lr, r1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d14d      	bne.n	800094e <__udivmoddi4+0xaa>
 80008b2:	428a      	cmp	r2, r1
 80008b4:	4694      	mov	ip, r2
 80008b6:	d969      	bls.n	800098c <__udivmoddi4+0xe8>
 80008b8:	fab2 f282 	clz	r2, r2
 80008bc:	b152      	cbz	r2, 80008d4 <__udivmoddi4+0x30>
 80008be:	fa01 f302 	lsl.w	r3, r1, r2
 80008c2:	f1c2 0120 	rsb	r1, r2, #32
 80008c6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ce:	ea41 0e03 	orr.w	lr, r1, r3
 80008d2:	4094      	lsls	r4, r2
 80008d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d8:	0c21      	lsrs	r1, r4, #16
 80008da:	fbbe f6f8 	udiv	r6, lr, r8
 80008de:	fa1f f78c 	uxth.w	r7, ip
 80008e2:	fb08 e316 	mls	r3, r8, r6, lr
 80008e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ea:	fb06 f107 	mul.w	r1, r6, r7
 80008ee:	4299      	cmp	r1, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x64>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008fa:	f080 811f 	bcs.w	8000b3c <__udivmoddi4+0x298>
 80008fe:	4299      	cmp	r1, r3
 8000900:	f240 811c 	bls.w	8000b3c <__udivmoddi4+0x298>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	1a5b      	subs	r3, r3, r1
 800090a:	b2a4      	uxth	r4, r4
 800090c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000910:	fb08 3310 	mls	r3, r8, r0, r3
 8000914:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000918:	fb00 f707 	mul.w	r7, r0, r7
 800091c:	42a7      	cmp	r7, r4
 800091e:	d90a      	bls.n	8000936 <__udivmoddi4+0x92>
 8000920:	eb1c 0404 	adds.w	r4, ip, r4
 8000924:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000928:	f080 810a 	bcs.w	8000b40 <__udivmoddi4+0x29c>
 800092c:	42a7      	cmp	r7, r4
 800092e:	f240 8107 	bls.w	8000b40 <__udivmoddi4+0x29c>
 8000932:	4464      	add	r4, ip
 8000934:	3802      	subs	r0, #2
 8000936:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093a:	1be4      	subs	r4, r4, r7
 800093c:	2600      	movs	r6, #0
 800093e:	b11d      	cbz	r5, 8000948 <__udivmoddi4+0xa4>
 8000940:	40d4      	lsrs	r4, r2
 8000942:	2300      	movs	r3, #0
 8000944:	e9c5 4300 	strd	r4, r3, [r5]
 8000948:	4631      	mov	r1, r6
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	428b      	cmp	r3, r1
 8000950:	d909      	bls.n	8000966 <__udivmoddi4+0xc2>
 8000952:	2d00      	cmp	r5, #0
 8000954:	f000 80ef 	beq.w	8000b36 <__udivmoddi4+0x292>
 8000958:	2600      	movs	r6, #0
 800095a:	e9c5 0100 	strd	r0, r1, [r5]
 800095e:	4630      	mov	r0, r6
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	fab3 f683 	clz	r6, r3
 800096a:	2e00      	cmp	r6, #0
 800096c:	d14a      	bne.n	8000a04 <__udivmoddi4+0x160>
 800096e:	428b      	cmp	r3, r1
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xd4>
 8000972:	4282      	cmp	r2, r0
 8000974:	f200 80f9 	bhi.w	8000b6a <__udivmoddi4+0x2c6>
 8000978:	1a84      	subs	r4, r0, r2
 800097a:	eb61 0303 	sbc.w	r3, r1, r3
 800097e:	2001      	movs	r0, #1
 8000980:	469e      	mov	lr, r3
 8000982:	2d00      	cmp	r5, #0
 8000984:	d0e0      	beq.n	8000948 <__udivmoddi4+0xa4>
 8000986:	e9c5 4e00 	strd	r4, lr, [r5]
 800098a:	e7dd      	b.n	8000948 <__udivmoddi4+0xa4>
 800098c:	b902      	cbnz	r2, 8000990 <__udivmoddi4+0xec>
 800098e:	deff      	udf	#255	; 0xff
 8000990:	fab2 f282 	clz	r2, r2
 8000994:	2a00      	cmp	r2, #0
 8000996:	f040 8092 	bne.w	8000abe <__udivmoddi4+0x21a>
 800099a:	eba1 010c 	sub.w	r1, r1, ip
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2601      	movs	r6, #1
 80009a8:	0c20      	lsrs	r0, r4, #16
 80009aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ae:	fb07 1113 	mls	r1, r7, r3, r1
 80009b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009b6:	fb0e f003 	mul.w	r0, lr, r3
 80009ba:	4288      	cmp	r0, r1
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x12c>
 80009be:	eb1c 0101 	adds.w	r1, ip, r1
 80009c2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x12a>
 80009c8:	4288      	cmp	r0, r1
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2c0>
 80009ce:	4643      	mov	r3, r8
 80009d0:	1a09      	subs	r1, r1, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d8:	fb07 1110 	mls	r1, r7, r0, r1
 80009dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x156>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x154>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2ca>
 80009f8:	4608      	mov	r0, r1
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a02:	e79c      	b.n	800093e <__udivmoddi4+0x9a>
 8000a04:	f1c6 0720 	rsb	r7, r6, #32
 8000a08:	40b3      	lsls	r3, r6
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa20 f407 	lsr.w	r4, r0, r7
 8000a16:	fa01 f306 	lsl.w	r3, r1, r6
 8000a1a:	431c      	orrs	r4, r3
 8000a1c:	40f9      	lsrs	r1, r7
 8000a1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a22:	fa00 f306 	lsl.w	r3, r0, r6
 8000a26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a2a:	0c20      	lsrs	r0, r4, #16
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	fb09 1118 	mls	r1, r9, r8, r1
 8000a34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a38:	fb08 f00e 	mul.w	r0, r8, lr
 8000a3c:	4288      	cmp	r0, r1
 8000a3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b8>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2bc>
 8000a50:	4288      	cmp	r0, r1
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2bc>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4461      	add	r1, ip
 8000a5c:	1a09      	subs	r1, r1, r0
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a64:	fb09 1110 	mls	r1, r9, r0, r1
 8000a68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a70:	458e      	cmp	lr, r1
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1e2>
 8000a74:	eb1c 0101 	adds.w	r1, ip, r1
 8000a78:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2b4>
 8000a7e:	458e      	cmp	lr, r1
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2b4>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4461      	add	r1, ip
 8000a86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a8e:	eba1 010e 	sub.w	r1, r1, lr
 8000a92:	42a1      	cmp	r1, r4
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46a6      	mov	lr, r4
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x2a4>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x2a0>
 8000a9c:	b15d      	cbz	r5, 8000ab6 <__udivmoddi4+0x212>
 8000a9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000aa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000aa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aaa:	fa22 f306 	lsr.w	r3, r2, r6
 8000aae:	40f1      	lsrs	r1, r6
 8000ab0:	431f      	orrs	r7, r3
 8000ab2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ab6:	2600      	movs	r6, #0
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	f1c2 0320 	rsb	r3, r2, #32
 8000ac2:	40d8      	lsrs	r0, r3
 8000ac4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac8:	fa21 f303 	lsr.w	r3, r1, r3
 8000acc:	4091      	lsls	r1, r2
 8000ace:	4301      	orrs	r1, r0
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000adc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae0:	0c0b      	lsrs	r3, r1, #16
 8000ae2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ae6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aea:	429e      	cmp	r6, r3
 8000aec:	fa04 f402 	lsl.w	r4, r4, r2
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x260>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b8>
 8000afc:	429e      	cmp	r6, r3
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b8>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4463      	add	r3, ip
 8000b04:	1b9b      	subs	r3, r3, r6
 8000b06:	b289      	uxth	r1, r1
 8000b08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b14:	fb06 f30e 	mul.w	r3, r6, lr
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x28a>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000b2a:	3e02      	subs	r6, #2
 8000b2c:	4461      	add	r1, ip
 8000b2e:	1ac9      	subs	r1, r1, r3
 8000b30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0x104>
 8000b36:	462e      	mov	r6, r5
 8000b38:	4628      	mov	r0, r5
 8000b3a:	e705      	b.n	8000948 <__udivmoddi4+0xa4>
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	e6e3      	b.n	8000908 <__udivmoddi4+0x64>
 8000b40:	4618      	mov	r0, r3
 8000b42:	e6f8      	b.n	8000936 <__udivmoddi4+0x92>
 8000b44:	454b      	cmp	r3, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f8>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b50:	3801      	subs	r0, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f8>
 8000b54:	4646      	mov	r6, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x28a>
 8000b58:	4620      	mov	r0, r4
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1e2>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x260>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b8>
 8000b64:	3b02      	subs	r3, #2
 8000b66:	4461      	add	r1, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x12c>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e709      	b.n	8000982 <__udivmoddi4+0xde>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x156>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <FEB_TPS2482_SETUP>:
#include "FEB_TPS2482.h"

void FEB_TPS2482_SETUP(I2C_HandleTypeDef hi2c, uint8_t DEV_ADDR, uint8_t CONFIG[], uint8_t CAL_REG[], uint8_t ALERT[], uint8_t LIMIT[]) {
 8000b78:	b084      	sub	sp, #16
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af04      	add	r7, sp, #16
 8000b80:	f107 0c08 	add.w	ip, r7, #8
 8000b84:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_I2C_Mem_Write(&hi2c, DEV_ADDR, 0x00 << 1, 1, CONFIG, 16, HAL_MAX_DELAY); // configure
 8000b88:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000b8c:	b299      	uxth	r1, r3
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	2310      	movs	r3, #16
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f107 0008 	add.w	r0, r7, #8
 8000ba4:	f002 fce0 	bl	8003568 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c, DEV_ADDR, 0x05 << 1, 1, CAL_REG, 16, HAL_MAX_DELAY); // calibrate
 8000ba8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000bac:	b299      	uxth	r1, r3
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	220a      	movs	r2, #10
 8000bc0:	f107 0008 	add.w	r0, r7, #8
 8000bc4:	f002 fcd0 	bl	8003568 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c, DEV_ADDR, 0x06 << 1, 1, ALERT, 16, HAL_MAX_DELAY); // set alert
 8000bc8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	220c      	movs	r2, #12
 8000be0:	f107 0008 	add.w	r0, r7, #8
 8000be4:	f002 fcc0 	bl	8003568 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c, DEV_ADDR, 0x07 << 1, 1, LIMIT, 16, HAL_MAX_DELAY); // set limit
 8000be8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000bec:	b299      	uxth	r1, r3
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf2:	9302      	str	r3, [sp, #8]
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	220e      	movs	r2, #14
 8000c00:	f107 0008 	add.w	r0, r7, #8
 8000c04:	f002 fcb0 	bl	8003568 <HAL_I2C_Mem_Write>
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <FEB_TPS2482_shutdownIfError>:

void FEB_TPS2482_shutdownIfError(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR, GPIO_TypeDef * EN, uint16_t EN_NUM, GPIO_TypeDef * AL, uint16_t AL_NUM,
		GPIO_TypeDef * PG, uint16_t PG_NUM, float VMAX, float VMIN, float IMAX, float IMIN, float PMAX, float PMIN) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	6278      	str	r0, [r7, #36]	; 0x24
 8000c1c:	61fa      	str	r2, [r7, #28]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	ed87 0a06 	vstr	s0, [r7, #24]
 8000c24:	edc7 0a05 	vstr	s1, [r7, #20]
 8000c28:	ed87 1a04 	vstr	s2, [r7, #16]
 8000c2c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000c30:	ed87 2a02 	vstr	s4, [r7, #8]
 8000c34:	edc7 2a01 	vstr	s5, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000c3e:	4613      	mov	r3, r2
 8000c40:	843b      	strh	r3, [r7, #32]
		// 1. alert pin pulled low
		// 2. PG goes low while EN is high
		// 3. shunt voltage, bus voltage, power, or current out of bounds

	// 1.
	if (HAL_GPIO_ReadPin(AL, AL_NUM) == GPIO_PIN_RESET) {
 8000c42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c44:	4619      	mov	r1, r3
 8000c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c48:	f001 fff4 	bl	8002c34 <HAL_GPIO_ReadPin>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d105      	bne.n	8000c5e <FEB_TPS2482_shutdownIfError+0x4a>
		HAL_GPIO_WritePin(EN, EN_NUM, GPIO_PIN_RESET);
 8000c52:	8c3b      	ldrh	r3, [r7, #32]
 8000c54:	2200      	movs	r2, #0
 8000c56:	4619      	mov	r1, r3
 8000c58:	69f8      	ldr	r0, [r7, #28]
 8000c5a:	f002 f803 	bl	8002c64 <HAL_GPIO_WritePin>
	}
	// 2.
	if ((HAL_GPIO_ReadPin(EN, EN_NUM) == GPIO_PIN_SET) && (HAL_GPIO_ReadPin(PG, PG_NUM) == GPIO_PIN_RESET)) {
 8000c5e:	8c3b      	ldrh	r3, [r7, #32]
 8000c60:	4619      	mov	r1, r3
 8000c62:	69f8      	ldr	r0, [r7, #28]
 8000c64:	f001 ffe6 	bl	8002c34 <HAL_GPIO_ReadPin>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d10d      	bne.n	8000c8a <FEB_TPS2482_shutdownIfError+0x76>
 8000c6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c70:	4619      	mov	r1, r3
 8000c72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c74:	f001 ffde 	bl	8002c34 <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d105      	bne.n	8000c8a <FEB_TPS2482_shutdownIfError+0x76>
		HAL_GPIO_WritePin(EN, EN_NUM, GPIO_PIN_RESET);
 8000c7e:	8c3b      	ldrh	r3, [r7, #32]
 8000c80:	2200      	movs	r2, #0
 8000c82:	4619      	mov	r1, r3
 8000c84:	69f8      	ldr	r0, [r7, #28]
 8000c86:	f001 ffed 	bl	8002c64 <HAL_GPIO_WritePin>
	}
	// 3.
	FEB_TPS2482_pullLowIfOutOfBounds(hi2c, DEV_ADDR, EN, EN_NUM, VMAX, VMIN, 0x01); // shunt voltage
 8000c8a:	8c3b      	ldrh	r3, [r7, #32]
 8000c8c:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000c90:	2201      	movs	r2, #1
 8000c92:	9200      	str	r2, [sp, #0]
 8000c94:	edd7 0a05 	vldr	s1, [r7, #20]
 8000c98:	ed97 0a06 	vldr	s0, [r7, #24]
 8000c9c:	69fa      	ldr	r2, [r7, #28]
 8000c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ca0:	f000 f82e 	bl	8000d00 <FEB_TPS2482_pullLowIfOutOfBounds>
	FEB_TPS2482_pullLowIfOutOfBounds(hi2c, DEV_ADDR, EN, EN_NUM, VMAX, VMIN, 0x02); // bus voltage
 8000ca4:	8c3b      	ldrh	r3, [r7, #32]
 8000ca6:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000caa:	2202      	movs	r2, #2
 8000cac:	9200      	str	r2, [sp, #0]
 8000cae:	edd7 0a05 	vldr	s1, [r7, #20]
 8000cb2:	ed97 0a06 	vldr	s0, [r7, #24]
 8000cb6:	69fa      	ldr	r2, [r7, #28]
 8000cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cba:	f000 f821 	bl	8000d00 <FEB_TPS2482_pullLowIfOutOfBounds>
	FEB_TPS2482_pullLowIfOutOfBounds(hi2c, DEV_ADDR, EN, EN_NUM, PMAX, PMIN, 0x03); // power
 8000cbe:	8c3b      	ldrh	r3, [r7, #32]
 8000cc0:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	9200      	str	r2, [sp, #0]
 8000cc8:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ccc:	ed97 0a02 	vldr	s0, [r7, #8]
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cd4:	f000 f814 	bl	8000d00 <FEB_TPS2482_pullLowIfOutOfBounds>
	FEB_TPS2482_pullLowIfOutOfBounds(hi2c, DEV_ADDR, EN, EN_NUM, IMAX, IMIN, 0x04); // current
 8000cd8:	8c3b      	ldrh	r3, [r7, #32]
 8000cda:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000cde:	2204      	movs	r2, #4
 8000ce0:	9200      	str	r2, [sp, #0]
 8000ce2:	edd7 0a03 	vldr	s1, [r7, #12]
 8000ce6:	ed97 0a04 	vldr	s0, [r7, #16]
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cee:	f000 f807 	bl	8000d00 <FEB_TPS2482_pullLowIfOutOfBounds>

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	0000      	movs	r0, r0
 8000cfc:	0000      	movs	r0, r0
	...

08000d00 <FEB_TPS2482_pullLowIfOutOfBounds>:

void FEB_TPS2482_pullLowIfOutOfBounds(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR, GPIO_TypeDef * EN, uint16_t EN_NUM, float MAX, float MIN,
		uint8_t REG) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	; 0x38
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	6178      	str	r0, [r7, #20]
 8000d08:	60fa      	str	r2, [r7, #12]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d10:	edc7 0a01 	vstr	s1, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	74fb      	strb	r3, [r7, #19]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	823b      	strh	r3, [r7, #16]
	uint8_t buf[12];
	buf[0] = REG;
 8000d1c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d20:	763b      	strb	r3, [r7, #24]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 8000d22:	7cfb      	ldrb	r3, [r7, #19]
 8000d24:	b299      	uxth	r1, r3
 8000d26:	f107 0218 	add.w	r2, r7, #24
 8000d2a:	2364      	movs	r3, #100	; 0x64
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	6978      	ldr	r0, [r7, #20]
 8000d32:	f002 f8f5 	bl	8002f20 <HAL_I2C_Master_Transmit>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (ret != HAL_OK) {
 8000d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <FEB_TPS2482_pullLowIfOutOfBounds+0x52>
		HAL_GPIO_WritePin(EN, EN_NUM, GPIO_PIN_RESET); // pull EN low
 8000d44:	8a3b      	ldrh	r3, [r7, #16]
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f001 ff8a 	bl	8002c64 <HAL_GPIO_WritePin>
			if (parsed > MAX || parsed < MIN) {
				HAL_GPIO_WritePin(EN, EN_NUM, GPIO_PIN_RESET);
			}
		}
	}
}
 8000d50:	e04e      	b.n	8000df0 <FEB_TPS2482_pullLowIfOutOfBounds+0xf0>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2, 100);
 8000d52:	7cfb      	ldrb	r3, [r7, #19]
 8000d54:	b299      	uxth	r1, r3
 8000d56:	f107 0218 	add.w	r2, r7, #24
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2302      	movs	r3, #2
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	f002 f9db 	bl	800311c <HAL_I2C_Master_Receive>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (ret != HAL_OK) {
 8000d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <FEB_TPS2482_pullLowIfOutOfBounds+0x82>
			HAL_GPIO_WritePin(EN, EN_NUM, GPIO_PIN_RESET); // pull EN low
 8000d74:	8a3b      	ldrh	r3, [r7, #16]
 8000d76:	2200      	movs	r2, #0
 8000d78:	4619      	mov	r1, r3
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f001 ff72 	bl	8002c64 <HAL_GPIO_WritePin>
}
 8000d80:	e036      	b.n	8000df0 <FEB_TPS2482_pullLowIfOutOfBounds+0xf0>
			int val = ((int16_t)buf[0] << 4) | (buf[1] >> 4); // combine the 2 bytes
 8000d82:	7e3b      	ldrb	r3, [r7, #24]
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	7e7a      	ldrb	r2, [r7, #25]
 8000d88:	0912      	lsrs	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
			val = val - 1;
 8000d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d92:	3b01      	subs	r3, #1
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
			val |= 0xF000; // subtract 1 and take complement
 8000d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d98:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
			float parsed = val * 0.0000025;// convert to decimal and multiply by 2.5uV
 8000d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000da0:	f7ff fcae 	bl	8000700 <__aeabi_i2d>
 8000da4:	a314      	add	r3, pc, #80	; (adr r3, 8000df8 <FEB_TPS2482_pullLowIfOutOfBounds+0xf8>)
 8000da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000daa:	f7ff fa2d 	bl	8000208 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f7ff fd0d 	bl	80007d4 <__aeabi_d2f>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
			if (parsed > MAX || parsed < MIN) {
 8000dbe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dce:	dc09      	bgt.n	8000de4 <FEB_TPS2482_pullLowIfOutOfBounds+0xe4>
 8000dd0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de0:	d400      	bmi.n	8000de4 <FEB_TPS2482_pullLowIfOutOfBounds+0xe4>
}
 8000de2:	e005      	b.n	8000df0 <FEB_TPS2482_pullLowIfOutOfBounds+0xf0>
				HAL_GPIO_WritePin(EN, EN_NUM, GPIO_PIN_RESET);
 8000de4:	8a3b      	ldrh	r3, [r7, #16]
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f001 ff3a 	bl	8002c64 <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	3730      	adds	r7, #48	; 0x30
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	88e368f1 	.word	0x88e368f1
 8000dfc:	3ec4f8b5 	.word	0x3ec4f8b5

08000e00 <Store_EMERGENCY_Msg>:
    EMERGENCY_APPS_EMERGENCY_TYPE apps_emergency;
    EMERGENCY_SM_EMERGENCY_TYPE sm_emergency;
} EMERGENCY_MESSAGE_TYPE;
EMERGENCY_MESSAGE_TYPE EMERGENCY_MESSAGE;

void Store_EMERGENCY_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <Store_EMERGENCY_Msg+0x1a>
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d006      	beq.n	8000e26 <Store_EMERGENCY_Msg+0x26>
            break;
        case EMERGENCY_SM_EMERGENCY:
            memcpy(&(EMERGENCY_MESSAGE.sm_emergency), RxData, data_length);
            break;
    }
}
 8000e18:	e00b      	b.n	8000e32 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.apps_emergency), RxData, data_length);
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <Store_EMERGENCY_Msg+0x3c>)
 8000e20:	f004 f92e 	bl	8005080 <memcpy>
            break;
 8000e24:	e005      	b.n	8000e32 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.sm_emergency), RxData, data_length);
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <Store_EMERGENCY_Msg+0x40>)
 8000e2c:	f004 f928 	bl	8005080 <memcpy>
            break;
 8000e30:	bf00      	nop
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000a8 	.word	0x200000a8
 8000e40:	200000a9 	.word	0x200000a9

08000e44 <Store_BMS_Msg>:
    BMS_TEMPERATURE_TYPE temperature;
    BMS_VOLTAGE_TYPE voltage;
} BMS_MESSAGE_TYPE;
BMS_MESSAGE_TYPE BMS_MESSAGE;

void Store_BMS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b10      	cmp	r3, #16
 8000e54:	d003      	beq.n	8000e5e <Store_BMS_Msg+0x1a>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b11      	cmp	r3, #17
 8000e5a:	d006      	beq.n	8000e6a <Store_BMS_Msg+0x26>
            break;
        case BMS_VOLTAGE:
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
            break;
    }
}
 8000e5c:	e00b      	b.n	8000e76 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.temperature), RxData, data_length);
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <Store_BMS_Msg+0x3c>)
 8000e64:	f004 f90c 	bl	8005080 <memcpy>
            break;
 8000e68:	e005      	b.n	8000e76 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <Store_BMS_Msg+0x40>)
 8000e70:	f004 f906 	bl	8005080 <memcpy>
            break;
 8000e74:	bf00      	nop
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000ac 	.word	0x200000ac
 8000e84:	200000b0 	.word	0x200000b0

08000e88 <Store_SM_Msg>:
typedef struct SM_MESSAGE_TYPE {
    SM_COMMAND_1_TYPE command_1;
} SM_MESSAGE_TYPE;
SM_MESSAGE_TYPE SM_MESSAGE;

void Store_SM_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b20      	cmp	r3, #32
 8000e98:	d105      	bne.n	8000ea6 <Store_SM_Msg+0x1e>
        case SM_COMMAND_1:
            memcpy(&(SM_MESSAGE.command_1), RxData, data_length);
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68b9      	ldr	r1, [r7, #8]
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <Store_SM_Msg+0x28>)
 8000ea0:	f004 f8ee 	bl	8005080 <memcpy>
            break;
 8000ea4:	bf00      	nop
    }
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000b4 	.word	0x200000b4

08000eb4 <Store_APPS_Msg>:
    APPS_BRAKE_PEDAL_TYPE brake_pedal;
    APPS_TORQUE_TYPE torque;
} APPS_MESSAGE_TYPE;
APPS_MESSAGE_TYPE APPS_MESSAGE;

void Store_APPS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3b30      	subs	r3, #48	; 0x30
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d823      	bhi.n	8000f10 <Store_APPS_Msg+0x5c>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <Store_APPS_Msg+0x1c>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000eed 	.word	0x08000eed
 8000ed8:	08000ef9 	.word	0x08000ef9
 8000edc:	08000f05 	.word	0x08000f05
        case APPS_ACCELERATOR1_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator1_pedal), RxData, data_length);
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <Store_APPS_Msg+0x64>)
 8000ee6:	f004 f8cb 	bl	8005080 <memcpy>
            break;
 8000eea:	e011      	b.n	8000f10 <Store_APPS_Msg+0x5c>
        case APPS_ACCELERATOR2_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator2_pedal), RxData, data_length);
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <Store_APPS_Msg+0x68>)
 8000ef2:	f004 f8c5 	bl	8005080 <memcpy>
            break;
 8000ef6:	e00b      	b.n	8000f10 <Store_APPS_Msg+0x5c>
        case APPS_BRAKE_PEDAL:
            memcpy(&(APPS_MESSAGE.brake_pedal), RxData, data_length);
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <Store_APPS_Msg+0x6c>)
 8000efe:	f004 f8bf 	bl	8005080 <memcpy>
            break;
 8000f02:	e005      	b.n	8000f10 <Store_APPS_Msg+0x5c>
        case APPS_TORQUE:
            memcpy(&(APPS_MESSAGE.torque), RxData, data_length);
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <Store_APPS_Msg+0x70>)
 8000f0a:	f004 f8b9 	bl	8005080 <memcpy>
            break;
 8000f0e:	bf00      	nop
    }
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000b8 	.word	0x200000b8
 8000f1c:	200000bc 	.word	0x200000bc
 8000f20:	200000c0 	.word	0x200000c0
 8000f24:	200000c4 	.word	0x200000c4

08000f28 <assign_filter_array>:
const FilterArrayLength APPS_RX_NUM = 1;

const AddressIdType RMS_RX_ID[] = {SM_ID};
const FilterArrayLength RMS_RX_NUM = 1;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d813      	bhi.n	8000f60 <assign_filter_array+0x38>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <assign_filter_array+0x18>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f51 	.word	0x08000f51
 8000f44:	08000f55 	.word	0x08000f55
 8000f48:	08000f59 	.word	0x08000f59
 8000f4c:	08000f5d 	.word	0x08000f5d
        case BMS_ID:
            return BMS_RX_ID;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <assign_filter_array+0x48>)
 8000f52:	e006      	b.n	8000f62 <assign_filter_array+0x3a>
            break;
        case SM_ID:
            return SM_RX_ID;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <assign_filter_array+0x4c>)
 8000f56:	e004      	b.n	8000f62 <assign_filter_array+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <assign_filter_array+0x50>)
 8000f5a:	e002      	b.n	8000f62 <assign_filter_array+0x3a>
            break;
        case RMS_ID:
            return RMS_RX_ID;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <assign_filter_array+0x54>)
 8000f5e:	e000      	b.n	8000f62 <assign_filter_array+0x3a>
            break;
    }
    return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	080050c4 	.word	0x080050c4
 8000f74:	080050c8 	.word	0x080050c8
 8000f78:	080050d4 	.word	0x080050d4
 8000f7c:	080050d8 	.word	0x080050d8

08000f80 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d813      	bhi.n	8000fb8 <assign_filter_array_legnth+0x38>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <assign_filter_array_legnth+0x18>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000fa9 	.word	0x08000fa9
 8000f9c:	08000fad 	.word	0x08000fad
 8000fa0:	08000fb1 	.word	0x08000fb1
 8000fa4:	08000fb5 	.word	0x08000fb5
        case BMS_ID:
            return BMS_RX_NUM;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e006      	b.n	8000fba <assign_filter_array_legnth+0x3a>
            break;
        case SM_ID:
            return SM_RX_NUM;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e004      	b.n	8000fba <assign_filter_array_legnth+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e002      	b.n	8000fba <assign_filter_array_legnth+0x3a>
            break;
        case RMS_ID:
            return RMS_RX_NUM;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <assign_filter_array_legnth+0x3a>
            break;
    }
    return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <store_msg>:

void store_msg(CAN_RxHeaderTypeDef *pHeader, uint8_t RxData[]) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
    switch(pHeader->StdId >> BITS_PER_MESSAGE_TYPE) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d82f      	bhi.n	800103c <store_msg+0x74>
 8000fdc:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <store_msg+0x1c>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	08001007 	.word	0x08001007
 8000fec:	08001019 	.word	0x08001019
 8000ff0:	0800102b 	.word	0x0800102b
        case EMERGENCY_ID:
            Store_EMERGENCY_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	f7ff fefe 	bl	8000e00 <Store_EMERGENCY_Msg>
            break;
 8001004:	e01a      	b.n	800103c <store_msg+0x74>
        case BMS_ID:
            Store_BMS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	461a      	mov	r2, r3
 8001010:	6839      	ldr	r1, [r7, #0]
 8001012:	f7ff ff17 	bl	8000e44 <Store_BMS_Msg>
            break;
 8001016:	e011      	b.n	800103c <store_msg+0x74>
        case SM_ID:
            Store_SM_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	461a      	mov	r2, r3
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	f7ff ff30 	bl	8000e88 <Store_SM_Msg>
            break;
 8001028:	e008      	b.n	800103c <store_msg+0x74>
        case APPS_ID:
            Store_APPS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	461a      	mov	r2, r3
 8001034:	6839      	ldr	r1, [r7, #0]
 8001036:	f7ff ff3d 	bl	8000eb4 <Store_APPS_Msg>
            break;
 800103a:	bf00      	nop
    }
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <FEB_CAN_Filter_Config>:
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void Error_Handler(void);

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b090      	sub	sp, #64	; 0x40
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	4611      	mov	r1, r2
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	4613      	mov	r3, r2
 8001058:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800105e:	e027      	b.n	80010b0 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001060:	2301      	movs	r3, #1
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8001064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 800106c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	4413      	add	r3, r2
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 800107e:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001082:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800108c:	2301      	movs	r3, #1
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 8001090:	231b      	movs	r3, #27
 8001092:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 fea2 	bl	8001de4 <HAL_CAN_ConfigFilter>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 80010a6:	f000 fb7b 	bl	80017a0 <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 80010aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ac:	3301      	adds	r3, #1
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbd3      	blt.n	8001060 <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3740      	adds	r7, #64	; 0x40
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <FEB_CAN_Init+0x80>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d104      	bne.n	80010e2 <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 80010d8:	2300      	movs	r3, #0
 80010da:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 80010dc:	2302      	movs	r3, #2
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	e008      	b.n	80010f4 <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <FEB_CAN_Init+0x84>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d103      	bne.n	80010f4 <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 80010f0:	2310      	movs	r3, #16
 80010f2:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <FEB_CAN_Init+0x88>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <FEB_CAN_Init+0x88>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <FEB_CAN_Init+0x88>)
 8001102:	2200      	movs	r2, #0
 8001104:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 8001106:	6838      	ldr	r0, [r7, #0]
 8001108:	f7ff ff0e 	bl	8000f28 <assign_filter_array>
 800110c:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f7ff ff36 	bl	8000f80 <assign_filter_array_legnth>
 8001114:	4603      	mov	r3, r0
 8001116:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	7afa      	ldrb	r2, [r7, #11]
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff90 	bl	8001044 <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 ff3d 	bl	8001fa4 <HAL_CAN_Start>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <FEB_CAN_Init+0x70>
	  Error_Handler();
 8001130:	f000 fb36 	bl	80017a0 <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f001 f88a 	bl	8002250 <HAL_CAN_ActivateNotification>

}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40006400 	.word	0x40006400
 8001148:	40006800 	.word	0x40006800
 800114c:	200000c8 	.word	0x200000c8

08001150 <FEB_CAN_Receive>:

void FEB_CAN_Receive(CAN_HandleTypeDef *hcan, uint32_t CAN_RX_FIFO) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <FEB_CAN_Receive+0x30>)
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <FEB_CAN_Receive+0x34>)
 800115e:	6839      	ldr	r1, [r7, #0]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 ff63 	bl	800202c <HAL_CAN_GetRxMessage>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <FEB_CAN_Receive+0x20>
		Error_Handler();
 800116c:	f000 fb18 	bl	80017a0 <Error_Handler>
	}
	store_msg(&RxHeader, RxData);
 8001170:	4903      	ldr	r1, [pc, #12]	; (8001180 <FEB_CAN_Receive+0x30>)
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <FEB_CAN_Receive+0x34>)
 8001174:	f7ff ff28 	bl	8000fc8 <store_msg>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000fc 	.word	0x200000fc
 8001184:	200000e0 	.word	0x200000e0

08001188 <HAL_CAN_RxFifo0MsgPendingCallback>:
	{
	  Error_Handler();
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO0);
 8001190:	2100      	movs	r1, #0
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffdc 	bl	8001150 <FEB_CAN_Receive>
	CAN_Flag = 1;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000104 	.word	0x20000104

080011ac <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO1);
 80011b4:	2101      	movs	r1, #1
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffca 	bl	8001150 <FEB_CAN_Receive>
	CAN_Flag = 1;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000104 	.word	0x20000104

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b099      	sub	sp, #100	; 0x64
 80011d4:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fc73 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f929 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f000 fa21 	bl	8001624 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011e2:	f000 f9f5 	bl	80015d0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80011e6:	f000 f98f 	bl	8001508 <MX_CAN1_Init>
  MX_I2C1_Init();
 80011ea:	f000 f9c3 	bl	8001574 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t sleep_time = 10;
 80011ee:	230a      	movs	r3, #10
 80011f0:	71fb      	strb	r3, [r7, #7]
	/* Node_2 */
	FEB_CAN_Init(&hcan1, SM_ID);
 80011f2:	2102      	movs	r1, #2
 80011f4:	4877      	ldr	r0, [pc, #476]	; (80013d4 <main+0x204>)
 80011f6:	f7ff ff65 	bl	80010c4 <FEB_CAN_Init>

	hi2c1p = &hi2c1;
 80011fa:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <main+0x208>)
 80011fc:	4a77      	ldr	r2, [pc, #476]	; (80013dc <main+0x20c>)
 80011fe:	601a      	str	r2, [r3, #0]

	FEB_TPS2482_SETUP(hi2c1, LV_ADDR, CONFIG, CAL, UNDERV, LV_LIMIT);
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	4c76      	ldr	r4, [pc, #472]	; (80013dc <main+0x20c>)
 8001204:	4a76      	ldr	r2, [pc, #472]	; (80013e0 <main+0x210>)
 8001206:	9215      	str	r2, [sp, #84]	; 0x54
 8001208:	4a76      	ldr	r2, [pc, #472]	; (80013e4 <main+0x214>)
 800120a:	9214      	str	r2, [sp, #80]	; 0x50
 800120c:	4a76      	ldr	r2, [pc, #472]	; (80013e8 <main+0x218>)
 800120e:	9213      	str	r2, [sp, #76]	; 0x4c
 8001210:	4a76      	ldr	r2, [pc, #472]	; (80013ec <main+0x21c>)
 8001212:	9212      	str	r2, [sp, #72]	; 0x48
 8001214:	9311      	str	r3, [sp, #68]	; 0x44
 8001216:	4668      	mov	r0, sp
 8001218:	f104 0310 	add.w	r3, r4, #16
 800121c:	2244      	movs	r2, #68	; 0x44
 800121e:	4619      	mov	r1, r3
 8001220:	f003 ff2e 	bl	8005080 <memcpy>
 8001224:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001228:	f7ff fca6 	bl	8000b78 <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1, CP_ADDR, CONFIG, CAL, OVERPWR, CP_LIMIT);
 800122c:	2388      	movs	r3, #136	; 0x88
 800122e:	4c6b      	ldr	r4, [pc, #428]	; (80013dc <main+0x20c>)
 8001230:	4a6f      	ldr	r2, [pc, #444]	; (80013f0 <main+0x220>)
 8001232:	9215      	str	r2, [sp, #84]	; 0x54
 8001234:	4a6f      	ldr	r2, [pc, #444]	; (80013f4 <main+0x224>)
 8001236:	9214      	str	r2, [sp, #80]	; 0x50
 8001238:	4a6b      	ldr	r2, [pc, #428]	; (80013e8 <main+0x218>)
 800123a:	9213      	str	r2, [sp, #76]	; 0x4c
 800123c:	4a6b      	ldr	r2, [pc, #428]	; (80013ec <main+0x21c>)
 800123e:	9212      	str	r2, [sp, #72]	; 0x48
 8001240:	9311      	str	r3, [sp, #68]	; 0x44
 8001242:	4668      	mov	r0, sp
 8001244:	f104 0310 	add.w	r3, r4, #16
 8001248:	2244      	movs	r2, #68	; 0x44
 800124a:	4619      	mov	r1, r3
 800124c:	f003 ff18 	bl	8005080 <memcpy>
 8001250:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001254:	f7ff fc90 	bl	8000b78 <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1, AF_ADDR, CONFIG, CAL, OVERPWR, AF_LIMIT);
 8001258:	238a      	movs	r3, #138	; 0x8a
 800125a:	4c60      	ldr	r4, [pc, #384]	; (80013dc <main+0x20c>)
 800125c:	4a66      	ldr	r2, [pc, #408]	; (80013f8 <main+0x228>)
 800125e:	9215      	str	r2, [sp, #84]	; 0x54
 8001260:	4a64      	ldr	r2, [pc, #400]	; (80013f4 <main+0x224>)
 8001262:	9214      	str	r2, [sp, #80]	; 0x50
 8001264:	4a60      	ldr	r2, [pc, #384]	; (80013e8 <main+0x218>)
 8001266:	9213      	str	r2, [sp, #76]	; 0x4c
 8001268:	4a60      	ldr	r2, [pc, #384]	; (80013ec <main+0x21c>)
 800126a:	9212      	str	r2, [sp, #72]	; 0x48
 800126c:	9311      	str	r3, [sp, #68]	; 0x44
 800126e:	4668      	mov	r0, sp
 8001270:	f104 0310 	add.w	r3, r4, #16
 8001274:	2244      	movs	r2, #68	; 0x44
 8001276:	4619      	mov	r1, r3
 8001278:	f003 ff02 	bl	8005080 <memcpy>
 800127c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001280:	f7ff fc7a 	bl	8000b78 <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1, EX_ADDR, CONFIG, CAL, OVERPWR, EX_LIMIT);
 8001284:	2382      	movs	r3, #130	; 0x82
 8001286:	4c55      	ldr	r4, [pc, #340]	; (80013dc <main+0x20c>)
 8001288:	4a5c      	ldr	r2, [pc, #368]	; (80013fc <main+0x22c>)
 800128a:	9215      	str	r2, [sp, #84]	; 0x54
 800128c:	4a59      	ldr	r2, [pc, #356]	; (80013f4 <main+0x224>)
 800128e:	9214      	str	r2, [sp, #80]	; 0x50
 8001290:	4a55      	ldr	r2, [pc, #340]	; (80013e8 <main+0x218>)
 8001292:	9213      	str	r2, [sp, #76]	; 0x4c
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <main+0x21c>)
 8001296:	9212      	str	r2, [sp, #72]	; 0x48
 8001298:	9311      	str	r3, [sp, #68]	; 0x44
 800129a:	4668      	mov	r0, sp
 800129c:	f104 0310 	add.w	r3, r4, #16
 80012a0:	2244      	movs	r2, #68	; 0x44
 80012a2:	4619      	mov	r1, r3
 80012a4:	f003 feec 	bl	8005080 <memcpy>
 80012a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012ac:	f7ff fc64 	bl	8000b78 <FEB_TPS2482_SETUP>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Brake Light
	  if (APPS_MESSAGE.brake_pedal == 1) {
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <main+0x230>)
 80012b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ba:	eef4 7a47 	vcmp.f32	s15, s14
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	d105      	bne.n	80012d0 <main+0x100>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);// PA1 high
 80012c4:	2201      	movs	r2, #1
 80012c6:	2102      	movs	r1, #2
 80012c8:	484e      	ldr	r0, [pc, #312]	; (8001404 <main+0x234>)
 80012ca:	f001 fccb 	bl	8002c64 <HAL_GPIO_WritePin>
 80012ce:	e004      	b.n	80012da <main+0x10a>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);// PA1 low
 80012d0:	2200      	movs	r2, #0
 80012d2:	2102      	movs	r1, #2
 80012d4:	484b      	ldr	r0, [pc, #300]	; (8001404 <main+0x234>)
 80012d6:	f001 fcc5 	bl	8002c64 <HAL_GPIO_WritePin>
	  }

	  // lv hotswap
	  // if receives undervoltage alert (PB7 pulled low) or PG low (PB6), pull all ENs for other hotswaps low and turn off brake light
	  if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) || (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET)) {
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	484a      	ldr	r0, [pc, #296]	; (8001408 <main+0x238>)
 80012de:	f001 fca9 	bl	8002c34 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <main+0x126>
 80012e8:	2140      	movs	r1, #64	; 0x40
 80012ea:	4847      	ldr	r0, [pc, #284]	; (8001408 <main+0x238>)
 80012ec:	f001 fca2 	bl	8002c34 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d114      	bne.n	8001320 <main+0x150>
		  // pull all ENs low
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4843      	ldr	r0, [pc, #268]	; (800140c <main+0x23c>)
 80012fe:	f001 fcb1 	bl	8002c64 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2120      	movs	r1, #32
 8001306:	4840      	ldr	r0, [pc, #256]	; (8001408 <main+0x238>)
 8001308:	f001 fcac 	bl	8002c64 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2108      	movs	r1, #8
 8001310:	483e      	ldr	r0, [pc, #248]	; (800140c <main+0x23c>)
 8001312:	f001 fca7 	bl	8002c64 <HAL_GPIO_WritePin>
		  //turn off brake light
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2102      	movs	r1, #2
 800131a:	483a      	ldr	r0, [pc, #232]	; (8001404 <main+0x234>)
 800131c:	f001 fca2 	bl	8002c64 <HAL_GPIO_WritePin>
	  }

	  // coolant pump hotswap
	  FEB_TPS2482_shutdownIfError(hi2c1p, CP_ADDR, GPIOC, GPIO_PIN_11, GPIOA, GPIO_PIN_15, GPIOC, GPIO_PIN_10, 22.5, 25.5, 15, 10, 340, 300);
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <main+0x208>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	2188      	movs	r1, #136	; 0x88
 8001326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132a:	9303      	str	r3, [sp, #12]
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <main+0x23c>)
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	4b33      	ldr	r3, [pc, #204]	; (8001404 <main+0x234>)
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	eddf 2a35 	vldr	s5, [pc, #212]	; 8001410 <main+0x240>
 800133e:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8001414 <main+0x244>
 8001342:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8001346:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
 800134a:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001418 <main+0x248>
 800134e:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800141c <main+0x24c>
 8001352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001356:	4a2d      	ldr	r2, [pc, #180]	; (800140c <main+0x23c>)
 8001358:	f7ff fc5c 	bl	8000c14 <FEB_TPS2482_shutdownIfError>

	  // accumulator fans hotswap
	  FEB_TPS2482_shutdownIfError(hi2c1p, AF_ADDR, GPIOB, GPIO_PIN_5, GPIOC, GPIO_PIN_12, GPIOB, GPIO_PIN_4, 22.5, 25.5, 9, 6, 200, 160);
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <main+0x208>)
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	218a      	movs	r1, #138	; 0x8a
 8001362:	2310      	movs	r3, #16
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <main+0x238>)
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <main+0x23c>)
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	eddf 2a2a 	vldr	s5, [pc, #168]	; 8001420 <main+0x250>
 8001378:	ed9f 2a2a 	vldr	s4, [pc, #168]	; 8001424 <main+0x254>
 800137c:	eef1 1a08 	vmov.f32	s3, #24	; 0x40c00000  6.0
 8001380:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
 8001384:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001418 <main+0x248>
 8001388:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800141c <main+0x24c>
 800138c:	2320      	movs	r3, #32
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <main+0x238>)
 8001390:	f7ff fc40 	bl	8000c14 <FEB_TPS2482_shutdownIfError>

	  // extra hotswap
	  FEB_TPS2482_shutdownIfError(hi2c1p, EX_ADDR, GPIOC, GPIO_PIN_3, GPIOC, GPIO_PIN_1, GPIOC, GPIO_PIN_2, 22.5, 25.5, 7, 4, 150, 120);
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <main+0x208>)
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	2182      	movs	r1, #130	; 0x82
 800139a:	2304      	movs	r3, #4
 800139c:	9303      	str	r3, [sp, #12]
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <main+0x23c>)
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2302      	movs	r3, #2
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <main+0x23c>)
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	eddf 2a1f 	vldr	s5, [pc, #124]	; 8001428 <main+0x258>
 80013ae:	ed9f 2a1f 	vldr	s4, [pc, #124]	; 800142c <main+0x25c>
 80013b2:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80013b6:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 80013ba:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001418 <main+0x248>
 80013be:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800141c <main+0x24c>
 80013c2:	2308      	movs	r3, #8
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <main+0x23c>)
 80013c6:	f7ff fc25 	bl	8000c14 <FEB_TPS2482_shutdownIfError>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(sleep_time);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fbe9 	bl	8001ba4 <HAL_Delay>
	  if (APPS_MESSAGE.brake_pedal == 1) {
 80013d2:	e76d      	b.n	80012b0 <main+0xe0>
 80013d4:	20000108 	.word	0x20000108
 80013d8:	20000184 	.word	0x20000184
 80013dc:	20000130 	.word	0x20000130
 80013e0:	20000040 	.word	0x20000040
 80013e4:	20000020 	.word	0x20000020
 80013e8:	20000010 	.word	0x20000010
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000050 	.word	0x20000050
 80013f4:	20000030 	.word	0x20000030
 80013f8:	20000060 	.word	0x20000060
 80013fc:	20000070 	.word	0x20000070
 8001400:	200000b8 	.word	0x200000b8
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	43960000 	.word	0x43960000
 8001414:	43aa0000 	.word	0x43aa0000
 8001418:	41cc0000 	.word	0x41cc0000
 800141c:	41b40000 	.word	0x41b40000
 8001420:	43200000 	.word	0x43200000
 8001424:	43480000 	.word	0x43480000
 8001428:	42f00000 	.word	0x42f00000
 800142c:	43160000 	.word	0x43160000

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	; 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2234      	movs	r2, #52	; 0x34
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fe2c 	bl	800509c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <SystemClock_Config+0xd0>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a28      	ldr	r2, [pc, #160]	; (8001500 <SystemClock_Config+0xd0>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <SystemClock_Config+0xd0>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001470:	2300      	movs	r3, #0
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <SystemClock_Config+0xd4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a22      	ldr	r2, [pc, #136]	; (8001504 <SystemClock_Config+0xd4>)
 800147a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <SystemClock_Config+0xd4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001494:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80014a4:	23a0      	movs	r3, #160	; 0xa0
 80014a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 f85d 	bl	8004578 <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014c4:	f000 f96c 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c8:	230f      	movs	r3, #15
 80014ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014cc:	2302      	movs	r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	2105      	movs	r1, #5
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 fcfc 	bl	8003ee4 <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014f2:	f000 f955 	bl	80017a0 <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3750      	adds	r7, #80	; 0x50
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_CAN1_Init+0x64>)
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <MX_CAN1_Init+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_CAN1_Init+0x64>)
 8001514:	2210      	movs	r2, #16
 8001516:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_CAN1_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_CAN1_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_CAN1_Init+0x64>)
 8001526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_CAN1_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_CAN1_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_CAN1_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_CAN1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_CAN1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_CAN1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_CAN1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_CAN1_Init+0x64>)
 8001558:	f000 fb48 	bl	8001bec <HAL_CAN_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001562:	f000 f91d 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000108 	.word	0x20000108
 8001570:	40006400 	.word	0x40006400

08001574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_I2C1_Init+0x50>)
 800157a:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <MX_I2C1_Init+0x54>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_I2C1_Init+0x50>)
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_I2C1_Init+0x58>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_I2C1_Init+0x50>)
 8001592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_I2C1_Init+0x50>)
 80015b2:	f001 fb71 	bl	8002c98 <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015bc:	f000 f8f0 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000130 	.word	0x20000130
 80015c8:	40005400 	.word	0x40005400
 80015cc:	000186a0 	.word	0x000186a0

080015d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART2_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART2_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART2_UART_Init+0x4c>)
 8001608:	f003 fa54 	bl	8004ab4 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f000 f8c5 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000188 	.word	0x20000188
 8001620:	40004400 	.word	0x40004400

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b54      	ldr	r3, [pc, #336]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a53      	ldr	r2, [pc, #332]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b51      	ldr	r3, [pc, #324]	; (8001790 <MX_GPIO_Init+0x16c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <MX_GPIO_Init+0x16c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a4c      	ldr	r2, [pc, #304]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a45      	ldr	r2, [pc, #276]	; (8001790 <MX_GPIO_Init+0x16c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a3e      	ldr	r2, [pc, #248]	; (8001790 <MX_GPIO_Init+0x16c>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b3c      	ldr	r3, [pc, #240]	; (8001790 <MX_GPIO_Init+0x16c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f640 0108 	movw	r1, #2056	; 0x808
 80016b0:	4838      	ldr	r0, [pc, #224]	; (8001794 <MX_GPIO_Init+0x170>)
 80016b2:	f001 fad7 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2122      	movs	r1, #34	; 0x22
 80016ba:	4837      	ldr	r0, [pc, #220]	; (8001798 <MX_GPIO_Init+0x174>)
 80016bc:	f001 fad2 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2120      	movs	r1, #32
 80016c4:	4835      	ldr	r0, [pc, #212]	; (800179c <MX_GPIO_Init+0x178>)
 80016c6:	f001 facd 	bl	8002c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	482c      	ldr	r0, [pc, #176]	; (8001794 <MX_GPIO_Init+0x170>)
 80016e2:	f001 f913 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12;
 80016e6:	f241 4306 	movw	r3, #5126	; 0x1406
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4826      	ldr	r0, [pc, #152]	; (8001794 <MX_GPIO_Init+0x170>)
 80016fc:	f001 f906 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11;
 8001700:	f640 0308 	movw	r3, #2056	; 0x808
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	481e      	ldr	r0, [pc, #120]	; (8001794 <MX_GPIO_Init+0x170>)
 800171a:	f001 f8f7 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 800171e:	2322      	movs	r3, #34	; 0x22
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4818      	ldr	r0, [pc, #96]	; (8001798 <MX_GPIO_Init+0x174>)
 8001736:	f001 f8e9 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800173a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4812      	ldr	r0, [pc, #72]	; (8001798 <MX_GPIO_Init+0x174>)
 8001750:	f001 f8dc 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001754:	23d0      	movs	r3, #208	; 0xd0
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_GPIO_Init+0x178>)
 8001768:	f001 f8d0 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800176c:	2320      	movs	r3, #32
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <MX_GPIO_Init+0x178>)
 8001784:	f001 f8c2 	bl	800290c <HAL_GPIO_Init>

}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40020800 	.word	0x40020800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400

080017a0 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <Error_Handler+0x8>
	...

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <HAL_MspInit+0x4c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ea:	2007      	movs	r0, #7
 80017ec:	f001 f84c 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_CAN_MspInit+0xa4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d13c      	bne.n	8001898 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_CAN_MspInit+0xa8>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_CAN_MspInit+0xa8>)
 8001828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_CAN_MspInit+0xa8>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_CAN_MspInit+0xa8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <HAL_CAN_MspInit+0xa8>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_CAN_MspInit+0xa8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001856:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001868:	2309      	movs	r3, #9
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <HAL_CAN_MspInit+0xac>)
 8001874:	f001 f84a 	bl	800290c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2014      	movs	r0, #20
 800187e:	f001 f80e 	bl	800289e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001882:	2014      	movs	r0, #20
 8001884:	f001 f827 	bl	80028d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	2015      	movs	r0, #21
 800188e:	f001 f806 	bl	800289e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001892:	2015      	movs	r0, #21
 8001894:	f001 f81f 	bl	80028d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40006400 	.word	0x40006400
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_I2C_MspInit+0x84>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12c      	bne.n	8001928 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_I2C_MspInit+0x88>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_I2C_MspInit+0x88>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_I2C_MspInit+0x88>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f0:	2312      	movs	r3, #18
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018fc:	2304      	movs	r3, #4
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	480c      	ldr	r0, [pc, #48]	; (8001938 <HAL_I2C_MspInit+0x8c>)
 8001908:	f001 f800 	bl	800290c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_I2C_MspInit+0x88>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_I2C_MspInit+0x88>)
 8001916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800191a:	6413      	str	r3, [r2, #64]	; 0x40
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_I2C_MspInit+0x88>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40005400 	.word	0x40005400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020400 	.word	0x40020400

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_UART_MspInit+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12b      	bne.n	80019b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_UART_MspInit+0x88>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_UART_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001996:	230c      	movs	r3, #12
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a6:	2307      	movs	r3, #7
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_UART_MspInit+0x8c>)
 80019b2:	f000 ffab 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40004400 	.word	0x40004400
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f8a4 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <CAN1_RX0_IRQHandler+0x10>)
 8001a26:	f000 fc39 	bl	800229c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000108 	.word	0x20000108

08001a34 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <CAN1_RX1_IRQHandler+0x10>)
 8001a3a:	f000 fc2f 	bl	800229c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000108 	.word	0x20000108

08001a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a72:	490e      	ldr	r1, [pc, #56]	; (8001aac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a88:	4c0b      	ldr	r4, [pc, #44]	; (8001ab8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a96:	f7ff ffd7 	bl	8001a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f003 facd 	bl	8005038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7ff fb97 	bl	80011d0 <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001ab0:	08005104 	.word	0x08005104
  ldr r2, =_sbss
 8001ab4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ab8:	200001d0 	.word	0x200001d0

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_Init+0x40>)
 8001aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_Init+0x40>)
 8001ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_Init+0x40>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 fecd 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f000 f808 	bl	8001b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af4:	f7ff fe5a 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0x54>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x58>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 fee5 	bl	80028f2 <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00e      	b.n	8001b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0f      	cmp	r3, #15
 8001b36:	d80a      	bhi.n	8001b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b40:	f000 fead 	bl	800289e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <HAL_InitTick+0x5c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e000      	b.n	8001b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000080 	.word	0x20000080
 8001b5c:	20000088 	.word	0x20000088
 8001b60:	20000084 	.word	0x20000084

08001b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000088 	.word	0x20000088
 8001b88:	200001cc 	.word	0x200001cc

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	200001cc 	.word	0x200001cc

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000088 	.word	0x20000088

08001bec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0ed      	b.n	8001dda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fdf6 	bl	80017fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c20:	f7ff ffb4 	bl	8001b8c <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c26:	e012      	b.n	8001c4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c28:	f7ff ffb0 	bl	8001b8c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b0a      	cmp	r3, #10
 8001c34:	d90b      	bls.n	8001c4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2205      	movs	r2, #5
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0c5      	b.n	8001dda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0e5      	beq.n	8001c28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0202 	bic.w	r2, r2, #2
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c6c:	f7ff ff8e 	bl	8001b8c <HAL_GetTick>
 8001c70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c72:	e012      	b.n	8001c9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c74:	f7ff ff8a 	bl	8001b8c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b0a      	cmp	r3, #10
 8001c80:	d90b      	bls.n	8001c9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2205      	movs	r2, #5
 8001c92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e09f      	b.n	8001dda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e5      	bne.n	8001c74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7e1b      	ldrb	r3, [r3, #24]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d108      	bne.n	8001cc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e007      	b.n	8001cd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7e5b      	ldrb	r3, [r3, #25]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d108      	bne.n	8001cec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e007      	b.n	8001cfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e9b      	ldrb	r3, [r3, #26]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d108      	bne.n	8001d16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0220 	orr.w	r2, r2, #32
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e007      	b.n	8001d26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0220 	bic.w	r2, r2, #32
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7edb      	ldrb	r3, [r3, #27]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d108      	bne.n	8001d40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0210 	bic.w	r2, r2, #16
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e007      	b.n	8001d50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0210 	orr.w	r2, r2, #16
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7f1b      	ldrb	r3, [r3, #28]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d108      	bne.n	8001d6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e007      	b.n	8001d7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0208 	bic.w	r2, r2, #8
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7f5b      	ldrb	r3, [r3, #29]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d108      	bne.n	8001d94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0204 	orr.w	r2, r2, #4
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e007      	b.n	8001da4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0204 	bic.w	r2, r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	ea42 0103 	orr.w	r1, r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dfc:	7cfb      	ldrb	r3, [r7, #19]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d003      	beq.n	8001e0a <HAL_CAN_ConfigFilter+0x26>
 8001e02:	7cfb      	ldrb	r3, [r7, #19]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	f040 80be 	bne.w	8001f86 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d123      	bne.n	8001eb4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	3248      	adds	r2, #72	; 0x48
 8001e94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ea8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eaa:	6979      	ldr	r1, [r7, #20]
 8001eac:	3348      	adds	r3, #72	; 0x48
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d122      	bne.n	8001f02 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001edc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3248      	adds	r2, #72	; 0x48
 8001ee2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ef6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ef8:	6979      	ldr	r1, [r7, #20]
 8001efa:	3348      	adds	r3, #72	; 0x48
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	401a      	ands	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f1c:	e007      	b.n	8001f2e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	401a      	ands	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f48:	e007      	b.n	8001f5a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f78:	f023 0201 	bic.w	r2, r3, #1
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e006      	b.n	8001f94 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
  }
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40006400 	.word	0x40006400

08001fa4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d12e      	bne.n	8002016 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fd0:	f7ff fddc 	bl	8001b8c <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fd6:	e012      	b.n	8001ffe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fd8:	f7ff fdd8 	bl	8001b8c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b0a      	cmp	r3, #10
 8001fe4:	d90b      	bls.n	8001ffe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e012      	b.n	8002024 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e5      	bne.n	8001fd8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e006      	b.n	8002024 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
  }
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002040:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d003      	beq.n	8002050 <HAL_CAN_GetRxMessage+0x24>
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	2b02      	cmp	r3, #2
 800204c:	f040 80f3 	bne.w	8002236 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10e      	bne.n	8002074 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d116      	bne.n	8002092 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0e7      	b.n	8002244 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0d8      	b.n	8002244 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	331b      	adds	r3, #27
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4413      	add	r3, r2
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0204 	and.w	r2, r3, #4
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10c      	bne.n	80020ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	331b      	adds	r3, #27
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0d5b      	lsrs	r3, r3, #21
 80020c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e00b      	b.n	80020e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	331b      	adds	r3, #27
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	4413      	add	r3, r2
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	08db      	lsrs	r3, r3, #3
 80020da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	331b      	adds	r3, #27
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	4413      	add	r3, r2
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0202 	and.w	r2, r3, #2
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	331b      	adds	r3, #27
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 020f 	and.w	r2, r3, #15
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	331b      	adds	r3, #27
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	b2da      	uxtb	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	331b      	adds	r3, #27
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	4413      	add	r3, r2
 8002134:	3304      	adds	r3, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0c1b      	lsrs	r3, r3, #16
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	4413      	add	r3, r2
 800214a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4413      	add	r3, r2
 8002160:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0a1a      	lsrs	r2, r3, #8
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0c1a      	lsrs	r2, r3, #16
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	3302      	adds	r3, #2
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	4413      	add	r3, r2
 8002194:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0e1a      	lsrs	r2, r3, #24
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	3303      	adds	r3, #3
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	3304      	adds	r3, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0a1a      	lsrs	r2, r3, #8
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	3305      	adds	r3, #5
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	4413      	add	r3, r2
 80021e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0c1a      	lsrs	r2, r3, #16
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	3306      	adds	r3, #6
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0e1a      	lsrs	r2, r3, #24
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3307      	adds	r3, #7
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d108      	bne.n	8002222 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0220 	orr.w	r2, r2, #32
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	e007      	b.n	8002232 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0220 	orr.w	r2, r2, #32
 8002230:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e006      	b.n	8002244 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
  }
}
 8002244:	4618      	mov	r0, r3
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002260:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d002      	beq.n	800226e <HAL_CAN_ActivateNotification+0x1e>
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d109      	bne.n	8002282 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6959      	ldr	r1, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e006      	b.n	8002290 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d07c      	beq.n	80023dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d023      	beq.n	8002334 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f983 	bl	800260a <HAL_CAN_TxMailbox0CompleteCallback>
 8002304:	e016      	b.n	8002334 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d004      	beq.n	800231a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	e00c      	b.n	8002334 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
 800232c:	e002      	b.n	8002334 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f989 	bl	8002646 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d024      	beq.n	8002388 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002346:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f963 	bl	800261e <HAL_CAN_TxMailbox1CompleteCallback>
 8002358:	e016      	b.n	8002388 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	e00c      	b.n	8002388 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	e002      	b.n	8002388 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f969 	bl	800265a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d024      	beq.n	80023dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800239a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f943 	bl	8002632 <HAL_CAN_TxMailbox2CompleteCallback>
 80023ac:	e016      	b.n	80023dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	e00c      	b.n	80023dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	e002      	b.n	80023dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f949 	bl	800266e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2210      	movs	r2, #16
 80023fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2208      	movs	r2, #8
 800241a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f930 	bl	8002682 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fea4 	bl	8001188 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2210      	movs	r2, #16
 8002462:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2208      	movs	r2, #8
 800247e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f908 	bl	8002696 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fe84 	bl	80011ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2210      	movs	r2, #16
 80024be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f8f2 	bl	80026aa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2208      	movs	r2, #8
 80024e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8eb 	bl	80026be <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d07b      	beq.n	80025ea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d072      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251e:	2b00      	cmp	r3, #0
 8002520:	d008      	beq.n	8002534 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	2b00      	cmp	r3, #0
 8002558:	d043      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002560:	2b00      	cmp	r3, #0
 8002562:	d03e      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800256a:	2b60      	cmp	r3, #96	; 0x60
 800256c:	d02b      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x32a>
 800256e:	2b60      	cmp	r3, #96	; 0x60
 8002570:	d82e      	bhi.n	80025d0 <HAL_CAN_IRQHandler+0x334>
 8002572:	2b50      	cmp	r3, #80	; 0x50
 8002574:	d022      	beq.n	80025bc <HAL_CAN_IRQHandler+0x320>
 8002576:	2b50      	cmp	r3, #80	; 0x50
 8002578:	d82a      	bhi.n	80025d0 <HAL_CAN_IRQHandler+0x334>
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d019      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x316>
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d826      	bhi.n	80025d0 <HAL_CAN_IRQHandler+0x334>
 8002582:	2b30      	cmp	r3, #48	; 0x30
 8002584:	d010      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x30c>
 8002586:	2b30      	cmp	r3, #48	; 0x30
 8002588:	d822      	bhi.n	80025d0 <HAL_CAN_IRQHandler+0x334>
 800258a:	2b10      	cmp	r3, #16
 800258c:	d002      	beq.n	8002594 <HAL_CAN_IRQHandler+0x2f8>
 800258e:	2b20      	cmp	r3, #32
 8002590:	d005      	beq.n	800259e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002592:	e01d      	b.n	80025d0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	f043 0308 	orr.w	r3, r3, #8
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800259c:	e019      	b.n	80025d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	f043 0310 	orr.w	r3, r3, #16
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025a6:	e014      	b.n	80025d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	f043 0320 	orr.w	r3, r3, #32
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025b0:	e00f      	b.n	80025d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ba:	e00a      	b.n	80025d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025c4:	e005      	b.n	80025d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ce:	e000      	b.n	80025d2 <HAL_CAN_IRQHandler+0x336>
            break;
 80025d0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2204      	movs	r2, #4
 80025e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f868 	bl	80026d2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	; 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	; (800272c <__NVIC_SetPriorityGrouping+0x44>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <__NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	2b00      	cmp	r3, #0
 800275c:	db0b      	blt.n	8002776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	4907      	ldr	r1, [pc, #28]	; (8002784 <__NVIC_EnableIRQ+0x38>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2001      	movs	r0, #1
 800276e:	fa00 f202 	lsl.w	r2, r0, r2
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	; (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002854:	d301      	bcc.n	800285a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <SysTick_Config+0x40>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002862:	210f      	movs	r1, #15
 8002864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002868:	f7ff ff8e 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <SysTick_Config+0x40>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <SysTick_Config+0x40>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff29 	bl	80026e8 <__NVIC_SetPriorityGrouping>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b0:	f7ff ff3e 	bl	8002730 <__NVIC_GetPriorityGrouping>
 80028b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7ff ff8e 	bl	80027dc <NVIC_EncodePriority>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff5d 	bl	8002788 <__NVIC_SetPriority>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff31 	bl	800274c <__NVIC_EnableIRQ>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ffa2 	bl	8002844 <SysTick_Config>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e165      	b.n	8002bf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002928:	2201      	movs	r2, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 8154 	bne.w	8002bee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d005      	beq.n	800295e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	2b02      	cmp	r3, #2
 800295c:	d130      	bne.n	80029c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002994:	2201      	movs	r2, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 0201 	and.w	r2, r3, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d017      	beq.n	80029fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d123      	bne.n	8002a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80ae 	beq.w	8002bee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_GPIO_Init+0x300>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4a5c      	ldr	r2, [pc, #368]	; (8002c0c <HAL_GPIO_Init+0x300>)
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <HAL_GPIO_Init+0x300>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aae:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_GPIO_Init+0x304>)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4f      	ldr	r2, [pc, #316]	; (8002c14 <HAL_GPIO_Init+0x308>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d025      	beq.n	8002b26 <HAL_GPIO_Init+0x21a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_GPIO_Init+0x30c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01f      	beq.n	8002b22 <HAL_GPIO_Init+0x216>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <HAL_GPIO_Init+0x310>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d019      	beq.n	8002b1e <HAL_GPIO_Init+0x212>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4c      	ldr	r2, [pc, #304]	; (8002c20 <HAL_GPIO_Init+0x314>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_GPIO_Init+0x20e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4b      	ldr	r2, [pc, #300]	; (8002c24 <HAL_GPIO_Init+0x318>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00d      	beq.n	8002b16 <HAL_GPIO_Init+0x20a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4a      	ldr	r2, [pc, #296]	; (8002c28 <HAL_GPIO_Init+0x31c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <HAL_GPIO_Init+0x206>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a49      	ldr	r2, [pc, #292]	; (8002c2c <HAL_GPIO_Init+0x320>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <HAL_GPIO_Init+0x202>
 8002b0a:	2306      	movs	r3, #6
 8002b0c:	e00c      	b.n	8002b28 <HAL_GPIO_Init+0x21c>
 8002b0e:	2307      	movs	r3, #7
 8002b10:	e00a      	b.n	8002b28 <HAL_GPIO_Init+0x21c>
 8002b12:	2305      	movs	r3, #5
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x21c>
 8002b16:	2304      	movs	r3, #4
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x21c>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x21c>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x21c>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x21c>
 8002b26:	2300      	movs	r3, #0
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b38:	4935      	ldr	r1, [pc, #212]	; (8002c10 <HAL_GPIO_Init+0x304>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b46:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6a:	4a31      	ldr	r2, [pc, #196]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b70:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b94:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b9a:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bbe:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be8:	4a11      	ldr	r2, [pc, #68]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f67f ae96 	bls.w	8002928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40013c00 	.word	0x40013c00

08002c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e001      	b.n	8002c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	041a      	lsls	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	619a      	str	r2, [r3, #24]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e12b      	b.n	8002f02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe fdf4 	bl	80018ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2224      	movs	r2, #36	; 0x24
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cfc:	f001 f9e4 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8002d00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4a81      	ldr	r2, [pc, #516]	; (8002f0c <HAL_I2C_Init+0x274>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d807      	bhi.n	8002d1c <HAL_I2C_Init+0x84>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4a80      	ldr	r2, [pc, #512]	; (8002f10 <HAL_I2C_Init+0x278>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	bf94      	ite	ls
 8002d14:	2301      	movls	r3, #1
 8002d16:	2300      	movhi	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e006      	b.n	8002d2a <HAL_I2C_Init+0x92>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a7d      	ldr	r2, [pc, #500]	; (8002f14 <HAL_I2C_Init+0x27c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	bf94      	ite	ls
 8002d24:	2301      	movls	r3, #1
 8002d26:	2300      	movhi	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0e7      	b.n	8002f02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a78      	ldr	r2, [pc, #480]	; (8002f18 <HAL_I2C_Init+0x280>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0c9b      	lsrs	r3, r3, #18
 8002d3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a6a      	ldr	r2, [pc, #424]	; (8002f0c <HAL_I2C_Init+0x274>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d802      	bhi.n	8002d6c <HAL_I2C_Init+0xd4>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	e009      	b.n	8002d80 <HAL_I2C_Init+0xe8>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	4a69      	ldr	r2, [pc, #420]	; (8002f1c <HAL_I2C_Init+0x284>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	3301      	adds	r3, #1
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	495c      	ldr	r1, [pc, #368]	; (8002f0c <HAL_I2C_Init+0x274>)
 8002d9c:	428b      	cmp	r3, r1
 8002d9e:	d819      	bhi.n	8002dd4 <HAL_I2C_Init+0x13c>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e59      	subs	r1, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dae:	1c59      	adds	r1, r3, #1
 8002db0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002db4:	400b      	ands	r3, r1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_I2C_Init+0x138>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1e59      	subs	r1, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dce:	e051      	b.n	8002e74 <HAL_I2C_Init+0x1dc>
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	e04f      	b.n	8002e74 <HAL_I2C_Init+0x1dc>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d111      	bne.n	8002e00 <HAL_I2C_Init+0x168>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1e58      	subs	r0, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	440b      	add	r3, r1
 8002dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e012      	b.n	8002e26 <HAL_I2C_Init+0x18e>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1e58      	subs	r0, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	0099      	lsls	r1, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Init+0x196>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e022      	b.n	8002e74 <HAL_I2C_Init+0x1dc>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10e      	bne.n	8002e54 <HAL_I2C_Init+0x1bc>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1e58      	subs	r0, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	440b      	add	r3, r1
 8002e44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e52:	e00f      	b.n	8002e74 <HAL_I2C_Init+0x1dc>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	0099      	lsls	r1, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	6809      	ldr	r1, [r1, #0]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6911      	ldr	r1, [r2, #16]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	000186a0 	.word	0x000186a0
 8002f10:	001e847f 	.word	0x001e847f
 8002f14:	003d08ff 	.word	0x003d08ff
 8002f18:	431bde83 	.word	0x431bde83
 8002f1c:	10624dd3 	.word	0x10624dd3

08002f20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	817b      	strh	r3, [r7, #10]
 8002f30:	4613      	mov	r3, r2
 8002f32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7fe fe2a 	bl	8001b8c <HAL_GetTick>
 8002f38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	f040 80e0 	bne.w	8003108 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2319      	movs	r3, #25
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4970      	ldr	r1, [pc, #448]	; (8003114 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fde8 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e0d3      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_I2C_Master_Transmit+0x50>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e0cc      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d007      	beq.n	8002f96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2221      	movs	r2, #33	; 0x21
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	893a      	ldrh	r2, [r7, #8]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a50      	ldr	r2, [pc, #320]	; (8003118 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fd8:	8979      	ldrh	r1, [r7, #10]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fbbc 	bl	800375c <I2C_MasterRequestWrite>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e08d      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003004:	e066      	b.n	80030d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	6a39      	ldr	r1, [r7, #32]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fe62 	bl	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00d      	beq.n	8003032 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2b04      	cmp	r3, #4
 800301c:	d107      	bne.n	800302e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e06b      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d11b      	bne.n	80030a8 <HAL_I2C_Master_Transmit+0x188>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d017      	beq.n	80030a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	6a39      	ldr	r1, [r7, #32]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fe52 	bl	8003d56 <I2C_WaitOnBTFFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d107      	bne.n	80030d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e01a      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d194      	bne.n	8003006 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	00100002 	.word	0x00100002
 8003118:	ffff0000 	.word	0xffff0000

0800311c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	; 0x30
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	461a      	mov	r2, r3
 8003128:	460b      	mov	r3, r1
 800312a:	817b      	strh	r3, [r7, #10]
 800312c:	4613      	mov	r3, r2
 800312e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7fe fd2c 	bl	8001b8c <HAL_GetTick>
 8003134:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	f040 820b 	bne.w	800355a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2319      	movs	r3, #25
 800314a:	2201      	movs	r2, #1
 800314c:	497c      	ldr	r1, [pc, #496]	; (8003340 <HAL_I2C_Master_Receive+0x224>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fcea 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	e1fe      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_I2C_Master_Receive+0x50>
 8003168:	2302      	movs	r3, #2
 800316a:	e1f7      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d007      	beq.n	8003192 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2222      	movs	r2, #34	; 0x22
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2210      	movs	r2, #16
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	893a      	ldrh	r2, [r7, #8]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a5c      	ldr	r2, [pc, #368]	; (8003344 <HAL_I2C_Master_Receive+0x228>)
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031d4:	8979      	ldrh	r1, [r7, #10]
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fb40 	bl	8003860 <I2C_MasterRequestRead>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1b8      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d113      	bne.n	800321a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	623b      	str	r3, [r7, #32]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e18c      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	2b01      	cmp	r3, #1
 8003220:	d11b      	bne.n	800325a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e16c      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b02      	cmp	r3, #2
 8003260:	d11b      	bne.n	800329a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	e14c      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032c0:	e138      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	f200 80f1 	bhi.w	80034ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d123      	bne.n	800331c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fd7d 	bl	8003dd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e139      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800331a:	e10b      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	2b02      	cmp	r3, #2
 8003322:	d14e      	bne.n	80033c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	2200      	movs	r2, #0
 800332c:	4906      	ldr	r1, [pc, #24]	; (8003348 <HAL_I2C_Master_Receive+0x22c>)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fbfa 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e10e      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
 800333e:	bf00      	nop
 8003340:	00100002 	.word	0x00100002
 8003344:	ffff0000 	.word	0xffff0000
 8003348:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c0:	e0b8      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2200      	movs	r2, #0
 80033ca:	4966      	ldr	r1, [pc, #408]	; (8003564 <HAL_I2C_Master_Receive+0x448>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fbab 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0bf      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	2200      	movs	r2, #0
 8003426:	494f      	ldr	r1, [pc, #316]	; (8003564 <HAL_I2C_Master_Receive+0x448>)
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fb7d 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e091      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034ac:	e042      	b.n	8003534 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fc90 	bl	8003dd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e04c      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d118      	bne.n	8003534 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f aec2 	bne.w	80032c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	00010004 	.word	0x00010004

08003568 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4603      	mov	r3, r0
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	460b      	mov	r3, r1
 800357c:	813b      	strh	r3, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003582:	f7fe fb03 	bl	8001b8c <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	f040 80d9 	bne.w	8003748 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2319      	movs	r3, #25
 800359c:	2201      	movs	r2, #1
 800359e:	496d      	ldr	r1, [pc, #436]	; (8003754 <HAL_I2C_Mem_Write+0x1ec>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fac1 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0cc      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_I2C_Mem_Write+0x56>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0c5      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d007      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	; 0x21
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2240      	movs	r2, #64	; 0x40
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a4d      	ldr	r2, [pc, #308]	; (8003758 <HAL_I2C_Mem_Write+0x1f0>)
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003626:	88f8      	ldrh	r0, [r7, #6]
 8003628:	893a      	ldrh	r2, [r7, #8]
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4603      	mov	r3, r0
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f9e0 	bl	80039fc <I2C_RequestMemoryWrite>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d052      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e081      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fb42 	bl	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2b04      	cmp	r3, #4
 800365c:	d107      	bne.n	800366e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_I2C_Mem_Write+0x180>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d017      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1aa      	bne.n	8003646 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fb2e 	bl	8003d56 <I2C_WaitOnBTFFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2b04      	cmp	r3, #4
 8003706:	d107      	bne.n	8003718 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003716:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e016      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00100002 	.word	0x00100002
 8003758:	ffff0000 	.word	0xffff0000

0800375c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	460b      	mov	r3, r1
 800376a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d006      	beq.n	8003786 <I2C_MasterRequestWrite+0x2a>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d003      	beq.n	8003786 <I2C_MasterRequestWrite+0x2a>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003784:	d108      	bne.n	8003798 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e00b      	b.n	80037b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	2b12      	cmp	r3, #18
 800379e:	d107      	bne.n	80037b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f9b3 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d6:	d103      	bne.n	80037e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e035      	b.n	8003850 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ec:	d108      	bne.n	8003800 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037fc:	611a      	str	r2, [r3, #16]
 80037fe:	e01b      	b.n	8003838 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003800:	897b      	ldrh	r3, [r7, #10]
 8003802:	11db      	asrs	r3, r3, #7
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0306 	and.w	r3, r3, #6
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f063 030f 	orn	r3, r3, #15
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	490e      	ldr	r1, [pc, #56]	; (8003858 <I2C_MasterRequestWrite+0xfc>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f9d9 	bl	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e010      	b.n	8003850 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4907      	ldr	r1, [pc, #28]	; (800385c <I2C_MasterRequestWrite+0x100>)
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f9c9 	bl	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	00010008 	.word	0x00010008
 800385c:	00010002 	.word	0x00010002

08003860 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	460b      	mov	r3, r1
 800386e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003884:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d006      	beq.n	800389a <I2C_MasterRequestRead+0x3a>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d003      	beq.n	800389a <I2C_MasterRequestRead+0x3a>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003898:	d108      	bne.n	80038ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e00b      	b.n	80038c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	2b11      	cmp	r3, #17
 80038b2:	d107      	bne.n	80038c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f929 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ea:	d103      	bne.n	80038f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e079      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003900:	d108      	bne.n	8003914 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003902:	897b      	ldrh	r3, [r7, #10]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	b2da      	uxtb	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	611a      	str	r2, [r3, #16]
 8003912:	e05f      	b.n	80039d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003914:	897b      	ldrh	r3, [r7, #10]
 8003916:	11db      	asrs	r3, r3, #7
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 0306 	and.w	r3, r3, #6
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f063 030f 	orn	r3, r3, #15
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4930      	ldr	r1, [pc, #192]	; (80039f4 <I2C_MasterRequestRead+0x194>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f94f 	bl	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e054      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003942:	897b      	ldrh	r3, [r7, #10]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4929      	ldr	r1, [pc, #164]	; (80039f8 <I2C_MasterRequestRead+0x198>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f93f 	bl	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e044      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003986:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f8c7 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ae:	d103      	bne.n	80039b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e017      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039bc:	897b      	ldrh	r3, [r7, #10]
 80039be:	11db      	asrs	r3, r3, #7
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0306 	and.w	r3, r3, #6
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f063 030e 	orn	r3, r3, #14
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4907      	ldr	r1, [pc, #28]	; (80039f8 <I2C_MasterRequestRead+0x198>)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f8fb 	bl	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	00010008 	.word	0x00010008
 80039f8:	00010002 	.word	0x00010002

080039fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	813b      	strh	r3, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f878 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4c:	d103      	bne.n	8003a56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e05f      	b.n	8003b1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5a:	897b      	ldrh	r3, [r7, #10]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	492d      	ldr	r1, [pc, #180]	; (8003b24 <I2C_RequestMemoryWrite+0x128>)
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f8b0 	bl	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e04c      	b.n	8003b1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	6a39      	ldr	r1, [r7, #32]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f91a 	bl	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d107      	bne.n	8003abe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e02b      	b.n	8003b1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]
 8003ad2:	e021      	b.n	8003b18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad4:	893b      	ldrh	r3, [r7, #8]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	6a39      	ldr	r1, [r7, #32]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f8f4 	bl	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d107      	bne.n	8003b0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e005      	b.n	8003b1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0e:	893b      	ldrh	r3, [r7, #8]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	00010002 	.word	0x00010002

08003b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b38:	e025      	b.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b40:	d021      	beq.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b42:	f7fe f823 	bl	8001b8c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d116      	bne.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0220 	orr.w	r2, r3, #32
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e023      	b.n	8003bce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d10d      	bne.n	8003bac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf0c      	ite	eq
 8003ba2:	2301      	moveq	r3, #1
 8003ba4:	2300      	movne	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	e00c      	b.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d0b6      	beq.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be4:	e051      	b.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf4:	d123      	bne.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f043 0204 	orr.w	r2, r3, #4
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e046      	b.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c44:	d021      	beq.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c46:	f7fd ffa1 	bl	8001b8c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d116      	bne.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f043 0220 	orr.w	r2, r3, #32
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e020      	b.n	8003ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d10c      	bne.n	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	e00b      	b.n	8003cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d18d      	bne.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce0:	e02d      	b.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f8ce 	bl	8003e84 <I2C_IsAcknowledgeFailed>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e02d      	b.n	8003d4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf8:	d021      	beq.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fd ff47 	bl	8001b8c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d116      	bne.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f043 0220 	orr.w	r2, r3, #32
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e007      	b.n	8003d4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d48:	2b80      	cmp	r3, #128	; 0x80
 8003d4a:	d1ca      	bne.n	8003ce2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d62:	e02d      	b.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f88d 	bl	8003e84 <I2C_IsAcknowledgeFailed>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e02d      	b.n	8003dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d7a:	d021      	beq.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7c:	f7fd ff06 	bl	8001b8c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d116      	bne.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e007      	b.n	8003dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d1ca      	bne.n	8003d64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003de4:	e042      	b.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d119      	bne.n	8003e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0210 	mvn.w	r2, #16
 8003dfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e029      	b.n	8003e7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e28:	f7fd feb0 	bl	8001b8c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d116      	bne.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e007      	b.n	8003e7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d1b5      	bne.n	8003de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9a:	d11b      	bne.n	8003ed4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ea4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0204 	orr.w	r2, r3, #4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0cc      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d90c      	bls.n	8003f20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b65      	ldr	r3, [pc, #404]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b63      	ldr	r3, [pc, #396]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0b8      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d020      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f38:	4b59      	ldr	r3, [pc, #356]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a58      	ldr	r2, [pc, #352]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f50:	4b53      	ldr	r3, [pc, #332]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4a52      	ldr	r2, [pc, #328]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f5c:	4b50      	ldr	r3, [pc, #320]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	494d      	ldr	r1, [pc, #308]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d044      	beq.n	8004004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f82:	4b47      	ldr	r3, [pc, #284]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d119      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e07f      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d003      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	4b3f      	ldr	r3, [pc, #252]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e06f      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb2:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e067      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc2:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f023 0203 	bic.w	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4934      	ldr	r1, [pc, #208]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fd4:	f7fd fdda 	bl	8001b8c <HAL_GetTick>
 8003fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fdc:	f7fd fdd6 	bl	8001b8c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e04f      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 020c 	and.w	r2, r3, #12
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	429a      	cmp	r2, r3
 8004002:	d1eb      	bne.n	8003fdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004004:	4b25      	ldr	r3, [pc, #148]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d20c      	bcs.n	800402c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004012:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b20      	ldr	r3, [pc, #128]	; (800409c <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e032      	b.n	8004092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004038:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4916      	ldr	r1, [pc, #88]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004056:	4b12      	ldr	r3, [pc, #72]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	490e      	ldr	r1, [pc, #56]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800406a:	f000 f855 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 800406e:	4602      	mov	r2, r0
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	490a      	ldr	r1, [pc, #40]	; (80040a4 <HAL_RCC_ClockConfig+0x1c0>)
 800407c:	5ccb      	ldrb	r3, [r1, r3]
 800407e:	fa22 f303 	lsr.w	r3, r2, r3
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_ClockConfig+0x1c8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7fd fd3a 	bl	8001b04 <HAL_InitTick>

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40023c00 	.word	0x40023c00
 80040a0:	40023800 	.word	0x40023800
 80040a4:	080050dc 	.word	0x080050dc
 80040a8:	20000080 	.word	0x20000080
 80040ac:	20000084 	.word	0x20000084

080040b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000080 	.word	0x20000080

080040c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040cc:	f7ff fff0 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0a9b      	lsrs	r3, r3, #10
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4903      	ldr	r1, [pc, #12]	; (80040ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	080050ec 	.word	0x080050ec

080040f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040f4:	f7ff ffdc 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0b5b      	lsrs	r3, r3, #13
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4903      	ldr	r1, [pc, #12]	; (8004114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	080050ec 	.word	0x080050ec

08004118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800411c:	b0ae      	sub	sp, #184	; 0xb8
 800411e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800413e:	4bcb      	ldr	r3, [pc, #812]	; (800446c <HAL_RCC_GetSysClockFreq+0x354>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b0c      	cmp	r3, #12
 8004148:	f200 8206 	bhi.w	8004558 <HAL_RCC_GetSysClockFreq+0x440>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <HAL_RCC_GetSysClockFreq+0x3c>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004189 	.word	0x08004189
 8004158:	08004559 	.word	0x08004559
 800415c:	08004559 	.word	0x08004559
 8004160:	08004559 	.word	0x08004559
 8004164:	08004191 	.word	0x08004191
 8004168:	08004559 	.word	0x08004559
 800416c:	08004559 	.word	0x08004559
 8004170:	08004559 	.word	0x08004559
 8004174:	08004199 	.word	0x08004199
 8004178:	08004559 	.word	0x08004559
 800417c:	08004559 	.word	0x08004559
 8004180:	08004559 	.word	0x08004559
 8004184:	08004389 	.word	0x08004389
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4bb9      	ldr	r3, [pc, #740]	; (8004470 <HAL_RCC_GetSysClockFreq+0x358>)
 800418a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800418e:	e1e7      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004190:	4bb8      	ldr	r3, [pc, #736]	; (8004474 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004196:	e1e3      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004198:	4bb4      	ldr	r3, [pc, #720]	; (800446c <HAL_RCC_GetSysClockFreq+0x354>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041a4:	4bb1      	ldr	r3, [pc, #708]	; (800446c <HAL_RCC_GetSysClockFreq+0x354>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d071      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b0:	4bae      	ldr	r3, [pc, #696]	; (800446c <HAL_RCC_GetSysClockFreq+0x354>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80041c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041d6:	4622      	mov	r2, r4
 80041d8:	462b      	mov	r3, r5
 80041da:	f04f 0000 	mov.w	r0, #0
 80041de:	f04f 0100 	mov.w	r1, #0
 80041e2:	0159      	lsls	r1, r3, #5
 80041e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e8:	0150      	lsls	r0, r2, #5
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4621      	mov	r1, r4
 80041f0:	1a51      	subs	r1, r2, r1
 80041f2:	6439      	str	r1, [r7, #64]	; 0x40
 80041f4:	4629      	mov	r1, r5
 80041f6:	eb63 0301 	sbc.w	r3, r3, r1
 80041fa:	647b      	str	r3, [r7, #68]	; 0x44
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004208:	4649      	mov	r1, r9
 800420a:	018b      	lsls	r3, r1, #6
 800420c:	4641      	mov	r1, r8
 800420e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004212:	4641      	mov	r1, r8
 8004214:	018a      	lsls	r2, r1, #6
 8004216:	4641      	mov	r1, r8
 8004218:	1a51      	subs	r1, r2, r1
 800421a:	63b9      	str	r1, [r7, #56]	; 0x38
 800421c:	4649      	mov	r1, r9
 800421e:	eb63 0301 	sbc.w	r3, r3, r1
 8004222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004230:	4649      	mov	r1, r9
 8004232:	00cb      	lsls	r3, r1, #3
 8004234:	4641      	mov	r1, r8
 8004236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423a:	4641      	mov	r1, r8
 800423c:	00ca      	lsls	r2, r1, #3
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4603      	mov	r3, r0
 8004244:	4622      	mov	r2, r4
 8004246:	189b      	adds	r3, r3, r2
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
 800424a:	462b      	mov	r3, r5
 800424c:	460a      	mov	r2, r1
 800424e:	eb42 0303 	adc.w	r3, r2, r3
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004260:	4629      	mov	r1, r5
 8004262:	024b      	lsls	r3, r1, #9
 8004264:	4621      	mov	r1, r4
 8004266:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800426a:	4621      	mov	r1, r4
 800426c:	024a      	lsls	r2, r1, #9
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004276:	2200      	movs	r2, #0
 8004278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800427c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004280:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004284:	f7fc faf6 	bl	8000874 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4613      	mov	r3, r2
 800428e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004292:	e067      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004294:	4b75      	ldr	r3, [pc, #468]	; (800446c <HAL_RCC_GetSysClockFreq+0x354>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	099b      	lsrs	r3, r3, #6
 800429a:	2200      	movs	r2, #0
 800429c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80042a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ae:	2300      	movs	r3, #0
 80042b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80042b6:	4622      	mov	r2, r4
 80042b8:	462b      	mov	r3, r5
 80042ba:	f04f 0000 	mov.w	r0, #0
 80042be:	f04f 0100 	mov.w	r1, #0
 80042c2:	0159      	lsls	r1, r3, #5
 80042c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c8:	0150      	lsls	r0, r2, #5
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4621      	mov	r1, r4
 80042d0:	1a51      	subs	r1, r2, r1
 80042d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80042d4:	4629      	mov	r1, r5
 80042d6:	eb63 0301 	sbc.w	r3, r3, r1
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80042e8:	4649      	mov	r1, r9
 80042ea:	018b      	lsls	r3, r1, #6
 80042ec:	4641      	mov	r1, r8
 80042ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042f2:	4641      	mov	r1, r8
 80042f4:	018a      	lsls	r2, r1, #6
 80042f6:	4641      	mov	r1, r8
 80042f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80042fc:	4649      	mov	r1, r9
 80042fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800430e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004312:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004316:	4692      	mov	sl, r2
 8004318:	469b      	mov	fp, r3
 800431a:	4623      	mov	r3, r4
 800431c:	eb1a 0303 	adds.w	r3, sl, r3
 8004320:	623b      	str	r3, [r7, #32]
 8004322:	462b      	mov	r3, r5
 8004324:	eb4b 0303 	adc.w	r3, fp, r3
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004336:	4629      	mov	r1, r5
 8004338:	028b      	lsls	r3, r1, #10
 800433a:	4621      	mov	r1, r4
 800433c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004340:	4621      	mov	r1, r4
 8004342:	028a      	lsls	r2, r1, #10
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800434c:	2200      	movs	r2, #0
 800434e:	673b      	str	r3, [r7, #112]	; 0x70
 8004350:	677a      	str	r2, [r7, #116]	; 0x74
 8004352:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004356:	f7fc fa8d 	bl	8000874 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4613      	mov	r3, r2
 8004360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004364:	4b41      	ldr	r3, [pc, #260]	; (800446c <HAL_RCC_GetSysClockFreq+0x354>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	3301      	adds	r3, #1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800437a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004386:	e0eb      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004388:	4b38      	ldr	r3, [pc, #224]	; (800446c <HAL_RCC_GetSysClockFreq+0x354>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004394:	4b35      	ldr	r3, [pc, #212]	; (800446c <HAL_RCC_GetSysClockFreq+0x354>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d06b      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a0:	4b32      	ldr	r3, [pc, #200]	; (800446c <HAL_RCC_GetSysClockFreq+0x354>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	099b      	lsrs	r3, r3, #6
 80043a6:	2200      	movs	r2, #0
 80043a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	663b      	str	r3, [r7, #96]	; 0x60
 80043b4:	2300      	movs	r3, #0
 80043b6:	667b      	str	r3, [r7, #100]	; 0x64
 80043b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80043bc:	4622      	mov	r2, r4
 80043be:	462b      	mov	r3, r5
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	0159      	lsls	r1, r3, #5
 80043ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ce:	0150      	lsls	r0, r2, #5
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4621      	mov	r1, r4
 80043d6:	1a51      	subs	r1, r2, r1
 80043d8:	61b9      	str	r1, [r7, #24]
 80043da:	4629      	mov	r1, r5
 80043dc:	eb63 0301 	sbc.w	r3, r3, r1
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043ee:	4659      	mov	r1, fp
 80043f0:	018b      	lsls	r3, r1, #6
 80043f2:	4651      	mov	r1, sl
 80043f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043f8:	4651      	mov	r1, sl
 80043fa:	018a      	lsls	r2, r1, #6
 80043fc:	4651      	mov	r1, sl
 80043fe:	ebb2 0801 	subs.w	r8, r2, r1
 8004402:	4659      	mov	r1, fp
 8004404:	eb63 0901 	sbc.w	r9, r3, r1
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004414:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004418:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800441c:	4690      	mov	r8, r2
 800441e:	4699      	mov	r9, r3
 8004420:	4623      	mov	r3, r4
 8004422:	eb18 0303 	adds.w	r3, r8, r3
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	462b      	mov	r3, r5
 800442a:	eb49 0303 	adc.w	r3, r9, r3
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800443c:	4629      	mov	r1, r5
 800443e:	024b      	lsls	r3, r1, #9
 8004440:	4621      	mov	r1, r4
 8004442:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004446:	4621      	mov	r1, r4
 8004448:	024a      	lsls	r2, r1, #9
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004452:	2200      	movs	r2, #0
 8004454:	65bb      	str	r3, [r7, #88]	; 0x58
 8004456:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004458:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800445c:	f7fc fa0a 	bl	8000874 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800446a:	e065      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x420>
 800446c:	40023800 	.word	0x40023800
 8004470:	00f42400 	.word	0x00f42400
 8004474:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004478:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCC_GetSysClockFreq+0x458>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	099b      	lsrs	r3, r3, #6
 800447e:	2200      	movs	r2, #0
 8004480:	4618      	mov	r0, r3
 8004482:	4611      	mov	r1, r2
 8004484:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004488:	653b      	str	r3, [r7, #80]	; 0x50
 800448a:	2300      	movs	r3, #0
 800448c:	657b      	str	r3, [r7, #84]	; 0x54
 800448e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004492:	4642      	mov	r2, r8
 8004494:	464b      	mov	r3, r9
 8004496:	f04f 0000 	mov.w	r0, #0
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	0159      	lsls	r1, r3, #5
 80044a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a4:	0150      	lsls	r0, r2, #5
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4641      	mov	r1, r8
 80044ac:	1a51      	subs	r1, r2, r1
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	4649      	mov	r1, r9
 80044b2:	eb63 0301 	sbc.w	r3, r3, r1
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80044c4:	4659      	mov	r1, fp
 80044c6:	018b      	lsls	r3, r1, #6
 80044c8:	4651      	mov	r1, sl
 80044ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044ce:	4651      	mov	r1, sl
 80044d0:	018a      	lsls	r2, r1, #6
 80044d2:	4651      	mov	r1, sl
 80044d4:	1a54      	subs	r4, r2, r1
 80044d6:	4659      	mov	r1, fp
 80044d8:	eb63 0501 	sbc.w	r5, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	00eb      	lsls	r3, r5, #3
 80044e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ea:	00e2      	lsls	r2, r4, #3
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	4643      	mov	r3, r8
 80044f2:	18e3      	adds	r3, r4, r3
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	464b      	mov	r3, r9
 80044f8:	eb45 0303 	adc.w	r3, r5, r3
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800450a:	4629      	mov	r1, r5
 800450c:	028b      	lsls	r3, r1, #10
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004514:	4621      	mov	r1, r4
 8004516:	028a      	lsls	r2, r1, #10
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004520:	2200      	movs	r2, #0
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
 8004524:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004526:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800452a:	f7fc f9a3 	bl	8000874 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4613      	mov	r3, r2
 8004534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004538:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <HAL_RCC_GetSysClockFreq+0x458>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0f1b      	lsrs	r3, r3, #28
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800454a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004556:	e003      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_RCC_GetSysClockFreq+0x45c>)
 800455a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800455e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004564:	4618      	mov	r0, r3
 8004566:	37b8      	adds	r7, #184	; 0xb8
 8004568:	46bd      	mov	sp, r7
 800456a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	00f42400 	.word	0x00f42400

08004578 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e28d      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8083 	beq.w	800469e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004598:	4b94      	ldr	r3, [pc, #592]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 030c 	and.w	r3, r3, #12
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d019      	beq.n	80045d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045a4:	4b91      	ldr	r3, [pc, #580]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d106      	bne.n	80045be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045b0:	4b8e      	ldr	r3, [pc, #568]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045bc:	d00c      	beq.n	80045d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045be:	4b8b      	ldr	r3, [pc, #556]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d112      	bne.n	80045f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ca:	4b88      	ldr	r3, [pc, #544]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d6:	d10b      	bne.n	80045f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d8:	4b84      	ldr	r3, [pc, #528]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d05b      	beq.n	800469c <HAL_RCC_OscConfig+0x124>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d157      	bne.n	800469c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e25a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f8:	d106      	bne.n	8004608 <HAL_RCC_OscConfig+0x90>
 80045fa:	4b7c      	ldr	r3, [pc, #496]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a7b      	ldr	r2, [pc, #492]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e01d      	b.n	8004644 <HAL_RCC_OscConfig+0xcc>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0xb4>
 8004612:	4b76      	ldr	r3, [pc, #472]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a75      	ldr	r2, [pc, #468]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	4b73      	ldr	r3, [pc, #460]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a72      	ldr	r2, [pc, #456]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e00b      	b.n	8004644 <HAL_RCC_OscConfig+0xcc>
 800462c:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	4b6c      	ldr	r3, [pc, #432]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a6b      	ldr	r2, [pc, #428]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 800463e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d013      	beq.n	8004674 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd fa9e 	bl	8001b8c <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004654:	f7fd fa9a 	bl	8001b8c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b64      	cmp	r3, #100	; 0x64
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e21f      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004666:	4b61      	ldr	r3, [pc, #388]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0xdc>
 8004672:	e014      	b.n	800469e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fd fa8a 	bl	8001b8c <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800467c:	f7fd fa86 	bl	8001b8c <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b64      	cmp	r3, #100	; 0x64
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e20b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468e:	4b57      	ldr	r3, [pc, #348]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x104>
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d06f      	beq.n	800478a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046aa:	4b50      	ldr	r3, [pc, #320]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d017      	beq.n	80046e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046b6:	4b4d      	ldr	r3, [pc, #308]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d105      	bne.n	80046ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046c2:	4b4a      	ldr	r3, [pc, #296]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ce:	4b47      	ldr	r3, [pc, #284]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d11c      	bne.n	8004714 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046da:	4b44      	ldr	r3, [pc, #272]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d116      	bne.n	8004714 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	4b41      	ldr	r3, [pc, #260]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_RCC_OscConfig+0x186>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e1d3      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fe:	4b3b      	ldr	r3, [pc, #236]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4937      	ldr	r1, [pc, #220]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	e03a      	b.n	800478a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800471c:	4b34      	ldr	r3, [pc, #208]	; (80047f0 <HAL_RCC_OscConfig+0x278>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004722:	f7fd fa33 	bl	8001b8c <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800472a:	f7fd fa2f 	bl	8001b8c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e1b4      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473c:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004748:	4b28      	ldr	r3, [pc, #160]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4925      	ldr	r1, [pc, #148]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
 800475c:	e015      	b.n	800478a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800475e:	4b24      	ldr	r3, [pc, #144]	; (80047f0 <HAL_RCC_OscConfig+0x278>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd fa12 	bl	8001b8c <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476c:	f7fd fa0e 	bl	8001b8c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e193      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d036      	beq.n	8004804 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800479e:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <HAL_RCC_OscConfig+0x27c>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fd f9f2 	bl	8001b8c <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fd f9ee 	bl	8001b8c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e173      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80047c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x234>
 80047ca:	e01b      	b.n	8004804 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_RCC_OscConfig+0x27c>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d2:	f7fd f9db 	bl	8001b8c <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d8:	e00e      	b.n	80047f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047da:	f7fd f9d7 	bl	8001b8c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d907      	bls.n	80047f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e15c      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
 80047ec:	40023800 	.word	0x40023800
 80047f0:	42470000 	.word	0x42470000
 80047f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f8:	4b8a      	ldr	r3, [pc, #552]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80047fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1ea      	bne.n	80047da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8097 	beq.w	8004940 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004816:	4b83      	ldr	r3, [pc, #524]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10f      	bne.n	8004842 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	4b7f      	ldr	r3, [pc, #508]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	4a7e      	ldr	r2, [pc, #504]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 800482c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004830:	6413      	str	r3, [r2, #64]	; 0x40
 8004832:	4b7c      	ldr	r3, [pc, #496]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800483e:	2301      	movs	r3, #1
 8004840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004842:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <HAL_RCC_OscConfig+0x4b0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d118      	bne.n	8004880 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800484e:	4b76      	ldr	r3, [pc, #472]	; (8004a28 <HAL_RCC_OscConfig+0x4b0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a75      	ldr	r2, [pc, #468]	; (8004a28 <HAL_RCC_OscConfig+0x4b0>)
 8004854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800485a:	f7fd f997 	bl	8001b8c <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004862:	f7fd f993 	bl	8001b8c <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e118      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	4b6c      	ldr	r3, [pc, #432]	; (8004a28 <HAL_RCC_OscConfig+0x4b0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0f0      	beq.n	8004862 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d106      	bne.n	8004896 <HAL_RCC_OscConfig+0x31e>
 8004888:	4b66      	ldr	r3, [pc, #408]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	4a65      	ldr	r2, [pc, #404]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	6713      	str	r3, [r2, #112]	; 0x70
 8004894:	e01c      	b.n	80048d0 <HAL_RCC_OscConfig+0x358>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b05      	cmp	r3, #5
 800489c:	d10c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x340>
 800489e:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	4a60      	ldr	r2, [pc, #384]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80048a4:	f043 0304 	orr.w	r3, r3, #4
 80048a8:	6713      	str	r3, [r2, #112]	; 0x70
 80048aa:	4b5e      	ldr	r3, [pc, #376]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	4a5d      	ldr	r2, [pc, #372]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6713      	str	r3, [r2, #112]	; 0x70
 80048b6:	e00b      	b.n	80048d0 <HAL_RCC_OscConfig+0x358>
 80048b8:	4b5a      	ldr	r3, [pc, #360]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	4a59      	ldr	r2, [pc, #356]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	6713      	str	r3, [r2, #112]	; 0x70
 80048c4:	4b57      	ldr	r3, [pc, #348]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4a56      	ldr	r2, [pc, #344]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80048ca:	f023 0304 	bic.w	r3, r3, #4
 80048ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d8:	f7fd f958 	bl	8001b8c <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e0:	f7fd f954 	bl	8001b8c <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e0d7      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f6:	4b4b      	ldr	r3, [pc, #300]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0ee      	beq.n	80048e0 <HAL_RCC_OscConfig+0x368>
 8004902:	e014      	b.n	800492e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd f942 	bl	8001b8c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490a:	e00a      	b.n	8004922 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800490c:	f7fd f93e 	bl	8001b8c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	; 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e0c1      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004922:	4b40      	ldr	r3, [pc, #256]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1ee      	bne.n	800490c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800492e:	7dfb      	ldrb	r3, [r7, #23]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d105      	bne.n	8004940 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004934:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	4a3a      	ldr	r2, [pc, #232]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 800493a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80ad 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 030c 	and.w	r3, r3, #12
 8004952:	2b08      	cmp	r3, #8
 8004954:	d060      	beq.n	8004a18 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d145      	bne.n	80049ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <HAL_RCC_OscConfig+0x4b4>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fd f912 	bl	8001b8c <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496c:	f7fd f90e 	bl	8001b8c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e093      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497e:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	019b      	lsls	r3, r3, #6
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	085b      	lsrs	r3, r3, #1
 80049a2:	3b01      	subs	r3, #1
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	061b      	lsls	r3, r3, #24
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	071b      	lsls	r3, r3, #28
 80049b6:	491b      	ldr	r1, [pc, #108]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_RCC_OscConfig+0x4b4>)
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fd f8e3 	bl	8001b8c <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fd f8df 	bl	8001b8c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e064      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x452>
 80049e8:	e05c      	b.n	8004aa4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ea:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <HAL_RCC_OscConfig+0x4b4>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd f8cc 	bl	8001b8c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fd f8c8 	bl	8001b8c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e04d      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0a:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <HAL_RCC_OscConfig+0x4ac>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x480>
 8004a16:	e045      	b.n	8004aa4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e040      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a30:	4b1f      	ldr	r3, [pc, #124]	; (8004ab0 <HAL_RCC_OscConfig+0x538>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d030      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d129      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d122      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d119      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	085b      	lsrs	r3, r3, #1
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d10f      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d107      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800

08004ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e03f      	b.n	8004b46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fc ff2e 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2224      	movs	r2, #36	; 0x24
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f829 	bl	8004b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b54:	b0c0      	sub	sp, #256	; 0x100
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	68d9      	ldr	r1, [r3, #12]
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	ea40 0301 	orr.w	r3, r0, r1
 8004b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ba8:	f021 010c 	bic.w	r1, r1, #12
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bca:	6999      	ldr	r1, [r3, #24]
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	ea40 0301 	orr.w	r3, r0, r1
 8004bd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b8f      	ldr	r3, [pc, #572]	; (8004e1c <UART_SetConfig+0x2cc>)
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d005      	beq.n	8004bf0 <UART_SetConfig+0xa0>
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b8d      	ldr	r3, [pc, #564]	; (8004e20 <UART_SetConfig+0x2d0>)
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d104      	bne.n	8004bfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7ff fa7e 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bf8:	e003      	b.n	8004c02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bfa:	f7ff fa65 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8004bfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0c:	f040 810c 	bne.w	8004e28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	1891      	adds	r1, r2, r2
 8004c28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c2a:	415b      	adcs	r3, r3
 8004c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c32:	4621      	mov	r1, r4
 8004c34:	eb12 0801 	adds.w	r8, r2, r1
 8004c38:	4629      	mov	r1, r5
 8004c3a:	eb43 0901 	adc.w	r9, r3, r1
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c52:	4690      	mov	r8, r2
 8004c54:	4699      	mov	r9, r3
 8004c56:	4623      	mov	r3, r4
 8004c58:	eb18 0303 	adds.w	r3, r8, r3
 8004c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c60:	462b      	mov	r3, r5
 8004c62:	eb49 0303 	adc.w	r3, r9, r3
 8004c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c7e:	460b      	mov	r3, r1
 8004c80:	18db      	adds	r3, r3, r3
 8004c82:	653b      	str	r3, [r7, #80]	; 0x50
 8004c84:	4613      	mov	r3, r2
 8004c86:	eb42 0303 	adc.w	r3, r2, r3
 8004c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c94:	f7fb fdee 	bl	8000874 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	011c      	lsls	r4, r3, #4
 8004ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cc8:	4641      	mov	r1, r8
 8004cca:	eb12 0a01 	adds.w	sl, r2, r1
 8004cce:	4649      	mov	r1, r9
 8004cd0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ce0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce8:	4692      	mov	sl, r2
 8004cea:	469b      	mov	fp, r3
 8004cec:	4643      	mov	r3, r8
 8004cee:	eb1a 0303 	adds.w	r3, sl, r3
 8004cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d14:	460b      	mov	r3, r1
 8004d16:	18db      	adds	r3, r3, r3
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	eb42 0303 	adc.w	r3, r2, r3
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
 8004d22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d2a:	f7fb fda3 	bl	8000874 <__aeabi_uldivmod>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	4b3b      	ldr	r3, [pc, #236]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004d36:	fba3 2301 	umull	r2, r3, r3, r1
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2264      	movs	r2, #100	; 0x64
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	1acb      	subs	r3, r1, r3
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d4a:	4b36      	ldr	r3, [pc, #216]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d58:	441c      	add	r4, r3
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d74:	415b      	adcs	r3, r3
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	1851      	adds	r1, r2, r1
 8004d80:	6339      	str	r1, [r7, #48]	; 0x30
 8004d82:	4649      	mov	r1, r9
 8004d84:	414b      	adcs	r3, r1
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d94:	4659      	mov	r1, fp
 8004d96:	00cb      	lsls	r3, r1, #3
 8004d98:	4651      	mov	r1, sl
 8004d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9e:	4651      	mov	r1, sl
 8004da0:	00ca      	lsls	r2, r1, #3
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	4642      	mov	r2, r8
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004db0:	464b      	mov	r3, r9
 8004db2:	460a      	mov	r2, r1
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	18db      	adds	r3, r3, r3
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	eb42 0303 	adc.w	r3, r2, r3
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004de2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004de6:	f7fb fd45 	bl	8000874 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004df0:	fba3 1302 	umull	r1, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2164      	movs	r1, #100	; 0x64
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	3332      	adds	r3, #50	; 0x32
 8004e02:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 0207 	and.w	r2, r3, #7
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4422      	add	r2, r4
 8004e16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e18:	e105      	b.n	8005026 <UART_SetConfig+0x4d6>
 8004e1a:	bf00      	nop
 8004e1c:	40011000 	.word	0x40011000
 8004e20:	40011400 	.word	0x40011400
 8004e24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	1891      	adds	r1, r2, r2
 8004e40:	6239      	str	r1, [r7, #32]
 8004e42:	415b      	adcs	r3, r3
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e4a:	4641      	mov	r1, r8
 8004e4c:	1854      	adds	r4, r2, r1
 8004e4e:	4649      	mov	r1, r9
 8004e50:	eb43 0501 	adc.w	r5, r3, r1
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	00eb      	lsls	r3, r5, #3
 8004e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e62:	00e2      	lsls	r2, r4, #3
 8004e64:	4614      	mov	r4, r2
 8004e66:	461d      	mov	r5, r3
 8004e68:	4643      	mov	r3, r8
 8004e6a:	18e3      	adds	r3, r4, r3
 8004e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e70:	464b      	mov	r3, r9
 8004e72:	eb45 0303 	adc.w	r3, r5, r3
 8004e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e96:	4629      	mov	r1, r5
 8004e98:	008b      	lsls	r3, r1, #2
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	008a      	lsls	r2, r1, #2
 8004ea4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ea8:	f7fb fce4 	bl	8000874 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4b60      	ldr	r3, [pc, #384]	; (8005034 <UART_SetConfig+0x4e4>)
 8004eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	011c      	lsls	r4, r3, #4
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ec4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ec8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	61b9      	str	r1, [r7, #24]
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	6139      	str	r1, [r7, #16]
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f34:	4649      	mov	r1, r9
 8004f36:	008b      	lsls	r3, r1, #2
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3e:	4641      	mov	r1, r8
 8004f40:	008a      	lsls	r2, r1, #2
 8004f42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f46:	f7fb fc95 	bl	8000874 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b39      	ldr	r3, [pc, #228]	; (8005034 <UART_SetConfig+0x4e4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	; 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	3332      	adds	r3, #50	; 0x32
 8004f62:	4a34      	ldr	r2, [pc, #208]	; (8005034 <UART_SetConfig+0x4e4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f6e:	441c      	add	r4, r3
 8004f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f74:	2200      	movs	r2, #0
 8004f76:	673b      	str	r3, [r7, #112]	; 0x70
 8004f78:	677a      	str	r2, [r7, #116]	; 0x74
 8004f7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f7e:	4642      	mov	r2, r8
 8004f80:	464b      	mov	r3, r9
 8004f82:	1891      	adds	r1, r2, r2
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	415b      	adcs	r3, r3
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f8e:	4641      	mov	r1, r8
 8004f90:	1851      	adds	r1, r2, r1
 8004f92:	6039      	str	r1, [r7, #0]
 8004f94:	4649      	mov	r1, r9
 8004f96:	414b      	adcs	r3, r1
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fa6:	4659      	mov	r1, fp
 8004fa8:	00cb      	lsls	r3, r1, #3
 8004faa:	4651      	mov	r1, sl
 8004fac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb0:	4651      	mov	r1, sl
 8004fb2:	00ca      	lsls	r2, r1, #3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4642      	mov	r2, r8
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	eb42 0303 	adc.w	r3, r2, r3
 8004fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fd4:	667a      	str	r2, [r7, #100]	; 0x64
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	008b      	lsls	r3, r1, #2
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fec:	4641      	mov	r1, r8
 8004fee:	008a      	lsls	r2, r1, #2
 8004ff0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ff4:	f7fb fc3e 	bl	8000874 <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <UART_SetConfig+0x4e4>)
 8004ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	2164      	movs	r1, #100	; 0x64
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	3332      	adds	r3, #50	; 0x32
 8005010:	4a08      	ldr	r2, [pc, #32]	; (8005034 <UART_SetConfig+0x4e4>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4422      	add	r2, r4
 8005024:	609a      	str	r2, [r3, #8]
}
 8005026:	bf00      	nop
 8005028:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005032:	bf00      	nop
 8005034:	51eb851f 	.word	0x51eb851f

08005038 <__libc_init_array>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4d0d      	ldr	r5, [pc, #52]	; (8005070 <__libc_init_array+0x38>)
 800503c:	4c0d      	ldr	r4, [pc, #52]	; (8005074 <__libc_init_array+0x3c>)
 800503e:	1b64      	subs	r4, r4, r5
 8005040:	10a4      	asrs	r4, r4, #2
 8005042:	2600      	movs	r6, #0
 8005044:	42a6      	cmp	r6, r4
 8005046:	d109      	bne.n	800505c <__libc_init_array+0x24>
 8005048:	4d0b      	ldr	r5, [pc, #44]	; (8005078 <__libc_init_array+0x40>)
 800504a:	4c0c      	ldr	r4, [pc, #48]	; (800507c <__libc_init_array+0x44>)
 800504c:	f000 f82e 	bl	80050ac <_init>
 8005050:	1b64      	subs	r4, r4, r5
 8005052:	10a4      	asrs	r4, r4, #2
 8005054:	2600      	movs	r6, #0
 8005056:	42a6      	cmp	r6, r4
 8005058:	d105      	bne.n	8005066 <__libc_init_array+0x2e>
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005060:	4798      	blx	r3
 8005062:	3601      	adds	r6, #1
 8005064:	e7ee      	b.n	8005044 <__libc_init_array+0xc>
 8005066:	f855 3b04 	ldr.w	r3, [r5], #4
 800506a:	4798      	blx	r3
 800506c:	3601      	adds	r6, #1
 800506e:	e7f2      	b.n	8005056 <__libc_init_array+0x1e>
 8005070:	080050fc 	.word	0x080050fc
 8005074:	080050fc 	.word	0x080050fc
 8005078:	080050fc 	.word	0x080050fc
 800507c:	08005100 	.word	0x08005100

08005080 <memcpy>:
 8005080:	440a      	add	r2, r1
 8005082:	4291      	cmp	r1, r2
 8005084:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005088:	d100      	bne.n	800508c <memcpy+0xc>
 800508a:	4770      	bx	lr
 800508c:	b510      	push	{r4, lr}
 800508e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005096:	4291      	cmp	r1, r2
 8005098:	d1f9      	bne.n	800508e <memcpy+0xe>
 800509a:	bd10      	pop	{r4, pc}

0800509c <memset>:
 800509c:	4402      	add	r2, r0
 800509e:	4603      	mov	r3, r0
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d100      	bne.n	80050a6 <memset+0xa>
 80050a4:	4770      	bx	lr
 80050a6:	f803 1b01 	strb.w	r1, [r3], #1
 80050aa:	e7f9      	b.n	80050a0 <memset+0x4>

080050ac <_init>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	bf00      	nop
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr

080050b8 <_fini>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	bf00      	nop
 80050bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050be:	bc08      	pop	{r3}
 80050c0:	469e      	mov	lr, r3
 80050c2:	4770      	bx	lr
