
LVPDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004094  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d4  080042d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042dc  080042dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08004354  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004354  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d904  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc6  00000000  00000000  0002d9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002f570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00030090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002097  00000000  00000000  00030b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e77c  00000000  00000000  00032bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdce0  00000000  00000000  00041333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b0  00000000  00000000  0010f064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800424c 	.word	0x0800424c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800424c 	.word	0x0800424c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Store_EMERGENCY_Msg>:
    EMERGENCY_APPS_EMERGENCY_TYPE apps_emergency;
    EMERGENCY_SW_EMERGENCY_TYPE sw_emergency;
} EMERGENCY_MESSAGE_TYPE;
EMERGENCY_MESSAGE_TYPE EMERGENCY_MESSAGE;

void Store_EMERGENCY_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
    switch (RxId){
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d003      	beq.n	80005ce <Store_EMERGENCY_Msg+0x1a>
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d006      	beq.n	80005da <Store_EMERGENCY_Msg+0x26>
            break;
        case EMERGENCY_SW_EMERGENCY:
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
            break;
    }
}
 80005cc:	e00b      	b.n	80005e6 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.apps_emergency), RxData, data_length);
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	4807      	ldr	r0, [pc, #28]	; (80005f0 <Store_EMERGENCY_Msg+0x3c>)
 80005d4:	f003 f9c4 	bl	8003960 <memcpy>
            break;
 80005d8:	e005      	b.n	80005e6 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <Store_EMERGENCY_Msg+0x40>)
 80005e0:	f003 f9be 	bl	8003960 <memcpy>
            break;
 80005e4:	bf00      	nop
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000008c 	.word	0x2000008c
 80005f4:	2000008d 	.word	0x2000008d

080005f8 <Store_BMS_Msg>:
    BMS_TEMPERATURE_TYPE temperature;
    BMS_VOLTAGE_TYPE voltage;
} BMS_MESSAGE_TYPE;
BMS_MESSAGE_TYPE BMS_MESSAGE;

void Store_BMS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b10      	cmp	r3, #16
 8000608:	d003      	beq.n	8000612 <Store_BMS_Msg+0x1a>
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b11      	cmp	r3, #17
 800060e:	d006      	beq.n	800061e <Store_BMS_Msg+0x26>
            break;
        case BMS_VOLTAGE:
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
            break;
    }
}
 8000610:	e00b      	b.n	800062a <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.temperature), RxData, data_length);
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <Store_BMS_Msg+0x3c>)
 8000618:	f003 f9a2 	bl	8003960 <memcpy>
            break;
 800061c:	e005      	b.n	800062a <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	68b9      	ldr	r1, [r7, #8]
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <Store_BMS_Msg+0x40>)
 8000624:	f003 f99c 	bl	8003960 <memcpy>
            break;
 8000628:	bf00      	nop
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000090 	.word	0x20000090
 8000638:	20000094 	.word	0x20000094

0800063c <Store_SW_Msg>:
typedef struct SW_MESSAGE_TYPE {
    SW_COMMAND_1_TYPE command_1;
} SW_MESSAGE_TYPE;
SW_MESSAGE_TYPE SW_MESSAGE;

void Store_SW_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b20      	cmp	r3, #32
 800064c:	d105      	bne.n	800065a <Store_SW_Msg+0x1e>
        case SW_COMMAND_1:
            memcpy(&(SW_MESSAGE.command_1), RxData, data_length);
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	68b9      	ldr	r1, [r7, #8]
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <Store_SW_Msg+0x28>)
 8000654:	f003 f984 	bl	8003960 <memcpy>
            break;
 8000658:	bf00      	nop
    }
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000098 	.word	0x20000098

08000668 <Store_APPS_Msg>:
    APPS_BRAKE_PEDAL_TYPE brake_pedal;
    APPS_TORQUE_TYPE torque;
} APPS_MESSAGE_TYPE;
APPS_MESSAGE_TYPE APPS_MESSAGE;

void Store_APPS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3b30      	subs	r3, #48	; 0x30
 8000678:	2b03      	cmp	r3, #3
 800067a:	d823      	bhi.n	80006c4 <Store_APPS_Msg+0x5c>
 800067c:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <Store_APPS_Msg+0x1c>)
 800067e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000682:	bf00      	nop
 8000684:	08000695 	.word	0x08000695
 8000688:	080006a1 	.word	0x080006a1
 800068c:	080006ad 	.word	0x080006ad
 8000690:	080006b9 	.word	0x080006b9
        case APPS_ACCELERATOR1_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator1_pedal), RxData, data_length);
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <Store_APPS_Msg+0x64>)
 800069a:	f003 f961 	bl	8003960 <memcpy>
            break;
 800069e:	e011      	b.n	80006c4 <Store_APPS_Msg+0x5c>
        case APPS_ACCELERATOR2_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator2_pedal), RxData, data_length);
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <Store_APPS_Msg+0x68>)
 80006a6:	f003 f95b 	bl	8003960 <memcpy>
            break;
 80006aa:	e00b      	b.n	80006c4 <Store_APPS_Msg+0x5c>
        case APPS_BRAKE_PEDAL:
            memcpy(&(APPS_MESSAGE.brake_pedal), RxData, data_length);
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <Store_APPS_Msg+0x6c>)
 80006b2:	f003 f955 	bl	8003960 <memcpy>
            break;
 80006b6:	e005      	b.n	80006c4 <Store_APPS_Msg+0x5c>
        case APPS_TORQUE:
            memcpy(&(APPS_MESSAGE.torque), RxData, data_length);
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <Store_APPS_Msg+0x70>)
 80006be:	f003 f94f 	bl	8003960 <memcpy>
            break;
 80006c2:	bf00      	nop
    }
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	2000009c 	.word	0x2000009c
 80006d0:	200000a0 	.word	0x200000a0
 80006d4:	200000a4 	.word	0x200000a4
 80006d8:	200000a8 	.word	0x200000a8

080006dc <assign_filter_array>:
const FilterArrayLength RMS_RX_NUM = 1;

const AddressIdType LVPDB_RX_ID[] = {SW_ID, APPS_ID};
const FilterArrayLength LVPDB_RX_NUM = 2;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d815      	bhi.n	8000718 <assign_filter_array+0x3c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <assign_filter_array+0x18>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000719 	.word	0x08000719
 80006fc:	0800070d 	.word	0x0800070d
 8000700:	08000711 	.word	0x08000711
 8000704:	08000715 	.word	0x08000715
        case BMS_ID:
            return BMS_RX_ID;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <assign_filter_array+0x4c>)
 800070a:	e006      	b.n	800071a <assign_filter_array+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <assign_filter_array+0x50>)
 800070e:	e004      	b.n	800071a <assign_filter_array+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_ID;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <assign_filter_array+0x54>)
 8000712:	e002      	b.n	800071a <assign_filter_array+0x3e>
            break;
        case LVPDB_ID:
            return LVPDB_RX_ID;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <assign_filter_array+0x58>)
 8000716:	e000      	b.n	800071a <assign_filter_array+0x3e>
            break;
    }
    return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	08004270 	.word	0x08004270
 800072c:	08004274 	.word	0x08004274
 8000730:	0800427c 	.word	0x0800427c
 8000734:	08004280 	.word	0x08004280

08000738 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	2b04      	cmp	r3, #4
 8000746:	d815      	bhi.n	8000774 <assign_filter_array_legnth+0x3c>
 8000748:	a201      	add	r2, pc, #4	; (adr r2, 8000750 <assign_filter_array_legnth+0x18>)
 800074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074e:	bf00      	nop
 8000750:	08000765 	.word	0x08000765
 8000754:	08000775 	.word	0x08000775
 8000758:	08000769 	.word	0x08000769
 800075c:	0800076d 	.word	0x0800076d
 8000760:	08000771 	.word	0x08000771
        case BMS_ID:
            return BMS_RX_NUM;
 8000764:	2301      	movs	r3, #1
 8000766:	e006      	b.n	8000776 <assign_filter_array_legnth+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8000768:	2302      	movs	r3, #2
 800076a:	e004      	b.n	8000776 <assign_filter_array_legnth+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_NUM;
 800076c:	2301      	movs	r3, #1
 800076e:	e002      	b.n	8000776 <assign_filter_array_legnth+0x3e>
            break;
        case LVPDB_ID:
            return LVPDB_RX_NUM;
 8000770:	2302      	movs	r3, #2
 8000772:	e000      	b.n	8000776 <assign_filter_array_legnth+0x3e>
            break;
    }
    return 0;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop

08000784 <store_msg>:

void store_msg(CAN_RxHeaderTypeDef *pHeader, uint8_t RxData[]) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
    switch(pHeader->StdId >> BITS_PER_MESSAGE_TYPE) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	2b03      	cmp	r3, #3
 8000796:	d82f      	bhi.n	80007f8 <store_msg+0x74>
 8000798:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <store_msg+0x1c>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080007c3 	.word	0x080007c3
 80007a8:	080007d5 	.word	0x080007d5
 80007ac:	080007e7 	.word	0x080007e7
        case EMERGENCY_ID:
            Store_EMERGENCY_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	461a      	mov	r2, r3
 80007ba:	6839      	ldr	r1, [r7, #0]
 80007bc:	f7ff fefa 	bl	80005b4 <Store_EMERGENCY_Msg>
            break;
 80007c0:	e01a      	b.n	80007f8 <store_msg+0x74>
        case BMS_ID:
            Store_BMS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	461a      	mov	r2, r3
 80007cc:	6839      	ldr	r1, [r7, #0]
 80007ce:	f7ff ff13 	bl	80005f8 <Store_BMS_Msg>
            break;
 80007d2:	e011      	b.n	80007f8 <store_msg+0x74>
        case SW_ID:
            Store_SW_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	461a      	mov	r2, r3
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	f7ff ff2c 	bl	800063c <Store_SW_Msg>
            break;
 80007e4:	e008      	b.n	80007f8 <store_msg+0x74>
        case APPS_ID:
            Store_APPS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	461a      	mov	r2, r3
 80007f0:	6839      	ldr	r1, [r7, #0]
 80007f2:	f7ff ff39 	bl	8000668 <Store_APPS_Msg>
            break;
 80007f6:	bf00      	nop
    }
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <FEB_CAN_Filter_Config>:
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void Error_Handler(void);

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b090      	sub	sp, #64	; 0x40
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	4611      	mov	r1, r2
 800080c:	461a      	mov	r2, r3
 800080e:	460b      	mov	r3, r1
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	4613      	mov	r3, r2
 8000814:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 8000816:	2300      	movs	r3, #0
 8000818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800081a:	e027      	b.n	800086c <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800081c:	2301      	movs	r3, #1
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8000820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8000828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	4413      	add	r3, r2
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	025b      	lsls	r3, r3, #9
 8000834:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 800083a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800083e:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000848:	2301      	movs	r3, #1
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 800084c:	231b      	movs	r3, #27
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f000 fe28 	bl	80014ac <HAL_CAN_ConfigFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 8000862:	f000 facb 	bl	8000dfc <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 8000866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000868:	3301      	adds	r3, #1
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000870:	429a      	cmp	r2, r3
 8000872:	dbd3      	blt.n	800081c <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3740      	adds	r7, #64	; 0x40
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <FEB_CAN_Init+0x80>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d104      	bne.n	800089e <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 8000894:	2300      	movs	r3, #0
 8000896:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	e008      	b.n	80008b0 <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <FEB_CAN_Init+0x84>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d103      	bne.n	80008b0 <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 80008ac:	2310      	movs	r3, #16
 80008ae:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <FEB_CAN_Init+0x88>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <FEB_CAN_Init+0x88>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <FEB_CAN_Init+0x88>)
 80008be:	2200      	movs	r2, #0
 80008c0:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f7ff ff0a 	bl	80006dc <assign_filter_array>
 80008c8:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 80008ca:	6838      	ldr	r0, [r7, #0]
 80008cc:	f7ff ff34 	bl	8000738 <assign_filter_array_legnth>
 80008d0:	4603      	mov	r3, r0
 80008d2:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	7afa      	ldrb	r2, [r7, #11]
 80008d8:	68f9      	ldr	r1, [r7, #12]
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff90 	bl	8000800 <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 fec3 	bl	800166c <HAL_CAN_Start>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <FEB_CAN_Init+0x70>
	  Error_Handler();
 80008ec:	f000 fa86 	bl	8000dfc <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 80008f0:	6939      	ldr	r1, [r7, #16]
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f001 f810 	bl	8001918 <HAL_CAN_ActivateNotification>

}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40006400 	.word	0x40006400
 8000904:	40006800 	.word	0x40006800
 8000908:	200000ac 	.word	0x200000ac

0800090c <FEB_CAN_Receive>:

void FEB_CAN_Receive(CAN_HandleTypeDef *hcan, uint32_t CAN_RX_FIFO) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <FEB_CAN_Receive+0x30>)
 8000918:	4a09      	ldr	r2, [pc, #36]	; (8000940 <FEB_CAN_Receive+0x34>)
 800091a:	6839      	ldr	r1, [r7, #0]
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 fee9 	bl	80016f4 <HAL_CAN_GetRxMessage>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <FEB_CAN_Receive+0x20>
		Error_Handler();
 8000928:	f000 fa68 	bl	8000dfc <Error_Handler>
	}
	store_msg(&RxHeader, RxData);
 800092c:	4903      	ldr	r1, [pc, #12]	; (800093c <FEB_CAN_Receive+0x30>)
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <FEB_CAN_Receive+0x34>)
 8000930:	f7ff ff28 	bl	8000784 <store_msg>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000e0 	.word	0x200000e0
 8000940:	200000c4 	.word	0x200000c4

08000944 <HAL_CAN_RxFifo0MsgPendingCallback>:
	{
	  Error_Handler();
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO0);
 800094c:	2100      	movs	r1, #0
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffdc 	bl	800090c <FEB_CAN_Receive>
	CAN_Flag = 1;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000e8 	.word	0x200000e8

08000968 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO1);
 8000970:	2101      	movs	r1, #1
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffca 	bl	800090c <FEB_CAN_Receive>
	CAN_Flag = 1;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000e8 	.word	0x200000e8

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0a2      	sub	sp, #136	; 0x88
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fbf9 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f879 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 f971 	bl	8000c80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099e:	f000 f945 	bl	8000c2c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80009a2:	f000 f8df 	bl	8000b64 <MX_CAN1_Init>
  MX_I2C1_Init();
 80009a6:	f000 f913 	bl	8000bd0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	FEB_CAN_Init(&hcan1, LVPDB_ID);
 80009aa:	2105      	movs	r1, #5
 80009ac:	482d      	ldr	r0, [pc, #180]	; (8000a64 <main+0xd8>)
 80009ae:	f7ff ff67 	bl	8000880 <FEB_CAN_Init>

	hi2c1p = &hi2c1;
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <main+0xdc>)
 80009b4:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <main+0xe0>)
 80009b6:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  // Brake Light
	  //if (APPS_MESSAGE.brake_pedal > BRAKE_THRE) {
	  if (1) {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);// PA1 high
 80009b8:	2201      	movs	r2, #1
 80009ba:	2102      	movs	r1, #2
 80009bc:	482c      	ldr	r0, [pc, #176]	; (8000a70 <main+0xe4>)
 80009be:	f001 fc9d 	bl	80022fc <HAL_GPIO_WritePin>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);// PA1 low
	  }

	  // activate peripheral devices if ready to drive
	  if (SW_MESSAGE.command_1 == 1 && !isDriving) {
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <main+0xe8>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d11a      	bne.n	8000a00 <main+0x74>
 80009ca:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <main+0xec>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	f083 0301 	eor.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d013      	beq.n	8000a00 <main+0x74>
		  isDriving = true;
 80009d8:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <main+0xec>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);// pull PC11 high to enable coolant pump
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e4:	4825      	ldr	r0, [pc, #148]	; (8000a7c <main+0xf0>)
 80009e6:	f001 fc89 	bl	80022fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);// pull PB5 high to enable accumulator fans
 80009ea:	2201      	movs	r2, #1
 80009ec:	2120      	movs	r1, #32
 80009ee:	4824      	ldr	r0, [pc, #144]	; (8000a80 <main+0xf4>)
 80009f0:	f001 fc84 	bl	80022fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);// pull PC3 high to enable extra
 80009f4:	2201      	movs	r2, #1
 80009f6:	2108      	movs	r1, #8
 80009f8:	4820      	ldr	r0, [pc, #128]	; (8000a7c <main+0xf0>)
 80009fa:	f001 fc7f 	bl	80022fc <HAL_GPIO_WritePin>
 80009fe:	e01a      	b.n	8000a36 <main+0xaa>

	  // de-activate if not ready to drive
	  } else if (SW_MESSAGE.command_1 == 0 && isDriving) {
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <main+0xe8>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d116      	bne.n	8000a36 <main+0xaa>
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <main+0xec>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d012      	beq.n	8000a36 <main+0xaa>
		  isDriving = false;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <main+0xec>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1c:	4817      	ldr	r0, [pc, #92]	; (8000a7c <main+0xf0>)
 8000a1e:	f001 fc6d 	bl	80022fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	4816      	ldr	r0, [pc, #88]	; (8000a80 <main+0xf4>)
 8000a28:	f001 fc68 	bl	80022fc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2108      	movs	r1, #8
 8000a30:	4812      	ldr	r0, [pc, #72]	; (8000a7c <main+0xf0>)
 8000a32:	f001 fc63 	bl	80022fc <HAL_GPIO_WritePin>
	  // extra hotswap
	  FEB_TPS2482_shutdownIfError(hi2c1p, EX_ADDR, GPIOC, GPIO_PIN_3, GPIOC, GPIO_PIN_1, GPIOC, GPIO_PIN_2, 22.5, 25.5, 7, 4, 150, 120);
***/


	  buf_len = sprintf((char*)buf, "ready: %d\r\n", SW_MESSAGE.command_1);
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <main+0xe8>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4911      	ldr	r1, [pc, #68]	; (8000a84 <main+0xf8>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 ffa3 	bl	800398c <siprintf>
 8000a46:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8000a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	1d39      	adds	r1, r7, #4
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <main+0xfc>)
 8000a58:	f002 fbe3 	bl	8003222 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(SLEEP_TIME);
 8000a5c:	200a      	movs	r0, #10
 8000a5e:	f000 fc05 	bl	800126c <HAL_Delay>
	  if (1) {
 8000a62:	e7a9      	b.n	80009b8 <main+0x2c>
 8000a64:	200000ec 	.word	0x200000ec
 8000a68:	20000168 	.word	0x20000168
 8000a6c:	20000114 	.word	0x20000114
 8000a70:	40020000 	.word	0x40020000
 8000a74:	20000098 	.word	0x20000098
 8000a78:	200001b0 	.word	0x200001b0
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020400 	.word	0x40020400
 8000a84:	08004264 	.word	0x08004264
 8000a88:	2000016c 	.word	0x2000016c

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2234      	movs	r2, #52	; 0x34
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 ff6e 	bl	800397c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a28      	ldr	r2, [pc, #160]	; (8000b5c <SystemClock_Config+0xd0>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	2300      	movs	r3, #0
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <SystemClock_Config+0xd4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a22      	ldr	r2, [pc, #136]	; (8000b60 <SystemClock_Config+0xd4>)
 8000ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <SystemClock_Config+0xd4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b00:	23a0      	movs	r3, #160	; 0xa0
 8000b02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 f899 	bl	8002c4c <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b20:	f000 f96c 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	2105      	movs	r1, #5
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fd38 	bl	80025b8 <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b4e:	f000 f955 	bl	8000dfc <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3750      	adds	r7, #80	; 0x50
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000b6a:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <MX_CAN1_Init+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000b70:	2210      	movs	r2, #16
 8000b72:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000b82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b86:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_CAN1_Init+0x64>)
 8000bb4:	f000 fb7e 	bl	80012b4 <HAL_CAN_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000bbe:	f000 f91d 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000ec 	.word	0x200000ec
 8000bcc:	40006400 	.word	0x40006400

08000bd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000bd6:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000bdc:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_I2C1_Init+0x58>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_I2C1_Init+0x50>)
 8000c0e:	f001 fb8f 	bl	8002330 <HAL_I2C_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c18:	f000 f8f0 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000114 	.word	0x20000114
 8000c24:	40005400 	.word	0x40005400
 8000c28:	000186a0 	.word	0x000186a0

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_USART2_UART_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c64:	f002 fa90 	bl	8003188 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f000 f8c5 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000016c 	.word	0x2000016c
 8000c7c:	40004400 	.word	0x40004400

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b54      	ldr	r3, [pc, #336]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a53      	ldr	r2, [pc, #332]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b51      	ldr	r3, [pc, #324]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a4c      	ldr	r2, [pc, #304]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	4b46      	ldr	r3, [pc, #280]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a45      	ldr	r2, [pc, #276]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b43      	ldr	r3, [pc, #268]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a3e      	ldr	r2, [pc, #248]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <MX_GPIO_Init+0x16c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f640 0108 	movw	r1, #2056	; 0x808
 8000d0c:	4838      	ldr	r0, [pc, #224]	; (8000df0 <MX_GPIO_Init+0x170>)
 8000d0e:	f001 faf5 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2122      	movs	r1, #34	; 0x22
 8000d16:	4837      	ldr	r0, [pc, #220]	; (8000df4 <MX_GPIO_Init+0x174>)
 8000d18:	f001 faf0 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2120      	movs	r1, #32
 8000d20:	4835      	ldr	r0, [pc, #212]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000d22:	f001 faeb 	bl	80022fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	482c      	ldr	r0, [pc, #176]	; (8000df0 <MX_GPIO_Init+0x170>)
 8000d3e:	f001 f949 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12;
 8000d42:	f241 4306 	movw	r3, #5126	; 0x1406
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4826      	ldr	r0, [pc, #152]	; (8000df0 <MX_GPIO_Init+0x170>)
 8000d58:	f001 f93c 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11;
 8000d5c:	f640 0308 	movw	r3, #2056	; 0x808
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	481e      	ldr	r0, [pc, #120]	; (8000df0 <MX_GPIO_Init+0x170>)
 8000d76:	f001 f92d 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000d7a:	2322      	movs	r3, #34	; 0x22
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4818      	ldr	r0, [pc, #96]	; (8000df4 <MX_GPIO_Init+0x174>)
 8000d92:	f001 f91f 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4812      	ldr	r0, [pc, #72]	; (8000df4 <MX_GPIO_Init+0x174>)
 8000dac:	f001 f912 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000db0:	23d0      	movs	r3, #208	; 0xd0
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000dc4:	f001 f906 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dc8:	2320      	movs	r3, #32
 8000dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_GPIO_Init+0x178>)
 8000de0:	f001 f8f8 	bl	8001fd4 <HAL_GPIO_Init>

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020800 	.word	0x40020800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400

08000dfc <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e46:	2007      	movs	r0, #7
 8000e48:	f001 f882 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800

08000e58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <HAL_CAN_MspInit+0xa4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d13c      	bne.n	8000ef4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_CAN_MspInit+0xa8>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_CAN_MspInit+0xa8>)
 8000e84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_CAN_MspInit+0xa8>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_CAN_MspInit+0xa8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_CAN_MspInit+0xa8>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_CAN_MspInit+0xa8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <HAL_CAN_MspInit+0xac>)
 8000ed0:	f001 f880 	bl	8001fd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2014      	movs	r0, #20
 8000eda:	f001 f844 	bl	8001f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ede:	2014      	movs	r0, #20
 8000ee0:	f001 f85d 	bl	8001f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2015      	movs	r0, #21
 8000eea:	f001 f83c 	bl	8001f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000eee:	2015      	movs	r0, #21
 8000ef0:	f001 f855 	bl	8001f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40006400 	.word	0x40006400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <HAL_I2C_MspInit+0x84>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12c      	bne.n	8000f84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <HAL_I2C_MspInit+0x8c>)
 8000f64:	f001 f836 	bl	8001fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f76:	6413      	str	r3, [r2, #64]	; 0x40
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020400 	.word	0x40020400

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_UART_MspInit+0x84>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12b      	bne.n	8001012 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001002:	2307      	movs	r3, #7
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x8c>)
 800100e:	f000 ffe1 	bl	8001fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40004400 	.word	0x40004400
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f8da 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <CAN1_RX0_IRQHandler+0x10>)
 8001082:	f000 fc6f 	bl	8001964 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000ec 	.word	0x200000ec

08001090 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <CAN1_RX1_IRQHandler+0x10>)
 8001096:	f000 fc65 	bl	8001964 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000ec 	.word	0x200000ec

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f002 fc1a 	bl	800390c <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20020000 	.word	0x20020000
 8001104:	00000400 	.word	0x00000400
 8001108:	200001b4 	.word	0x200001b4
 800110c:	200001d0 	.word	0x200001d0

08001110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800113a:	490e      	ldr	r1, [pc, #56]	; (8001174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001150:	4c0b      	ldr	r4, [pc, #44]	; (8001180 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800115e:	f7ff ffd7 	bl	8001110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f002 fbd9 	bl	8003918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fc11 	bl	800098c <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800116c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001178:	080042e4 	.word	0x080042e4
  ldr r2, =_sbss
 800117c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001180:	200001cc 	.word	0x200001cc

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 fecd 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f808 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fe24 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x54>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x58>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fee5 	bl	8001fba <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001208:	f000 fead 	bl	8001f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_InitTick+0x5c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000000 	.word	0x20000000
 8001224:	20000008 	.word	0x20000008
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	200001b8 	.word	0x200001b8

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200001b8 	.word	0x200001b8

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e0ed      	b.n	80014a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fdc0 	bl	8000e58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e8:	f7ff ffb4 	bl	8001254 <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ee:	e012      	b.n	8001316 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f0:	f7ff ffb0 	bl	8001254 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b0a      	cmp	r3, #10
 80012fc:	d90b      	bls.n	8001316 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2205      	movs	r2, #5
 800130e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0c5      	b.n	80014a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0e5      	beq.n	80012f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0202 	bic.w	r2, r2, #2
 8001332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001334:	f7ff ff8e 	bl	8001254 <HAL_GetTick>
 8001338:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800133a:	e012      	b.n	8001362 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800133c:	f7ff ff8a 	bl	8001254 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b0a      	cmp	r3, #10
 8001348:	d90b      	bls.n	8001362 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2205      	movs	r2, #5
 800135a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e09f      	b.n	80014a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1e5      	bne.n	800133c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7e1b      	ldrb	r3, [r3, #24]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d108      	bne.n	800138a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e007      	b.n	800139a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	7e5b      	ldrb	r3, [r3, #25]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d108      	bne.n	80013b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e007      	b.n	80013c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7e9b      	ldrb	r3, [r3, #26]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0220 	orr.w	r2, r2, #32
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e007      	b.n	80013ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0220 	bic.w	r2, r2, #32
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7edb      	ldrb	r3, [r3, #27]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0210 	bic.w	r2, r2, #16
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e007      	b.n	8001418 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0210 	orr.w	r2, r2, #16
 8001416:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7f1b      	ldrb	r3, [r3, #28]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0208 	orr.w	r2, r2, #8
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e007      	b.n	8001442 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0208 	bic.w	r2, r2, #8
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7f5b      	ldrb	r3, [r3, #29]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 0204 	orr.w	r2, r2, #4
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e007      	b.n	800146c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0204 	bic.w	r2, r2, #4
 800146a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	ea42 0103 	orr.w	r1, r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d003      	beq.n	80014d2 <HAL_CAN_ConfigFilter+0x26>
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	f040 80be 	bne.w	800164e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014d2:	4b65      	ldr	r3, [pc, #404]	; (8001668 <HAL_CAN_ConfigFilter+0x1bc>)
 80014d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	431a      	orrs	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2201      	movs	r2, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	401a      	ands	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d123      	bne.n	800157c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43db      	mvns	r3, r3
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001556:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3248      	adds	r2, #72	; 0x48
 800155c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001570:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001572:	6979      	ldr	r1, [r7, #20]
 8001574:	3348      	adds	r3, #72	; 0x48
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d122      	bne.n	80015ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	431a      	orrs	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3248      	adds	r2, #72	; 0x48
 80015aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c0:	6979      	ldr	r1, [r7, #20]
 80015c2:	3348      	adds	r3, #72	; 0x48
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	401a      	ands	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015e4:	e007      	b.n	80015f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	401a      	ands	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001610:	e007      	b.n	8001622 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	431a      	orrs	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	431a      	orrs	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001640:	f023 0201 	bic.w	r2, r3, #1
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e006      	b.n	800165c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
  }
}
 800165c:	4618      	mov	r0, r3
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40006400 	.word	0x40006400

0800166c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d12e      	bne.n	80016de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001698:	f7ff fddc 	bl	8001254 <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800169e:	e012      	b.n	80016c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a0:	f7ff fdd8 	bl	8001254 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b0a      	cmp	r3, #10
 80016ac:	d90b      	bls.n	80016c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2205      	movs	r2, #5
 80016be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e012      	b.n	80016ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e5      	bne.n	80016a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e006      	b.n	80016ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
  }
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001708:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d003      	beq.n	8001718 <HAL_CAN_GetRxMessage+0x24>
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b02      	cmp	r3, #2
 8001714:	f040 80f3 	bne.w	80018fe <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10e      	bne.n	800173c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d116      	bne.n	800175a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0e7      	b.n	800190c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d107      	bne.n	800175a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0d8      	b.n	800190c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	331b      	adds	r3, #27
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0204 	and.w	r2, r3, #4
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10c      	bne.n	8001792 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	331b      	adds	r3, #27
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	4413      	add	r3, r2
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0d5b      	lsrs	r3, r3, #21
 8001788:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e00b      	b.n	80017aa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	331b      	adds	r3, #27
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	331b      	adds	r3, #27
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	4413      	add	r3, r2
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0202 	and.w	r2, r3, #2
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	331b      	adds	r3, #27
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	4413      	add	r3, r2
 80017cc:	3304      	adds	r3, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 020f 	and.w	r2, r3, #15
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	331b      	adds	r3, #27
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	3304      	adds	r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	331b      	adds	r3, #27
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	3304      	adds	r3, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	4413      	add	r3, r2
 8001812:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	0a1a      	lsrs	r2, r3, #8
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4413      	add	r3, r2
 8001842:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0c1a      	lsrs	r2, r3, #16
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	3302      	adds	r3, #2
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4413      	add	r3, r2
 800185c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0e1a      	lsrs	r2, r3, #24
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	3303      	adds	r3, #3
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	3304      	adds	r3, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0a1a      	lsrs	r2, r3, #8
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	3305      	adds	r3, #5
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	0c1a      	lsrs	r2, r3, #16
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	3306      	adds	r3, #6
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0e1a      	lsrs	r2, r3, #24
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	3307      	adds	r3, #7
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d108      	bne.n	80018ea <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0220 	orr.w	r2, r2, #32
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	e007      	b.n	80018fa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0220 	orr.w	r2, r2, #32
 80018f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e006      	b.n	800190c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001928:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d002      	beq.n	8001936 <HAL_CAN_ActivateNotification+0x1e>
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d109      	bne.n	800194a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6959      	ldr	r1, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e006      	b.n	8001958 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
  }
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d07c      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d023      	beq.n	80019fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f983 	bl	8001cd2 <HAL_CAN_TxMailbox0CompleteCallback>
 80019cc:	e016      	b.n	80019fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e00c      	b.n	80019fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	e002      	b.n	80019fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f989 	bl	8001d0e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d024      	beq.n	8001a50 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f963 	bl	8001ce6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a20:	e016      	b.n	8001a50 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	e00c      	b.n	8001a50 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	e002      	b.n	8001a50 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f969 	bl	8001d22 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d024      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f943 	bl	8001cfa <HAL_CAN_TxMailbox2CompleteCallback>
 8001a74:	e016      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
 8001a88:	e00c      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9c:	e002      	b.n	8001aa4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f949 	bl	8001d36 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00c      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f930 	bl	8001d4a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d009      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe ff1e 	bl	8000944 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2210      	movs	r2, #16
 8001b2a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2208      	movs	r2, #8
 8001b46:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f908 	bl	8001d5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fefe 	bl	8000968 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2210      	movs	r2, #16
 8001b86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f8f2 	bl	8001d72 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00b      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8eb 	bl	8001d86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d07b      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d072      	beq.n	8001caa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d008      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	f043 0302 	orr.w	r3, r3, #2
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d043      	beq.n	8001caa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03e      	beq.n	8001caa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c32:	2b60      	cmp	r3, #96	; 0x60
 8001c34:	d02b      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x32a>
 8001c36:	2b60      	cmp	r3, #96	; 0x60
 8001c38:	d82e      	bhi.n	8001c98 <HAL_CAN_IRQHandler+0x334>
 8001c3a:	2b50      	cmp	r3, #80	; 0x50
 8001c3c:	d022      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x320>
 8001c3e:	2b50      	cmp	r3, #80	; 0x50
 8001c40:	d82a      	bhi.n	8001c98 <HAL_CAN_IRQHandler+0x334>
 8001c42:	2b40      	cmp	r3, #64	; 0x40
 8001c44:	d019      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x316>
 8001c46:	2b40      	cmp	r3, #64	; 0x40
 8001c48:	d826      	bhi.n	8001c98 <HAL_CAN_IRQHandler+0x334>
 8001c4a:	2b30      	cmp	r3, #48	; 0x30
 8001c4c:	d010      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x30c>
 8001c4e:	2b30      	cmp	r3, #48	; 0x30
 8001c50:	d822      	bhi.n	8001c98 <HAL_CAN_IRQHandler+0x334>
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d002      	beq.n	8001c5c <HAL_CAN_IRQHandler+0x2f8>
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d005      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c5a:	e01d      	b.n	8001c98 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c64:	e019      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f043 0310 	orr.w	r3, r3, #16
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c6e:	e014      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	f043 0320 	orr.w	r3, r3, #32
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c78:	e00f      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c82:	e00a      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8c:	e005      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c96:	e000      	b.n	8001c9a <HAL_CAN_IRQHandler+0x336>
            break;
 8001c98:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ca8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f868 	bl	8001d9a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <__NVIC_EnableIRQ+0x38>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f1c:	d301      	bcc.n	8001f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <SysTick_Config+0x40>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f30:	f7ff ff8e 	bl	8001e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <SysTick_Config+0x40>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <SysTick_Config+0x40>)
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff29 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f78:	f7ff ff3e 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	6978      	ldr	r0, [r7, #20]
 8001f84:	f7ff ff8e 	bl	8001ea4 <NVIC_EncodePriority>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff5d 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff31 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffa2 	bl	8001f0c <SysTick_Config>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e165      	b.n	80022bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8154 	bne.w	80022b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d005      	beq.n	8002026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	2b02      	cmp	r3, #2
 8002024:	d130      	bne.n	8002088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 0201 	and.w	r2, r3, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b03      	cmp	r3, #3
 8002092:	d017      	beq.n	80020c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d123      	bne.n	8002118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	69b9      	ldr	r1, [r7, #24]
 8002114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80ae 	beq.w	80022b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <HAL_GPIO_Init+0x300>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a5c      	ldr	r2, [pc, #368]	; (80022d4 <HAL_GPIO_Init+0x300>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <HAL_GPIO_Init+0x300>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002176:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	; (80022dc <HAL_GPIO_Init+0x308>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d025      	beq.n	80021ee <HAL_GPIO_Init+0x21a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4e      	ldr	r2, [pc, #312]	; (80022e0 <HAL_GPIO_Init+0x30c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <HAL_GPIO_Init+0x216>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4d      	ldr	r2, [pc, #308]	; (80022e4 <HAL_GPIO_Init+0x310>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x212>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4c      	ldr	r2, [pc, #304]	; (80022e8 <HAL_GPIO_Init+0x314>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x20e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <HAL_GPIO_Init+0x318>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x20a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4a      	ldr	r2, [pc, #296]	; (80022f0 <HAL_GPIO_Init+0x31c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x206>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a49      	ldr	r2, [pc, #292]	; (80022f4 <HAL_GPIO_Init+0x320>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x202>
 80021d2:	2306      	movs	r3, #6
 80021d4:	e00c      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021d6:	2307      	movs	r3, #7
 80021d8:	e00a      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021da:	2305      	movs	r3, #5
 80021dc:	e008      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021de:	2304      	movs	r3, #4
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x21c>
 80021ee:	2300      	movs	r3, #0
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002200:	4935      	ldr	r1, [pc, #212]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220e:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002232:	4a31      	ldr	r2, [pc, #196]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <HAL_GPIO_Init+0x324>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800225c:	4a26      	ldr	r2, [pc, #152]	; (80022f8 <HAL_GPIO_Init+0x324>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002262:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002286:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <HAL_GPIO_Init+0x324>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b0:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_GPIO_Init+0x324>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	f67f ae96 	bls.w	8001ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40021400 	.word	0x40021400
 80022f4:	40021800 	.word	0x40021800
 80022f8:	40013c00 	.word	0x40013c00

080022fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
 8002308:	4613      	mov	r3, r2
 800230a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800230c:	787b      	ldrb	r3, [r7, #1]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002318:	e003      	b.n	8002322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800231a:	887b      	ldrh	r3, [r7, #2]
 800231c:	041a      	lsls	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	619a      	str	r2, [r3, #24]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e12b      	b.n	800259a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fdd6 	bl	8000f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002394:	f000 fa02 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8002398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4a81      	ldr	r2, [pc, #516]	; (80025a4 <HAL_I2C_Init+0x274>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d807      	bhi.n	80023b4 <HAL_I2C_Init+0x84>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a80      	ldr	r2, [pc, #512]	; (80025a8 <HAL_I2C_Init+0x278>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bf94      	ite	ls
 80023ac:	2301      	movls	r3, #1
 80023ae:	2300      	movhi	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e006      	b.n	80023c2 <HAL_I2C_Init+0x92>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a7d      	ldr	r2, [pc, #500]	; (80025ac <HAL_I2C_Init+0x27c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	bf94      	ite	ls
 80023bc:	2301      	movls	r3, #1
 80023be:	2300      	movhi	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0e7      	b.n	800259a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a78      	ldr	r2, [pc, #480]	; (80025b0 <HAL_I2C_Init+0x280>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0c9b      	lsrs	r3, r3, #18
 80023d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a6a      	ldr	r2, [pc, #424]	; (80025a4 <HAL_I2C_Init+0x274>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d802      	bhi.n	8002404 <HAL_I2C_Init+0xd4>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3301      	adds	r3, #1
 8002402:	e009      	b.n	8002418 <HAL_I2C_Init+0xe8>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_I2C_Init+0x284>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	3301      	adds	r3, #1
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	430b      	orrs	r3, r1
 800241e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800242a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	495c      	ldr	r1, [pc, #368]	; (80025a4 <HAL_I2C_Init+0x274>)
 8002434:	428b      	cmp	r3, r1
 8002436:	d819      	bhi.n	800246c <HAL_I2C_Init+0x13c>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e59      	subs	r1, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fbb1 f3f3 	udiv	r3, r1, r3
 8002446:	1c59      	adds	r1, r3, #1
 8002448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800244c:	400b      	ands	r3, r1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_I2C_Init+0x138>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e59      	subs	r1, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002466:	e051      	b.n	800250c <HAL_I2C_Init+0x1dc>
 8002468:	2304      	movs	r3, #4
 800246a:	e04f      	b.n	800250c <HAL_I2C_Init+0x1dc>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d111      	bne.n	8002498 <HAL_I2C_Init+0x168>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e58      	subs	r0, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	440b      	add	r3, r1
 8002482:	fbb0 f3f3 	udiv	r3, r0, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e012      	b.n	80024be <HAL_I2C_Init+0x18e>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	0099      	lsls	r1, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Init+0x196>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e022      	b.n	800250c <HAL_I2C_Init+0x1dc>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10e      	bne.n	80024ec <HAL_I2C_Init+0x1bc>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e58      	subs	r0, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	440b      	add	r3, r1
 80024dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ea:	e00f      	b.n	800250c <HAL_I2C_Init+0x1dc>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e58      	subs	r0, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	0099      	lsls	r1, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	6809      	ldr	r1, [r1, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800253a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6911      	ldr	r1, [r2, #16]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68d2      	ldr	r2, [r2, #12]
 8002546:	4311      	orrs	r1, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	430b      	orrs	r3, r1
 800254e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	000186a0 	.word	0x000186a0
 80025a8:	001e847f 	.word	0x001e847f
 80025ac:	003d08ff 	.word	0x003d08ff
 80025b0:	431bde83 	.word	0x431bde83
 80025b4:	10624dd3 	.word	0x10624dd3

080025b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0cc      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b68      	ldr	r3, [pc, #416]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d90c      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800262e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	494d      	ldr	r1, [pc, #308]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d044      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d119      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d003      	beq.n	8002676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002672:	2b03      	cmp	r3, #3
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e06f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e067      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4934      	ldr	r1, [pc, #208]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a8:	f7fe fdd4 	bl	8001254 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7fe fdd0 	bl	8001254 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e04f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d20c      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e032      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4916      	ldr	r1, [pc, #88]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800273e:	f000 f855 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	490a      	ldr	r1, [pc, #40]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fd34 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023c00 	.word	0x40023c00
 8002774:	40023800 	.word	0x40023800
 8002778:	08004288 	.word	0x08004288
 800277c:	20000000 	.word	0x20000000
 8002780:	20000004 	.word	0x20000004

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_RCC_GetHCLKFreq+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff0 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0a9b      	lsrs	r3, r3, #10
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4903      	ldr	r1, [pc, #12]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	08004298 	.word	0x08004298

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027c8:	f7ff ffdc 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0b5b      	lsrs	r3, r3, #13
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08004298 	.word	0x08004298

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f0:	b0ae      	sub	sp, #184	; 0xb8
 80027f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002812:	4bcb      	ldr	r3, [pc, #812]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b0c      	cmp	r3, #12
 800281c:	f200 8206 	bhi.w	8002c2c <HAL_RCC_GetSysClockFreq+0x440>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	0800285d 	.word	0x0800285d
 800282c:	08002c2d 	.word	0x08002c2d
 8002830:	08002c2d 	.word	0x08002c2d
 8002834:	08002c2d 	.word	0x08002c2d
 8002838:	08002865 	.word	0x08002865
 800283c:	08002c2d 	.word	0x08002c2d
 8002840:	08002c2d 	.word	0x08002c2d
 8002844:	08002c2d 	.word	0x08002c2d
 8002848:	0800286d 	.word	0x0800286d
 800284c:	08002c2d 	.word	0x08002c2d
 8002850:	08002c2d 	.word	0x08002c2d
 8002854:	08002c2d 	.word	0x08002c2d
 8002858:	08002a5d 	.word	0x08002a5d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4bb9      	ldr	r3, [pc, #740]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x358>)
 800285e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002862:	e1e7      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002864:	4bb8      	ldr	r3, [pc, #736]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800286a:	e1e3      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800286c:	4bb4      	ldr	r3, [pc, #720]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x354>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002878:	4bb1      	ldr	r3, [pc, #708]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x354>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d071      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002884:	4bae      	ldr	r3, [pc, #696]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	2200      	movs	r2, #0
 800288c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002890:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028aa:	4622      	mov	r2, r4
 80028ac:	462b      	mov	r3, r5
 80028ae:	f04f 0000 	mov.w	r0, #0
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	0159      	lsls	r1, r3, #5
 80028b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028bc:	0150      	lsls	r0, r2, #5
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4621      	mov	r1, r4
 80028c4:	1a51      	subs	r1, r2, r1
 80028c6:	6439      	str	r1, [r7, #64]	; 0x40
 80028c8:	4629      	mov	r1, r5
 80028ca:	eb63 0301 	sbc.w	r3, r3, r1
 80028ce:	647b      	str	r3, [r7, #68]	; 0x44
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80028dc:	4649      	mov	r1, r9
 80028de:	018b      	lsls	r3, r1, #6
 80028e0:	4641      	mov	r1, r8
 80028e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028e6:	4641      	mov	r1, r8
 80028e8:	018a      	lsls	r2, r1, #6
 80028ea:	4641      	mov	r1, r8
 80028ec:	1a51      	subs	r1, r2, r1
 80028ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80028f0:	4649      	mov	r1, r9
 80028f2:	eb63 0301 	sbc.w	r3, r3, r1
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002904:	4649      	mov	r1, r9
 8002906:	00cb      	lsls	r3, r1, #3
 8002908:	4641      	mov	r1, r8
 800290a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290e:	4641      	mov	r1, r8
 8002910:	00ca      	lsls	r2, r1, #3
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	4603      	mov	r3, r0
 8002918:	4622      	mov	r2, r4
 800291a:	189b      	adds	r3, r3, r2
 800291c:	633b      	str	r3, [r7, #48]	; 0x30
 800291e:	462b      	mov	r3, r5
 8002920:	460a      	mov	r2, r1
 8002922:	eb42 0303 	adc.w	r3, r2, r3
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002934:	4629      	mov	r1, r5
 8002936:	024b      	lsls	r3, r1, #9
 8002938:	4621      	mov	r1, r4
 800293a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800293e:	4621      	mov	r1, r4
 8002940:	024a      	lsls	r2, r1, #9
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800294a:	2200      	movs	r2, #0
 800294c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002954:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002958:	f7fd fcaa 	bl	80002b0 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4613      	mov	r3, r2
 8002962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002966:	e067      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002968:	4b75      	ldr	r3, [pc, #468]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x354>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	2200      	movs	r2, #0
 8002970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002974:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800297c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002980:	67bb      	str	r3, [r7, #120]	; 0x78
 8002982:	2300      	movs	r3, #0
 8002984:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002986:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800298a:	4622      	mov	r2, r4
 800298c:	462b      	mov	r3, r5
 800298e:	f04f 0000 	mov.w	r0, #0
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	0159      	lsls	r1, r3, #5
 8002998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299c:	0150      	lsls	r0, r2, #5
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4621      	mov	r1, r4
 80029a4:	1a51      	subs	r1, r2, r1
 80029a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80029a8:	4629      	mov	r1, r5
 80029aa:	eb63 0301 	sbc.w	r3, r3, r1
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80029bc:	4649      	mov	r1, r9
 80029be:	018b      	lsls	r3, r1, #6
 80029c0:	4641      	mov	r1, r8
 80029c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029c6:	4641      	mov	r1, r8
 80029c8:	018a      	lsls	r2, r1, #6
 80029ca:	4641      	mov	r1, r8
 80029cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80029d0:	4649      	mov	r1, r9
 80029d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029ea:	4692      	mov	sl, r2
 80029ec:	469b      	mov	fp, r3
 80029ee:	4623      	mov	r3, r4
 80029f0:	eb1a 0303 	adds.w	r3, sl, r3
 80029f4:	623b      	str	r3, [r7, #32]
 80029f6:	462b      	mov	r3, r5
 80029f8:	eb4b 0303 	adc.w	r3, fp, r3
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	028b      	lsls	r3, r1, #10
 8002a0e:	4621      	mov	r1, r4
 8002a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a14:	4621      	mov	r1, r4
 8002a16:	028a      	lsls	r2, r1, #10
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a20:	2200      	movs	r2, #0
 8002a22:	673b      	str	r3, [r7, #112]	; 0x70
 8002a24:	677a      	str	r2, [r7, #116]	; 0x74
 8002a26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a2a:	f7fd fc41 	bl	80002b0 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4613      	mov	r3, r2
 8002a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a38:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a5a:	e0eb      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a5c:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a68:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d06b      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a74:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a86:	663b      	str	r3, [r7, #96]	; 0x60
 8002a88:	2300      	movs	r3, #0
 8002a8a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a8c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a90:	4622      	mov	r2, r4
 8002a92:	462b      	mov	r3, r5
 8002a94:	f04f 0000 	mov.w	r0, #0
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	0159      	lsls	r1, r3, #5
 8002a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa2:	0150      	lsls	r0, r2, #5
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	1a51      	subs	r1, r2, r1
 8002aac:	61b9      	str	r1, [r7, #24]
 8002aae:	4629      	mov	r1, r5
 8002ab0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ac2:	4659      	mov	r1, fp
 8002ac4:	018b      	lsls	r3, r1, #6
 8002ac6:	4651      	mov	r1, sl
 8002ac8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002acc:	4651      	mov	r1, sl
 8002ace:	018a      	lsls	r2, r1, #6
 8002ad0:	4651      	mov	r1, sl
 8002ad2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ad6:	4659      	mov	r1, fp
 8002ad8:	eb63 0901 	sbc.w	r9, r3, r1
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ae8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af0:	4690      	mov	r8, r2
 8002af2:	4699      	mov	r9, r3
 8002af4:	4623      	mov	r3, r4
 8002af6:	eb18 0303 	adds.w	r3, r8, r3
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	462b      	mov	r3, r5
 8002afe:	eb49 0303 	adc.w	r3, r9, r3
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b10:	4629      	mov	r1, r5
 8002b12:	024b      	lsls	r3, r1, #9
 8002b14:	4621      	mov	r1, r4
 8002b16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	024a      	lsls	r2, r1, #9
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b26:	2200      	movs	r2, #0
 8002b28:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b30:	f7fd fbbe 	bl	80002b0 <__aeabi_uldivmod>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4613      	mov	r3, r2
 8002b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b3e:	e065      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x420>
 8002b40:	40023800 	.word	0x40023800
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	2200      	movs	r2, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	4611      	mov	r1, r2
 8002b58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8002b5e:	2300      	movs	r3, #0
 8002b60:	657b      	str	r3, [r7, #84]	; 0x54
 8002b62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b66:	4642      	mov	r2, r8
 8002b68:	464b      	mov	r3, r9
 8002b6a:	f04f 0000 	mov.w	r0, #0
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	0159      	lsls	r1, r3, #5
 8002b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b78:	0150      	lsls	r0, r2, #5
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4641      	mov	r1, r8
 8002b80:	1a51      	subs	r1, r2, r1
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	4649      	mov	r1, r9
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b98:	4659      	mov	r1, fp
 8002b9a:	018b      	lsls	r3, r1, #6
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	018a      	lsls	r2, r1, #6
 8002ba6:	4651      	mov	r1, sl
 8002ba8:	1a54      	subs	r4, r2, r1
 8002baa:	4659      	mov	r1, fp
 8002bac:	eb63 0501 	sbc.w	r5, r3, r1
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	00eb      	lsls	r3, r5, #3
 8002bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bbe:	00e2      	lsls	r2, r4, #3
 8002bc0:	4614      	mov	r4, r2
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	4643      	mov	r3, r8
 8002bc6:	18e3      	adds	r3, r4, r3
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	464b      	mov	r3, r9
 8002bcc:	eb45 0303 	adc.w	r3, r5, r3
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bde:	4629      	mov	r1, r5
 8002be0:	028b      	lsls	r3, r1, #10
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be8:	4621      	mov	r1, r4
 8002bea:	028a      	lsls	r2, r1, #10
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bfe:	f7fd fb57 	bl	80002b0 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4613      	mov	r3, r2
 8002c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0f1b      	lsrs	r3, r3, #28
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c2a:	e003      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	37b8      	adds	r7, #184	; 0xb8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	00f42400 	.word	0x00f42400

08002c4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e28d      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8083 	beq.w	8002d72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c6c:	4b94      	ldr	r3, [pc, #592]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d019      	beq.n	8002cac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c78:	4b91      	ldr	r3, [pc, #580]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c84:	4b8e      	ldr	r3, [pc, #568]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c90:	d00c      	beq.n	8002cac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b8b      	ldr	r3, [pc, #556]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d112      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9e:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002caa:	d10b      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	4b84      	ldr	r3, [pc, #528]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05b      	beq.n	8002d70 <HAL_RCC_OscConfig+0x124>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d157      	bne.n	8002d70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e25a      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCC_OscConfig+0x90>
 8002cce:	4b7c      	ldr	r3, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a7b      	ldr	r2, [pc, #492]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <HAL_RCC_OscConfig+0xcc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0xb4>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a72      	ldr	r2, [pc, #456]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0xcc>
 8002d00:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a6e      	ldr	r2, [pc, #440]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6b      	ldr	r2, [pc, #428]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fa98 	bl	8001254 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe fa94 	bl	8001254 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e21f      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0xdc>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fa84 	bl	8001254 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe fa80 	bl	8001254 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e20b      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x104>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d06f      	beq.n	8002e5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d7e:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d017      	beq.n	8002dba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d8a:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d105      	bne.n	8002da2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d96:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d116      	bne.n	8002de8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x186>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e1d3      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	e03a      	b.n	8002e5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df0:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x278>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fa2d 	bl	8001254 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fa29 	bl	8001254 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1b4      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4925      	ldr	r1, [pc, #148]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0x278>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe fa0c 	bl	8001254 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e40:	f7fe fa08 	bl	8001254 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e193      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d036      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d016      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe f9ec 	bl	8001254 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe f9e8 	bl	8001254 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e173      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x234>
 8002e9e:	e01b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe f9d5 	bl	8001254 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	e00e      	b.n	8002ecc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe f9d1 	bl	8001254 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d907      	bls.n	8002ecc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e15c      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470000 	.word	0x42470000
 8002ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b8a      	ldr	r3, [pc, #552]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ea      	bne.n	8002eae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8097 	beq.w	8003014 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b83      	ldr	r3, [pc, #524]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b7f      	ldr	r3, [pc, #508]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a7e      	ldr	r2, [pc, #504]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b7c      	ldr	r3, [pc, #496]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b79      	ldr	r3, [pc, #484]	; (80030fc <HAL_RCC_OscConfig+0x4b0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x4b0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a75      	ldr	r2, [pc, #468]	; (80030fc <HAL_RCC_OscConfig+0x4b0>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe f991 	bl	8001254 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe f98d 	bl	8001254 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e118      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x4b0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x31e>
 8002f5c:	4b66      	ldr	r3, [pc, #408]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a65      	ldr	r2, [pc, #404]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x358>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x340>
 8002f72:	4b61      	ldr	r3, [pc, #388]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a60      	ldr	r2, [pc, #384]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b5e      	ldr	r3, [pc, #376]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a5d      	ldr	r2, [pc, #372]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x358>
 8002f8c:	4b5a      	ldr	r3, [pc, #360]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a59      	ldr	r2, [pc, #356]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	4b57      	ldr	r3, [pc, #348]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a56      	ldr	r2, [pc, #344]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe f952 	bl	8001254 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe f94e 	bl	8001254 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0d7      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	4b4b      	ldr	r3, [pc, #300]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ee      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x368>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe f93c 	bl	8001254 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe f938 	bl	8001254 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0c1      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ee      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	4a3a      	ldr	r2, [pc, #232]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003012:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80ad 	beq.w	8003178 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301e:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d060      	beq.n	80030ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d145      	bne.n	80030be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b33      	ldr	r3, [pc, #204]	; (8003100 <HAL_RCC_OscConfig+0x4b4>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe f90c 	bl	8001254 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe f908 	bl	8001254 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e093      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	3b01      	subs	r3, #1
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	071b      	lsls	r3, r3, #28
 800308a:	491b      	ldr	r1, [pc, #108]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_RCC_OscConfig+0x4b4>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fe f8dd 	bl	8001254 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309e:	f7fe f8d9 	bl	8001254 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e064      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x452>
 80030bc:	e05c      	b.n	8003178 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_RCC_OscConfig+0x4b4>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe f8c6 	bl	8001254 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fe f8c2 	bl	8001254 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e04d      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x480>
 80030ea:	e045      	b.n	8003178 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e040      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000
 8003100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003104:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <HAL_RCC_OscConfig+0x538>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d030      	beq.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d129      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d122      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003134:	4013      	ands	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800313a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	4293      	cmp	r3, r2
 800313e:	d119      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	3b01      	subs	r3, #1
 800314e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d10f      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e03f      	b.n	800321a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd fef2 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2224      	movs	r2, #36	; 0x24
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f929 	bl	8003424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b08a      	sub	sp, #40	; 0x28
 8003226:	af02      	add	r7, sp, #8
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b20      	cmp	r3, #32
 8003240:	d17c      	bne.n	800333c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_UART_Transmit+0x2c>
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e075      	b.n	800333e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_UART_Transmit+0x3e>
 800325c:	2302      	movs	r3, #2
 800325e:	e06e      	b.n	800333e <HAL_UART_Transmit+0x11c>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2221      	movs	r2, #33	; 0x21
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003276:	f7fd ffed 	bl	8001254 <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003290:	d108      	bne.n	80032a4 <HAL_UART_Transmit+0x82>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d104      	bne.n	80032a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e003      	b.n	80032ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032b4:	e02a      	b.n	800330c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2180      	movs	r1, #128	; 0x80
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f840 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e036      	b.n	800333e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3302      	adds	r3, #2
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e007      	b.n	80032fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1cf      	bne.n	80032b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	2140      	movs	r1, #64	; 0x40
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f810 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e006      	b.n	800333e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b090      	sub	sp, #64	; 0x40
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	e050      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335e:	d04c      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <UART_WaitOnFlagUntilTimeout+0x30>
 8003366:	f7fd ff75 	bl	8001254 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003372:	429a      	cmp	r2, r3
 8003374:	d241      	bcs.n	80033fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800338c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003396:	637a      	str	r2, [r7, #52]	; 0x34
 8003398:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800339c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e5      	bne.n	8003376 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3314      	adds	r3, #20
 80033b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	613b      	str	r3, [r7, #16]
   return(result);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3314      	adds	r3, #20
 80033c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ca:	623a      	str	r2, [r7, #32]
 80033cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	69f9      	ldr	r1, [r7, #28]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e5      	bne.n	80033aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e00f      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	429a      	cmp	r2, r3
 8003416:	d09f      	beq.n	8003358 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3740      	adds	r7, #64	; 0x40
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003428:	b0c0      	sub	sp, #256	; 0x100
 800342a:	af00      	add	r7, sp, #0
 800342c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	68d9      	ldr	r1, [r3, #12]
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	ea40 0301 	orr.w	r3, r0, r1
 800344c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	431a      	orrs	r2, r3
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800347c:	f021 010c 	bic.w	r1, r1, #12
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800348a:	430b      	orrs	r3, r1
 800348c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349e:	6999      	ldr	r1, [r3, #24]
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	ea40 0301 	orr.w	r3, r0, r1
 80034aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b8f      	ldr	r3, [pc, #572]	; (80036f0 <UART_SetConfig+0x2cc>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d005      	beq.n	80034c4 <UART_SetConfig+0xa0>
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b8d      	ldr	r3, [pc, #564]	; (80036f4 <UART_SetConfig+0x2d0>)
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d104      	bne.n	80034ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c4:	f7ff f97e 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 80034c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034cc:	e003      	b.n	80034d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ce:	f7ff f965 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 80034d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e0:	f040 810c 	bne.w	80036fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034f6:	4622      	mov	r2, r4
 80034f8:	462b      	mov	r3, r5
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80034fe:	415b      	adcs	r3, r3
 8003500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003502:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003506:	4621      	mov	r1, r4
 8003508:	eb12 0801 	adds.w	r8, r2, r1
 800350c:	4629      	mov	r1, r5
 800350e:	eb43 0901 	adc.w	r9, r3, r1
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800351e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003526:	4690      	mov	r8, r2
 8003528:	4699      	mov	r9, r3
 800352a:	4623      	mov	r3, r4
 800352c:	eb18 0303 	adds.w	r3, r8, r3
 8003530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003534:	462b      	mov	r3, r5
 8003536:	eb49 0303 	adc.w	r3, r9, r3
 800353a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800354a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800354e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003552:	460b      	mov	r3, r1
 8003554:	18db      	adds	r3, r3, r3
 8003556:	653b      	str	r3, [r7, #80]	; 0x50
 8003558:	4613      	mov	r3, r2
 800355a:	eb42 0303 	adc.w	r3, r2, r3
 800355e:	657b      	str	r3, [r7, #84]	; 0x54
 8003560:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003564:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003568:	f7fc fea2 	bl	80002b0 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <UART_SetConfig+0x2d4>)
 8003572:	fba3 2302 	umull	r2, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	011c      	lsls	r4, r3, #4
 800357a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003584:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003588:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800358c:	4642      	mov	r2, r8
 800358e:	464b      	mov	r3, r9
 8003590:	1891      	adds	r1, r2, r2
 8003592:	64b9      	str	r1, [r7, #72]	; 0x48
 8003594:	415b      	adcs	r3, r3
 8003596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003598:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800359c:	4641      	mov	r1, r8
 800359e:	eb12 0a01 	adds.w	sl, r2, r1
 80035a2:	4649      	mov	r1, r9
 80035a4:	eb43 0b01 	adc.w	fp, r3, r1
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035bc:	4692      	mov	sl, r2
 80035be:	469b      	mov	fp, r3
 80035c0:	4643      	mov	r3, r8
 80035c2:	eb1a 0303 	adds.w	r3, sl, r3
 80035c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ca:	464b      	mov	r3, r9
 80035cc:	eb4b 0303 	adc.w	r3, fp, r3
 80035d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035e8:	460b      	mov	r3, r1
 80035ea:	18db      	adds	r3, r3, r3
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
 80035ee:	4613      	mov	r3, r2
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	647b      	str	r3, [r7, #68]	; 0x44
 80035f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035fe:	f7fc fe57 	bl	80002b0 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4611      	mov	r1, r2
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <UART_SetConfig+0x2d4>)
 800360a:	fba3 2301 	umull	r2, r3, r3, r1
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2264      	movs	r2, #100	; 0x64
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	1acb      	subs	r3, r1, r3
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <UART_SetConfig+0x2d4>)
 8003620:	fba3 2302 	umull	r2, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800362c:	441c      	add	r4, r3
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003638:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800363c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	63b9      	str	r1, [r7, #56]	; 0x38
 8003648:	415b      	adcs	r3, r3
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6339      	str	r1, [r7, #48]	; 0x30
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003684:	464b      	mov	r3, r9
 8003686:	460a      	mov	r2, r1
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800369c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036a4:	460b      	mov	r3, r1
 80036a6:	18db      	adds	r3, r3, r3
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036aa:	4613      	mov	r3, r2
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036ba:	f7fc fdf9 	bl	80002b0 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <UART_SetConfig+0x2d4>)
 80036c4:	fba3 1302 	umull	r1, r3, r3, r2
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	2164      	movs	r1, #100	; 0x64
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	3332      	adds	r3, #50	; 0x32
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <UART_SetConfig+0x2d4>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	f003 0207 	and.w	r2, r3, #7
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4422      	add	r2, r4
 80036ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036ec:	e105      	b.n	80038fa <UART_SetConfig+0x4d6>
 80036ee:	bf00      	nop
 80036f0:	40011000 	.word	0x40011000
 80036f4:	40011400 	.word	0x40011400
 80036f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003706:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800370a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800370e:	4642      	mov	r2, r8
 8003710:	464b      	mov	r3, r9
 8003712:	1891      	adds	r1, r2, r2
 8003714:	6239      	str	r1, [r7, #32]
 8003716:	415b      	adcs	r3, r3
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800371e:	4641      	mov	r1, r8
 8003720:	1854      	adds	r4, r2, r1
 8003722:	4649      	mov	r1, r9
 8003724:	eb43 0501 	adc.w	r5, r3, r1
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	00eb      	lsls	r3, r5, #3
 8003732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003736:	00e2      	lsls	r2, r4, #3
 8003738:	4614      	mov	r4, r2
 800373a:	461d      	mov	r5, r3
 800373c:	4643      	mov	r3, r8
 800373e:	18e3      	adds	r3, r4, r3
 8003740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003744:	464b      	mov	r3, r9
 8003746:	eb45 0303 	adc.w	r3, r5, r3
 800374a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800375a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800376a:	4629      	mov	r1, r5
 800376c:	008b      	lsls	r3, r1, #2
 800376e:	4621      	mov	r1, r4
 8003770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003774:	4621      	mov	r1, r4
 8003776:	008a      	lsls	r2, r1, #2
 8003778:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800377c:	f7fc fd98 	bl	80002b0 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4b60      	ldr	r3, [pc, #384]	; (8003908 <UART_SetConfig+0x4e4>)
 8003786:	fba3 2302 	umull	r2, r3, r3, r2
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	011c      	lsls	r4, r3, #4
 800378e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003798:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800379c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037a0:	4642      	mov	r2, r8
 80037a2:	464b      	mov	r3, r9
 80037a4:	1891      	adds	r1, r2, r2
 80037a6:	61b9      	str	r1, [r7, #24]
 80037a8:	415b      	adcs	r3, r3
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b0:	4641      	mov	r1, r8
 80037b2:	1851      	adds	r1, r2, r1
 80037b4:	6139      	str	r1, [r7, #16]
 80037b6:	4649      	mov	r1, r9
 80037b8:	414b      	adcs	r3, r1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c8:	4659      	mov	r1, fp
 80037ca:	00cb      	lsls	r3, r1, #3
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d2:	4651      	mov	r1, sl
 80037d4:	00ca      	lsls	r2, r1, #3
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	4642      	mov	r2, r8
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037e4:	464b      	mov	r3, r9
 80037e6:	460a      	mov	r2, r1
 80037e8:	eb42 0303 	adc.w	r3, r2, r3
 80037ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003808:	4649      	mov	r1, r9
 800380a:	008b      	lsls	r3, r1, #2
 800380c:	4641      	mov	r1, r8
 800380e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003812:	4641      	mov	r1, r8
 8003814:	008a      	lsls	r2, r1, #2
 8003816:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800381a:	f7fc fd49 	bl	80002b0 <__aeabi_uldivmod>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4b39      	ldr	r3, [pc, #228]	; (8003908 <UART_SetConfig+0x4e4>)
 8003824:	fba3 1302 	umull	r1, r3, r3, r2
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	2164      	movs	r1, #100	; 0x64
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	3332      	adds	r3, #50	; 0x32
 8003836:	4a34      	ldr	r2, [pc, #208]	; (8003908 <UART_SetConfig+0x4e4>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003842:	441c      	add	r4, r3
 8003844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003848:	2200      	movs	r2, #0
 800384a:	673b      	str	r3, [r7, #112]	; 0x70
 800384c:	677a      	str	r2, [r7, #116]	; 0x74
 800384e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003852:	4642      	mov	r2, r8
 8003854:	464b      	mov	r3, r9
 8003856:	1891      	adds	r1, r2, r2
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	415b      	adcs	r3, r3
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003862:	4641      	mov	r1, r8
 8003864:	1851      	adds	r1, r2, r1
 8003866:	6039      	str	r1, [r7, #0]
 8003868:	4649      	mov	r1, r9
 800386a:	414b      	adcs	r3, r1
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800387a:	4659      	mov	r1, fp
 800387c:	00cb      	lsls	r3, r1, #3
 800387e:	4651      	mov	r1, sl
 8003880:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003884:	4651      	mov	r1, sl
 8003886:	00ca      	lsls	r2, r1, #3
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	4603      	mov	r3, r0
 800388e:	4642      	mov	r2, r8
 8003890:	189b      	adds	r3, r3, r2
 8003892:	66bb      	str	r3, [r7, #104]	; 0x68
 8003894:	464b      	mov	r3, r9
 8003896:	460a      	mov	r2, r1
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	663b      	str	r3, [r7, #96]	; 0x60
 80038a8:	667a      	str	r2, [r7, #100]	; 0x64
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038b6:	4649      	mov	r1, r9
 80038b8:	008b      	lsls	r3, r1, #2
 80038ba:	4641      	mov	r1, r8
 80038bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c0:	4641      	mov	r1, r8
 80038c2:	008a      	lsls	r2, r1, #2
 80038c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038c8:	f7fc fcf2 	bl	80002b0 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <UART_SetConfig+0x4e4>)
 80038d2:	fba3 1302 	umull	r1, r3, r3, r2
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2164      	movs	r1, #100	; 0x64
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	3332      	adds	r3, #50	; 0x32
 80038e4:	4a08      	ldr	r2, [pc, #32]	; (8003908 <UART_SetConfig+0x4e4>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	f003 020f 	and.w	r2, r3, #15
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4422      	add	r2, r4
 80038f8:	609a      	str	r2, [r3, #8]
}
 80038fa:	bf00      	nop
 80038fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003906:	bf00      	nop
 8003908:	51eb851f 	.word	0x51eb851f

0800390c <__errno>:
 800390c:	4b01      	ldr	r3, [pc, #4]	; (8003914 <__errno+0x8>)
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	2000000c 	.word	0x2000000c

08003918 <__libc_init_array>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	4d0d      	ldr	r5, [pc, #52]	; (8003950 <__libc_init_array+0x38>)
 800391c:	4c0d      	ldr	r4, [pc, #52]	; (8003954 <__libc_init_array+0x3c>)
 800391e:	1b64      	subs	r4, r4, r5
 8003920:	10a4      	asrs	r4, r4, #2
 8003922:	2600      	movs	r6, #0
 8003924:	42a6      	cmp	r6, r4
 8003926:	d109      	bne.n	800393c <__libc_init_array+0x24>
 8003928:	4d0b      	ldr	r5, [pc, #44]	; (8003958 <__libc_init_array+0x40>)
 800392a:	4c0c      	ldr	r4, [pc, #48]	; (800395c <__libc_init_array+0x44>)
 800392c:	f000 fc8e 	bl	800424c <_init>
 8003930:	1b64      	subs	r4, r4, r5
 8003932:	10a4      	asrs	r4, r4, #2
 8003934:	2600      	movs	r6, #0
 8003936:	42a6      	cmp	r6, r4
 8003938:	d105      	bne.n	8003946 <__libc_init_array+0x2e>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003940:	4798      	blx	r3
 8003942:	3601      	adds	r6, #1
 8003944:	e7ee      	b.n	8003924 <__libc_init_array+0xc>
 8003946:	f855 3b04 	ldr.w	r3, [r5], #4
 800394a:	4798      	blx	r3
 800394c:	3601      	adds	r6, #1
 800394e:	e7f2      	b.n	8003936 <__libc_init_array+0x1e>
 8003950:	080042dc 	.word	0x080042dc
 8003954:	080042dc 	.word	0x080042dc
 8003958:	080042dc 	.word	0x080042dc
 800395c:	080042e0 	.word	0x080042e0

08003960 <memcpy>:
 8003960:	440a      	add	r2, r1
 8003962:	4291      	cmp	r1, r2
 8003964:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003968:	d100      	bne.n	800396c <memcpy+0xc>
 800396a:	4770      	bx	lr
 800396c:	b510      	push	{r4, lr}
 800396e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003976:	4291      	cmp	r1, r2
 8003978:	d1f9      	bne.n	800396e <memcpy+0xe>
 800397a:	bd10      	pop	{r4, pc}

0800397c <memset>:
 800397c:	4402      	add	r2, r0
 800397e:	4603      	mov	r3, r0
 8003980:	4293      	cmp	r3, r2
 8003982:	d100      	bne.n	8003986 <memset+0xa>
 8003984:	4770      	bx	lr
 8003986:	f803 1b01 	strb.w	r1, [r3], #1
 800398a:	e7f9      	b.n	8003980 <memset+0x4>

0800398c <siprintf>:
 800398c:	b40e      	push	{r1, r2, r3}
 800398e:	b500      	push	{lr}
 8003990:	b09c      	sub	sp, #112	; 0x70
 8003992:	ab1d      	add	r3, sp, #116	; 0x74
 8003994:	9002      	str	r0, [sp, #8]
 8003996:	9006      	str	r0, [sp, #24]
 8003998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800399c:	4809      	ldr	r0, [pc, #36]	; (80039c4 <siprintf+0x38>)
 800399e:	9107      	str	r1, [sp, #28]
 80039a0:	9104      	str	r1, [sp, #16]
 80039a2:	4909      	ldr	r1, [pc, #36]	; (80039c8 <siprintf+0x3c>)
 80039a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039a8:	9105      	str	r1, [sp, #20]
 80039aa:	6800      	ldr	r0, [r0, #0]
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	a902      	add	r1, sp, #8
 80039b0:	f000 f868 	bl	8003a84 <_svfiprintf_r>
 80039b4:	9b02      	ldr	r3, [sp, #8]
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	b01c      	add	sp, #112	; 0x70
 80039bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80039c0:	b003      	add	sp, #12
 80039c2:	4770      	bx	lr
 80039c4:	2000000c 	.word	0x2000000c
 80039c8:	ffff0208 	.word	0xffff0208

080039cc <__ssputs_r>:
 80039cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d0:	688e      	ldr	r6, [r1, #8]
 80039d2:	429e      	cmp	r6, r3
 80039d4:	4682      	mov	sl, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	4690      	mov	r8, r2
 80039da:	461f      	mov	r7, r3
 80039dc:	d838      	bhi.n	8003a50 <__ssputs_r+0x84>
 80039de:	898a      	ldrh	r2, [r1, #12]
 80039e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039e4:	d032      	beq.n	8003a4c <__ssputs_r+0x80>
 80039e6:	6825      	ldr	r5, [r4, #0]
 80039e8:	6909      	ldr	r1, [r1, #16]
 80039ea:	eba5 0901 	sub.w	r9, r5, r1
 80039ee:	6965      	ldr	r5, [r4, #20]
 80039f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039f8:	3301      	adds	r3, #1
 80039fa:	444b      	add	r3, r9
 80039fc:	106d      	asrs	r5, r5, #1
 80039fe:	429d      	cmp	r5, r3
 8003a00:	bf38      	it	cc
 8003a02:	461d      	movcc	r5, r3
 8003a04:	0553      	lsls	r3, r2, #21
 8003a06:	d531      	bpl.n	8003a6c <__ssputs_r+0xa0>
 8003a08:	4629      	mov	r1, r5
 8003a0a:	f000 fb55 	bl	80040b8 <_malloc_r>
 8003a0e:	4606      	mov	r6, r0
 8003a10:	b950      	cbnz	r0, 8003a28 <__ssputs_r+0x5c>
 8003a12:	230c      	movs	r3, #12
 8003a14:	f8ca 3000 	str.w	r3, [sl]
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a28:	6921      	ldr	r1, [r4, #16]
 8003a2a:	464a      	mov	r2, r9
 8003a2c:	f7ff ff98 	bl	8003960 <memcpy>
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	6126      	str	r6, [r4, #16]
 8003a3e:	6165      	str	r5, [r4, #20]
 8003a40:	444e      	add	r6, r9
 8003a42:	eba5 0509 	sub.w	r5, r5, r9
 8003a46:	6026      	str	r6, [r4, #0]
 8003a48:	60a5      	str	r5, [r4, #8]
 8003a4a:	463e      	mov	r6, r7
 8003a4c:	42be      	cmp	r6, r7
 8003a4e:	d900      	bls.n	8003a52 <__ssputs_r+0x86>
 8003a50:	463e      	mov	r6, r7
 8003a52:	6820      	ldr	r0, [r4, #0]
 8003a54:	4632      	mov	r2, r6
 8003a56:	4641      	mov	r1, r8
 8003a58:	f000 faa8 	bl	8003fac <memmove>
 8003a5c:	68a3      	ldr	r3, [r4, #8]
 8003a5e:	1b9b      	subs	r3, r3, r6
 8003a60:	60a3      	str	r3, [r4, #8]
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	4433      	add	r3, r6
 8003a66:	6023      	str	r3, [r4, #0]
 8003a68:	2000      	movs	r0, #0
 8003a6a:	e7db      	b.n	8003a24 <__ssputs_r+0x58>
 8003a6c:	462a      	mov	r2, r5
 8003a6e:	f000 fb97 	bl	80041a0 <_realloc_r>
 8003a72:	4606      	mov	r6, r0
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d1e1      	bne.n	8003a3c <__ssputs_r+0x70>
 8003a78:	6921      	ldr	r1, [r4, #16]
 8003a7a:	4650      	mov	r0, sl
 8003a7c:	f000 fab0 	bl	8003fe0 <_free_r>
 8003a80:	e7c7      	b.n	8003a12 <__ssputs_r+0x46>
	...

08003a84 <_svfiprintf_r>:
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	4698      	mov	r8, r3
 8003a8a:	898b      	ldrh	r3, [r1, #12]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	b09d      	sub	sp, #116	; 0x74
 8003a90:	4607      	mov	r7, r0
 8003a92:	460d      	mov	r5, r1
 8003a94:	4614      	mov	r4, r2
 8003a96:	d50e      	bpl.n	8003ab6 <_svfiprintf_r+0x32>
 8003a98:	690b      	ldr	r3, [r1, #16]
 8003a9a:	b963      	cbnz	r3, 8003ab6 <_svfiprintf_r+0x32>
 8003a9c:	2140      	movs	r1, #64	; 0x40
 8003a9e:	f000 fb0b 	bl	80040b8 <_malloc_r>
 8003aa2:	6028      	str	r0, [r5, #0]
 8003aa4:	6128      	str	r0, [r5, #16]
 8003aa6:	b920      	cbnz	r0, 8003ab2 <_svfiprintf_r+0x2e>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ab0:	e0d1      	b.n	8003c56 <_svfiprintf_r+0x1d2>
 8003ab2:	2340      	movs	r3, #64	; 0x40
 8003ab4:	616b      	str	r3, [r5, #20]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aba:	2320      	movs	r3, #32
 8003abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ac4:	2330      	movs	r3, #48	; 0x30
 8003ac6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c70 <_svfiprintf_r+0x1ec>
 8003aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ace:	f04f 0901 	mov.w	r9, #1
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	469a      	mov	sl, r3
 8003ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ada:	b10a      	cbz	r2, 8003ae0 <_svfiprintf_r+0x5c>
 8003adc:	2a25      	cmp	r2, #37	; 0x25
 8003ade:	d1f9      	bne.n	8003ad4 <_svfiprintf_r+0x50>
 8003ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ae4:	d00b      	beq.n	8003afe <_svfiprintf_r+0x7a>
 8003ae6:	465b      	mov	r3, fp
 8003ae8:	4622      	mov	r2, r4
 8003aea:	4629      	mov	r1, r5
 8003aec:	4638      	mov	r0, r7
 8003aee:	f7ff ff6d 	bl	80039cc <__ssputs_r>
 8003af2:	3001      	adds	r0, #1
 8003af4:	f000 80aa 	beq.w	8003c4c <_svfiprintf_r+0x1c8>
 8003af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003afa:	445a      	add	r2, fp
 8003afc:	9209      	str	r2, [sp, #36]	; 0x24
 8003afe:	f89a 3000 	ldrb.w	r3, [sl]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80a2 	beq.w	8003c4c <_svfiprintf_r+0x1c8>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b12:	f10a 0a01 	add.w	sl, sl, #1
 8003b16:	9304      	str	r3, [sp, #16]
 8003b18:	9307      	str	r3, [sp, #28]
 8003b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003b20:	4654      	mov	r4, sl
 8003b22:	2205      	movs	r2, #5
 8003b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b28:	4851      	ldr	r0, [pc, #324]	; (8003c70 <_svfiprintf_r+0x1ec>)
 8003b2a:	f7fc fb71 	bl	8000210 <memchr>
 8003b2e:	9a04      	ldr	r2, [sp, #16]
 8003b30:	b9d8      	cbnz	r0, 8003b6a <_svfiprintf_r+0xe6>
 8003b32:	06d0      	lsls	r0, r2, #27
 8003b34:	bf44      	itt	mi
 8003b36:	2320      	movmi	r3, #32
 8003b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b3c:	0711      	lsls	r1, r2, #28
 8003b3e:	bf44      	itt	mi
 8003b40:	232b      	movmi	r3, #43	; 0x2b
 8003b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b46:	f89a 3000 	ldrb.w	r3, [sl]
 8003b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b4c:	d015      	beq.n	8003b7a <_svfiprintf_r+0xf6>
 8003b4e:	9a07      	ldr	r2, [sp, #28]
 8003b50:	4654      	mov	r4, sl
 8003b52:	2000      	movs	r0, #0
 8003b54:	f04f 0c0a 	mov.w	ip, #10
 8003b58:	4621      	mov	r1, r4
 8003b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b5e:	3b30      	subs	r3, #48	; 0x30
 8003b60:	2b09      	cmp	r3, #9
 8003b62:	d94e      	bls.n	8003c02 <_svfiprintf_r+0x17e>
 8003b64:	b1b0      	cbz	r0, 8003b94 <_svfiprintf_r+0x110>
 8003b66:	9207      	str	r2, [sp, #28]
 8003b68:	e014      	b.n	8003b94 <_svfiprintf_r+0x110>
 8003b6a:	eba0 0308 	sub.w	r3, r0, r8
 8003b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b72:	4313      	orrs	r3, r2
 8003b74:	9304      	str	r3, [sp, #16]
 8003b76:	46a2      	mov	sl, r4
 8003b78:	e7d2      	b.n	8003b20 <_svfiprintf_r+0x9c>
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	1d19      	adds	r1, r3, #4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	9103      	str	r1, [sp, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bfbb      	ittet	lt
 8003b86:	425b      	neglt	r3, r3
 8003b88:	f042 0202 	orrlt.w	r2, r2, #2
 8003b8c:	9307      	strge	r3, [sp, #28]
 8003b8e:	9307      	strlt	r3, [sp, #28]
 8003b90:	bfb8      	it	lt
 8003b92:	9204      	strlt	r2, [sp, #16]
 8003b94:	7823      	ldrb	r3, [r4, #0]
 8003b96:	2b2e      	cmp	r3, #46	; 0x2e
 8003b98:	d10c      	bne.n	8003bb4 <_svfiprintf_r+0x130>
 8003b9a:	7863      	ldrb	r3, [r4, #1]
 8003b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b9e:	d135      	bne.n	8003c0c <_svfiprintf_r+0x188>
 8003ba0:	9b03      	ldr	r3, [sp, #12]
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	9203      	str	r2, [sp, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bfb8      	it	lt
 8003bac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003bb0:	3402      	adds	r4, #2
 8003bb2:	9305      	str	r3, [sp, #20]
 8003bb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c80 <_svfiprintf_r+0x1fc>
 8003bb8:	7821      	ldrb	r1, [r4, #0]
 8003bba:	2203      	movs	r2, #3
 8003bbc:	4650      	mov	r0, sl
 8003bbe:	f7fc fb27 	bl	8000210 <memchr>
 8003bc2:	b140      	cbz	r0, 8003bd6 <_svfiprintf_r+0x152>
 8003bc4:	2340      	movs	r3, #64	; 0x40
 8003bc6:	eba0 000a 	sub.w	r0, r0, sl
 8003bca:	fa03 f000 	lsl.w	r0, r3, r0
 8003bce:	9b04      	ldr	r3, [sp, #16]
 8003bd0:	4303      	orrs	r3, r0
 8003bd2:	3401      	adds	r4, #1
 8003bd4:	9304      	str	r3, [sp, #16]
 8003bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bda:	4826      	ldr	r0, [pc, #152]	; (8003c74 <_svfiprintf_r+0x1f0>)
 8003bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003be0:	2206      	movs	r2, #6
 8003be2:	f7fc fb15 	bl	8000210 <memchr>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d038      	beq.n	8003c5c <_svfiprintf_r+0x1d8>
 8003bea:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <_svfiprintf_r+0x1f4>)
 8003bec:	bb1b      	cbnz	r3, 8003c36 <_svfiprintf_r+0x1b2>
 8003bee:	9b03      	ldr	r3, [sp, #12]
 8003bf0:	3307      	adds	r3, #7
 8003bf2:	f023 0307 	bic.w	r3, r3, #7
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	9303      	str	r3, [sp, #12]
 8003bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bfc:	4433      	add	r3, r6
 8003bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003c00:	e767      	b.n	8003ad2 <_svfiprintf_r+0x4e>
 8003c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c06:	460c      	mov	r4, r1
 8003c08:	2001      	movs	r0, #1
 8003c0a:	e7a5      	b.n	8003b58 <_svfiprintf_r+0xd4>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	3401      	adds	r4, #1
 8003c10:	9305      	str	r3, [sp, #20]
 8003c12:	4619      	mov	r1, r3
 8003c14:	f04f 0c0a 	mov.w	ip, #10
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c1e:	3a30      	subs	r2, #48	; 0x30
 8003c20:	2a09      	cmp	r2, #9
 8003c22:	d903      	bls.n	8003c2c <_svfiprintf_r+0x1a8>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0c5      	beq.n	8003bb4 <_svfiprintf_r+0x130>
 8003c28:	9105      	str	r1, [sp, #20]
 8003c2a:	e7c3      	b.n	8003bb4 <_svfiprintf_r+0x130>
 8003c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c30:	4604      	mov	r4, r0
 8003c32:	2301      	movs	r3, #1
 8003c34:	e7f0      	b.n	8003c18 <_svfiprintf_r+0x194>
 8003c36:	ab03      	add	r3, sp, #12
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	462a      	mov	r2, r5
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <_svfiprintf_r+0x1f8>)
 8003c3e:	a904      	add	r1, sp, #16
 8003c40:	4638      	mov	r0, r7
 8003c42:	f3af 8000 	nop.w
 8003c46:	1c42      	adds	r2, r0, #1
 8003c48:	4606      	mov	r6, r0
 8003c4a:	d1d6      	bne.n	8003bfa <_svfiprintf_r+0x176>
 8003c4c:	89ab      	ldrh	r3, [r5, #12]
 8003c4e:	065b      	lsls	r3, r3, #25
 8003c50:	f53f af2c 	bmi.w	8003aac <_svfiprintf_r+0x28>
 8003c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c56:	b01d      	add	sp, #116	; 0x74
 8003c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5c:	ab03      	add	r3, sp, #12
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	462a      	mov	r2, r5
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <_svfiprintf_r+0x1f8>)
 8003c64:	a904      	add	r1, sp, #16
 8003c66:	4638      	mov	r0, r7
 8003c68:	f000 f87a 	bl	8003d60 <_printf_i>
 8003c6c:	e7eb      	b.n	8003c46 <_svfiprintf_r+0x1c2>
 8003c6e:	bf00      	nop
 8003c70:	080042a0 	.word	0x080042a0
 8003c74:	080042aa 	.word	0x080042aa
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	080039cd 	.word	0x080039cd
 8003c80:	080042a6 	.word	0x080042a6

08003c84 <_printf_common>:
 8003c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c88:	4616      	mov	r6, r2
 8003c8a:	4699      	mov	r9, r3
 8003c8c:	688a      	ldr	r2, [r1, #8]
 8003c8e:	690b      	ldr	r3, [r1, #16]
 8003c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bfb8      	it	lt
 8003c98:	4613      	movlt	r3, r2
 8003c9a:	6033      	str	r3, [r6, #0]
 8003c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	b10a      	cbz	r2, 8003caa <_printf_common+0x26>
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	6033      	str	r3, [r6, #0]
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	0699      	lsls	r1, r3, #26
 8003cae:	bf42      	ittt	mi
 8003cb0:	6833      	ldrmi	r3, [r6, #0]
 8003cb2:	3302      	addmi	r3, #2
 8003cb4:	6033      	strmi	r3, [r6, #0]
 8003cb6:	6825      	ldr	r5, [r4, #0]
 8003cb8:	f015 0506 	ands.w	r5, r5, #6
 8003cbc:	d106      	bne.n	8003ccc <_printf_common+0x48>
 8003cbe:	f104 0a19 	add.w	sl, r4, #25
 8003cc2:	68e3      	ldr	r3, [r4, #12]
 8003cc4:	6832      	ldr	r2, [r6, #0]
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	42ab      	cmp	r3, r5
 8003cca:	dc26      	bgt.n	8003d1a <_printf_common+0x96>
 8003ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cd0:	1e13      	subs	r3, r2, #0
 8003cd2:	6822      	ldr	r2, [r4, #0]
 8003cd4:	bf18      	it	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	0692      	lsls	r2, r2, #26
 8003cda:	d42b      	bmi.n	8003d34 <_printf_common+0xb0>
 8003cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	47c0      	blx	r8
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d01e      	beq.n	8003d28 <_printf_common+0xa4>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	68e5      	ldr	r5, [r4, #12]
 8003cee:	6832      	ldr	r2, [r6, #0]
 8003cf0:	f003 0306 	and.w	r3, r3, #6
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	bf08      	it	eq
 8003cf8:	1aad      	subeq	r5, r5, r2
 8003cfa:	68a3      	ldr	r3, [r4, #8]
 8003cfc:	6922      	ldr	r2, [r4, #16]
 8003cfe:	bf0c      	ite	eq
 8003d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d04:	2500      	movne	r5, #0
 8003d06:	4293      	cmp	r3, r2
 8003d08:	bfc4      	itt	gt
 8003d0a:	1a9b      	subgt	r3, r3, r2
 8003d0c:	18ed      	addgt	r5, r5, r3
 8003d0e:	2600      	movs	r6, #0
 8003d10:	341a      	adds	r4, #26
 8003d12:	42b5      	cmp	r5, r6
 8003d14:	d11a      	bne.n	8003d4c <_printf_common+0xc8>
 8003d16:	2000      	movs	r0, #0
 8003d18:	e008      	b.n	8003d2c <_printf_common+0xa8>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4652      	mov	r2, sl
 8003d1e:	4649      	mov	r1, r9
 8003d20:	4638      	mov	r0, r7
 8003d22:	47c0      	blx	r8
 8003d24:	3001      	adds	r0, #1
 8003d26:	d103      	bne.n	8003d30 <_printf_common+0xac>
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d30:	3501      	adds	r5, #1
 8003d32:	e7c6      	b.n	8003cc2 <_printf_common+0x3e>
 8003d34:	18e1      	adds	r1, r4, r3
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	2030      	movs	r0, #48	; 0x30
 8003d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d3e:	4422      	add	r2, r4
 8003d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d48:	3302      	adds	r3, #2
 8003d4a:	e7c7      	b.n	8003cdc <_printf_common+0x58>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4622      	mov	r2, r4
 8003d50:	4649      	mov	r1, r9
 8003d52:	4638      	mov	r0, r7
 8003d54:	47c0      	blx	r8
 8003d56:	3001      	adds	r0, #1
 8003d58:	d0e6      	beq.n	8003d28 <_printf_common+0xa4>
 8003d5a:	3601      	adds	r6, #1
 8003d5c:	e7d9      	b.n	8003d12 <_printf_common+0x8e>
	...

08003d60 <_printf_i>:
 8003d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d64:	7e0f      	ldrb	r7, [r1, #24]
 8003d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d68:	2f78      	cmp	r7, #120	; 0x78
 8003d6a:	4691      	mov	r9, r2
 8003d6c:	4680      	mov	r8, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	469a      	mov	sl, r3
 8003d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d76:	d807      	bhi.n	8003d88 <_printf_i+0x28>
 8003d78:	2f62      	cmp	r7, #98	; 0x62
 8003d7a:	d80a      	bhi.n	8003d92 <_printf_i+0x32>
 8003d7c:	2f00      	cmp	r7, #0
 8003d7e:	f000 80d8 	beq.w	8003f32 <_printf_i+0x1d2>
 8003d82:	2f58      	cmp	r7, #88	; 0x58
 8003d84:	f000 80a3 	beq.w	8003ece <_printf_i+0x16e>
 8003d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d90:	e03a      	b.n	8003e08 <_printf_i+0xa8>
 8003d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d96:	2b15      	cmp	r3, #21
 8003d98:	d8f6      	bhi.n	8003d88 <_printf_i+0x28>
 8003d9a:	a101      	add	r1, pc, #4	; (adr r1, 8003da0 <_printf_i+0x40>)
 8003d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003e0d 	.word	0x08003e0d
 8003da8:	08003d89 	.word	0x08003d89
 8003dac:	08003d89 	.word	0x08003d89
 8003db0:	08003d89 	.word	0x08003d89
 8003db4:	08003d89 	.word	0x08003d89
 8003db8:	08003e0d 	.word	0x08003e0d
 8003dbc:	08003d89 	.word	0x08003d89
 8003dc0:	08003d89 	.word	0x08003d89
 8003dc4:	08003d89 	.word	0x08003d89
 8003dc8:	08003d89 	.word	0x08003d89
 8003dcc:	08003f19 	.word	0x08003f19
 8003dd0:	08003e3d 	.word	0x08003e3d
 8003dd4:	08003efb 	.word	0x08003efb
 8003dd8:	08003d89 	.word	0x08003d89
 8003ddc:	08003d89 	.word	0x08003d89
 8003de0:	08003f3b 	.word	0x08003f3b
 8003de4:	08003d89 	.word	0x08003d89
 8003de8:	08003e3d 	.word	0x08003e3d
 8003dec:	08003d89 	.word	0x08003d89
 8003df0:	08003d89 	.word	0x08003d89
 8003df4:	08003f03 	.word	0x08003f03
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	1d1a      	adds	r2, r3, #4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	602a      	str	r2, [r5, #0]
 8003e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0a3      	b.n	8003f54 <_printf_i+0x1f4>
 8003e0c:	6820      	ldr	r0, [r4, #0]
 8003e0e:	6829      	ldr	r1, [r5, #0]
 8003e10:	0606      	lsls	r6, r0, #24
 8003e12:	f101 0304 	add.w	r3, r1, #4
 8003e16:	d50a      	bpl.n	8003e2e <_printf_i+0xce>
 8003e18:	680e      	ldr	r6, [r1, #0]
 8003e1a:	602b      	str	r3, [r5, #0]
 8003e1c:	2e00      	cmp	r6, #0
 8003e1e:	da03      	bge.n	8003e28 <_printf_i+0xc8>
 8003e20:	232d      	movs	r3, #45	; 0x2d
 8003e22:	4276      	negs	r6, r6
 8003e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e28:	485e      	ldr	r0, [pc, #376]	; (8003fa4 <_printf_i+0x244>)
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	e019      	b.n	8003e62 <_printf_i+0x102>
 8003e2e:	680e      	ldr	r6, [r1, #0]
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e36:	bf18      	it	ne
 8003e38:	b236      	sxthne	r6, r6
 8003e3a:	e7ef      	b.n	8003e1c <_printf_i+0xbc>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	6820      	ldr	r0, [r4, #0]
 8003e40:	1d19      	adds	r1, r3, #4
 8003e42:	6029      	str	r1, [r5, #0]
 8003e44:	0601      	lsls	r1, r0, #24
 8003e46:	d501      	bpl.n	8003e4c <_printf_i+0xec>
 8003e48:	681e      	ldr	r6, [r3, #0]
 8003e4a:	e002      	b.n	8003e52 <_printf_i+0xf2>
 8003e4c:	0646      	lsls	r6, r0, #25
 8003e4e:	d5fb      	bpl.n	8003e48 <_printf_i+0xe8>
 8003e50:	881e      	ldrh	r6, [r3, #0]
 8003e52:	4854      	ldr	r0, [pc, #336]	; (8003fa4 <_printf_i+0x244>)
 8003e54:	2f6f      	cmp	r7, #111	; 0x6f
 8003e56:	bf0c      	ite	eq
 8003e58:	2308      	moveq	r3, #8
 8003e5a:	230a      	movne	r3, #10
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e62:	6865      	ldr	r5, [r4, #4]
 8003e64:	60a5      	str	r5, [r4, #8]
 8003e66:	2d00      	cmp	r5, #0
 8003e68:	bfa2      	ittt	ge
 8003e6a:	6821      	ldrge	r1, [r4, #0]
 8003e6c:	f021 0104 	bicge.w	r1, r1, #4
 8003e70:	6021      	strge	r1, [r4, #0]
 8003e72:	b90e      	cbnz	r6, 8003e78 <_printf_i+0x118>
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	d04d      	beq.n	8003f14 <_printf_i+0x1b4>
 8003e78:	4615      	mov	r5, r2
 8003e7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e7e:	fb03 6711 	mls	r7, r3, r1, r6
 8003e82:	5dc7      	ldrb	r7, [r0, r7]
 8003e84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e88:	4637      	mov	r7, r6
 8003e8a:	42bb      	cmp	r3, r7
 8003e8c:	460e      	mov	r6, r1
 8003e8e:	d9f4      	bls.n	8003e7a <_printf_i+0x11a>
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d10b      	bne.n	8003eac <_printf_i+0x14c>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	07de      	lsls	r6, r3, #31
 8003e98:	d508      	bpl.n	8003eac <_printf_i+0x14c>
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	6861      	ldr	r1, [r4, #4]
 8003e9e:	4299      	cmp	r1, r3
 8003ea0:	bfde      	ittt	le
 8003ea2:	2330      	movle	r3, #48	; 0x30
 8003ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ea8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003eac:	1b52      	subs	r2, r2, r5
 8003eae:	6122      	str	r2, [r4, #16]
 8003eb0:	f8cd a000 	str.w	sl, [sp]
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	aa03      	add	r2, sp, #12
 8003eb8:	4621      	mov	r1, r4
 8003eba:	4640      	mov	r0, r8
 8003ebc:	f7ff fee2 	bl	8003c84 <_printf_common>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d14c      	bne.n	8003f5e <_printf_i+0x1fe>
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ec8:	b004      	add	sp, #16
 8003eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ece:	4835      	ldr	r0, [pc, #212]	; (8003fa4 <_printf_i+0x244>)
 8003ed0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ed4:	6829      	ldr	r1, [r5, #0]
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003edc:	6029      	str	r1, [r5, #0]
 8003ede:	061d      	lsls	r5, r3, #24
 8003ee0:	d514      	bpl.n	8003f0c <_printf_i+0x1ac>
 8003ee2:	07df      	lsls	r7, r3, #31
 8003ee4:	bf44      	itt	mi
 8003ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8003eea:	6023      	strmi	r3, [r4, #0]
 8003eec:	b91e      	cbnz	r6, 8003ef6 <_printf_i+0x196>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	f023 0320 	bic.w	r3, r3, #32
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	e7b0      	b.n	8003e5c <_printf_i+0xfc>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	f043 0320 	orr.w	r3, r3, #32
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	2378      	movs	r3, #120	; 0x78
 8003f04:	4828      	ldr	r0, [pc, #160]	; (8003fa8 <_printf_i+0x248>)
 8003f06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f0a:	e7e3      	b.n	8003ed4 <_printf_i+0x174>
 8003f0c:	0659      	lsls	r1, r3, #25
 8003f0e:	bf48      	it	mi
 8003f10:	b2b6      	uxthmi	r6, r6
 8003f12:	e7e6      	b.n	8003ee2 <_printf_i+0x182>
 8003f14:	4615      	mov	r5, r2
 8003f16:	e7bb      	b.n	8003e90 <_printf_i+0x130>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	6826      	ldr	r6, [r4, #0]
 8003f1c:	6961      	ldr	r1, [r4, #20]
 8003f1e:	1d18      	adds	r0, r3, #4
 8003f20:	6028      	str	r0, [r5, #0]
 8003f22:	0635      	lsls	r5, r6, #24
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	d501      	bpl.n	8003f2c <_printf_i+0x1cc>
 8003f28:	6019      	str	r1, [r3, #0]
 8003f2a:	e002      	b.n	8003f32 <_printf_i+0x1d2>
 8003f2c:	0670      	lsls	r0, r6, #25
 8003f2e:	d5fb      	bpl.n	8003f28 <_printf_i+0x1c8>
 8003f30:	8019      	strh	r1, [r3, #0]
 8003f32:	2300      	movs	r3, #0
 8003f34:	6123      	str	r3, [r4, #16]
 8003f36:	4615      	mov	r5, r2
 8003f38:	e7ba      	b.n	8003eb0 <_printf_i+0x150>
 8003f3a:	682b      	ldr	r3, [r5, #0]
 8003f3c:	1d1a      	adds	r2, r3, #4
 8003f3e:	602a      	str	r2, [r5, #0]
 8003f40:	681d      	ldr	r5, [r3, #0]
 8003f42:	6862      	ldr	r2, [r4, #4]
 8003f44:	2100      	movs	r1, #0
 8003f46:	4628      	mov	r0, r5
 8003f48:	f7fc f962 	bl	8000210 <memchr>
 8003f4c:	b108      	cbz	r0, 8003f52 <_printf_i+0x1f2>
 8003f4e:	1b40      	subs	r0, r0, r5
 8003f50:	6060      	str	r0, [r4, #4]
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	6123      	str	r3, [r4, #16]
 8003f56:	2300      	movs	r3, #0
 8003f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f5c:	e7a8      	b.n	8003eb0 <_printf_i+0x150>
 8003f5e:	6923      	ldr	r3, [r4, #16]
 8003f60:	462a      	mov	r2, r5
 8003f62:	4649      	mov	r1, r9
 8003f64:	4640      	mov	r0, r8
 8003f66:	47d0      	blx	sl
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d0ab      	beq.n	8003ec4 <_printf_i+0x164>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	079b      	lsls	r3, r3, #30
 8003f70:	d413      	bmi.n	8003f9a <_printf_i+0x23a>
 8003f72:	68e0      	ldr	r0, [r4, #12]
 8003f74:	9b03      	ldr	r3, [sp, #12]
 8003f76:	4298      	cmp	r0, r3
 8003f78:	bfb8      	it	lt
 8003f7a:	4618      	movlt	r0, r3
 8003f7c:	e7a4      	b.n	8003ec8 <_printf_i+0x168>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4632      	mov	r2, r6
 8003f82:	4649      	mov	r1, r9
 8003f84:	4640      	mov	r0, r8
 8003f86:	47d0      	blx	sl
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d09b      	beq.n	8003ec4 <_printf_i+0x164>
 8003f8c:	3501      	adds	r5, #1
 8003f8e:	68e3      	ldr	r3, [r4, #12]
 8003f90:	9903      	ldr	r1, [sp, #12]
 8003f92:	1a5b      	subs	r3, r3, r1
 8003f94:	42ab      	cmp	r3, r5
 8003f96:	dcf2      	bgt.n	8003f7e <_printf_i+0x21e>
 8003f98:	e7eb      	b.n	8003f72 <_printf_i+0x212>
 8003f9a:	2500      	movs	r5, #0
 8003f9c:	f104 0619 	add.w	r6, r4, #25
 8003fa0:	e7f5      	b.n	8003f8e <_printf_i+0x22e>
 8003fa2:	bf00      	nop
 8003fa4:	080042b1 	.word	0x080042b1
 8003fa8:	080042c2 	.word	0x080042c2

08003fac <memmove>:
 8003fac:	4288      	cmp	r0, r1
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	eb01 0402 	add.w	r4, r1, r2
 8003fb4:	d902      	bls.n	8003fbc <memmove+0x10>
 8003fb6:	4284      	cmp	r4, r0
 8003fb8:	4623      	mov	r3, r4
 8003fba:	d807      	bhi.n	8003fcc <memmove+0x20>
 8003fbc:	1e43      	subs	r3, r0, #1
 8003fbe:	42a1      	cmp	r1, r4
 8003fc0:	d008      	beq.n	8003fd4 <memmove+0x28>
 8003fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fca:	e7f8      	b.n	8003fbe <memmove+0x12>
 8003fcc:	4402      	add	r2, r0
 8003fce:	4601      	mov	r1, r0
 8003fd0:	428a      	cmp	r2, r1
 8003fd2:	d100      	bne.n	8003fd6 <memmove+0x2a>
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fde:	e7f7      	b.n	8003fd0 <memmove+0x24>

08003fe0 <_free_r>:
 8003fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fe2:	2900      	cmp	r1, #0
 8003fe4:	d044      	beq.n	8004070 <_free_r+0x90>
 8003fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fea:	9001      	str	r0, [sp, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f1a1 0404 	sub.w	r4, r1, #4
 8003ff2:	bfb8      	it	lt
 8003ff4:	18e4      	addlt	r4, r4, r3
 8003ff6:	f000 f913 	bl	8004220 <__malloc_lock>
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <_free_r+0x94>)
 8003ffc:	9801      	ldr	r0, [sp, #4]
 8003ffe:	6813      	ldr	r3, [r2, #0]
 8004000:	b933      	cbnz	r3, 8004010 <_free_r+0x30>
 8004002:	6063      	str	r3, [r4, #4]
 8004004:	6014      	str	r4, [r2, #0]
 8004006:	b003      	add	sp, #12
 8004008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800400c:	f000 b90e 	b.w	800422c <__malloc_unlock>
 8004010:	42a3      	cmp	r3, r4
 8004012:	d908      	bls.n	8004026 <_free_r+0x46>
 8004014:	6825      	ldr	r5, [r4, #0]
 8004016:	1961      	adds	r1, r4, r5
 8004018:	428b      	cmp	r3, r1
 800401a:	bf01      	itttt	eq
 800401c:	6819      	ldreq	r1, [r3, #0]
 800401e:	685b      	ldreq	r3, [r3, #4]
 8004020:	1949      	addeq	r1, r1, r5
 8004022:	6021      	streq	r1, [r4, #0]
 8004024:	e7ed      	b.n	8004002 <_free_r+0x22>
 8004026:	461a      	mov	r2, r3
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	b10b      	cbz	r3, 8004030 <_free_r+0x50>
 800402c:	42a3      	cmp	r3, r4
 800402e:	d9fa      	bls.n	8004026 <_free_r+0x46>
 8004030:	6811      	ldr	r1, [r2, #0]
 8004032:	1855      	adds	r5, r2, r1
 8004034:	42a5      	cmp	r5, r4
 8004036:	d10b      	bne.n	8004050 <_free_r+0x70>
 8004038:	6824      	ldr	r4, [r4, #0]
 800403a:	4421      	add	r1, r4
 800403c:	1854      	adds	r4, r2, r1
 800403e:	42a3      	cmp	r3, r4
 8004040:	6011      	str	r1, [r2, #0]
 8004042:	d1e0      	bne.n	8004006 <_free_r+0x26>
 8004044:	681c      	ldr	r4, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	6053      	str	r3, [r2, #4]
 800404a:	4421      	add	r1, r4
 800404c:	6011      	str	r1, [r2, #0]
 800404e:	e7da      	b.n	8004006 <_free_r+0x26>
 8004050:	d902      	bls.n	8004058 <_free_r+0x78>
 8004052:	230c      	movs	r3, #12
 8004054:	6003      	str	r3, [r0, #0]
 8004056:	e7d6      	b.n	8004006 <_free_r+0x26>
 8004058:	6825      	ldr	r5, [r4, #0]
 800405a:	1961      	adds	r1, r4, r5
 800405c:	428b      	cmp	r3, r1
 800405e:	bf04      	itt	eq
 8004060:	6819      	ldreq	r1, [r3, #0]
 8004062:	685b      	ldreq	r3, [r3, #4]
 8004064:	6063      	str	r3, [r4, #4]
 8004066:	bf04      	itt	eq
 8004068:	1949      	addeq	r1, r1, r5
 800406a:	6021      	streq	r1, [r4, #0]
 800406c:	6054      	str	r4, [r2, #4]
 800406e:	e7ca      	b.n	8004006 <_free_r+0x26>
 8004070:	b003      	add	sp, #12
 8004072:	bd30      	pop	{r4, r5, pc}
 8004074:	200001bc 	.word	0x200001bc

08004078 <sbrk_aligned>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	4e0e      	ldr	r6, [pc, #56]	; (80040b4 <sbrk_aligned+0x3c>)
 800407c:	460c      	mov	r4, r1
 800407e:	6831      	ldr	r1, [r6, #0]
 8004080:	4605      	mov	r5, r0
 8004082:	b911      	cbnz	r1, 800408a <sbrk_aligned+0x12>
 8004084:	f000 f8bc 	bl	8004200 <_sbrk_r>
 8004088:	6030      	str	r0, [r6, #0]
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f000 f8b7 	bl	8004200 <_sbrk_r>
 8004092:	1c43      	adds	r3, r0, #1
 8004094:	d00a      	beq.n	80040ac <sbrk_aligned+0x34>
 8004096:	1cc4      	adds	r4, r0, #3
 8004098:	f024 0403 	bic.w	r4, r4, #3
 800409c:	42a0      	cmp	r0, r4
 800409e:	d007      	beq.n	80040b0 <sbrk_aligned+0x38>
 80040a0:	1a21      	subs	r1, r4, r0
 80040a2:	4628      	mov	r0, r5
 80040a4:	f000 f8ac 	bl	8004200 <_sbrk_r>
 80040a8:	3001      	adds	r0, #1
 80040aa:	d101      	bne.n	80040b0 <sbrk_aligned+0x38>
 80040ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80040b0:	4620      	mov	r0, r4
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	200001c0 	.word	0x200001c0

080040b8 <_malloc_r>:
 80040b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040bc:	1ccd      	adds	r5, r1, #3
 80040be:	f025 0503 	bic.w	r5, r5, #3
 80040c2:	3508      	adds	r5, #8
 80040c4:	2d0c      	cmp	r5, #12
 80040c6:	bf38      	it	cc
 80040c8:	250c      	movcc	r5, #12
 80040ca:	2d00      	cmp	r5, #0
 80040cc:	4607      	mov	r7, r0
 80040ce:	db01      	blt.n	80040d4 <_malloc_r+0x1c>
 80040d0:	42a9      	cmp	r1, r5
 80040d2:	d905      	bls.n	80040e0 <_malloc_r+0x28>
 80040d4:	230c      	movs	r3, #12
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	2600      	movs	r6, #0
 80040da:	4630      	mov	r0, r6
 80040dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e0:	4e2e      	ldr	r6, [pc, #184]	; (800419c <_malloc_r+0xe4>)
 80040e2:	f000 f89d 	bl	8004220 <__malloc_lock>
 80040e6:	6833      	ldr	r3, [r6, #0]
 80040e8:	461c      	mov	r4, r3
 80040ea:	bb34      	cbnz	r4, 800413a <_malloc_r+0x82>
 80040ec:	4629      	mov	r1, r5
 80040ee:	4638      	mov	r0, r7
 80040f0:	f7ff ffc2 	bl	8004078 <sbrk_aligned>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	4604      	mov	r4, r0
 80040f8:	d14d      	bne.n	8004196 <_malloc_r+0xde>
 80040fa:	6834      	ldr	r4, [r6, #0]
 80040fc:	4626      	mov	r6, r4
 80040fe:	2e00      	cmp	r6, #0
 8004100:	d140      	bne.n	8004184 <_malloc_r+0xcc>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	4631      	mov	r1, r6
 8004106:	4638      	mov	r0, r7
 8004108:	eb04 0803 	add.w	r8, r4, r3
 800410c:	f000 f878 	bl	8004200 <_sbrk_r>
 8004110:	4580      	cmp	r8, r0
 8004112:	d13a      	bne.n	800418a <_malloc_r+0xd2>
 8004114:	6821      	ldr	r1, [r4, #0]
 8004116:	3503      	adds	r5, #3
 8004118:	1a6d      	subs	r5, r5, r1
 800411a:	f025 0503 	bic.w	r5, r5, #3
 800411e:	3508      	adds	r5, #8
 8004120:	2d0c      	cmp	r5, #12
 8004122:	bf38      	it	cc
 8004124:	250c      	movcc	r5, #12
 8004126:	4629      	mov	r1, r5
 8004128:	4638      	mov	r0, r7
 800412a:	f7ff ffa5 	bl	8004078 <sbrk_aligned>
 800412e:	3001      	adds	r0, #1
 8004130:	d02b      	beq.n	800418a <_malloc_r+0xd2>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	442b      	add	r3, r5
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	e00e      	b.n	8004158 <_malloc_r+0xa0>
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	1b52      	subs	r2, r2, r5
 800413e:	d41e      	bmi.n	800417e <_malloc_r+0xc6>
 8004140:	2a0b      	cmp	r2, #11
 8004142:	d916      	bls.n	8004172 <_malloc_r+0xba>
 8004144:	1961      	adds	r1, r4, r5
 8004146:	42a3      	cmp	r3, r4
 8004148:	6025      	str	r5, [r4, #0]
 800414a:	bf18      	it	ne
 800414c:	6059      	strne	r1, [r3, #4]
 800414e:	6863      	ldr	r3, [r4, #4]
 8004150:	bf08      	it	eq
 8004152:	6031      	streq	r1, [r6, #0]
 8004154:	5162      	str	r2, [r4, r5]
 8004156:	604b      	str	r3, [r1, #4]
 8004158:	4638      	mov	r0, r7
 800415a:	f104 060b 	add.w	r6, r4, #11
 800415e:	f000 f865 	bl	800422c <__malloc_unlock>
 8004162:	f026 0607 	bic.w	r6, r6, #7
 8004166:	1d23      	adds	r3, r4, #4
 8004168:	1af2      	subs	r2, r6, r3
 800416a:	d0b6      	beq.n	80040da <_malloc_r+0x22>
 800416c:	1b9b      	subs	r3, r3, r6
 800416e:	50a3      	str	r3, [r4, r2]
 8004170:	e7b3      	b.n	80040da <_malloc_r+0x22>
 8004172:	6862      	ldr	r2, [r4, #4]
 8004174:	42a3      	cmp	r3, r4
 8004176:	bf0c      	ite	eq
 8004178:	6032      	streq	r2, [r6, #0]
 800417a:	605a      	strne	r2, [r3, #4]
 800417c:	e7ec      	b.n	8004158 <_malloc_r+0xa0>
 800417e:	4623      	mov	r3, r4
 8004180:	6864      	ldr	r4, [r4, #4]
 8004182:	e7b2      	b.n	80040ea <_malloc_r+0x32>
 8004184:	4634      	mov	r4, r6
 8004186:	6876      	ldr	r6, [r6, #4]
 8004188:	e7b9      	b.n	80040fe <_malloc_r+0x46>
 800418a:	230c      	movs	r3, #12
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4638      	mov	r0, r7
 8004190:	f000 f84c 	bl	800422c <__malloc_unlock>
 8004194:	e7a1      	b.n	80040da <_malloc_r+0x22>
 8004196:	6025      	str	r5, [r4, #0]
 8004198:	e7de      	b.n	8004158 <_malloc_r+0xa0>
 800419a:	bf00      	nop
 800419c:	200001bc 	.word	0x200001bc

080041a0 <_realloc_r>:
 80041a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a4:	4680      	mov	r8, r0
 80041a6:	4614      	mov	r4, r2
 80041a8:	460e      	mov	r6, r1
 80041aa:	b921      	cbnz	r1, 80041b6 <_realloc_r+0x16>
 80041ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b0:	4611      	mov	r1, r2
 80041b2:	f7ff bf81 	b.w	80040b8 <_malloc_r>
 80041b6:	b92a      	cbnz	r2, 80041c4 <_realloc_r+0x24>
 80041b8:	f7ff ff12 	bl	8003fe0 <_free_r>
 80041bc:	4625      	mov	r5, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c4:	f000 f838 	bl	8004238 <_malloc_usable_size_r>
 80041c8:	4284      	cmp	r4, r0
 80041ca:	4607      	mov	r7, r0
 80041cc:	d802      	bhi.n	80041d4 <_realloc_r+0x34>
 80041ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041d2:	d812      	bhi.n	80041fa <_realloc_r+0x5a>
 80041d4:	4621      	mov	r1, r4
 80041d6:	4640      	mov	r0, r8
 80041d8:	f7ff ff6e 	bl	80040b8 <_malloc_r>
 80041dc:	4605      	mov	r5, r0
 80041de:	2800      	cmp	r0, #0
 80041e0:	d0ed      	beq.n	80041be <_realloc_r+0x1e>
 80041e2:	42bc      	cmp	r4, r7
 80041e4:	4622      	mov	r2, r4
 80041e6:	4631      	mov	r1, r6
 80041e8:	bf28      	it	cs
 80041ea:	463a      	movcs	r2, r7
 80041ec:	f7ff fbb8 	bl	8003960 <memcpy>
 80041f0:	4631      	mov	r1, r6
 80041f2:	4640      	mov	r0, r8
 80041f4:	f7ff fef4 	bl	8003fe0 <_free_r>
 80041f8:	e7e1      	b.n	80041be <_realloc_r+0x1e>
 80041fa:	4635      	mov	r5, r6
 80041fc:	e7df      	b.n	80041be <_realloc_r+0x1e>
	...

08004200 <_sbrk_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	4d06      	ldr	r5, [pc, #24]	; (800421c <_sbrk_r+0x1c>)
 8004204:	2300      	movs	r3, #0
 8004206:	4604      	mov	r4, r0
 8004208:	4608      	mov	r0, r1
 800420a:	602b      	str	r3, [r5, #0]
 800420c:	f7fc ff4a 	bl	80010a4 <_sbrk>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_sbrk_r+0x1a>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_sbrk_r+0x1a>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	200001c4 	.word	0x200001c4

08004220 <__malloc_lock>:
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <__malloc_lock+0x8>)
 8004222:	f000 b811 	b.w	8004248 <__retarget_lock_acquire_recursive>
 8004226:	bf00      	nop
 8004228:	200001c8 	.word	0x200001c8

0800422c <__malloc_unlock>:
 800422c:	4801      	ldr	r0, [pc, #4]	; (8004234 <__malloc_unlock+0x8>)
 800422e:	f000 b80c 	b.w	800424a <__retarget_lock_release_recursive>
 8004232:	bf00      	nop
 8004234:	200001c8 	.word	0x200001c8

08004238 <_malloc_usable_size_r>:
 8004238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800423c:	1f18      	subs	r0, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	bfbc      	itt	lt
 8004242:	580b      	ldrlt	r3, [r1, r0]
 8004244:	18c0      	addlt	r0, r0, r3
 8004246:	4770      	bx	lr

08004248 <__retarget_lock_acquire_recursive>:
 8004248:	4770      	bx	lr

0800424a <__retarget_lock_release_recursive>:
 800424a:	4770      	bx	lr

0800424c <_init>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr

08004258 <_fini>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	bf00      	nop
 800425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425e:	bc08      	pop	{r3}
 8004260:	469e      	mov	lr, r3
 8004262:	4770      	bx	lr
