
LVPDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008600  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  080087d0  080087d0  000187d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bbc  08008bbc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008bbc  08008bbc  00018bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bc4  08008bc4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bc4  08008bc4  00018bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200001f4  08008dc0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08008dc0  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e34d  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000206c  00000000  00000000  0002e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  00030620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000979  00000000  00000000  00031238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022dd0  00000000  00000000  00031bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f925  00000000  00000000  00054981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf7ca  00000000  00000000  000642a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004424  00000000  00000000  00133a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00137e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080087b8 	.word	0x080087b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	080087b8 	.word	0x080087b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <FEB_TPS2482_SETUP>:
#include "FEB_TPS2482.h"

void FEB_TPS2482_SETUP(I2C_HandleTypeDef *hi2cp, uint8_t DEV_ADDR, uint8_t CONFIG[], uint8_t CAL_REG[], uint8_t ALERT[], uint8_t LIMIT[]) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	460b      	mov	r3, r1
 8000f92:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x00, 1, CONFIG, 2, HAL_MAX_DELAY); // configure
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	b299      	uxth	r1, r3
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f002 ff16 	bl	8003ddc <HAL_I2C_Mem_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x05, 1, CAL_REG, 2, HAL_MAX_DELAY); // calibrate
 8000fb4:	7afb      	ldrb	r3, [r7, #11]
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2205      	movs	r2, #5
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f002 ff06 	bl	8003ddc <HAL_I2C_Mem_Write>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x06, 1, ALERT, 2, HAL_MAX_DELAY); // set alert
 8000fd4:	7afb      	ldrb	r3, [r7, #11]
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	2206      	movs	r2, #6
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f002 fef6 	bl	8003ddc <HAL_I2C_Mem_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x07, 1, LIMIT, 2, HAL_MAX_DELAY); // set limit
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	b299      	uxth	r1, r3
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2302      	movs	r3, #2
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	2207      	movs	r2, #7
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f002 fee6 	bl	8003ddc <HAL_I2C_Mem_Write>
 8001010:	4603      	mov	r3, r0
 8001012:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//		// error handler
//		__disable_irq();
//		while(1);
//	}
}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	0000      	movs	r0, r0
	...

08001020 <FEB_TPS2482_PollBusCurrent>:

//Brief: Uses I2C to pull current value from a device on the bus
//Param: hi2c Pointer to a I2C_HandleTypeDef structure that contains
//                the configuration information for the specified I2C.
//Param: DEV_ADDR which points to which device on the bus you want to poll
float FEB_TPS2482_PollBusCurrent(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
	//Buffer to store data;
	uint8_t buf[12];
	buf[0] = 4; //4 is the register that stores the current value
 800102c:	2304      	movs	r3, #4
 800102e:	733b      	strb	r3, [r7, #12]
	float returnVal = -1; //Set return val default to -1 as an "error". Not that great since we can actually have negative current
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <FEB_TPS2482_PollBusCurrent+0xe8>)
 8001032:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	b299      	uxth	r1, r3
 8001038:	f107 020c 	add.w	r2, r7, #12
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f002 fba6 	bl	8003794 <HAL_I2C_Master_Transmit>
 8001048:	4603      	mov	r3, r0
 800104a:	76fb      	strb	r3, [r7, #27]
	if(ret == HAL_OK){
 800104c:	7efb      	ldrb	r3, [r7, #27]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d13d      	bne.n	80010ce <FEB_TPS2482_PollBusCurrent+0xae>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2,100);
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	b299      	uxth	r1, r3
 8001056:	f107 020c 	add.w	r2, r7, #12
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2302      	movs	r3, #2
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f002 fc95 	bl	8003990 <HAL_I2C_Master_Receive>
 8001066:	4603      	mov	r3, r0
 8001068:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 800106a:	7efb      	ldrb	r3, [r7, #27]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d12e      	bne.n	80010ce <FEB_TPS2482_PollBusCurrent+0xae>
//			int val = ((int16_t)buf[0] << 4) | (buf[1] >> 4); // combine the 2 bytes
//			val = val - 1;
//			val |= 0xF000;
			int16_t val = ((int16_t)buf[0] << 8) | buf[1];
 8001070:	7b3b      	ldrb	r3, [r7, #12]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7b7b      	ldrb	r3, [r7, #13]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	833b      	strh	r3, [r7, #24]
//			int16_t val = (buf[0]<<8) | buf[1]; //Not sure if little endian or not, needs testing!
//			returnVal = (int)(val * 0.0006 * 1000 * 100); // LSB-weight = 2mA/bit
			returnVal = (int)(val * 0.00046 * 1000 * 100); // Current LSB-weight = .46mA/bit
 800107e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa6e 	bl	8000564 <__aeabi_i2d>
 8001088:	a31d      	add	r3, pc, #116	; (adr r3, 8001100 <FEB_TPS2482_PollBusCurrent+0xe0>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fad3 	bl	8000638 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <FEB_TPS2482_PollBusCurrent+0xec>)
 80010a0:	f7ff faca 	bl	8000638 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <FEB_TPS2482_PollBusCurrent+0xf0>)
 80010b2:	f7ff fac1 	bl	8000638 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd6b 	bl	8000b98 <__aeabi_d2iz>
 80010c2:	ee07 0a90 	vmov	s15, r0
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
//	HAL_I2C_IsDeviceReady(hi2c, DEV_ADDR, 1, 100);
	if(ret == HAL_ERROR) return -2.0;
 80010ce:	7efb      	ldrb	r3, [r7, #27]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d102      	bne.n	80010da <FEB_TPS2482_PollBusCurrent+0xba>
 80010d4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010d8:	e00a      	b.n	80010f0 <FEB_TPS2482_PollBusCurrent+0xd0>
	if(ret == HAL_BUSY) return -3.0;
 80010da:	7efb      	ldrb	r3, [r7, #27]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d101      	bne.n	80010e4 <FEB_TPS2482_PollBusCurrent+0xc4>
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <FEB_TPS2482_PollBusCurrent+0xf4>)
 80010e2:	e005      	b.n	80010f0 <FEB_TPS2482_PollBusCurrent+0xd0>
	if(ret == HAL_TIMEOUT) return -4.0;
 80010e4:	7efb      	ldrb	r3, [r7, #27]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d101      	bne.n	80010ee <FEB_TPS2482_PollBusCurrent+0xce>
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <FEB_TPS2482_PollBusCurrent+0xf8>)
 80010ec:	e000      	b.n	80010f0 <FEB_TPS2482_PollBusCurrent+0xd0>

	return returnVal;
 80010ee:	69fb      	ldr	r3, [r7, #28]
}
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eeb0 0a67 	vmov.f32	s0, s15
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	f4c6e6da 	.word	0xf4c6e6da
 8001104:	3f3e2584 	.word	0x3f3e2584
 8001108:	bf800000 	.word	0xbf800000
 800110c:	408f4000 	.word	0x408f4000
 8001110:	40590000 	.word	0x40590000
 8001114:	c0400000 	.word	0xc0400000
 8001118:	c0800000 	.word	0xc0800000
 800111c:	00000000 	.word	0x00000000

08001120 <FEB_TPS2482_PollShuntVolt>:

//-----------------------
float FEB_TPS2482_PollShuntVolt(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
	//Buffer to store data;
	uint8_t buf[12];
	buf[0] = 1; //1 is the register that stores the shunt voltage value
 800112c:	2301      	movs	r3, #1
 800112e:	733b      	strb	r3, [r7, #12]
	float returnVal = -1; //Set return val default to -1 as an "error". Not that great since we can actually have negative current
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <FEB_TPS2482_PollShuntVolt+0xf0>)
 8001132:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	b299      	uxth	r1, r3
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f002 fb26 	bl	8003794 <HAL_I2C_Master_Transmit>
 8001148:	4603      	mov	r3, r0
 800114a:	76fb      	strb	r3, [r7, #27]
	if(ret == HAL_OK){
 800114c:	7efb      	ldrb	r3, [r7, #27]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d13d      	bne.n	80011ce <FEB_TPS2482_PollShuntVolt+0xae>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2,100);
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	b299      	uxth	r1, r3
 8001156:	f107 020c 	add.w	r2, r7, #12
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2302      	movs	r3, #2
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f002 fc15 	bl	8003990 <HAL_I2C_Master_Receive>
 8001166:	4603      	mov	r3, r0
 8001168:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 800116a:	7efb      	ldrb	r3, [r7, #27]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d12e      	bne.n	80011ce <FEB_TPS2482_PollShuntVolt+0xae>
			int16_t val = ((int16_t)buf[0]<<8) | buf[1]; //Not sure if little endian or not, needs testing!
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	7b7b      	ldrb	r3, [r7, #13]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	833b      	strh	r3, [r7, #24]
			returnVal = (int)(val * 0.0000025 * 1000000 * 100);// convert to decimal and multiply by 2.5uV
 800117e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9ee 	bl	8000564 <__aeabi_i2d>
 8001188:	a31d      	add	r3, pc, #116	; (adr r3, 8001200 <FEB_TPS2482_PollShuntVolt+0xe0>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa53 	bl	8000638 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a31b      	add	r3, pc, #108	; (adr r3, 8001208 <FEB_TPS2482_PollShuntVolt+0xe8>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fa4a 	bl	8000638 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <FEB_TPS2482_PollShuntVolt+0xf4>)
 80011b2:	f7ff fa41 	bl	8000638 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fceb 	bl	8000b98 <__aeabi_d2iz>
 80011c2:	ee07 0a90 	vmov	s15, r0
 80011c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ca:	edc7 7a07 	vstr	s15, [r7, #28]
			// COULD BE IN BINARY, MAP FROM 0 - 2^(ADC conversion factor)
		}
	}
//	HAL_I2C_IsDeviceReady(hi2c, DEV_ADDR, 1, 100);
	if(ret == HAL_ERROR) return -2.0;
 80011ce:	7efb      	ldrb	r3, [r7, #27]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d102      	bne.n	80011da <FEB_TPS2482_PollShuntVolt+0xba>
 80011d4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80011d8:	e00a      	b.n	80011f0 <FEB_TPS2482_PollShuntVolt+0xd0>
	if(ret == HAL_BUSY) return -3.0;
 80011da:	7efb      	ldrb	r3, [r7, #27]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d101      	bne.n	80011e4 <FEB_TPS2482_PollShuntVolt+0xc4>
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <FEB_TPS2482_PollShuntVolt+0xf8>)
 80011e2:	e005      	b.n	80011f0 <FEB_TPS2482_PollShuntVolt+0xd0>
	if(ret == HAL_TIMEOUT) return -4.0;
 80011e4:	7efb      	ldrb	r3, [r7, #27]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d101      	bne.n	80011ee <FEB_TPS2482_PollShuntVolt+0xce>
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <FEB_TPS2482_PollShuntVolt+0xfc>)
 80011ec:	e000      	b.n	80011f0 <FEB_TPS2482_PollShuntVolt+0xd0>

	return returnVal;
 80011ee:	69fb      	ldr	r3, [r7, #28]
}
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eeb0 0a67 	vmov.f32	s0, s15
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	88e368f1 	.word	0x88e368f1
 8001204:	3ec4f8b5 	.word	0x3ec4f8b5
 8001208:	00000000 	.word	0x00000000
 800120c:	412e8480 	.word	0x412e8480
 8001210:	bf800000 	.word	0xbf800000
 8001214:	40590000 	.word	0x40590000
 8001218:	c0400000 	.word	0xc0400000
 800121c:	c0800000 	.word	0xc0800000

08001220 <FEB_TPS2482_PollBusVolt>:

float FEB_TPS2482_PollBusVolt(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af02      	add	r7, sp, #8
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
	//Buffer to store data;
	uint8_t buf[12];
	buf[0] = 2; //1 is the register that stores the bus voltage value
 800122c:	2302      	movs	r3, #2
 800122e:	723b      	strb	r3, [r7, #8]
	float returnVal = -1; //Set return val default to -1 as an "error". Not that great since we can actually have negative current
 8001230:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <FEB_TPS2482_PollBusVolt+0xd8>)
 8001232:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	b299      	uxth	r1, r3
 8001238:	f107 0208 	add.w	r2, r7, #8
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f002 faa6 	bl	8003794 <HAL_I2C_Master_Transmit>
 8001248:	4603      	mov	r3, r0
 800124a:	76fb      	strb	r3, [r7, #27]
	if(ret == HAL_OK){
 800124c:	7efb      	ldrb	r3, [r7, #27]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d136      	bne.n	80012c0 <FEB_TPS2482_PollBusVolt+0xa0>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2,100);
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	b299      	uxth	r1, r3
 8001256:	f107 0208 	add.w	r2, r7, #8
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2302      	movs	r3, #2
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f002 fb95 	bl	8003990 <HAL_I2C_Master_Receive>
 8001266:	4603      	mov	r3, r0
 8001268:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 800126a:	7efb      	ldrb	r3, [r7, #27]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d127      	bne.n	80012c0 <FEB_TPS2482_PollBusVolt+0xa0>
			int16_t val = ((int16_t)buf[0]<<8) | buf[1]; //Not sure if little endian or not, needs testing!
 8001270:	7a3b      	ldrb	r3, [r7, #8]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	7a7b      	ldrb	r3, [r7, #9]
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	833b      	strh	r3, [r7, #24]
			float parsed = (int)(val * 0.00125 * 100);// convert to decimal and multiply by 1.25mV
 800127e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f96e 	bl	8000564 <__aeabi_i2d>
 8001288:	a319      	add	r3, pc, #100	; (adr r3, 80012f0 <FEB_TPS2482_PollBusVolt+0xd0>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff f9d3 	bl	8000638 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <FEB_TPS2482_PollBusVolt+0xdc>)
 80012a0:	f7ff f9ca 	bl	8000638 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fc74 	bl	8000b98 <__aeabi_d2iz>
 80012b0:	ee07 0a90 	vmov	s15, r0
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	edc7 7a05 	vstr	s15, [r7, #20]
			returnVal = parsed;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	61fb      	str	r3, [r7, #28]
		}

	}

//	HAL_I2C_IsDeviceReady(hi2c, DEV_ADDR, 1, 100);
	if(ret == HAL_ERROR) return -2.0;
 80012c0:	7efb      	ldrb	r3, [r7, #27]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d102      	bne.n	80012cc <FEB_TPS2482_PollBusVolt+0xac>
 80012c6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012ca:	e00a      	b.n	80012e2 <FEB_TPS2482_PollBusVolt+0xc2>
	if(ret == HAL_BUSY) return -3.0;
 80012cc:	7efb      	ldrb	r3, [r7, #27]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d101      	bne.n	80012d6 <FEB_TPS2482_PollBusVolt+0xb6>
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <FEB_TPS2482_PollBusVolt+0xe0>)
 80012d4:	e005      	b.n	80012e2 <FEB_TPS2482_PollBusVolt+0xc2>
	if(ret == HAL_TIMEOUT) return -4.0;
 80012d6:	7efb      	ldrb	r3, [r7, #27]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d101      	bne.n	80012e0 <FEB_TPS2482_PollBusVolt+0xc0>
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <FEB_TPS2482_PollBusVolt+0xe4>)
 80012de:	e000      	b.n	80012e2 <FEB_TPS2482_PollBusVolt+0xc2>

	return returnVal;
 80012e0:	69fb      	ldr	r3, [r7, #28]
}
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	47ae147b 	.word	0x47ae147b
 80012f4:	3f547ae1 	.word	0x3f547ae1
 80012f8:	bf800000 	.word	0xbf800000
 80012fc:	40590000 	.word	0x40590000
 8001300:	c0400000 	.word	0xc0400000
 8001304:	c0800000 	.word	0xc0800000

08001308 <FEB_TPS2482_PollPower>:

float FEB_TPS2482_PollPower(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af02      	add	r7, sp, #8
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
		//Buffer to store data;
		uint8_t buf[12];
		buf[0] = 3; // is the register that stores the bus voltage value
 8001314:	2303      	movs	r3, #3
 8001316:	723b      	strb	r3, [r7, #8]
		float returnVal = -1; //Set return val default to -1 as an "error". Not that great since we can actually have negative current
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <FEB_TPS2482_PollPower+0xf8>)
 800131a:	61fb      	str	r3, [r7, #28]
		HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	b299      	uxth	r1, r3
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	2364      	movs	r3, #100	; 0x64
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f002 fa32 	bl	8003794 <HAL_I2C_Master_Transmit>
 8001330:	4603      	mov	r3, r0
 8001332:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 8001334:	7efb      	ldrb	r3, [r7, #27]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d144      	bne.n	80013c4 <FEB_TPS2482_PollPower+0xbc>
			ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2,100);
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	b299      	uxth	r1, r3
 800133e:	f107 0208 	add.w	r2, r7, #8
 8001342:	2364      	movs	r3, #100	; 0x64
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2302      	movs	r3, #2
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f002 fb21 	bl	8003990 <HAL_I2C_Master_Receive>
 800134e:	4603      	mov	r3, r0
 8001350:	76fb      	strb	r3, [r7, #27]
			if(ret == HAL_OK){
 8001352:	7efb      	ldrb	r3, [r7, #27]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d135      	bne.n	80013c4 <FEB_TPS2482_PollPower+0xbc>
				int16_t val = ((int16_t)buf[0]<<8) | buf[1]; //Not sure if little endian or not, needs testing!
 8001358:	7a3b      	ldrb	r3, [r7, #8]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	7a7b      	ldrb	r3, [r7, #9]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	833b      	strh	r3, [r7, #24]
				float parsed = (int)(val * 25 * 0.00046 * 1000 * 100);// convert to decimal and multiply by 1.25mV
 8001366:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	009a      	lsls	r2, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8f5 	bl	8000564 <__aeabi_i2d>
 800137a:	a31f      	add	r3, pc, #124	; (adr r3, 80013f8 <FEB_TPS2482_PollPower+0xf0>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff f95a 	bl	8000638 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <FEB_TPS2482_PollPower+0xfc>)
 8001392:	f7ff f951 	bl	8000638 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <FEB_TPS2482_PollPower+0x100>)
 80013a4:	f7ff f948 	bl	8000638 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fbf2 	bl	8000b98 <__aeabi_d2iz>
 80013b4:	ee07 0a90 	vmov	s15, r0
 80013b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013bc:	edc7 7a05 	vstr	s15, [r7, #20]
				returnVal = parsed;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	61fb      	str	r3, [r7, #28]
				//Rounds to 2 decimal points
			}

		}
		//	HAL_I2C_IsDeviceReady(hi2c, DEV_ADDR, 1, 100);
			if(ret == HAL_ERROR) return -2.0;
 80013c4:	7efb      	ldrb	r3, [r7, #27]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d102      	bne.n	80013d0 <FEB_TPS2482_PollPower+0xc8>
 80013ca:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013ce:	e00a      	b.n	80013e6 <FEB_TPS2482_PollPower+0xde>
			if(ret == HAL_BUSY) return -3.0;
 80013d0:	7efb      	ldrb	r3, [r7, #27]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d101      	bne.n	80013da <FEB_TPS2482_PollPower+0xd2>
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <FEB_TPS2482_PollPower+0x104>)
 80013d8:	e005      	b.n	80013e6 <FEB_TPS2482_PollPower+0xde>
			if(ret == HAL_TIMEOUT) return -4.0;
 80013da:	7efb      	ldrb	r3, [r7, #27]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d101      	bne.n	80013e4 <FEB_TPS2482_PollPower+0xdc>
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <FEB_TPS2482_PollPower+0x108>)
 80013e2:	e000      	b.n	80013e6 <FEB_TPS2482_PollPower+0xde>

			return returnVal;
 80013e4:	69fb      	ldr	r3, [r7, #28]
		}
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	f3af 8000 	nop.w
 80013f8:	f4c6e6da 	.word	0xf4c6e6da
 80013fc:	3f3e2584 	.word	0x3f3e2584
 8001400:	bf800000 	.word	0xbf800000
 8001404:	408f4000 	.word	0x408f4000
 8001408:	40590000 	.word	0x40590000
 800140c:	c0400000 	.word	0xc0400000
 8001410:	c0800000 	.word	0xc0800000

08001414 <Store_EMERGENCY_Msg>:
    EMERGENCY_APPS_EMERGENCY_TYPE apps_emergency;
    EMERGENCY_SW_EMERGENCY_TYPE sw_emergency;
} EMERGENCY_MESSAGE_TYPE;
EMERGENCY_MESSAGE_TYPE EMERGENCY_MESSAGE;

void Store_EMERGENCY_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <Store_EMERGENCY_Msg+0x1a>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d006      	beq.n	800143a <Store_EMERGENCY_Msg+0x26>
            break;
        case EMERGENCY_SW_EMERGENCY:
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
            break;
    }
}
 800142c:	e00b      	b.n	8001446 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.apps_emergency), RxData, data_length);
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <Store_EMERGENCY_Msg+0x3c>)
 8001434:	f005 f8bb 	bl	80065ae <memcpy>
            break;
 8001438:	e005      	b.n	8001446 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <Store_EMERGENCY_Msg+0x40>)
 8001440:	f005 f8b5 	bl	80065ae <memcpy>
            break;
 8001444:	bf00      	nop
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000210 	.word	0x20000210
 8001454:	20000211 	.word	0x20000211

08001458 <Store_BMS_Msg>:
    BMS_TEMPERATURE_TYPE temperature;
    BMS_VOLTAGE_TYPE voltage;
} BMS_MESSAGE_TYPE;
BMS_MESSAGE_TYPE BMS_MESSAGE;

void Store_BMS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b10      	cmp	r3, #16
 8001468:	d003      	beq.n	8001472 <Store_BMS_Msg+0x1a>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b11      	cmp	r3, #17
 800146e:	d006      	beq.n	800147e <Store_BMS_Msg+0x26>
            break;
        case BMS_VOLTAGE:
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
            break;
    }
}
 8001470:	e00b      	b.n	800148a <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.temperature), RxData, data_length);
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <Store_BMS_Msg+0x3c>)
 8001478:	f005 f899 	bl	80065ae <memcpy>
            break;
 800147c:	e005      	b.n	800148a <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <Store_BMS_Msg+0x40>)
 8001484:	f005 f893 	bl	80065ae <memcpy>
            break;
 8001488:	bf00      	nop
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000214 	.word	0x20000214
 8001498:	20000218 	.word	0x20000218

0800149c <Store_SW_Msg>:
    SW_ACUMULATOR_FANS_TYPE acumulator_fans;
    SW_EXTRA_TYPE extra;
} SW_MESSAGE_TYPE;
SW_MESSAGE_TYPE SW_MESSAGE;

void Store_SW_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
    switch (RxId){
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3b20      	subs	r3, #32
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d823      	bhi.n	80014f8 <Store_SW_Msg+0x5c>
 80014b0:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <Store_SW_Msg+0x1c>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014c9 	.word	0x080014c9
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014e1 	.word	0x080014e1
 80014c4:	080014ed 	.word	0x080014ed
        case SW_READY_TO_DRIVE:
            memcpy(&(SW_MESSAGE.ready_to_drive), RxData, data_length);
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <Store_SW_Msg+0x64>)
 80014ce:	f005 f86e 	bl	80065ae <memcpy>
            break;
 80014d2:	e011      	b.n	80014f8 <Store_SW_Msg+0x5c>
        case SW_COOLANT_PUMP:
            memcpy(&(SW_MESSAGE.coolant_pump), RxData, data_length);
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	480a      	ldr	r0, [pc, #40]	; (8001504 <Store_SW_Msg+0x68>)
 80014da:	f005 f868 	bl	80065ae <memcpy>
            break;
 80014de:	e00b      	b.n	80014f8 <Store_SW_Msg+0x5c>
        case SW_ACUMULATOR_FANS:
            memcpy(&(SW_MESSAGE.acumulator_fans), RxData, data_length);
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	4808      	ldr	r0, [pc, #32]	; (8001508 <Store_SW_Msg+0x6c>)
 80014e6:	f005 f862 	bl	80065ae <memcpy>
            break;
 80014ea:	e005      	b.n	80014f8 <Store_SW_Msg+0x5c>
        case SW_EXTRA:
            memcpy(&(SW_MESSAGE.extra), RxData, data_length);
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <Store_SW_Msg+0x70>)
 80014f2:	f005 f85c 	bl	80065ae <memcpy>
            break;
 80014f6:	bf00      	nop
    }
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000021c 	.word	0x2000021c
 8001504:	2000021d 	.word	0x2000021d
 8001508:	2000021e 	.word	0x2000021e
 800150c:	2000021f 	.word	0x2000021f

08001510 <Store_APPS_Msg>:
    APPS_TORQUE_TYPE torque;
    float current;
} APPS_MESSAGE_TYPE;
APPS_MESSAGE_TYPE APPS_MESSAGE;

void Store_APPS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
    switch (RxId){
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3b30      	subs	r3, #48	; 0x30
 8001520:	2b04      	cmp	r3, #4
 8001522:	d82b      	bhi.n	800157c <Store_APPS_Msg+0x6c>
 8001524:	a201      	add	r2, pc, #4	; (adr r2, 800152c <Store_APPS_Msg+0x1c>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	08001541 	.word	0x08001541
 8001530:	0800154d 	.word	0x0800154d
 8001534:	08001559 	.word	0x08001559
 8001538:	08001565 	.word	0x08001565
 800153c:	08001571 	.word	0x08001571
        case APPS_ACCELERATOR1_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator1_pedal), RxData, data_length);
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	480f      	ldr	r0, [pc, #60]	; (8001584 <Store_APPS_Msg+0x74>)
 8001546:	f005 f832 	bl	80065ae <memcpy>
            break;
 800154a:	e017      	b.n	800157c <Store_APPS_Msg+0x6c>
        case APPS_ACCELERATOR2_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator2_pedal), RxData, data_length);
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	68b9      	ldr	r1, [r7, #8]
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <Store_APPS_Msg+0x78>)
 8001552:	f005 f82c 	bl	80065ae <memcpy>
            break;
 8001556:	e011      	b.n	800157c <Store_APPS_Msg+0x6c>
        case APPS_BRAKE_PEDAL:
            memcpy(&(APPS_MESSAGE.brake_pedal), RxData, data_length);
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <Store_APPS_Msg+0x7c>)
 800155e:	f005 f826 	bl	80065ae <memcpy>
            break;
 8001562:	e00b      	b.n	800157c <Store_APPS_Msg+0x6c>
        case APPS_TORQUE:
            memcpy(&(APPS_MESSAGE.torque), RxData, data_length);
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	4809      	ldr	r0, [pc, #36]	; (8001590 <Store_APPS_Msg+0x80>)
 800156a:	f005 f820 	bl	80065ae <memcpy>
            break;
 800156e:	e005      	b.n	800157c <Store_APPS_Msg+0x6c>
        case APPS_CURRENT:
            memcpy(&(APPS_MESSAGE.current), RxData, data_length);
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <Store_APPS_Msg+0x84>)
 8001576:	f005 f81a 	bl	80065ae <memcpy>
            break;
 800157a:	bf00      	nop
    }
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000220 	.word	0x20000220
 8001588:	20000224 	.word	0x20000224
 800158c:	20000228 	.word	0x20000228
 8001590:	2000022c 	.word	0x2000022c
 8001594:	20000230 	.word	0x20000230

08001598 <assign_filter_array>:
const FilterArrayLength LVPDB_RX_NUM = 2;

const AddressIdType IVPDB_RX_ID[] = {SW_ID};
const FilterArrayLength IVPDB_RX_NUM = 1;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d815      	bhi.n	80015d4 <assign_filter_array+0x3c>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <assign_filter_array+0x18>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015c5 	.word	0x080015c5
 80015b4:	080015d5 	.word	0x080015d5
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	080015d1 	.word	0x080015d1
        case BMS_ID:
            return BMS_RX_ID;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <assign_filter_array+0x4c>)
 80015c6:	e006      	b.n	80015d6 <assign_filter_array+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <assign_filter_array+0x50>)
 80015ca:	e004      	b.n	80015d6 <assign_filter_array+0x3e>
            break;
        case LVPDB_ID:
            return LVPDB_RX_ID;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <assign_filter_array+0x54>)
 80015ce:	e002      	b.n	80015d6 <assign_filter_array+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_ID;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <assign_filter_array+0x58>)
 80015d2:	e000      	b.n	80015d6 <assign_filter_array+0x3e>
            break;
    }
    return 0;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	08008818 	.word	0x08008818
 80015e8:	0800881c 	.word	0x0800881c
 80015ec:	08008824 	.word	0x08008824
 80015f0:	0800882c 	.word	0x0800882c

080015f4 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	2b04      	cmp	r3, #4
 8001602:	d815      	bhi.n	8001630 <assign_filter_array_legnth+0x3c>
 8001604:	a201      	add	r2, pc, #4	; (adr r2, 800160c <assign_filter_array_legnth+0x18>)
 8001606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160a:	bf00      	nop
 800160c:	08001621 	.word	0x08001621
 8001610:	08001631 	.word	0x08001631
 8001614:	08001625 	.word	0x08001625
 8001618:	08001629 	.word	0x08001629
 800161c:	0800162d 	.word	0x0800162d
        case BMS_ID:
            return BMS_RX_NUM;
 8001620:	2301      	movs	r3, #1
 8001622:	e006      	b.n	8001632 <assign_filter_array_legnth+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8001624:	2302      	movs	r3, #2
 8001626:	e004      	b.n	8001632 <assign_filter_array_legnth+0x3e>
            break;
        case LVPDB_ID:
            return LVPDB_RX_NUM;
 8001628:	2302      	movs	r3, #2
 800162a:	e002      	b.n	8001632 <assign_filter_array_legnth+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_NUM;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <assign_filter_array_legnth+0x3e>
            break;
    }
    return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <store_msg>:

void store_msg(CAN_RxHeaderTypeDef *pHeader, uint8_t RxData[]) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    switch(pHeader->StdId >> BITS_PER_MESSAGE_TYPE) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	2b03      	cmp	r3, #3
 8001652:	d82f      	bhi.n	80016b4 <store_msg+0x74>
 8001654:	a201      	add	r2, pc, #4	; (adr r2, 800165c <store_msg+0x1c>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	0800166d 	.word	0x0800166d
 8001660:	0800167f 	.word	0x0800167f
 8001664:	08001691 	.word	0x08001691
 8001668:	080016a3 	.word	0x080016a3
        case EMERGENCY_ID:
            Store_EMERGENCY_Msg(pHeader->StdId, RxData, pHeader->DLC);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	461a      	mov	r2, r3
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	f7ff fecc 	bl	8001414 <Store_EMERGENCY_Msg>
            break;
 800167c:	e01a      	b.n	80016b4 <store_msg+0x74>
        case BMS_ID:
            Store_BMS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	461a      	mov	r2, r3
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	f7ff fee5 	bl	8001458 <Store_BMS_Msg>
            break;
 800168e:	e011      	b.n	80016b4 <store_msg+0x74>
        case SW_ID:
            Store_SW_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	461a      	mov	r2, r3
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	f7ff fefe 	bl	800149c <Store_SW_Msg>
            break;
 80016a0:	e008      	b.n	80016b4 <store_msg+0x74>
        case APPS_ID:
            Store_APPS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	461a      	mov	r2, r3
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	f7ff ff2f 	bl	8001510 <Store_APPS_Msg>
            break;
 80016b2:	bf00      	nop
    }
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <FEB_CAN_Filter_Config>:
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void Error_Handler(void);

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b090      	sub	sp, #64	; 0x40
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	460b      	mov	r3, r1
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	4613      	mov	r3, r2
 80016d0:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 80016d2:	2300      	movs	r3, #0
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d6:	e027      	b.n	8001728 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 80016d8:	2301      	movs	r3, #1
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 80016dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 80016e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	025b      	lsls	r3, r3, #9
 80016f0:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 80016f6:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80016fa:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001704:	2301      	movs	r3, #1
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 8001708:	231b      	movs	r3, #27
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 ffa0 	bl	8002658 <HAL_CAN_ConfigFilter>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 800171e:	f000 fbb3 	bl	8001e88 <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 8001722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001724:	3301      	adds	r3, #1
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800172c:	429a      	cmp	r2, r3
 800172e:	dbd3      	blt.n	80016d8 <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3740      	adds	r7, #64	; 0x40
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <FEB_CAN_Init+0x80>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d104      	bne.n	800175a <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 8001750:	2300      	movs	r3, #0
 8001752:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 8001754:	2302      	movs	r3, #2
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	e008      	b.n	800176c <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <FEB_CAN_Init+0x84>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d103      	bne.n	800176c <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 8001764:	2301      	movs	r3, #1
 8001766:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8001768:	2310      	movs	r3, #16
 800176a:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <FEB_CAN_Init+0x88>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <FEB_CAN_Init+0x88>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <FEB_CAN_Init+0x88>)
 800177a:	2200      	movs	r2, #0
 800177c:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f7ff ff0a 	bl	8001598 <assign_filter_array>
 8001784:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 8001786:	6838      	ldr	r0, [r7, #0]
 8001788:	f7ff ff34 	bl	80015f4 <assign_filter_array_legnth>
 800178c:	4603      	mov	r3, r0
 800178e:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	7afa      	ldrb	r2, [r7, #11]
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ff90 	bl	80016bc <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f001 f83b 	bl	8002818 <HAL_CAN_Start>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <FEB_CAN_Init+0x70>
	  Error_Handler();
 80017a8:	f000 fb6e 	bl	8001e88 <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 80017ac:	6939      	ldr	r1, [r7, #16]
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f001 f988 	bl	8002ac4 <HAL_CAN_ActivateNotification>

}
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40006400 	.word	0x40006400
 80017c0:	40006800 	.word	0x40006800
 80017c4:	20000234 	.word	0x20000234

080017c8 <FEB_CAN_Receive>:

void FEB_CAN_Receive(CAN_HandleTypeDef *hcan, uint32_t CAN_RX_FIFO) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <FEB_CAN_Receive+0x30>)
 80017d4:	4a09      	ldr	r2, [pc, #36]	; (80017fc <FEB_CAN_Receive+0x34>)
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f001 f861 	bl	80028a0 <HAL_CAN_GetRxMessage>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <FEB_CAN_Receive+0x20>
		Error_Handler();
 80017e4:	f000 fb50 	bl	8001e88 <Error_Handler>
	}
	store_msg(&RxHeader, RxData);
 80017e8:	4903      	ldr	r1, [pc, #12]	; (80017f8 <FEB_CAN_Receive+0x30>)
 80017ea:	4804      	ldr	r0, [pc, #16]	; (80017fc <FEB_CAN_Receive+0x34>)
 80017ec:	f7ff ff28 	bl	8001640 <store_msg>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000268 	.word	0x20000268
 80017fc:	2000024c 	.word	0x2000024c

08001800 <HAL_CAN_RxFifo0MsgPendingCallback>:
	{
	  Error_Handler();
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO0);
 8001808:	2100      	movs	r1, #0
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffdc 	bl	80017c8 <FEB_CAN_Receive>
	CAN_Flag = 1;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000270 	.word	0x20000270

08001824 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO1);
 800182c:	2101      	movs	r1, #1
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffca 	bl	80017c8 <FEB_CAN_Receive>
	CAN_Flag = 1;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000270 	.word	0x20000270

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800184c:	b0aa      	sub	sp, #168	; 0xa8
 800184e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001850:	f000 fd70 	bl	8002334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001854:	f000 f960 	bl	8001b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001858:	f000 fa58 	bl	8001d0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800185c:	f000 fa2c 	bl	8001cb8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001860:	f000 f9c6 	bl	8001bf0 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001864:	f000 f9fa 	bl	8001c5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	FEB_CAN_Init(&hcan1, LVPDB_ID);
 8001868:	2104      	movs	r1, #4
 800186a:	4897      	ldr	r0, [pc, #604]	; (8001ac8 <main+0x280>)
 800186c:	f7ff ff66 	bl	800173c <FEB_CAN_Init>

	hi2c1p = &hi2c1;
 8001870:	4b96      	ldr	r3, [pc, #600]	; (8001acc <main+0x284>)
 8001872:	4a97      	ldr	r2, [pc, #604]	; (8001ad0 <main+0x288>)
 8001874:	601a      	str	r2, [r3, #0]

	// uncomment if we need to pull ENs high to start
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);// pull PC11 high to enable coolant pump
 8001876:	2201      	movs	r2, #1
 8001878:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800187c:	4895      	ldr	r0, [pc, #596]	; (8001ad4 <main+0x28c>)
 800187e:	f001 fe2b 	bl	80034d8 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);// pull PB5 high to enable accumulator fans
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);// pull PC3 high to enable extra

	FEB_TPS2482_SETUP(hi2c1p, LV_ADDR, CONFIG, TEST_CAL_15A, UNDERV, LV_NEW_LIMIT);
 8001882:	4b92      	ldr	r3, [pc, #584]	; (8001acc <main+0x284>)
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	4b93      	ldr	r3, [pc, #588]	; (8001ad8 <main+0x290>)
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	4b93      	ldr	r3, [pc, #588]	; (8001adc <main+0x294>)
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4b93      	ldr	r3, [pc, #588]	; (8001ae0 <main+0x298>)
 8001892:	4a94      	ldr	r2, [pc, #592]	; (8001ae4 <main+0x29c>)
 8001894:	f7ff fb76 	bl	8000f84 <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1p, CP_ADDR, CONFIG, TEST_CAL_15A, OVERPWR, TEST_OVERPWR_LIMIT);
 8001898:	4b8c      	ldr	r3, [pc, #560]	; (8001acc <main+0x284>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	2188      	movs	r1, #136	; 0x88
 800189e:	4b92      	ldr	r3, [pc, #584]	; (8001ae8 <main+0x2a0>)
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	4b92      	ldr	r3, [pc, #584]	; (8001aec <main+0x2a4>)
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	4b8e      	ldr	r3, [pc, #568]	; (8001ae0 <main+0x298>)
 80018a8:	4a8e      	ldr	r2, [pc, #568]	; (8001ae4 <main+0x29c>)
 80018aa:	f7ff fb6b 	bl	8000f84 <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1p, AF_ADDR, CONFIG, TEST_CAL_15A, OVERPWR, AF_LIMIT);
 80018ae:	4b87      	ldr	r3, [pc, #540]	; (8001acc <main+0x284>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	218a      	movs	r1, #138	; 0x8a
 80018b4:	4b8e      	ldr	r3, [pc, #568]	; (8001af0 <main+0x2a8>)
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	4b8c      	ldr	r3, [pc, #560]	; (8001aec <main+0x2a4>)
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <main+0x298>)
 80018be:	4a89      	ldr	r2, [pc, #548]	; (8001ae4 <main+0x29c>)
 80018c0:	f7ff fb60 	bl	8000f84 <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1p, EX_ADDR, CONFIG, TEST_CAL_15A, OVERPWR, EX_LIMIT);
 80018c4:	4b81      	ldr	r3, [pc, #516]	; (8001acc <main+0x284>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	2182      	movs	r1, #130	; 0x82
 80018ca:	4b8a      	ldr	r3, [pc, #552]	; (8001af4 <main+0x2ac>)
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	4b87      	ldr	r3, [pc, #540]	; (8001aec <main+0x2a4>)
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4b83      	ldr	r3, [pc, #524]	; (8001ae0 <main+0x298>)
 80018d4:	4a83      	ldr	r2, [pc, #524]	; (8001ae4 <main+0x29c>)
 80018d6:	f7ff fb55 	bl	8000f84 <FEB_TPS2482_SETUP>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Brake Light
	  if (APPS_MESSAGE.brake_pedal > BRAKE_THRE) {
 80018da:	4b87      	ldr	r3, [pc, #540]	; (8001af8 <main+0x2b0>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe52 	bl	8000588 <__aeabi_f2d>
 80018e4:	a376      	add	r3, pc, #472	; (adr r3, 8001ac0 <main+0x278>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7ff f935 	bl	8000b58 <__aeabi_dcmpgt>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <main+0xb8>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);// PA1 high
 80018f4:	2201      	movs	r2, #1
 80018f6:	2102      	movs	r1, #2
 80018f8:	4880      	ldr	r0, [pc, #512]	; (8001afc <main+0x2b4>)
 80018fa:	f001 fded 	bl	80034d8 <HAL_GPIO_WritePin>
 80018fe:	e004      	b.n	800190a <main+0xc2>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);// PA1 low
 8001900:	2200      	movs	r2, #0
 8001902:	2102      	movs	r1, #2
 8001904:	487d      	ldr	r0, [pc, #500]	; (8001afc <main+0x2b4>)
 8001906:	f001 fde7 	bl	80034d8 <HAL_GPIO_WritePin>
	  }

	  // activate peripheral devices if ready to drive
	  if (SW_MESSAGE.ready_to_drive == 1 && !isDriving) {
 800190a:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <main+0x2b8>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d11a      	bne.n	8001948 <main+0x100>
 8001912:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <main+0x2bc>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	f083 0301 	eor.w	r3, r3, #1
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <main+0x100>
		  isDriving = true;
 8001920:	4b78      	ldr	r3, [pc, #480]	; (8001b04 <main+0x2bc>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);// pull PC11 high to enable coolant pump
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192c:	4869      	ldr	r0, [pc, #420]	; (8001ad4 <main+0x28c>)
 800192e:	f001 fdd3 	bl	80034d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);// pull PB5 high to enable accumulator fans
 8001932:	2201      	movs	r2, #1
 8001934:	2120      	movs	r1, #32
 8001936:	4874      	ldr	r0, [pc, #464]	; (8001b08 <main+0x2c0>)
 8001938:	f001 fdce 	bl	80034d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);// pull PC3 high to enable extra
 800193c:	2201      	movs	r2, #1
 800193e:	2108      	movs	r1, #8
 8001940:	4864      	ldr	r0, [pc, #400]	; (8001ad4 <main+0x28c>)
 8001942:	f001 fdc9 	bl	80034d8 <HAL_GPIO_WritePin>
 8001946:	e01a      	b.n	800197e <main+0x136>

	  // de-activate if not ready to drive
	  } else if (SW_MESSAGE.ready_to_drive == 0 && isDriving) {
 8001948:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <main+0x2b8>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d116      	bne.n	800197e <main+0x136>
 8001950:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <main+0x2bc>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d012      	beq.n	800197e <main+0x136>
		  isDriving = false;
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <main+0x2bc>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001964:	485b      	ldr	r0, [pc, #364]	; (8001ad4 <main+0x28c>)
 8001966:	f001 fdb7 	bl	80034d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2120      	movs	r1, #32
 800196e:	4866      	ldr	r0, [pc, #408]	; (8001b08 <main+0x2c0>)
 8001970:	f001 fdb2 	bl	80034d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2108      	movs	r1, #8
 8001978:	4856      	ldr	r0, [pc, #344]	; (8001ad4 <main+0x28c>)
 800197a:	f001 fdad 	bl	80034d8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
		  //turn off brake light
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
	  }
***/
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) {
 800197e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001982:	485e      	ldr	r0, [pc, #376]	; (8001afc <main+0x2b4>)
 8001984:	f001 fd90 	bl	80034a8 <HAL_GPIO_ReadPin>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <main+0x152>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);// pull PC11 high to enable coolant pump
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001994:	484f      	ldr	r0, [pc, #316]	; (8001ad4 <main+0x28c>)
 8001996:	f001 fd9f 	bl	80034d8 <HAL_GPIO_WritePin>
***/

	  // Divides by 100 so can round to 2 decimal points (cant return full value or do inside pull function else integer overflow for some reason)
//	  current_reading = FEB_TPS2482_PollBusCurrent(hi2c1p,LV_ADDR)/100.0;
//	  ex_current_reading = FEB_TPS2482_PollBusCurrent(hi2c1p,EX_ADDR)/100.0;
	  cp_current_reading = FEB_TPS2482_PollBusCurrent(hi2c1p,CP_ADDR)/100.0;
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <main+0x284>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2288      	movs	r2, #136	; 0x88
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fb3c 	bl	8001020 <FEB_TPS2482_PollBusCurrent>
 80019a8:	ee10 3a10 	vmov	r3, s0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdeb 	bl	8000588 <__aeabi_f2d>
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	4b55      	ldr	r3, [pc, #340]	; (8001b0c <main+0x2c4>)
 80019b8:	f7fe ff68 	bl	800088c <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f910 	bl	8000be8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  FEB_CAN_Transmit(&hcan1, LVPDB_LV_CURRENT,&current_reading,sizeof(float));
	  FEB_CAN_Transmit(&hcan1, LVPDB_EX_CURRENT,&ex_current_reading,sizeof(float));
	  FEB_CAN_Transmit(&hcan1, LVPDB_CP_CURRENT,&cp_current_reading,sizeof(float));
	  apps_current_reading = APPS_MESSAGE.current;
	  ***/
	  shunt_voltage_reading = FEB_TPS2482_PollShuntVolt(hi2c1p, CP_ADDR)/100.0;
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <main+0x284>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2288      	movs	r2, #136	; 0x88
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fba2 	bl	8001120 <FEB_TPS2482_PollShuntVolt>
 80019dc:	4603      	mov	r3, r0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdc0 	bl	8000564 <__aeabi_i2d>
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <main+0x2c4>)
 80019ea:	f7fe ff4f 	bl	800088c <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f8f7 	bl	8000be8 <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  bus_voltage_reading = FEB_TPS2482_PollBusVolt(hi2c1p, CP_ADDR)/100.0;
 8001a00:	4b32      	ldr	r3, [pc, #200]	; (8001acc <main+0x284>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2288      	movs	r2, #136	; 0x88
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fc09 	bl	8001220 <FEB_TPS2482_PollBusVolt>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fda7 	bl	8000564 <__aeabi_i2d>
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <main+0x2c4>)
 8001a1c:	f7fe ff36 	bl	800088c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f8de 	bl	8000be8 <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  power_reading = FEB_TPS2482_PollPower(hi2c1p, CP_ADDR)/100.0;
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <main+0x284>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2288      	movs	r2, #136	; 0x88
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fc64 	bl	8001308 <FEB_TPS2482_PollPower>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd8e 	bl	8000564 <__aeabi_i2d>
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <main+0x2c4>)
 8001a4e:	f7fe ff1d 	bl	800088c <__aeabi_ddiv>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff f8c5 	bl	8000be8 <__aeabi_d2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

//	  buf_len = sprintf((char*)buf, "ready: %d, brake: %.3f\r\n", SW_MESSAGE.ready_to_drive, APPS_MESSAGE.brake_pedal);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);

	  //buf_len = sprintf((char*) buf, "Current Draw (LV, EX, CP, APPS): %.3f, %.3f, %.3f, %.3f\r\n", current_reading, ex_current_reading, cp_current_reading, apps_current_reading);
	  buf_len = sprintf((char*) buf, "TPS Draw: Power: %.3f, Shunt Voltage (uV): %.3f, Current(mA): %.3f\r\n", power_reading, shunt_voltage_reading, cp_current_reading);
 8001a64:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001a68:	f7fe fd8e 	bl	8000588 <__aeabi_f2d>
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	4689      	mov	r9, r1
 8001a70:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001a74:	f7fe fd88 	bl	8000588 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001a80:	f7fe fd82 	bl	8000588 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	1d38      	adds	r0, r7, #4
 8001a8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a8e:	e9cd 4500 	strd	r4, r5, [sp]
 8001a92:	4642      	mov	r2, r8
 8001a94:	464b      	mov	r3, r9
 8001a96:	491e      	ldr	r1, [pc, #120]	; (8001b10 <main+0x2c8>)
 8001a98:	f004 fc6e 	bl	8006378 <siprintf>
 8001a9c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8001aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	1d39      	adds	r1, r7, #4
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aac:	4819      	ldr	r0, [pc, #100]	; (8001b14 <main+0x2cc>)
 8001aae:	f003 fc88 	bl	80053c2 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(SLEEP_TIME);
 8001ab2:	200a      	movs	r0, #10
 8001ab4:	f000 fcb0 	bl	8002418 <HAL_Delay>
  {
 8001ab8:	e70f      	b.n	80018da <main+0x92>
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	9999999a 	.word	0x9999999a
 8001ac4:	3fc99999 	.word	0x3fc99999
 8001ac8:	20000274 	.word	0x20000274
 8001acc:	200002f0 	.word	0x200002f0
 8001ad0:	2000029c 	.word	0x2000029c
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	20000010 	.word	0x20000010
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	2000001c 	.word	0x2000001c
 8001aec:	2000000c 	.word	0x2000000c
 8001af0:	20000014 	.word	0x20000014
 8001af4:	20000018 	.word	0x20000018
 8001af8:	20000220 	.word	0x20000220
 8001afc:	40020000 	.word	0x40020000
 8001b00:	2000021c 	.word	0x2000021c
 8001b04:	20000338 	.word	0x20000338
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40590000 	.word	0x40590000
 8001b10:	080087d0 	.word	0x080087d0
 8001b14:	200002f4 	.word	0x200002f4

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b094      	sub	sp, #80	; 0x50
 8001b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	2234      	movs	r2, #52	; 0x34
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 fd08 	bl	800653c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <SystemClock_Config+0xd0>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	4a28      	ldr	r2, [pc, #160]	; (8001be8 <SystemClock_Config+0xd0>)
 8001b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4c:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <SystemClock_Config+0xd0>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b58:	2300      	movs	r3, #0
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <SystemClock_Config+0xd4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a22      	ldr	r2, [pc, #136]	; (8001bec <SystemClock_Config+0xd4>)
 8001b62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <SystemClock_Config+0xd4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001b8c:	23a0      	movs	r3, #160	; 0xa0
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b90:	2302      	movs	r3, #2
 8001b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b94:	2302      	movs	r3, #2
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 f923 	bl	8004dec <HAL_RCC_OscConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bac:	f000 f96c 	bl	8001e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	2105      	movs	r1, #5
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fdc2 	bl	8004758 <HAL_RCC_ClockConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001bda:	f000 f955 	bl	8001e88 <Error_Handler>
  }
}
 8001bde:	bf00      	nop
 8001be0:	3750      	adds	r7, #80	; 0x50
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40007000 	.word	0x40007000

08001bf0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <MX_CAN1_Init+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c12:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_CAN1_Init+0x64>)
 8001c40:	f000 fc0e 	bl	8002460 <HAL_CAN_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001c4a:	f000 f91d 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000274 	.word	0x20000274
 8001c58:	40006400 	.word	0x40006400

08001c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <MX_I2C1_Init+0x54>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_I2C1_Init+0x58>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c9a:	f001 fc37 	bl	800350c <HAL_I2C_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ca4:	f000 f8f0 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2000029c 	.word	0x2000029c
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	000186a0 	.word	0x000186a0

08001cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <MX_USART2_UART_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	f003 fb1a 	bl	8005328 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f000 f8c5 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200002f4 	.word	0x200002f4
 8001d08:	40004400 	.word	0x40004400

08001d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b54      	ldr	r3, [pc, #336]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a53      	ldr	r2, [pc, #332]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a4c      	ldr	r2, [pc, #304]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a45      	ldr	r2, [pc, #276]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <MX_GPIO_Init+0x16c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f640 0108 	movw	r1, #2056	; 0x808
 8001d98:	4838      	ldr	r0, [pc, #224]	; (8001e7c <MX_GPIO_Init+0x170>)
 8001d9a:	f001 fb9d 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2122      	movs	r1, #34	; 0x22
 8001da2:	4837      	ldr	r0, [pc, #220]	; (8001e80 <MX_GPIO_Init+0x174>)
 8001da4:	f001 fb98 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2120      	movs	r1, #32
 8001dac:	4835      	ldr	r0, [pc, #212]	; (8001e84 <MX_GPIO_Init+0x178>)
 8001dae:	f001 fb93 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001db8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	482c      	ldr	r0, [pc, #176]	; (8001e7c <MX_GPIO_Init+0x170>)
 8001dca:	f001 f9d9 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12;
 8001dce:	f241 4306 	movw	r3, #5126	; 0x1406
 8001dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4826      	ldr	r0, [pc, #152]	; (8001e7c <MX_GPIO_Init+0x170>)
 8001de4:	f001 f9cc 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11;
 8001de8:	f640 0308 	movw	r3, #2056	; 0x808
 8001dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481e      	ldr	r0, [pc, #120]	; (8001e7c <MX_GPIO_Init+0x170>)
 8001e02:	f001 f9bd 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8001e06:	2322      	movs	r3, #34	; 0x22
 8001e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4818      	ldr	r0, [pc, #96]	; (8001e80 <MX_GPIO_Init+0x174>)
 8001e1e:	f001 f9af 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4812      	ldr	r0, [pc, #72]	; (8001e80 <MX_GPIO_Init+0x174>)
 8001e38:	f001 f9a2 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001e3c:	23d0      	movs	r3, #208	; 0xd0
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_GPIO_Init+0x178>)
 8001e50:	f001 f996 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e54:	2320      	movs	r3, #32
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <MX_GPIO_Init+0x178>)
 8001e6c:	f001 f988 	bl	8003180 <HAL_GPIO_Init>

}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020400 	.word	0x40020400

08001e88 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <Error_Handler+0x8>
	...

08001e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ed2:	2007      	movs	r0, #7
 8001ed4:	f001 f912 	bl	80030fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <HAL_CAN_MspInit+0xa4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d13c      	bne.n	8001f80 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_CAN_MspInit+0xa8>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_CAN_MspInit+0xa8>)
 8001f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_CAN_MspInit+0xa8>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_CAN_MspInit+0xa8>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_CAN_MspInit+0xa8>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_CAN_MspInit+0xa8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f50:	2309      	movs	r3, #9
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480d      	ldr	r0, [pc, #52]	; (8001f90 <HAL_CAN_MspInit+0xac>)
 8001f5c:	f001 f910 	bl	8003180 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2014      	movs	r0, #20
 8001f66:	f001 f8d4 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001f6a:	2014      	movs	r0, #20
 8001f6c:	f001 f8ed 	bl	800314a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2015      	movs	r0, #21
 8001f76:	f001 f8cc 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001f7a:	2015      	movs	r0, #21
 8001f7c:	f001 f8e5 	bl	800314a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40006400 	.word	0x40006400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000

08001f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_I2C_MspInit+0x84>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d12c      	bne.n	8002010 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_I2C_MspInit+0x88>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_I2C_MspInit+0x88>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_I2C_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd8:	2312      	movs	r3, #18
 8001fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	480c      	ldr	r0, [pc, #48]	; (8002020 <HAL_I2C_MspInit+0x8c>)
 8001ff0:	f001 f8c6 	bl	8003180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <HAL_I2C_MspInit+0x88>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_I2C_MspInit+0x88>)
 8001ffe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002002:	6413      	str	r3, [r2, #64]	; 0x40
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_I2C_MspInit+0x88>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40005400 	.word	0x40005400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400

08002024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_UART_MspInit+0x84>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12b      	bne.n	800209e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_UART_MspInit+0x88>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_UART_MspInit+0x88>)
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_UART_MspInit+0x88>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_UART_MspInit+0x88>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <HAL_UART_MspInit+0x88>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_UART_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800207e:	230c      	movs	r3, #12
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800208e:	2307      	movs	r3, #7
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <HAL_UART_MspInit+0x8c>)
 800209a:	f001 f871 	bl	8003180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	; 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40004400 	.word	0x40004400
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020000 	.word	0x40020000

080020b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <NMI_Handler+0x4>

080020ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <HardFault_Handler+0x4>

080020c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <MemManage_Handler+0x4>

080020c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <BusFault_Handler+0x4>

080020cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <UsageFault_Handler+0x4>

080020d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002100:	f000 f96a 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <CAN1_RX0_IRQHandler+0x10>)
 800210e:	f000 fcff 	bl	8002b10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000274 	.word	0x20000274

0800211c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <CAN1_RX1_IRQHandler+0x10>)
 8002122:	f000 fcf5 	bl	8002b10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000274 	.word	0x20000274

08002130 <_getpid>:
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
 8002134:	2301      	movs	r3, #1
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_kill>:
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	f004 fa03 	bl	8006554 <__errno>
 800214e:	4603      	mov	r3, r0
 8002150:	2216      	movs	r2, #22
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_exit>:
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffe7 	bl	8002140 <_kill>
 8002172:	e7fe      	b.n	8002172 <_exit+0x12>

08002174 <_read>:
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00a      	b.n	800219c <_read+0x28>
 8002186:	f3af 8000 	nop.w
 800218a:	4601      	mov	r1, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	b2ca      	uxtb	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf0      	blt.n	8002186 <_read+0x12>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_write>:
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e009      	b.n	80021d4 <_write+0x26>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	60ba      	str	r2, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f3af 8000 	nop.w
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbf1      	blt.n	80021c0 <_write+0x12>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_close>:
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_fstat>:
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	2300      	movs	r3, #0
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_isatty>:
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	2301      	movs	r3, #1
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_lseek>:
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	2300      	movs	r3, #0
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <_sbrk>:
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <_sbrk+0x5c>)
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <_sbrk+0x60>)
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <_sbrk+0x22>
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <_sbrk+0x64>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <_sbrk+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <_sbrk+0x40>
 8002280:	f004 f968 	bl	8006554 <__errno>
 8002284:	4603      	mov	r3, r0
 8002286:	220c      	movs	r2, #12
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800228e:	e009      	b.n	80022a4 <_sbrk+0x54>
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <_sbrk+0x64>)
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20020000 	.word	0x20020000
 80022b0:	00000400 	.word	0x00000400
 80022b4:	2000033c 	.word	0x2000033c
 80022b8:	20000490 	.word	0x20000490

080022bc <SystemInit>:
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <SystemInit+0x20>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <SystemInit+0x20>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002318 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022e6:	490e      	ldr	r1, [pc, #56]	; (8002320 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022fc:	4c0b      	ldr	r4, [pc, #44]	; (800232c <LoopFillZerobss+0x26>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800230a:	f7ff ffd7 	bl	80022bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800230e:	f004 f927 	bl	8006560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002312:	f7ff fa99 	bl	8001848 <main>
  bx  lr    
 8002316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002324:	08008bcc 	.word	0x08008bcc
  ldr r2, =_sbss
 8002328:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800232c:	20000490 	.word	0x20000490

08002330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC_IRQHandler>
	...

08002334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <HAL_Init+0x40>)
 800233e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <HAL_Init+0x40>)
 800234a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a07      	ldr	r2, [pc, #28]	; (8002374 <HAL_Init+0x40>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 fecd 	bl	80030fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002362:	2000      	movs	r0, #0
 8002364:	f000 f808 	bl	8002378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002368:	f7ff fd94 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023c00 	.word	0x40023c00

08002378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_InitTick+0x54>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_InitTick+0x58>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fee5 	bl	8003166 <HAL_SYSTICK_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00e      	b.n	80023c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0f      	cmp	r3, #15
 80023aa:	d80a      	bhi.n	80023c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ac:	2200      	movs	r2, #0
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b4:	f000 fead 	bl	8003112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <HAL_InitTick+0x5c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000020 	.word	0x20000020
 80023d0:	20000028 	.word	0x20000028
 80023d4:	20000024 	.word	0x20000024

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000028 	.word	0x20000028
 80023fc:	20000340 	.word	0x20000340

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000340 	.word	0x20000340

08002418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ffee 	bl	8002400 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002430:	d005      	beq.n	800243e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_Delay+0x44>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800243e:	bf00      	nop
 8002440:	f7ff ffde 	bl	8002400 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d8f7      	bhi.n	8002440 <HAL_Delay+0x28>
  {
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000028 	.word	0x20000028

08002460 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0ed      	b.n	800264e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff fd30 	bl	8001ee4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002494:	f7ff ffb4 	bl	8002400 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800249a:	e012      	b.n	80024c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800249c:	f7ff ffb0 	bl	8002400 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b0a      	cmp	r3, #10
 80024a8:	d90b      	bls.n	80024c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2205      	movs	r2, #5
 80024ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0c5      	b.n	800264e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0e5      	beq.n	800249c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0202 	bic.w	r2, r2, #2
 80024de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e0:	f7ff ff8e 	bl	8002400 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024e6:	e012      	b.n	800250e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024e8:	f7ff ff8a 	bl	8002400 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b0a      	cmp	r3, #10
 80024f4:	d90b      	bls.n	800250e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2205      	movs	r2, #5
 8002506:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e09f      	b.n	800264e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e5      	bne.n	80024e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e1b      	ldrb	r3, [r3, #24]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e007      	b.n	8002546 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7e5b      	ldrb	r3, [r3, #25]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e007      	b.n	8002570 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7e9b      	ldrb	r3, [r3, #26]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0220 	orr.w	r2, r2, #32
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e007      	b.n	800259a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0220 	bic.w	r2, r2, #32
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7edb      	ldrb	r3, [r3, #27]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0210 	bic.w	r2, r2, #16
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e007      	b.n	80025c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0210 	orr.w	r2, r2, #16
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7f1b      	ldrb	r3, [r3, #28]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e007      	b.n	80025ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0208 	bic.w	r2, r2, #8
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7f5b      	ldrb	r3, [r3, #29]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d108      	bne.n	8002608 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0204 	orr.w	r2, r2, #4
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0204 	bic.w	r2, r2, #4
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	ea42 0103 	orr.w	r1, r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	1e5a      	subs	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d003      	beq.n	800267e <HAL_CAN_ConfigFilter+0x26>
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b02      	cmp	r3, #2
 800267a:	f040 80be 	bne.w	80027fa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_CAN_ConfigFilter+0x1bc>)
 8002680:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002698:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	431a      	orrs	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2201      	movs	r2, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	401a      	ands	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d123      	bne.n	8002728 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002702:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3248      	adds	r2, #72	; 0x48
 8002708:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800271c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800271e:	6979      	ldr	r1, [r7, #20]
 8002720:	3348      	adds	r3, #72	; 0x48
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d122      	bne.n	8002776 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	431a      	orrs	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002750:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3248      	adds	r2, #72	; 0x48
 8002756:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800276a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800276c:	6979      	ldr	r1, [r7, #20]
 800276e:	3348      	adds	r3, #72	; 0x48
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43db      	mvns	r3, r3
 8002788:	401a      	ands	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002790:	e007      	b.n	80027a2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	431a      	orrs	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	401a      	ands	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027bc:	e007      	b.n	80027ce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	431a      	orrs	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027ec:	f023 0201 	bic.w	r2, r3, #1
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e006      	b.n	8002808 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40006400 	.word	0x40006400

08002818 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d12e      	bne.n	800288a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002844:	f7ff fddc 	bl	8002400 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800284a:	e012      	b.n	8002872 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800284c:	f7ff fdd8 	bl	8002400 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b0a      	cmp	r3, #10
 8002858:	d90b      	bls.n	8002872 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e012      	b.n	8002898 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e5      	bne.n	800284c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e006      	b.n	8002898 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
  }
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d003      	beq.n	80028c4 <HAL_CAN_GetRxMessage+0x24>
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	f040 80f3 	bne.w	8002aaa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10e      	bne.n	80028e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d116      	bne.n	8002906 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0e7      	b.n	8002ab8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d107      	bne.n	8002906 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0d8      	b.n	8002ab8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	331b      	adds	r3, #27
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	4413      	add	r3, r2
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0204 	and.w	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10c      	bne.n	800293e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	331b      	adds	r3, #27
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	4413      	add	r3, r2
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0d5b      	lsrs	r3, r3, #21
 8002934:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e00b      	b.n	8002956 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	331b      	adds	r3, #27
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	4413      	add	r3, r2
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	331b      	adds	r3, #27
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4413      	add	r3, r2
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0202 	and.w	r2, r3, #2
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	331b      	adds	r3, #27
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	4413      	add	r3, r2
 8002978:	3304      	adds	r3, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	331b      	adds	r3, #27
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	b2da      	uxtb	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	331b      	adds	r3, #27
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	0a1a      	lsrs	r2, r3, #8
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0c1a      	lsrs	r2, r3, #16
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	3302      	adds	r3, #2
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e1a      	lsrs	r2, r3, #24
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	3303      	adds	r3, #3
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0a1a      	lsrs	r2, r3, #8
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	3305      	adds	r3, #5
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0c1a      	lsrs	r2, r3, #16
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	3306      	adds	r3, #6
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e1a      	lsrs	r2, r3, #24
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	3307      	adds	r3, #7
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d108      	bne.n	8002a96 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0220 	orr.w	r2, r2, #32
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	e007      	b.n	8002aa6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0220 	orr.w	r2, r2, #32
 8002aa4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e006      	b.n	8002ab8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
  }
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d002      	beq.n	8002ae2 <HAL_CAN_ActivateNotification+0x1e>
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d109      	bne.n	8002af6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6959      	ldr	r1, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e006      	b.n	8002b04 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
  }
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d07c      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d023      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f983 	bl	8002e7e <HAL_CAN_TxMailbox0CompleteCallback>
 8002b78:	e016      	b.n	8002ba8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	e00c      	b.n	8002ba8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba0:	e002      	b.n	8002ba8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f989 	bl	8002eba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d024      	beq.n	8002bfc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f963 	bl	8002e92 <HAL_CAN_TxMailbox1CompleteCallback>
 8002bcc:	e016      	b.n	8002bfc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
 8002be0:	e00c      	b.n	8002bfc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf4:	e002      	b.n	8002bfc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f969 	bl	8002ece <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d024      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f943 	bl	8002ea6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c20:	e016      	b.n	8002c50 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d004      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	e00c      	b.n	8002c50 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	e002      	b.n	8002c50 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f949 	bl	8002ee2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2210      	movs	r2, #16
 8002c72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f930 	bl	8002ef6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fe fda6 	bl	8001800 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f908 	bl	8002f0a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fe fd86 	bl	8001824 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2210      	movs	r2, #16
 8002d32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f8f2 	bl	8002f1e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2208      	movs	r2, #8
 8002d54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8eb 	bl	8002f32 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d07b      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d072      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	f043 0302 	orr.w	r3, r3, #2
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	f043 0304 	orr.w	r3, r3, #4
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d043      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d03e      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dde:	2b60      	cmp	r3, #96	; 0x60
 8002de0:	d02b      	beq.n	8002e3a <HAL_CAN_IRQHandler+0x32a>
 8002de2:	2b60      	cmp	r3, #96	; 0x60
 8002de4:	d82e      	bhi.n	8002e44 <HAL_CAN_IRQHandler+0x334>
 8002de6:	2b50      	cmp	r3, #80	; 0x50
 8002de8:	d022      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x320>
 8002dea:	2b50      	cmp	r3, #80	; 0x50
 8002dec:	d82a      	bhi.n	8002e44 <HAL_CAN_IRQHandler+0x334>
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d019      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x316>
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d826      	bhi.n	8002e44 <HAL_CAN_IRQHandler+0x334>
 8002df6:	2b30      	cmp	r3, #48	; 0x30
 8002df8:	d010      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x30c>
 8002dfa:	2b30      	cmp	r3, #48	; 0x30
 8002dfc:	d822      	bhi.n	8002e44 <HAL_CAN_IRQHandler+0x334>
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d002      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x2f8>
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d005      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e06:	e01d      	b.n	8002e44 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	f043 0308 	orr.w	r3, r3, #8
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e10:	e019      	b.n	8002e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	f043 0310 	orr.w	r3, r3, #16
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e1a:	e014      	b.n	8002e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f043 0320 	orr.w	r3, r3, #32
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e24:	e00f      	b.n	8002e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e2e:	e00a      	b.n	8002e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e38:	e005      	b.n	8002e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e42:	e000      	b.n	8002e46 <HAL_CAN_IRQHandler+0x336>
            break;
 8002e44:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e54:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f868 	bl	8002f46 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e76:	bf00      	nop
 8002e78:	3728      	adds	r7, #40	; 0x28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8e:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	60d3      	str	r3, [r2, #12]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <__NVIC_GetPriorityGrouping+0x18>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	f003 0307 	and.w	r3, r3, #7
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db0b      	blt.n	8002fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	4907      	ldr	r1, [pc, #28]	; (8002ff8 <__NVIC_EnableIRQ+0x38>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000e100 	.word	0xe000e100

08002ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	6039      	str	r1, [r7, #0]
 8003006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	2b00      	cmp	r3, #0
 800300e:	db0a      	blt.n	8003026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	490c      	ldr	r1, [pc, #48]	; (8003048 <__NVIC_SetPriority+0x4c>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	440b      	add	r3, r1
 8003020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003024:	e00a      	b.n	800303c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4908      	ldr	r1, [pc, #32]	; (800304c <__NVIC_SetPriority+0x50>)
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	3b04      	subs	r3, #4
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	440b      	add	r3, r1
 800303a:	761a      	strb	r2, [r3, #24]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000e100 	.word	0xe000e100
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f1c3 0307 	rsb	r3, r3, #7
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf28      	it	cs
 800306e:	2304      	movcs	r3, #4
 8003070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3304      	adds	r3, #4
 8003076:	2b06      	cmp	r3, #6
 8003078:	d902      	bls.n	8003080 <NVIC_EncodePriority+0x30>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3b03      	subs	r3, #3
 800307e:	e000      	b.n	8003082 <NVIC_EncodePriority+0x32>
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	401a      	ands	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43d9      	mvns	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	4313      	orrs	r3, r2
         );
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3724      	adds	r7, #36	; 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c8:	d301      	bcc.n	80030ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00f      	b.n	80030ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <SysTick_Config+0x40>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d6:	210f      	movs	r1, #15
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030dc:	f7ff ff8e 	bl	8002ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <SysTick_Config+0x40>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <SysTick_Config+0x40>)
 80030e8:	2207      	movs	r2, #7
 80030ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff29 	bl	8002f5c <__NVIC_SetPriorityGrouping>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003124:	f7ff ff3e 	bl	8002fa4 <__NVIC_GetPriorityGrouping>
 8003128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff8e 	bl	8003050 <NVIC_EncodePriority>
 8003134:	4602      	mov	r2, r0
 8003136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff5d 	bl	8002ffc <__NVIC_SetPriority>
}
 8003142:	bf00      	nop
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff31 	bl	8002fc0 <__NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffa2 	bl	80030b8 <SysTick_Config>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e165      	b.n	8003468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800319c:	2201      	movs	r2, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	f040 8154 	bne.w	8003462 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d005      	beq.n	80031d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d130      	bne.n	8003234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003208:	2201      	movs	r2, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 0201 	and.w	r2, r3, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d017      	beq.n	8003270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d123      	bne.n	80032c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	08da      	lsrs	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3208      	adds	r2, #8
 8003284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3208      	adds	r2, #8
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80ae 	beq.w	8003462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <HAL_GPIO_Init+0x300>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	4a5c      	ldr	r2, [pc, #368]	; (8003480 <HAL_GPIO_Init+0x300>)
 8003310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003314:	6453      	str	r3, [r2, #68]	; 0x44
 8003316:	4b5a      	ldr	r3, [pc, #360]	; (8003480 <HAL_GPIO_Init+0x300>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003322:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_GPIO_Init+0x304>)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3302      	adds	r3, #2
 800332a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	220f      	movs	r2, #15
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <HAL_GPIO_Init+0x308>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d025      	beq.n	800339a <HAL_GPIO_Init+0x21a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4e      	ldr	r2, [pc, #312]	; (800348c <HAL_GPIO_Init+0x30c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01f      	beq.n	8003396 <HAL_GPIO_Init+0x216>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4d      	ldr	r2, [pc, #308]	; (8003490 <HAL_GPIO_Init+0x310>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d019      	beq.n	8003392 <HAL_GPIO_Init+0x212>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4c      	ldr	r2, [pc, #304]	; (8003494 <HAL_GPIO_Init+0x314>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_GPIO_Init+0x20e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4b      	ldr	r2, [pc, #300]	; (8003498 <HAL_GPIO_Init+0x318>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00d      	beq.n	800338a <HAL_GPIO_Init+0x20a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4a      	ldr	r2, [pc, #296]	; (800349c <HAL_GPIO_Init+0x31c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <HAL_GPIO_Init+0x206>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a49      	ldr	r2, [pc, #292]	; (80034a0 <HAL_GPIO_Init+0x320>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_GPIO_Init+0x202>
 800337e:	2306      	movs	r3, #6
 8003380:	e00c      	b.n	800339c <HAL_GPIO_Init+0x21c>
 8003382:	2307      	movs	r3, #7
 8003384:	e00a      	b.n	800339c <HAL_GPIO_Init+0x21c>
 8003386:	2305      	movs	r3, #5
 8003388:	e008      	b.n	800339c <HAL_GPIO_Init+0x21c>
 800338a:	2304      	movs	r3, #4
 800338c:	e006      	b.n	800339c <HAL_GPIO_Init+0x21c>
 800338e:	2303      	movs	r3, #3
 8003390:	e004      	b.n	800339c <HAL_GPIO_Init+0x21c>
 8003392:	2302      	movs	r3, #2
 8003394:	e002      	b.n	800339c <HAL_GPIO_Init+0x21c>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_GPIO_Init+0x21c>
 800339a:	2300      	movs	r3, #0
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	f002 0203 	and.w	r2, r2, #3
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	4093      	lsls	r3, r2
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ac:	4935      	ldr	r1, [pc, #212]	; (8003484 <HAL_GPIO_Init+0x304>)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ba:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <HAL_GPIO_Init+0x324>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033de:	4a31      	ldr	r2, [pc, #196]	; (80034a4 <HAL_GPIO_Init+0x324>)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e4:	4b2f      	ldr	r3, [pc, #188]	; (80034a4 <HAL_GPIO_Init+0x324>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003408:	4a26      	ldr	r2, [pc, #152]	; (80034a4 <HAL_GPIO_Init+0x324>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_GPIO_Init+0x324>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003432:	4a1c      	ldr	r2, [pc, #112]	; (80034a4 <HAL_GPIO_Init+0x324>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <HAL_GPIO_Init+0x324>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800345c:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <HAL_GPIO_Init+0x324>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3301      	adds	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	f67f ae96 	bls.w	800319c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40013800 	.word	0x40013800
 8003488:	40020000 	.word	0x40020000
 800348c:	40020400 	.word	0x40020400
 8003490:	40020800 	.word	0x40020800
 8003494:	40020c00 	.word	0x40020c00
 8003498:	40021000 	.word	0x40021000
 800349c:	40021400 	.word	0x40021400
 80034a0:	40021800 	.word	0x40021800
 80034a4:	40013c00 	.word	0x40013c00

080034a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e001      	b.n	80034ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034f4:	e003      	b.n	80034fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	041a      	lsls	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	619a      	str	r2, [r3, #24]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e12b      	b.n	8003776 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe fd2e 	bl	8001f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2224      	movs	r2, #36	; 0x24
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800355e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800356e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003570:	f001 f9e4 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8003574:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a81      	ldr	r2, [pc, #516]	; (8003780 <HAL_I2C_Init+0x274>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d807      	bhi.n	8003590 <HAL_I2C_Init+0x84>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4a80      	ldr	r2, [pc, #512]	; (8003784 <HAL_I2C_Init+0x278>)
 8003584:	4293      	cmp	r3, r2
 8003586:	bf94      	ite	ls
 8003588:	2301      	movls	r3, #1
 800358a:	2300      	movhi	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e006      	b.n	800359e <HAL_I2C_Init+0x92>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a7d      	ldr	r2, [pc, #500]	; (8003788 <HAL_I2C_Init+0x27c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	bf94      	ite	ls
 8003598:	2301      	movls	r3, #1
 800359a:	2300      	movhi	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0e7      	b.n	8003776 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4a78      	ldr	r2, [pc, #480]	; (800378c <HAL_I2C_Init+0x280>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0c9b      	lsrs	r3, r3, #18
 80035b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a6a      	ldr	r2, [pc, #424]	; (8003780 <HAL_I2C_Init+0x274>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d802      	bhi.n	80035e0 <HAL_I2C_Init+0xd4>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3301      	adds	r3, #1
 80035de:	e009      	b.n	80035f4 <HAL_I2C_Init+0xe8>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	4a69      	ldr	r2, [pc, #420]	; (8003790 <HAL_I2C_Init+0x284>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	3301      	adds	r3, #1
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003606:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	495c      	ldr	r1, [pc, #368]	; (8003780 <HAL_I2C_Init+0x274>)
 8003610:	428b      	cmp	r3, r1
 8003612:	d819      	bhi.n	8003648 <HAL_I2C_Init+0x13c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e59      	subs	r1, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003622:	1c59      	adds	r1, r3, #1
 8003624:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003628:	400b      	ands	r3, r1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_I2C_Init+0x138>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1e59      	subs	r1, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fbb1 f3f3 	udiv	r3, r1, r3
 800363c:	3301      	adds	r3, #1
 800363e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003642:	e051      	b.n	80036e8 <HAL_I2C_Init+0x1dc>
 8003644:	2304      	movs	r3, #4
 8003646:	e04f      	b.n	80036e8 <HAL_I2C_Init+0x1dc>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d111      	bne.n	8003674 <HAL_I2C_Init+0x168>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e58      	subs	r0, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	440b      	add	r3, r1
 800365e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e012      	b.n	800369a <HAL_I2C_Init+0x18e>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e58      	subs	r0, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	0099      	lsls	r1, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Init+0x196>
 800369e:	2301      	movs	r3, #1
 80036a0:	e022      	b.n	80036e8 <HAL_I2C_Init+0x1dc>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10e      	bne.n	80036c8 <HAL_I2C_Init+0x1bc>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1e58      	subs	r0, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6859      	ldr	r1, [r3, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	440b      	add	r3, r1
 80036b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c6:	e00f      	b.n	80036e8 <HAL_I2C_Init+0x1dc>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e58      	subs	r0, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	0099      	lsls	r1, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	fbb0 f3f3 	udiv	r3, r0, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	6809      	ldr	r1, [r1, #0]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6911      	ldr	r1, [r2, #16]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68d2      	ldr	r2, [r2, #12]
 8003722:	4311      	orrs	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	430b      	orrs	r3, r1
 800372a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	000186a0 	.word	0x000186a0
 8003784:	001e847f 	.word	0x001e847f
 8003788:	003d08ff 	.word	0x003d08ff
 800378c:	431bde83 	.word	0x431bde83
 8003790:	10624dd3 	.word	0x10624dd3

08003794 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	460b      	mov	r3, r1
 80037a2:	817b      	strh	r3, [r7, #10]
 80037a4:	4613      	mov	r3, r2
 80037a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7fe fe2a 	bl	8002400 <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	f040 80e0 	bne.w	800397c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	2319      	movs	r3, #25
 80037c2:	2201      	movs	r2, #1
 80037c4:	4970      	ldr	r1, [pc, #448]	; (8003988 <HAL_I2C_Master_Transmit+0x1f4>)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fde8 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
 80037d4:	e0d3      	b.n	800397e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_I2C_Master_Transmit+0x50>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e0cc      	b.n	800397e <HAL_I2C_Master_Transmit+0x1ea>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d007      	beq.n	800380a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0201 	orr.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003818:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2221      	movs	r2, #33	; 0x21
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2210      	movs	r2, #16
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	893a      	ldrh	r2, [r7, #8]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a50      	ldr	r2, [pc, #320]	; (800398c <HAL_I2C_Master_Transmit+0x1f8>)
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800384c:	8979      	ldrh	r1, [r7, #10]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	6a3a      	ldr	r2, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fbbc 	bl	8003fd0 <I2C_MasterRequestWrite>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e08d      	b.n	800397e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003878:	e066      	b.n	8003948 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fe62 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b04      	cmp	r3, #4
 8003890:	d107      	bne.n	80038a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e06b      	b.n	800397e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d11b      	bne.n	800391c <HAL_I2C_Master_Transmit+0x188>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d017      	beq.n	800391c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	781a      	ldrb	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	6a39      	ldr	r1, [r7, #32]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fe52 	bl	80045ca <I2C_WaitOnBTFFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	2b04      	cmp	r3, #4
 8003932:	d107      	bne.n	8003944 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003942:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e01a      	b.n	800397e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d194      	bne.n	800387a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	00100002 	.word	0x00100002
 800398c:	ffff0000 	.word	0xffff0000

08003990 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08c      	sub	sp, #48	; 0x30
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	461a      	mov	r2, r3
 800399c:	460b      	mov	r3, r1
 800399e:	817b      	strh	r3, [r7, #10]
 80039a0:	4613      	mov	r3, r2
 80039a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039a4:	f7fe fd2c 	bl	8002400 <HAL_GetTick>
 80039a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	f040 820b 	bne.w	8003dce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	2319      	movs	r3, #25
 80039be:	2201      	movs	r2, #1
 80039c0:	497c      	ldr	r1, [pc, #496]	; (8003bb4 <HAL_I2C_Master_Receive+0x224>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fcea 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80039ce:	2302      	movs	r3, #2
 80039d0:	e1fe      	b.n	8003dd0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_I2C_Master_Receive+0x50>
 80039dc:	2302      	movs	r3, #2
 80039de:	e1f7      	b.n	8003dd0 <HAL_I2C_Master_Receive+0x440>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d007      	beq.n	8003a06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2222      	movs	r2, #34	; 0x22
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2210      	movs	r2, #16
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	893a      	ldrh	r2, [r7, #8]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a5c      	ldr	r2, [pc, #368]	; (8003bb8 <HAL_I2C_Master_Receive+0x228>)
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a48:	8979      	ldrh	r1, [r7, #10]
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fb40 	bl	80040d4 <I2C_MasterRequestRead>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1b8      	b.n	8003dd0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d113      	bne.n	8003a8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	623b      	str	r3, [r7, #32]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	623b      	str	r3, [r7, #32]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e18c      	b.n	8003da8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d11b      	bne.n	8003ace <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e16c      	b.n	8003da8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d11b      	bne.n	8003b0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	e14c      	b.n	8003da8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b34:	e138      	b.n	8003da8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	f200 80f1 	bhi.w	8003d22 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d123      	bne.n	8003b90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fd7d 	bl	800464c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e139      	b.n	8003dd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b8e:	e10b      	b.n	8003da8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d14e      	bne.n	8003c36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	4906      	ldr	r1, [pc, #24]	; (8003bbc <HAL_I2C_Master_Receive+0x22c>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fbfa 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e10e      	b.n	8003dd0 <HAL_I2C_Master_Receive+0x440>
 8003bb2:	bf00      	nop
 8003bb4:	00100002 	.word	0x00100002
 8003bb8:	ffff0000 	.word	0xffff0000
 8003bbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c34:	e0b8      	b.n	8003da8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	4966      	ldr	r1, [pc, #408]	; (8003dd8 <HAL_I2C_Master_Receive+0x448>)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fbab 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0bf      	b.n	8003dd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2200      	movs	r2, #0
 8003c9a:	494f      	ldr	r1, [pc, #316]	; (8003dd8 <HAL_I2C_Master_Receive+0x448>)
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fb7d 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e091      	b.n	8003dd0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d20:	e042      	b.n	8003da8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fc90 	bl	800464c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e04c      	b.n	8003dd0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d118      	bne.n	8003da8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f47f aec2 	bne.w	8003b36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3728      	adds	r7, #40	; 0x28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	00010004 	.word	0x00010004

08003ddc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	4608      	mov	r0, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	817b      	strh	r3, [r7, #10]
 8003dee:	460b      	mov	r3, r1
 8003df0:	813b      	strh	r3, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df6:	f7fe fb03 	bl	8002400 <HAL_GetTick>
 8003dfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	f040 80d9 	bne.w	8003fbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2319      	movs	r3, #25
 8003e10:	2201      	movs	r2, #1
 8003e12:	496d      	ldr	r1, [pc, #436]	; (8003fc8 <HAL_I2C_Mem_Write+0x1ec>)
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fac1 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
 8003e22:	e0cc      	b.n	8003fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2C_Mem_Write+0x56>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e0c5      	b.n	8003fbe <HAL_I2C_Mem_Write+0x1e2>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d007      	beq.n	8003e58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2221      	movs	r2, #33	; 0x21
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2240      	movs	r2, #64	; 0x40
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a4d      	ldr	r2, [pc, #308]	; (8003fcc <HAL_I2C_Mem_Write+0x1f0>)
 8003e98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e9a:	88f8      	ldrh	r0, [r7, #6]
 8003e9c:	893a      	ldrh	r2, [r7, #8]
 8003e9e:	8979      	ldrh	r1, [r7, #10]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f9e0 	bl	8004270 <I2C_RequestMemoryWrite>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d052      	beq.n	8003f5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e081      	b.n	8003fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fb42 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d107      	bne.n	8003ee2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e06b      	b.n	8003fbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	781a      	ldrb	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d11b      	bne.n	8003f5c <HAL_I2C_Mem_Write+0x180>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d017      	beq.n	8003f5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	781a      	ldrb	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1aa      	bne.n	8003eba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fb2e 	bl	80045ca <I2C_WaitOnBTFFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d107      	bne.n	8003f8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e016      	b.n	8003fbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	00100002 	.word	0x00100002
 8003fcc:	ffff0000 	.word	0xffff0000

08003fd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d006      	beq.n	8003ffa <I2C_MasterRequestWrite+0x2a>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d003      	beq.n	8003ffa <I2C_MasterRequestWrite+0x2a>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ff8:	d108      	bne.n	800400c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e00b      	b.n	8004024 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	2b12      	cmp	r3, #18
 8004012:	d107      	bne.n	8004024 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004022:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f9b3 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404a:	d103      	bne.n	8004054 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e035      	b.n	80040c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004060:	d108      	bne.n	8004074 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004062:	897b      	ldrh	r3, [r7, #10]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	e01b      	b.n	80040ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004074:	897b      	ldrh	r3, [r7, #10]
 8004076:	11db      	asrs	r3, r3, #7
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f003 0306 	and.w	r3, r3, #6
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f063 030f 	orn	r3, r3, #15
 8004084:	b2da      	uxtb	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	490e      	ldr	r1, [pc, #56]	; (80040cc <I2C_MasterRequestWrite+0xfc>)
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f9d9 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e010      	b.n	80040c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040a2:	897b      	ldrh	r3, [r7, #10]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	4907      	ldr	r1, [pc, #28]	; (80040d0 <I2C_MasterRequestWrite+0x100>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f9c9 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	00010008 	.word	0x00010008
 80040d0:	00010002 	.word	0x00010002

080040d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	460b      	mov	r3, r1
 80040e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d006      	beq.n	800410e <I2C_MasterRequestRead+0x3a>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d003      	beq.n	800410e <I2C_MasterRequestRead+0x3a>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800410c:	d108      	bne.n	8004120 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e00b      	b.n	8004138 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	2b11      	cmp	r3, #17
 8004126:	d107      	bne.n	8004138 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004136:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f929 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00d      	beq.n	800416c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415e:	d103      	bne.n	8004168 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e079      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004174:	d108      	bne.n	8004188 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004176:	897b      	ldrh	r3, [r7, #10]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	e05f      	b.n	8004248 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004188:	897b      	ldrh	r3, [r7, #10]
 800418a:	11db      	asrs	r3, r3, #7
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0306 	and.w	r3, r3, #6
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f063 030f 	orn	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	4930      	ldr	r1, [pc, #192]	; (8004268 <I2C_MasterRequestRead+0x194>)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f94f 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e054      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4929      	ldr	r1, [pc, #164]	; (800426c <I2C_MasterRequestRead+0x198>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f93f 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e044      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f8c7 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	d103      	bne.n	800422c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e017      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004230:	897b      	ldrh	r3, [r7, #10]
 8004232:	11db      	asrs	r3, r3, #7
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0306 	and.w	r3, r3, #6
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f063 030e 	orn	r3, r3, #14
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4907      	ldr	r1, [pc, #28]	; (800426c <I2C_MasterRequestRead+0x198>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8fb 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	00010008 	.word	0x00010008
 800426c:	00010002 	.word	0x00010002

08004270 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	461a      	mov	r2, r3
 800427e:	4603      	mov	r3, r0
 8004280:	817b      	strh	r3, [r7, #10]
 8004282:	460b      	mov	r3, r1
 8004284:	813b      	strh	r3, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f878 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c0:	d103      	bne.n	80042ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e05f      	b.n	800438e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ce:	897b      	ldrh	r3, [r7, #10]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	6a3a      	ldr	r2, [r7, #32]
 80042e2:	492d      	ldr	r1, [pc, #180]	; (8004398 <I2C_RequestMemoryWrite+0x128>)
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f8b0 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e04c      	b.n	800438e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	6a39      	ldr	r1, [r7, #32]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f91a 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b04      	cmp	r3, #4
 8004320:	d107      	bne.n	8004332 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e02b      	b.n	800438e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800433c:	893b      	ldrh	r3, [r7, #8]
 800433e:	b2da      	uxtb	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	611a      	str	r2, [r3, #16]
 8004346:	e021      	b.n	800438c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004348:	893b      	ldrh	r3, [r7, #8]
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	b29b      	uxth	r3, r3
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004358:	6a39      	ldr	r1, [r7, #32]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f8f4 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00d      	beq.n	8004382 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b04      	cmp	r3, #4
 800436c:	d107      	bne.n	800437e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e005      	b.n	800438e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004382:	893b      	ldrh	r3, [r7, #8]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	00010002 	.word	0x00010002

0800439c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ac:	e025      	b.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b4:	d021      	beq.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fe f823 	bl	8002400 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d116      	bne.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e023      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10d      	bne.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	43da      	mvns	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	e00c      	b.n	800443a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d0b6      	beq.n	80043ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004458:	e051      	b.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d123      	bne.n	80044b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0204 	orr.w	r2, r3, #4
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e046      	b.n	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b8:	d021      	beq.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fd ffa1 	bl	8002400 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e020      	b.n	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10c      	bne.n	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf14      	ite	ne
 800451a:	2301      	movne	r3, #1
 800451c:	2300      	moveq	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	e00b      	b.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	43da      	mvns	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4013      	ands	r3, r2
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf14      	ite	ne
 8004534:	2301      	movne	r3, #1
 8004536:	2300      	moveq	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d18d      	bne.n	800445a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004554:	e02d      	b.n	80045b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f8ce 	bl	80046f8 <I2C_IsAcknowledgeFailed>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e02d      	b.n	80045c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456c:	d021      	beq.n	80045b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fd ff47 	bl	8002400 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d116      	bne.n	80045b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e007      	b.n	80045c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d1ca      	bne.n	8004556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d6:	e02d      	b.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f88d 	bl	80046f8 <I2C_IsAcknowledgeFailed>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e02d      	b.n	8004644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ee:	d021      	beq.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7fd ff06 	bl	8002400 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d116      	bne.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e007      	b.n	8004644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b04      	cmp	r3, #4
 8004640:	d1ca      	bne.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004658:	e042      	b.n	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b10      	cmp	r3, #16
 8004666:	d119      	bne.n	800469c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0210 	mvn.w	r2, #16
 8004670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e029      	b.n	80046f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469c:	f7fd feb0 	bl	8002400 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d302      	bcc.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d116      	bne.n	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e007      	b.n	80046f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d1b5      	bne.n	800465a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d11b      	bne.n	8004748 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004718:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0cc      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800476c:	4b68      	ldr	r3, [pc, #416]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d90c      	bls.n	8004794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b65      	ldr	r3, [pc, #404]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b63      	ldr	r3, [pc, #396]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0b8      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ac:	4b59      	ldr	r3, [pc, #356]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a58      	ldr	r2, [pc, #352]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c4:	4b53      	ldr	r3, [pc, #332]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a52      	ldr	r2, [pc, #328]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d0:	4b50      	ldr	r3, [pc, #320]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	494d      	ldr	r1, [pc, #308]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d044      	beq.n	8004878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	4b47      	ldr	r3, [pc, #284]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d119      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d003      	beq.n	8004816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004812:	2b03      	cmp	r3, #3
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004816:	4b3f      	ldr	r3, [pc, #252]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e06f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004826:	4b3b      	ldr	r3, [pc, #236]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e067      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004836:	4b37      	ldr	r3, [pc, #220]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 0203 	bic.w	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4934      	ldr	r1, [pc, #208]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004848:	f7fd fdda 	bl	8002400 <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	e00a      	b.n	8004866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004850:	f7fd fdd6 	bl	8002400 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f241 3288 	movw	r2, #5000	; 0x1388
 800485e:	4293      	cmp	r3, r2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e04f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 020c 	and.w	r2, r3, #12
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	429a      	cmp	r2, r3
 8004876:	d1eb      	bne.n	8004850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004878:	4b25      	ldr	r3, [pc, #148]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d20c      	bcs.n	80048a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b22      	ldr	r3, [pc, #136]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e032      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ac:	4b19      	ldr	r3, [pc, #100]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4916      	ldr	r1, [pc, #88]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	490e      	ldr	r1, [pc, #56]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048de:	f000 f855 	bl	800498c <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	490a      	ldr	r1, [pc, #40]	; (8004918 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fd3a 	bl	8002378 <HAL_InitTick>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023c00 	.word	0x40023c00
 8004914:	40023800 	.word	0x40023800
 8004918:	08008830 	.word	0x08008830
 800491c:	20000020 	.word	0x20000020
 8004920:	20000024 	.word	0x20000024

08004924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004928:	4b03      	ldr	r3, [pc, #12]	; (8004938 <HAL_RCC_GetHCLKFreq+0x14>)
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000020 	.word	0x20000020

0800493c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004940:	f7ff fff0 	bl	8004924 <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0a9b      	lsrs	r3, r3, #10
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	08008840 	.word	0x08008840

08004964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004968:	f7ff ffdc 	bl	8004924 <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	0b5b      	lsrs	r3, r3, #13
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4903      	ldr	r1, [pc, #12]	; (8004988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40023800 	.word	0x40023800
 8004988:	08008840 	.word	0x08008840

0800498c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800498c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004990:	b0ae      	sub	sp, #184	; 0xb8
 8004992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b2:	4bcb      	ldr	r3, [pc, #812]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	f200 8206 	bhi.w	8004dcc <HAL_RCC_GetSysClockFreq+0x440>
 80049c0:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80049c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c6:	bf00      	nop
 80049c8:	080049fd 	.word	0x080049fd
 80049cc:	08004dcd 	.word	0x08004dcd
 80049d0:	08004dcd 	.word	0x08004dcd
 80049d4:	08004dcd 	.word	0x08004dcd
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	08004dcd 	.word	0x08004dcd
 80049e0:	08004dcd 	.word	0x08004dcd
 80049e4:	08004dcd 	.word	0x08004dcd
 80049e8:	08004a0d 	.word	0x08004a0d
 80049ec:	08004dcd 	.word	0x08004dcd
 80049f0:	08004dcd 	.word	0x08004dcd
 80049f4:	08004dcd 	.word	0x08004dcd
 80049f8:	08004bfd 	.word	0x08004bfd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4bb9      	ldr	r3, [pc, #740]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x358>)
 80049fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004a02:	e1e7      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a04:	4bb8      	ldr	r3, [pc, #736]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a0a:	e1e3      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a0c:	4bb4      	ldr	r3, [pc, #720]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a18:	4bb1      	ldr	r3, [pc, #708]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d071      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a24:	4bae      	ldr	r3, [pc, #696]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	f04f 0000 	mov.w	r0, #0
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	0159      	lsls	r1, r3, #5
 8004a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a5c:	0150      	lsls	r0, r2, #5
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4621      	mov	r1, r4
 8004a64:	1a51      	subs	r1, r2, r1
 8004a66:	6439      	str	r1, [r7, #64]	; 0x40
 8004a68:	4629      	mov	r1, r5
 8004a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	018b      	lsls	r3, r1, #6
 8004a80:	4641      	mov	r1, r8
 8004a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a86:	4641      	mov	r1, r8
 8004a88:	018a      	lsls	r2, r1, #6
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	1a51      	subs	r1, r2, r1
 8004a8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a90:	4649      	mov	r1, r9
 8004a92:	eb63 0301 	sbc.w	r3, r3, r1
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	00cb      	lsls	r3, r1, #3
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aae:	4641      	mov	r1, r8
 8004ab0:	00ca      	lsls	r2, r1, #3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4622      	mov	r2, r4
 8004aba:	189b      	adds	r3, r3, r2
 8004abc:	633b      	str	r3, [r7, #48]	; 0x30
 8004abe:	462b      	mov	r3, r5
 8004ac0:	460a      	mov	r2, r1
 8004ac2:	eb42 0303 	adc.w	r3, r2, r3
 8004ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	024b      	lsls	r3, r1, #9
 8004ad8:	4621      	mov	r1, r4
 8004ada:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ade:	4621      	mov	r1, r4
 8004ae0:	024a      	lsls	r2, r1, #9
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004af0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004af4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004af8:	f7fc f8c6 	bl	8000c88 <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4613      	mov	r3, r2
 8004b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b06:	e067      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b08:	4b75      	ldr	r3, [pc, #468]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	099b      	lsrs	r3, r3, #6
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b22:	2300      	movs	r3, #0
 8004b24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	f04f 0000 	mov.w	r0, #0
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	0159      	lsls	r1, r3, #5
 8004b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b3c:	0150      	lsls	r0, r2, #5
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4621      	mov	r1, r4
 8004b44:	1a51      	subs	r1, r2, r1
 8004b46:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b48:	4629      	mov	r1, r5
 8004b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	018b      	lsls	r3, r1, #6
 8004b60:	4641      	mov	r1, r8
 8004b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b66:	4641      	mov	r1, r8
 8004b68:	018a      	lsls	r2, r1, #6
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b70:	4649      	mov	r1, r9
 8004b72:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b8a:	4692      	mov	sl, r2
 8004b8c:	469b      	mov	fp, r3
 8004b8e:	4623      	mov	r3, r4
 8004b90:	eb1a 0303 	adds.w	r3, sl, r3
 8004b94:	623b      	str	r3, [r7, #32]
 8004b96:	462b      	mov	r3, r5
 8004b98:	eb4b 0303 	adc.w	r3, fp, r3
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004baa:	4629      	mov	r1, r5
 8004bac:	028b      	lsls	r3, r1, #10
 8004bae:	4621      	mov	r1, r4
 8004bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	028a      	lsls	r2, r1, #10
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4619      	mov	r1, r3
 8004bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	673b      	str	r3, [r7, #112]	; 0x70
 8004bc4:	677a      	str	r2, [r7, #116]	; 0x74
 8004bc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004bca:	f7fc f85d 	bl	8000c88 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bd8:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	3301      	adds	r3, #1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bfa:	e0eb      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bfc:	4b38      	ldr	r3, [pc, #224]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d06b      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c14:	4b32      	ldr	r3, [pc, #200]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	099b      	lsrs	r3, r3, #6
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	663b      	str	r3, [r7, #96]	; 0x60
 8004c28:	2300      	movs	r3, #0
 8004c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c30:	4622      	mov	r2, r4
 8004c32:	462b      	mov	r3, r5
 8004c34:	f04f 0000 	mov.w	r0, #0
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	0159      	lsls	r1, r3, #5
 8004c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c42:	0150      	lsls	r0, r2, #5
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4621      	mov	r1, r4
 8004c4a:	1a51      	subs	r1, r2, r1
 8004c4c:	61b9      	str	r1, [r7, #24]
 8004c4e:	4629      	mov	r1, r5
 8004c50:	eb63 0301 	sbc.w	r3, r3, r1
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c62:	4659      	mov	r1, fp
 8004c64:	018b      	lsls	r3, r1, #6
 8004c66:	4651      	mov	r1, sl
 8004c68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c6c:	4651      	mov	r1, sl
 8004c6e:	018a      	lsls	r2, r1, #6
 8004c70:	4651      	mov	r1, sl
 8004c72:	ebb2 0801 	subs.w	r8, r2, r1
 8004c76:	4659      	mov	r1, fp
 8004c78:	eb63 0901 	sbc.w	r9, r3, r1
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c90:	4690      	mov	r8, r2
 8004c92:	4699      	mov	r9, r3
 8004c94:	4623      	mov	r3, r4
 8004c96:	eb18 0303 	adds.w	r3, r8, r3
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	eb49 0303 	adc.w	r3, r9, r3
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	024b      	lsls	r3, r1, #9
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cba:	4621      	mov	r1, r4
 8004cbc:	024a      	lsls	r2, r1, #9
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ccc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cd0:	f7fb ffda 	bl	8000c88 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4613      	mov	r3, r2
 8004cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cde:	e065      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x420>
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	00f42400 	.word	0x00f42400
 8004ce8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cec:	4b3d      	ldr	r3, [pc, #244]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	099b      	lsrs	r3, r3, #6
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cfc:	653b      	str	r3, [r7, #80]	; 0x50
 8004cfe:	2300      	movs	r3, #0
 8004d00:	657b      	str	r3, [r7, #84]	; 0x54
 8004d02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004d06:	4642      	mov	r2, r8
 8004d08:	464b      	mov	r3, r9
 8004d0a:	f04f 0000 	mov.w	r0, #0
 8004d0e:	f04f 0100 	mov.w	r1, #0
 8004d12:	0159      	lsls	r1, r3, #5
 8004d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d18:	0150      	lsls	r0, r2, #5
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4641      	mov	r1, r8
 8004d20:	1a51      	subs	r1, r2, r1
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	4649      	mov	r1, r9
 8004d26:	eb63 0301 	sbc.w	r3, r3, r1
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d38:	4659      	mov	r1, fp
 8004d3a:	018b      	lsls	r3, r1, #6
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d42:	4651      	mov	r1, sl
 8004d44:	018a      	lsls	r2, r1, #6
 8004d46:	4651      	mov	r1, sl
 8004d48:	1a54      	subs	r4, r2, r1
 8004d4a:	4659      	mov	r1, fp
 8004d4c:	eb63 0501 	sbc.w	r5, r3, r1
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	00eb      	lsls	r3, r5, #3
 8004d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5e:	00e2      	lsls	r2, r4, #3
 8004d60:	4614      	mov	r4, r2
 8004d62:	461d      	mov	r5, r3
 8004d64:	4643      	mov	r3, r8
 8004d66:	18e3      	adds	r3, r4, r3
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	eb45 0303 	adc.w	r3, r5, r3
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7e:	4629      	mov	r1, r5
 8004d80:	028b      	lsls	r3, r1, #10
 8004d82:	4621      	mov	r1, r4
 8004d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d88:	4621      	mov	r1, r4
 8004d8a:	028a      	lsls	r2, r1, #10
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d94:	2200      	movs	r2, #0
 8004d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004d9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d9e:	f7fb ff73 	bl	8000c88 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4613      	mov	r3, r2
 8004da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	0f1b      	lsrs	r3, r3, #28
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dca:	e003      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	37b8      	adds	r7, #184	; 0xb8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	00f42400 	.word	0x00f42400

08004dec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e28d      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8083 	beq.w	8004f12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e0c:	4b94      	ldr	r3, [pc, #592]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d019      	beq.n	8004e4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e18:	4b91      	ldr	r3, [pc, #580]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e24:	4b8e      	ldr	r3, [pc, #568]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e30:	d00c      	beq.n	8004e4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e32:	4b8b      	ldr	r3, [pc, #556]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e3a:	2b0c      	cmp	r3, #12
 8004e3c:	d112      	bne.n	8004e64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3e:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4a:	d10b      	bne.n	8004e64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4c:	4b84      	ldr	r3, [pc, #528]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05b      	beq.n	8004f10 <HAL_RCC_OscConfig+0x124>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d157      	bne.n	8004f10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e25a      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d106      	bne.n	8004e7c <HAL_RCC_OscConfig+0x90>
 8004e6e:	4b7c      	ldr	r3, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a7b      	ldr	r2, [pc, #492]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e01d      	b.n	8004eb8 <HAL_RCC_OscConfig+0xcc>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0xb4>
 8004e86:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a75      	ldr	r2, [pc, #468]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a72      	ldr	r2, [pc, #456]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e00b      	b.n	8004eb8 <HAL_RCC_OscConfig+0xcc>
 8004ea0:	4b6f      	ldr	r3, [pc, #444]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a6e      	ldr	r2, [pc, #440]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6b      	ldr	r2, [pc, #428]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d013      	beq.n	8004ee8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fd fa9e 	bl	8002400 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fd fa9a 	bl	8002400 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e21f      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xdc>
 8004ee6:	e014      	b.n	8004f12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fd fa8a 	bl	8002400 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fd fa86 	bl	8002400 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e20b      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	4b57      	ldr	r3, [pc, #348]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x104>
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d06f      	beq.n	8004ffe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f1e:	4b50      	ldr	r3, [pc, #320]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d017      	beq.n	8004f5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f2a:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d105      	bne.n	8004f42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d11c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4e:	4b44      	ldr	r3, [pc, #272]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d116      	bne.n	8004f88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_RCC_OscConfig+0x186>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e1d3      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4937      	ldr	r1, [pc, #220]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f86:	e03a      	b.n	8004ffe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d020      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f90:	4b34      	ldr	r3, [pc, #208]	; (8005064 <HAL_RCC_OscConfig+0x278>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f96:	f7fd fa33 	bl	8002400 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f9e:	f7fd fa2f 	bl	8002400 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e1b4      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fbc:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4925      	ldr	r1, [pc, #148]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]
 8004fd0:	e015      	b.n	8004ffe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RCC_OscConfig+0x278>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fd fa12 	bl	8002400 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe0:	f7fd fa0e 	bl	8002400 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e193      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d036      	beq.n	8005078 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <HAL_RCC_OscConfig+0x27c>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fd f9f2 	bl	8002400 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005020:	f7fd f9ee 	bl	8002400 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e173      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_OscConfig+0x274>)
 8005034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x234>
 800503e:	e01b      	b.n	8005078 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <HAL_RCC_OscConfig+0x27c>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7fd f9db 	bl	8002400 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800504c:	e00e      	b.n	800506c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504e:	f7fd f9d7 	bl	8002400 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d907      	bls.n	800506c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e15c      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
 8005060:	40023800 	.word	0x40023800
 8005064:	42470000 	.word	0x42470000
 8005068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506c:	4b8a      	ldr	r3, [pc, #552]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 800506e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ea      	bne.n	800504e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8097 	beq.w	80051b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508a:	4b83      	ldr	r3, [pc, #524]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	4b7f      	ldr	r3, [pc, #508]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	4a7e      	ldr	r2, [pc, #504]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6413      	str	r3, [r2, #64]	; 0x40
 80050a6:	4b7c      	ldr	r3, [pc, #496]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b6:	4b79      	ldr	r3, [pc, #484]	; (800529c <HAL_RCC_OscConfig+0x4b0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d118      	bne.n	80050f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050c2:	4b76      	ldr	r3, [pc, #472]	; (800529c <HAL_RCC_OscConfig+0x4b0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a75      	ldr	r2, [pc, #468]	; (800529c <HAL_RCC_OscConfig+0x4b0>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ce:	f7fd f997 	bl	8002400 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d6:	f7fd f993 	bl	8002400 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e118      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e8:	4b6c      	ldr	r3, [pc, #432]	; (800529c <HAL_RCC_OscConfig+0x4b0>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <HAL_RCC_OscConfig+0x31e>
 80050fc:	4b66      	ldr	r3, [pc, #408]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	4a65      	ldr	r2, [pc, #404]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	; 0x70
 8005108:	e01c      	b.n	8005144 <HAL_RCC_OscConfig+0x358>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b05      	cmp	r3, #5
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0x340>
 8005112:	4b61      	ldr	r3, [pc, #388]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a60      	ldr	r2, [pc, #384]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	4b5e      	ldr	r3, [pc, #376]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a5d      	ldr	r2, [pc, #372]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	6713      	str	r3, [r2, #112]	; 0x70
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0x358>
 800512c:	4b5a      	ldr	r3, [pc, #360]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a59      	ldr	r2, [pc, #356]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
 8005138:	4b57      	ldr	r3, [pc, #348]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	4a56      	ldr	r2, [pc, #344]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 800513e:	f023 0304 	bic.w	r3, r3, #4
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fd f958 	bl	8002400 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005154:	f7fd f954 	bl	8002400 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0d7      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516a:	4b4b      	ldr	r3, [pc, #300]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0ee      	beq.n	8005154 <HAL_RCC_OscConfig+0x368>
 8005176:	e014      	b.n	80051a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005178:	f7fd f942 	bl	8002400 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517e:	e00a      	b.n	8005196 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005180:	f7fd f93e 	bl	8002400 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	; 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0c1      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005196:	4b40      	ldr	r3, [pc, #256]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ee      	bne.n	8005180 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a8:	4b3b      	ldr	r3, [pc, #236]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	4a3a      	ldr	r2, [pc, #232]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 80051ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80ad 	beq.w	8005318 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051be:	4b36      	ldr	r3, [pc, #216]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d060      	beq.n	800528c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d145      	bne.n	800525e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	4b33      	ldr	r3, [pc, #204]	; (80052a0 <HAL_RCC_OscConfig+0x4b4>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fd f912 	bl	8002400 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fd f90e 	bl	8002400 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e093      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	4b29      	ldr	r3, [pc, #164]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	019b      	lsls	r3, r3, #6
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	3b01      	subs	r3, #1
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	071b      	lsls	r3, r3, #28
 800522a:	491b      	ldr	r1, [pc, #108]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 800522c:	4313      	orrs	r3, r2
 800522e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_RCC_OscConfig+0x4b4>)
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005236:	f7fd f8e3 	bl	8002400 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523e:	f7fd f8df 	bl	8002400 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e064      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005250:	4b11      	ldr	r3, [pc, #68]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x452>
 800525c:	e05c      	b.n	8005318 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525e:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <HAL_RCC_OscConfig+0x4b4>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fd f8cc 	bl	8002400 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800526c:	f7fd f8c8 	bl	8002400 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e04d      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <HAL_RCC_OscConfig+0x4ac>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x480>
 800528a:	e045      	b.n	8005318 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d107      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e040      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
 8005298:	40023800 	.word	0x40023800
 800529c:	40007000 	.word	0x40007000
 80052a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052a4:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <HAL_RCC_OscConfig+0x538>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d030      	beq.n	8005314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052bc:	429a      	cmp	r2, r3
 80052be:	d129      	bne.n	8005314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d122      	bne.n	8005314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052d4:	4013      	ands	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052dc:	4293      	cmp	r3, r2
 80052de:	d119      	bne.n	8005314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	3b01      	subs	r3, #1
 80052ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d10f      	bne.n	8005314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005300:	429a      	cmp	r2, r3
 8005302:	d107      	bne.n	8005314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800

08005328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e03f      	b.n	80053ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc fe68 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2224      	movs	r2, #36	; 0x24
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800536a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f929 	bl	80055c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b08a      	sub	sp, #40	; 0x28
 80053c6:	af02      	add	r7, sp, #8
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d17c      	bne.n	80054dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_UART_Transmit+0x2c>
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e075      	b.n	80054de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Transmit+0x3e>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e06e      	b.n	80054de <HAL_UART_Transmit+0x11c>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2221      	movs	r2, #33	; 0x21
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005416:	f7fc fff3 	bl	8002400 <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005430:	d108      	bne.n	8005444 <HAL_UART_Transmit+0x82>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	e003      	b.n	800544c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005454:	e02a      	b.n	80054ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f840 	bl	80054e6 <UART_WaitOnFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e036      	b.n	80054de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	3302      	adds	r3, #2
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	e007      	b.n	800549e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	3301      	adds	r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1cf      	bne.n	8005456 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2200      	movs	r2, #0
 80054be:	2140      	movs	r1, #64	; 0x40
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f810 	bl	80054e6 <UART_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e006      	b.n	80054de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b090      	sub	sp, #64	; 0x40
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	4613      	mov	r3, r2
 80054f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f6:	e050      	b.n	800559a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fe:	d04c      	beq.n	800559a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <UART_WaitOnFlagUntilTimeout+0x30>
 8005506:	f7fc ff7b 	bl	8002400 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005512:	429a      	cmp	r2, r3
 8005514:	d241      	bcs.n	800559a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800552c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005536:	637a      	str	r2, [r7, #52]	; 0x34
 8005538:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800553c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e5      	bne.n	8005516 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3314      	adds	r3, #20
 8005550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	613b      	str	r3, [r7, #16]
   return(result);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f023 0301 	bic.w	r3, r3, #1
 8005560:	63bb      	str	r3, [r7, #56]	; 0x38
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3314      	adds	r3, #20
 8005568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800556a:	623a      	str	r2, [r7, #32]
 800556c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	69f9      	ldr	r1, [r7, #28]
 8005570:	6a3a      	ldr	r2, [r7, #32]
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	61bb      	str	r3, [r7, #24]
   return(result);
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e5      	bne.n	800554a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e00f      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4013      	ands	r3, r2
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d09f      	beq.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3740      	adds	r7, #64	; 0x40
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c8:	b0c0      	sub	sp, #256	; 0x100
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	68d9      	ldr	r1, [r3, #12]
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	ea40 0301 	orr.w	r3, r0, r1
 80055ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	431a      	orrs	r2, r3
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800561c:	f021 010c 	bic.w	r1, r1, #12
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800562a:	430b      	orrs	r3, r1
 800562c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	6999      	ldr	r1, [r3, #24]
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	ea40 0301 	orr.w	r3, r0, r1
 800564a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b8f      	ldr	r3, [pc, #572]	; (8005890 <UART_SetConfig+0x2cc>)
 8005654:	429a      	cmp	r2, r3
 8005656:	d005      	beq.n	8005664 <UART_SetConfig+0xa0>
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b8d      	ldr	r3, [pc, #564]	; (8005894 <UART_SetConfig+0x2d0>)
 8005660:	429a      	cmp	r2, r3
 8005662:	d104      	bne.n	800566e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7ff f97e 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 8005668:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800566c:	e003      	b.n	8005676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800566e:	f7ff f965 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8005672:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005680:	f040 810c 	bne.w	800589c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005688:	2200      	movs	r2, #0
 800568a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800568e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	1891      	adds	r1, r2, r2
 800569c:	65b9      	str	r1, [r7, #88]	; 0x58
 800569e:	415b      	adcs	r3, r3
 80056a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056a6:	4621      	mov	r1, r4
 80056a8:	eb12 0801 	adds.w	r8, r2, r1
 80056ac:	4629      	mov	r1, r5
 80056ae:	eb43 0901 	adc.w	r9, r3, r1
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c6:	4690      	mov	r8, r2
 80056c8:	4699      	mov	r9, r3
 80056ca:	4623      	mov	r3, r4
 80056cc:	eb18 0303 	adds.w	r3, r8, r3
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056d4:	462b      	mov	r3, r5
 80056d6:	eb49 0303 	adc.w	r3, r9, r3
 80056da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056f2:	460b      	mov	r3, r1
 80056f4:	18db      	adds	r3, r3, r3
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
 80056f8:	4613      	mov	r3, r2
 80056fa:	eb42 0303 	adc.w	r3, r2, r3
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005708:	f7fb fabe 	bl	8000c88 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <UART_SetConfig+0x2d4>)
 8005712:	fba3 2302 	umull	r2, r3, r3, r2
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	011c      	lsls	r4, r3, #4
 800571a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005724:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	1891      	adds	r1, r2, r2
 8005732:	64b9      	str	r1, [r7, #72]	; 0x48
 8005734:	415b      	adcs	r3, r3
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800573c:	4641      	mov	r1, r8
 800573e:	eb12 0a01 	adds.w	sl, r2, r1
 8005742:	4649      	mov	r1, r9
 8005744:	eb43 0b01 	adc.w	fp, r3, r1
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800575c:	4692      	mov	sl, r2
 800575e:	469b      	mov	fp, r3
 8005760:	4643      	mov	r3, r8
 8005762:	eb1a 0303 	adds.w	r3, sl, r3
 8005766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800576a:	464b      	mov	r3, r9
 800576c:	eb4b 0303 	adc.w	r3, fp, r3
 8005770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005780:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005788:	460b      	mov	r3, r1
 800578a:	18db      	adds	r3, r3, r3
 800578c:	643b      	str	r3, [r7, #64]	; 0x40
 800578e:	4613      	mov	r3, r2
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
 8005796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800579a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800579e:	f7fb fa73 	bl	8000c88 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <UART_SetConfig+0x2d4>)
 80057aa:	fba3 2301 	umull	r2, r3, r3, r1
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2264      	movs	r2, #100	; 0x64
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	1acb      	subs	r3, r1, r3
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057be:	4b36      	ldr	r3, [pc, #216]	; (8005898 <UART_SetConfig+0x2d4>)
 80057c0:	fba3 2302 	umull	r2, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057cc:	441c      	add	r4, r3
 80057ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	1891      	adds	r1, r2, r2
 80057e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057e8:	415b      	adcs	r3, r3
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057f0:	4641      	mov	r1, r8
 80057f2:	1851      	adds	r1, r2, r1
 80057f4:	6339      	str	r1, [r7, #48]	; 0x30
 80057f6:	4649      	mov	r1, r9
 80057f8:	414b      	adcs	r3, r1
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005808:	4659      	mov	r1, fp
 800580a:	00cb      	lsls	r3, r1, #3
 800580c:	4651      	mov	r1, sl
 800580e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005812:	4651      	mov	r1, sl
 8005814:	00ca      	lsls	r2, r1, #3
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	4603      	mov	r3, r0
 800581c:	4642      	mov	r2, r8
 800581e:	189b      	adds	r3, r3, r2
 8005820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005824:	464b      	mov	r3, r9
 8005826:	460a      	mov	r2, r1
 8005828:	eb42 0303 	adc.w	r3, r2, r3
 800582c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800583c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005844:	460b      	mov	r3, r1
 8005846:	18db      	adds	r3, r3, r3
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
 800584a:	4613      	mov	r3, r2
 800584c:	eb42 0303 	adc.w	r3, r2, r3
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800585a:	f7fb fa15 	bl	8000c88 <__aeabi_uldivmod>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <UART_SetConfig+0x2d4>)
 8005864:	fba3 1302 	umull	r1, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	2164      	movs	r1, #100	; 0x64
 800586c:	fb01 f303 	mul.w	r3, r1, r3
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	3332      	adds	r3, #50	; 0x32
 8005876:	4a08      	ldr	r2, [pc, #32]	; (8005898 <UART_SetConfig+0x2d4>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	f003 0207 	and.w	r2, r3, #7
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4422      	add	r2, r4
 800588a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800588c:	e106      	b.n	8005a9c <UART_SetConfig+0x4d8>
 800588e:	bf00      	nop
 8005890:	40011000 	.word	0x40011000
 8005894:	40011400 	.word	0x40011400
 8005898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800589c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ae:	4642      	mov	r2, r8
 80058b0:	464b      	mov	r3, r9
 80058b2:	1891      	adds	r1, r2, r2
 80058b4:	6239      	str	r1, [r7, #32]
 80058b6:	415b      	adcs	r3, r3
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058be:	4641      	mov	r1, r8
 80058c0:	1854      	adds	r4, r2, r1
 80058c2:	4649      	mov	r1, r9
 80058c4:	eb43 0501 	adc.w	r5, r3, r1
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	00eb      	lsls	r3, r5, #3
 80058d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d6:	00e2      	lsls	r2, r4, #3
 80058d8:	4614      	mov	r4, r2
 80058da:	461d      	mov	r5, r3
 80058dc:	4643      	mov	r3, r8
 80058de:	18e3      	adds	r3, r4, r3
 80058e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058e4:	464b      	mov	r3, r9
 80058e6:	eb45 0303 	adc.w	r3, r5, r3
 80058ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800590a:	4629      	mov	r1, r5
 800590c:	008b      	lsls	r3, r1, #2
 800590e:	4621      	mov	r1, r4
 8005910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005914:	4621      	mov	r1, r4
 8005916:	008a      	lsls	r2, r1, #2
 8005918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800591c:	f7fb f9b4 	bl	8000c88 <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005926:	fba3 2302 	umull	r2, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	011c      	lsls	r4, r3, #4
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800593c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	1891      	adds	r1, r2, r2
 8005946:	61b9      	str	r1, [r7, #24]
 8005948:	415b      	adcs	r3, r3
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005950:	4641      	mov	r1, r8
 8005952:	1851      	adds	r1, r2, r1
 8005954:	6139      	str	r1, [r7, #16]
 8005956:	4649      	mov	r1, r9
 8005958:	414b      	adcs	r3, r1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005968:	4659      	mov	r1, fp
 800596a:	00cb      	lsls	r3, r1, #3
 800596c:	4651      	mov	r1, sl
 800596e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005972:	4651      	mov	r1, sl
 8005974:	00ca      	lsls	r2, r1, #3
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	4603      	mov	r3, r0
 800597c:	4642      	mov	r2, r8
 800597e:	189b      	adds	r3, r3, r2
 8005980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005984:	464b      	mov	r3, r9
 8005986:	460a      	mov	r2, r1
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	67bb      	str	r3, [r7, #120]	; 0x78
 800599a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059a8:	4649      	mov	r1, r9
 80059aa:	008b      	lsls	r3, r1, #2
 80059ac:	4641      	mov	r1, r8
 80059ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b2:	4641      	mov	r1, r8
 80059b4:	008a      	lsls	r2, r1, #2
 80059b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059ba:	f7fb f965 	bl	8000c88 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	4b38      	ldr	r3, [pc, #224]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059c6:	fba3 2301 	umull	r2, r3, r3, r1
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	2264      	movs	r2, #100	; 0x64
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	1acb      	subs	r3, r1, r3
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	3332      	adds	r3, #50	; 0x32
 80059d8:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e4:	441c      	add	r4, r3
 80059e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ea:	2200      	movs	r2, #0
 80059ec:	673b      	str	r3, [r7, #112]	; 0x70
 80059ee:	677a      	str	r2, [r7, #116]	; 0x74
 80059f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059f4:	4642      	mov	r2, r8
 80059f6:	464b      	mov	r3, r9
 80059f8:	1891      	adds	r1, r2, r2
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	415b      	adcs	r3, r3
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a04:	4641      	mov	r1, r8
 8005a06:	1851      	adds	r1, r2, r1
 8005a08:	6039      	str	r1, [r7, #0]
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	414b      	adcs	r3, r1
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a1c:	4659      	mov	r1, fp
 8005a1e:	00cb      	lsls	r3, r1, #3
 8005a20:	4651      	mov	r1, sl
 8005a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a26:	4651      	mov	r1, sl
 8005a28:	00ca      	lsls	r2, r1, #3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4642      	mov	r2, r8
 8005a32:	189b      	adds	r3, r3, r2
 8005a34:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a36:	464b      	mov	r3, r9
 8005a38:	460a      	mov	r2, r1
 8005a3a:	eb42 0303 	adc.w	r3, r2, r3
 8005a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	663b      	str	r3, [r7, #96]	; 0x60
 8005a4a:	667a      	str	r2, [r7, #100]	; 0x64
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a58:	4649      	mov	r1, r9
 8005a5a:	008b      	lsls	r3, r1, #2
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a62:	4641      	mov	r1, r8
 8005a64:	008a      	lsls	r2, r1, #2
 8005a66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a6a:	f7fb f90d 	bl	8000c88 <__aeabi_uldivmod>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a74:	fba3 1302 	umull	r1, r3, r3, r2
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	2164      	movs	r1, #100	; 0x64
 8005a7c:	fb01 f303 	mul.w	r3, r1, r3
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	3332      	adds	r3, #50	; 0x32
 8005a86:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4422      	add	r2, r4
 8005a9a:	609a      	str	r2, [r3, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa8:	51eb851f 	.word	0x51eb851f

08005aac <__cvt>:
 8005aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	ec55 4b10 	vmov	r4, r5, d0
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	460e      	mov	r6, r1
 8005ab8:	4619      	mov	r1, r3
 8005aba:	462b      	mov	r3, r5
 8005abc:	bfbb      	ittet	lt
 8005abe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ac2:	461d      	movlt	r5, r3
 8005ac4:	2300      	movge	r3, #0
 8005ac6:	232d      	movlt	r3, #45	; 0x2d
 8005ac8:	700b      	strb	r3, [r1, #0]
 8005aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005acc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ad0:	4691      	mov	r9, r2
 8005ad2:	f023 0820 	bic.w	r8, r3, #32
 8005ad6:	bfbc      	itt	lt
 8005ad8:	4622      	movlt	r2, r4
 8005ada:	4614      	movlt	r4, r2
 8005adc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ae0:	d005      	beq.n	8005aee <__cvt+0x42>
 8005ae2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ae6:	d100      	bne.n	8005aea <__cvt+0x3e>
 8005ae8:	3601      	adds	r6, #1
 8005aea:	2102      	movs	r1, #2
 8005aec:	e000      	b.n	8005af0 <__cvt+0x44>
 8005aee:	2103      	movs	r1, #3
 8005af0:	ab03      	add	r3, sp, #12
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	ab02      	add	r3, sp, #8
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	ec45 4b10 	vmov	d0, r4, r5
 8005afc:	4653      	mov	r3, sl
 8005afe:	4632      	mov	r2, r6
 8005b00:	f000 fdee 	bl	80066e0 <_dtoa_r>
 8005b04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b08:	4607      	mov	r7, r0
 8005b0a:	d102      	bne.n	8005b12 <__cvt+0x66>
 8005b0c:	f019 0f01 	tst.w	r9, #1
 8005b10:	d022      	beq.n	8005b58 <__cvt+0xac>
 8005b12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b16:	eb07 0906 	add.w	r9, r7, r6
 8005b1a:	d110      	bne.n	8005b3e <__cvt+0x92>
 8005b1c:	783b      	ldrb	r3, [r7, #0]
 8005b1e:	2b30      	cmp	r3, #48	; 0x30
 8005b20:	d10a      	bne.n	8005b38 <__cvt+0x8c>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7fa ffed 	bl	8000b08 <__aeabi_dcmpeq>
 8005b2e:	b918      	cbnz	r0, 8005b38 <__cvt+0x8c>
 8005b30:	f1c6 0601 	rsb	r6, r6, #1
 8005b34:	f8ca 6000 	str.w	r6, [sl]
 8005b38:	f8da 3000 	ldr.w	r3, [sl]
 8005b3c:	4499      	add	r9, r3
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2300      	movs	r3, #0
 8005b42:	4620      	mov	r0, r4
 8005b44:	4629      	mov	r1, r5
 8005b46:	f7fa ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8005b4a:	b108      	cbz	r0, 8005b50 <__cvt+0xa4>
 8005b4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b50:	2230      	movs	r2, #48	; 0x30
 8005b52:	9b03      	ldr	r3, [sp, #12]
 8005b54:	454b      	cmp	r3, r9
 8005b56:	d307      	bcc.n	8005b68 <__cvt+0xbc>
 8005b58:	9b03      	ldr	r3, [sp, #12]
 8005b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b5c:	1bdb      	subs	r3, r3, r7
 8005b5e:	4638      	mov	r0, r7
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	b004      	add	sp, #16
 8005b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	9103      	str	r1, [sp, #12]
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	e7f0      	b.n	8005b52 <__cvt+0xa6>

08005b70 <__exponent>:
 8005b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b72:	4603      	mov	r3, r0
 8005b74:	2900      	cmp	r1, #0
 8005b76:	bfb8      	it	lt
 8005b78:	4249      	neglt	r1, r1
 8005b7a:	f803 2b02 	strb.w	r2, [r3], #2
 8005b7e:	bfb4      	ite	lt
 8005b80:	222d      	movlt	r2, #45	; 0x2d
 8005b82:	222b      	movge	r2, #43	; 0x2b
 8005b84:	2909      	cmp	r1, #9
 8005b86:	7042      	strb	r2, [r0, #1]
 8005b88:	dd2a      	ble.n	8005be0 <__exponent+0x70>
 8005b8a:	f10d 0207 	add.w	r2, sp, #7
 8005b8e:	4617      	mov	r7, r2
 8005b90:	260a      	movs	r6, #10
 8005b92:	4694      	mov	ip, r2
 8005b94:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b98:	fb06 1415 	mls	r4, r6, r5, r1
 8005b9c:	3430      	adds	r4, #48	; 0x30
 8005b9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	2c63      	cmp	r4, #99	; 0x63
 8005ba6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005baa:	4629      	mov	r1, r5
 8005bac:	dcf1      	bgt.n	8005b92 <__exponent+0x22>
 8005bae:	3130      	adds	r1, #48	; 0x30
 8005bb0:	f1ac 0402 	sub.w	r4, ip, #2
 8005bb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005bb8:	1c41      	adds	r1, r0, #1
 8005bba:	4622      	mov	r2, r4
 8005bbc:	42ba      	cmp	r2, r7
 8005bbe:	d30a      	bcc.n	8005bd6 <__exponent+0x66>
 8005bc0:	f10d 0209 	add.w	r2, sp, #9
 8005bc4:	eba2 020c 	sub.w	r2, r2, ip
 8005bc8:	42bc      	cmp	r4, r7
 8005bca:	bf88      	it	hi
 8005bcc:	2200      	movhi	r2, #0
 8005bce:	4413      	add	r3, r2
 8005bd0:	1a18      	subs	r0, r3, r0
 8005bd2:	b003      	add	sp, #12
 8005bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005bda:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005bde:	e7ed      	b.n	8005bbc <__exponent+0x4c>
 8005be0:	2330      	movs	r3, #48	; 0x30
 8005be2:	3130      	adds	r1, #48	; 0x30
 8005be4:	7083      	strb	r3, [r0, #2]
 8005be6:	70c1      	strb	r1, [r0, #3]
 8005be8:	1d03      	adds	r3, r0, #4
 8005bea:	e7f1      	b.n	8005bd0 <__exponent+0x60>

08005bec <_printf_float>:
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	ed2d 8b02 	vpush	{d8}
 8005bf4:	b08d      	sub	sp, #52	; 0x34
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	461f      	mov	r7, r3
 8005c00:	4605      	mov	r5, r0
 8005c02:	f000 fca3 	bl	800654c <_localeconv_r>
 8005c06:	f8d0 a000 	ldr.w	sl, [r0]
 8005c0a:	4650      	mov	r0, sl
 8005c0c:	f7fa fb50 	bl	80002b0 <strlen>
 8005c10:	2300      	movs	r3, #0
 8005c12:	930a      	str	r3, [sp, #40]	; 0x28
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	9305      	str	r3, [sp, #20]
 8005c18:	f8d8 3000 	ldr.w	r3, [r8]
 8005c1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c20:	3307      	adds	r3, #7
 8005c22:	f023 0307 	bic.w	r3, r3, #7
 8005c26:	f103 0208 	add.w	r2, r3, #8
 8005c2a:	f8c8 2000 	str.w	r2, [r8]
 8005c2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c36:	9307      	str	r3, [sp, #28]
 8005c38:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c3c:	ee08 0a10 	vmov	s16, r0
 8005c40:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c48:	4b9e      	ldr	r3, [pc, #632]	; (8005ec4 <_printf_float+0x2d8>)
 8005c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c4e:	f7fa ff8d 	bl	8000b6c <__aeabi_dcmpun>
 8005c52:	bb88      	cbnz	r0, 8005cb8 <_printf_float+0xcc>
 8005c54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c58:	4b9a      	ldr	r3, [pc, #616]	; (8005ec4 <_printf_float+0x2d8>)
 8005c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c5e:	f7fa ff67 	bl	8000b30 <__aeabi_dcmple>
 8005c62:	bb48      	cbnz	r0, 8005cb8 <_printf_float+0xcc>
 8005c64:	2200      	movs	r2, #0
 8005c66:	2300      	movs	r3, #0
 8005c68:	4640      	mov	r0, r8
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	f7fa ff56 	bl	8000b1c <__aeabi_dcmplt>
 8005c70:	b110      	cbz	r0, 8005c78 <_printf_float+0x8c>
 8005c72:	232d      	movs	r3, #45	; 0x2d
 8005c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c78:	4a93      	ldr	r2, [pc, #588]	; (8005ec8 <_printf_float+0x2dc>)
 8005c7a:	4b94      	ldr	r3, [pc, #592]	; (8005ecc <_printf_float+0x2e0>)
 8005c7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c80:	bf94      	ite	ls
 8005c82:	4690      	movls	r8, r2
 8005c84:	4698      	movhi	r8, r3
 8005c86:	2303      	movs	r3, #3
 8005c88:	6123      	str	r3, [r4, #16]
 8005c8a:	9b05      	ldr	r3, [sp, #20]
 8005c8c:	f023 0304 	bic.w	r3, r3, #4
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	f04f 0900 	mov.w	r9, #0
 8005c96:	9700      	str	r7, [sp, #0]
 8005c98:	4633      	mov	r3, r6
 8005c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f000 f9da 	bl	8006058 <_printf_common>
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	f040 8090 	bne.w	8005dca <_printf_float+0x1de>
 8005caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cae:	b00d      	add	sp, #52	; 0x34
 8005cb0:	ecbd 8b02 	vpop	{d8}
 8005cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	f7fa ff54 	bl	8000b6c <__aeabi_dcmpun>
 8005cc4:	b140      	cbz	r0, 8005cd8 <_printf_float+0xec>
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bfbc      	itt	lt
 8005ccc:	232d      	movlt	r3, #45	; 0x2d
 8005cce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cd2:	4a7f      	ldr	r2, [pc, #508]	; (8005ed0 <_printf_float+0x2e4>)
 8005cd4:	4b7f      	ldr	r3, [pc, #508]	; (8005ed4 <_printf_float+0x2e8>)
 8005cd6:	e7d1      	b.n	8005c7c <_printf_float+0x90>
 8005cd8:	6863      	ldr	r3, [r4, #4]
 8005cda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005cde:	9206      	str	r2, [sp, #24]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	d13f      	bne.n	8005d64 <_printf_float+0x178>
 8005ce4:	2306      	movs	r3, #6
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	9b05      	ldr	r3, [sp, #20]
 8005cea:	6861      	ldr	r1, [r4, #4]
 8005cec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9303      	str	r3, [sp, #12]
 8005cf4:	ab0a      	add	r3, sp, #40	; 0x28
 8005cf6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cfa:	ab09      	add	r3, sp, #36	; 0x24
 8005cfc:	ec49 8b10 	vmov	d0, r8, r9
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	6022      	str	r2, [r4, #0]
 8005d04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f7ff fecf 	bl	8005aac <__cvt>
 8005d0e:	9b06      	ldr	r3, [sp, #24]
 8005d10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d12:	2b47      	cmp	r3, #71	; 0x47
 8005d14:	4680      	mov	r8, r0
 8005d16:	d108      	bne.n	8005d2a <_printf_float+0x13e>
 8005d18:	1cc8      	adds	r0, r1, #3
 8005d1a:	db02      	blt.n	8005d22 <_printf_float+0x136>
 8005d1c:	6863      	ldr	r3, [r4, #4]
 8005d1e:	4299      	cmp	r1, r3
 8005d20:	dd41      	ble.n	8005da6 <_printf_float+0x1ba>
 8005d22:	f1ab 0302 	sub.w	r3, fp, #2
 8005d26:	fa5f fb83 	uxtb.w	fp, r3
 8005d2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d2e:	d820      	bhi.n	8005d72 <_printf_float+0x186>
 8005d30:	3901      	subs	r1, #1
 8005d32:	465a      	mov	r2, fp
 8005d34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d38:	9109      	str	r1, [sp, #36]	; 0x24
 8005d3a:	f7ff ff19 	bl	8005b70 <__exponent>
 8005d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d40:	1813      	adds	r3, r2, r0
 8005d42:	2a01      	cmp	r2, #1
 8005d44:	4681      	mov	r9, r0
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	dc02      	bgt.n	8005d50 <_printf_float+0x164>
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	07d2      	lsls	r2, r2, #31
 8005d4e:	d501      	bpl.n	8005d54 <_printf_float+0x168>
 8005d50:	3301      	adds	r3, #1
 8005d52:	6123      	str	r3, [r4, #16]
 8005d54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d09c      	beq.n	8005c96 <_printf_float+0xaa>
 8005d5c:	232d      	movs	r3, #45	; 0x2d
 8005d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d62:	e798      	b.n	8005c96 <_printf_float+0xaa>
 8005d64:	9a06      	ldr	r2, [sp, #24]
 8005d66:	2a47      	cmp	r2, #71	; 0x47
 8005d68:	d1be      	bne.n	8005ce8 <_printf_float+0xfc>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1bc      	bne.n	8005ce8 <_printf_float+0xfc>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e7b9      	b.n	8005ce6 <_printf_float+0xfa>
 8005d72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d76:	d118      	bne.n	8005daa <_printf_float+0x1be>
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	6863      	ldr	r3, [r4, #4]
 8005d7c:	dd0b      	ble.n	8005d96 <_printf_float+0x1aa>
 8005d7e:	6121      	str	r1, [r4, #16]
 8005d80:	b913      	cbnz	r3, 8005d88 <_printf_float+0x19c>
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	07d0      	lsls	r0, r2, #31
 8005d86:	d502      	bpl.n	8005d8e <_printf_float+0x1a2>
 8005d88:	3301      	adds	r3, #1
 8005d8a:	440b      	add	r3, r1
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d90:	f04f 0900 	mov.w	r9, #0
 8005d94:	e7de      	b.n	8005d54 <_printf_float+0x168>
 8005d96:	b913      	cbnz	r3, 8005d9e <_printf_float+0x1b2>
 8005d98:	6822      	ldr	r2, [r4, #0]
 8005d9a:	07d2      	lsls	r2, r2, #31
 8005d9c:	d501      	bpl.n	8005da2 <_printf_float+0x1b6>
 8005d9e:	3302      	adds	r3, #2
 8005da0:	e7f4      	b.n	8005d8c <_printf_float+0x1a0>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e7f2      	b.n	8005d8c <_printf_float+0x1a0>
 8005da6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dac:	4299      	cmp	r1, r3
 8005dae:	db05      	blt.n	8005dbc <_printf_float+0x1d0>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	6121      	str	r1, [r4, #16]
 8005db4:	07d8      	lsls	r0, r3, #31
 8005db6:	d5ea      	bpl.n	8005d8e <_printf_float+0x1a2>
 8005db8:	1c4b      	adds	r3, r1, #1
 8005dba:	e7e7      	b.n	8005d8c <_printf_float+0x1a0>
 8005dbc:	2900      	cmp	r1, #0
 8005dbe:	bfd4      	ite	le
 8005dc0:	f1c1 0202 	rsble	r2, r1, #2
 8005dc4:	2201      	movgt	r2, #1
 8005dc6:	4413      	add	r3, r2
 8005dc8:	e7e0      	b.n	8005d8c <_printf_float+0x1a0>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	055a      	lsls	r2, r3, #21
 8005dce:	d407      	bmi.n	8005de0 <_printf_float+0x1f4>
 8005dd0:	6923      	ldr	r3, [r4, #16]
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	47b8      	blx	r7
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d12c      	bne.n	8005e38 <_printf_float+0x24c>
 8005dde:	e764      	b.n	8005caa <_printf_float+0xbe>
 8005de0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005de4:	f240 80e0 	bls.w	8005fa8 <_printf_float+0x3bc>
 8005de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dec:	2200      	movs	r2, #0
 8005dee:	2300      	movs	r3, #0
 8005df0:	f7fa fe8a 	bl	8000b08 <__aeabi_dcmpeq>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d034      	beq.n	8005e62 <_printf_float+0x276>
 8005df8:	4a37      	ldr	r2, [pc, #220]	; (8005ed8 <_printf_float+0x2ec>)
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4628      	mov	r0, r5
 8005e00:	47b8      	blx	r7
 8005e02:	3001      	adds	r0, #1
 8005e04:	f43f af51 	beq.w	8005caa <_printf_float+0xbe>
 8005e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	db02      	blt.n	8005e16 <_printf_float+0x22a>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	07d8      	lsls	r0, r3, #31
 8005e14:	d510      	bpl.n	8005e38 <_printf_float+0x24c>
 8005e16:	ee18 3a10 	vmov	r3, s16
 8005e1a:	4652      	mov	r2, sl
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	f43f af41 	beq.w	8005caa <_printf_float+0xbe>
 8005e28:	f04f 0800 	mov.w	r8, #0
 8005e2c:	f104 091a 	add.w	r9, r4, #26
 8005e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e32:	3b01      	subs	r3, #1
 8005e34:	4543      	cmp	r3, r8
 8005e36:	dc09      	bgt.n	8005e4c <_printf_float+0x260>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	079b      	lsls	r3, r3, #30
 8005e3c:	f100 8107 	bmi.w	800604e <_printf_float+0x462>
 8005e40:	68e0      	ldr	r0, [r4, #12]
 8005e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e44:	4298      	cmp	r0, r3
 8005e46:	bfb8      	it	lt
 8005e48:	4618      	movlt	r0, r3
 8005e4a:	e730      	b.n	8005cae <_printf_float+0xc2>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	464a      	mov	r2, r9
 8005e50:	4631      	mov	r1, r6
 8005e52:	4628      	mov	r0, r5
 8005e54:	47b8      	blx	r7
 8005e56:	3001      	adds	r0, #1
 8005e58:	f43f af27 	beq.w	8005caa <_printf_float+0xbe>
 8005e5c:	f108 0801 	add.w	r8, r8, #1
 8005e60:	e7e6      	b.n	8005e30 <_printf_float+0x244>
 8005e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dc39      	bgt.n	8005edc <_printf_float+0x2f0>
 8005e68:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <_printf_float+0x2ec>)
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4628      	mov	r0, r5
 8005e70:	47b8      	blx	r7
 8005e72:	3001      	adds	r0, #1
 8005e74:	f43f af19 	beq.w	8005caa <_printf_float+0xbe>
 8005e78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	d102      	bne.n	8005e86 <_printf_float+0x29a>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	07d9      	lsls	r1, r3, #31
 8005e84:	d5d8      	bpl.n	8005e38 <_printf_float+0x24c>
 8005e86:	ee18 3a10 	vmov	r3, s16
 8005e8a:	4652      	mov	r2, sl
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4628      	mov	r0, r5
 8005e90:	47b8      	blx	r7
 8005e92:	3001      	adds	r0, #1
 8005e94:	f43f af09 	beq.w	8005caa <_printf_float+0xbe>
 8005e98:	f04f 0900 	mov.w	r9, #0
 8005e9c:	f104 0a1a 	add.w	sl, r4, #26
 8005ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea2:	425b      	negs	r3, r3
 8005ea4:	454b      	cmp	r3, r9
 8005ea6:	dc01      	bgt.n	8005eac <_printf_float+0x2c0>
 8005ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eaa:	e792      	b.n	8005dd2 <_printf_float+0x1e6>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4652      	mov	r2, sl
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f aef7 	beq.w	8005caa <_printf_float+0xbe>
 8005ebc:	f109 0901 	add.w	r9, r9, #1
 8005ec0:	e7ee      	b.n	8005ea0 <_printf_float+0x2b4>
 8005ec2:	bf00      	nop
 8005ec4:	7fefffff 	.word	0x7fefffff
 8005ec8:	08008848 	.word	0x08008848
 8005ecc:	0800884c 	.word	0x0800884c
 8005ed0:	08008850 	.word	0x08008850
 8005ed4:	08008854 	.word	0x08008854
 8005ed8:	08008858 	.word	0x08008858
 8005edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ede:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	bfa8      	it	ge
 8005ee4:	461a      	movge	r2, r3
 8005ee6:	2a00      	cmp	r2, #0
 8005ee8:	4691      	mov	r9, r2
 8005eea:	dc37      	bgt.n	8005f5c <_printf_float+0x370>
 8005eec:	f04f 0b00 	mov.w	fp, #0
 8005ef0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ef4:	f104 021a 	add.w	r2, r4, #26
 8005ef8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005efa:	9305      	str	r3, [sp, #20]
 8005efc:	eba3 0309 	sub.w	r3, r3, r9
 8005f00:	455b      	cmp	r3, fp
 8005f02:	dc33      	bgt.n	8005f6c <_printf_float+0x380>
 8005f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	db3b      	blt.n	8005f84 <_printf_float+0x398>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	07da      	lsls	r2, r3, #31
 8005f10:	d438      	bmi.n	8005f84 <_printf_float+0x398>
 8005f12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f16:	eba2 0903 	sub.w	r9, r2, r3
 8005f1a:	9b05      	ldr	r3, [sp, #20]
 8005f1c:	1ad2      	subs	r2, r2, r3
 8005f1e:	4591      	cmp	r9, r2
 8005f20:	bfa8      	it	ge
 8005f22:	4691      	movge	r9, r2
 8005f24:	f1b9 0f00 	cmp.w	r9, #0
 8005f28:	dc35      	bgt.n	8005f96 <_printf_float+0x3aa>
 8005f2a:	f04f 0800 	mov.w	r8, #0
 8005f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f32:	f104 0a1a 	add.w	sl, r4, #26
 8005f36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	eba3 0309 	sub.w	r3, r3, r9
 8005f40:	4543      	cmp	r3, r8
 8005f42:	f77f af79 	ble.w	8005e38 <_printf_float+0x24c>
 8005f46:	2301      	movs	r3, #1
 8005f48:	4652      	mov	r2, sl
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f aeaa 	beq.w	8005caa <_printf_float+0xbe>
 8005f56:	f108 0801 	add.w	r8, r8, #1
 8005f5a:	e7ec      	b.n	8005f36 <_printf_float+0x34a>
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4642      	mov	r2, r8
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b8      	blx	r7
 8005f66:	3001      	adds	r0, #1
 8005f68:	d1c0      	bne.n	8005eec <_printf_float+0x300>
 8005f6a:	e69e      	b.n	8005caa <_printf_float+0xbe>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	9205      	str	r2, [sp, #20]
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	f43f ae97 	beq.w	8005caa <_printf_float+0xbe>
 8005f7c:	9a05      	ldr	r2, [sp, #20]
 8005f7e:	f10b 0b01 	add.w	fp, fp, #1
 8005f82:	e7b9      	b.n	8005ef8 <_printf_float+0x30c>
 8005f84:	ee18 3a10 	vmov	r3, s16
 8005f88:	4652      	mov	r2, sl
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b8      	blx	r7
 8005f90:	3001      	adds	r0, #1
 8005f92:	d1be      	bne.n	8005f12 <_printf_float+0x326>
 8005f94:	e689      	b.n	8005caa <_printf_float+0xbe>
 8005f96:	9a05      	ldr	r2, [sp, #20]
 8005f98:	464b      	mov	r3, r9
 8005f9a:	4442      	add	r2, r8
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d1c1      	bne.n	8005f2a <_printf_float+0x33e>
 8005fa6:	e680      	b.n	8005caa <_printf_float+0xbe>
 8005fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005faa:	2a01      	cmp	r2, #1
 8005fac:	dc01      	bgt.n	8005fb2 <_printf_float+0x3c6>
 8005fae:	07db      	lsls	r3, r3, #31
 8005fb0:	d53a      	bpl.n	8006028 <_printf_float+0x43c>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f43f ae74 	beq.w	8005caa <_printf_float+0xbe>
 8005fc2:	ee18 3a10 	vmov	r3, s16
 8005fc6:	4652      	mov	r2, sl
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f ae6b 	beq.w	8005caa <_printf_float+0xbe>
 8005fd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005fe0:	f7fa fd92 	bl	8000b08 <__aeabi_dcmpeq>
 8005fe4:	b9d8      	cbnz	r0, 800601e <_printf_float+0x432>
 8005fe6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005fea:	f108 0201 	add.w	r2, r8, #1
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d10e      	bne.n	8006016 <_printf_float+0x42a>
 8005ff8:	e657      	b.n	8005caa <_printf_float+0xbe>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4652      	mov	r2, sl
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f ae50 	beq.w	8005caa <_printf_float+0xbe>
 800600a:	f108 0801 	add.w	r8, r8, #1
 800600e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006010:	3b01      	subs	r3, #1
 8006012:	4543      	cmp	r3, r8
 8006014:	dcf1      	bgt.n	8005ffa <_printf_float+0x40e>
 8006016:	464b      	mov	r3, r9
 8006018:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800601c:	e6da      	b.n	8005dd4 <_printf_float+0x1e8>
 800601e:	f04f 0800 	mov.w	r8, #0
 8006022:	f104 0a1a 	add.w	sl, r4, #26
 8006026:	e7f2      	b.n	800600e <_printf_float+0x422>
 8006028:	2301      	movs	r3, #1
 800602a:	4642      	mov	r2, r8
 800602c:	e7df      	b.n	8005fee <_printf_float+0x402>
 800602e:	2301      	movs	r3, #1
 8006030:	464a      	mov	r2, r9
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae36 	beq.w	8005caa <_printf_float+0xbe>
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006046:	1a5b      	subs	r3, r3, r1
 8006048:	4543      	cmp	r3, r8
 800604a:	dcf0      	bgt.n	800602e <_printf_float+0x442>
 800604c:	e6f8      	b.n	8005e40 <_printf_float+0x254>
 800604e:	f04f 0800 	mov.w	r8, #0
 8006052:	f104 0919 	add.w	r9, r4, #25
 8006056:	e7f4      	b.n	8006042 <_printf_float+0x456>

08006058 <_printf_common>:
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	4616      	mov	r6, r2
 800605e:	4699      	mov	r9, r3
 8006060:	688a      	ldr	r2, [r1, #8]
 8006062:	690b      	ldr	r3, [r1, #16]
 8006064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006068:	4293      	cmp	r3, r2
 800606a:	bfb8      	it	lt
 800606c:	4613      	movlt	r3, r2
 800606e:	6033      	str	r3, [r6, #0]
 8006070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006074:	4607      	mov	r7, r0
 8006076:	460c      	mov	r4, r1
 8006078:	b10a      	cbz	r2, 800607e <_printf_common+0x26>
 800607a:	3301      	adds	r3, #1
 800607c:	6033      	str	r3, [r6, #0]
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	0699      	lsls	r1, r3, #26
 8006082:	bf42      	ittt	mi
 8006084:	6833      	ldrmi	r3, [r6, #0]
 8006086:	3302      	addmi	r3, #2
 8006088:	6033      	strmi	r3, [r6, #0]
 800608a:	6825      	ldr	r5, [r4, #0]
 800608c:	f015 0506 	ands.w	r5, r5, #6
 8006090:	d106      	bne.n	80060a0 <_printf_common+0x48>
 8006092:	f104 0a19 	add.w	sl, r4, #25
 8006096:	68e3      	ldr	r3, [r4, #12]
 8006098:	6832      	ldr	r2, [r6, #0]
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	42ab      	cmp	r3, r5
 800609e:	dc26      	bgt.n	80060ee <_printf_common+0x96>
 80060a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060a4:	1e13      	subs	r3, r2, #0
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	bf18      	it	ne
 80060aa:	2301      	movne	r3, #1
 80060ac:	0692      	lsls	r2, r2, #26
 80060ae:	d42b      	bmi.n	8006108 <_printf_common+0xb0>
 80060b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060b4:	4649      	mov	r1, r9
 80060b6:	4638      	mov	r0, r7
 80060b8:	47c0      	blx	r8
 80060ba:	3001      	adds	r0, #1
 80060bc:	d01e      	beq.n	80060fc <_printf_common+0xa4>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	6922      	ldr	r2, [r4, #16]
 80060c2:	f003 0306 	and.w	r3, r3, #6
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	bf02      	ittt	eq
 80060ca:	68e5      	ldreq	r5, [r4, #12]
 80060cc:	6833      	ldreq	r3, [r6, #0]
 80060ce:	1aed      	subeq	r5, r5, r3
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	bf0c      	ite	eq
 80060d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d8:	2500      	movne	r5, #0
 80060da:	4293      	cmp	r3, r2
 80060dc:	bfc4      	itt	gt
 80060de:	1a9b      	subgt	r3, r3, r2
 80060e0:	18ed      	addgt	r5, r5, r3
 80060e2:	2600      	movs	r6, #0
 80060e4:	341a      	adds	r4, #26
 80060e6:	42b5      	cmp	r5, r6
 80060e8:	d11a      	bne.n	8006120 <_printf_common+0xc8>
 80060ea:	2000      	movs	r0, #0
 80060ec:	e008      	b.n	8006100 <_printf_common+0xa8>
 80060ee:	2301      	movs	r3, #1
 80060f0:	4652      	mov	r2, sl
 80060f2:	4649      	mov	r1, r9
 80060f4:	4638      	mov	r0, r7
 80060f6:	47c0      	blx	r8
 80060f8:	3001      	adds	r0, #1
 80060fa:	d103      	bne.n	8006104 <_printf_common+0xac>
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006104:	3501      	adds	r5, #1
 8006106:	e7c6      	b.n	8006096 <_printf_common+0x3e>
 8006108:	18e1      	adds	r1, r4, r3
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	2030      	movs	r0, #48	; 0x30
 800610e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006112:	4422      	add	r2, r4
 8006114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800611c:	3302      	adds	r3, #2
 800611e:	e7c7      	b.n	80060b0 <_printf_common+0x58>
 8006120:	2301      	movs	r3, #1
 8006122:	4622      	mov	r2, r4
 8006124:	4649      	mov	r1, r9
 8006126:	4638      	mov	r0, r7
 8006128:	47c0      	blx	r8
 800612a:	3001      	adds	r0, #1
 800612c:	d0e6      	beq.n	80060fc <_printf_common+0xa4>
 800612e:	3601      	adds	r6, #1
 8006130:	e7d9      	b.n	80060e6 <_printf_common+0x8e>
	...

08006134 <_printf_i>:
 8006134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006138:	7e0f      	ldrb	r7, [r1, #24]
 800613a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800613c:	2f78      	cmp	r7, #120	; 0x78
 800613e:	4691      	mov	r9, r2
 8006140:	4680      	mov	r8, r0
 8006142:	460c      	mov	r4, r1
 8006144:	469a      	mov	sl, r3
 8006146:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800614a:	d807      	bhi.n	800615c <_printf_i+0x28>
 800614c:	2f62      	cmp	r7, #98	; 0x62
 800614e:	d80a      	bhi.n	8006166 <_printf_i+0x32>
 8006150:	2f00      	cmp	r7, #0
 8006152:	f000 80d4 	beq.w	80062fe <_printf_i+0x1ca>
 8006156:	2f58      	cmp	r7, #88	; 0x58
 8006158:	f000 80c0 	beq.w	80062dc <_printf_i+0x1a8>
 800615c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006164:	e03a      	b.n	80061dc <_printf_i+0xa8>
 8006166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800616a:	2b15      	cmp	r3, #21
 800616c:	d8f6      	bhi.n	800615c <_printf_i+0x28>
 800616e:	a101      	add	r1, pc, #4	; (adr r1, 8006174 <_printf_i+0x40>)
 8006170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006174:	080061cd 	.word	0x080061cd
 8006178:	080061e1 	.word	0x080061e1
 800617c:	0800615d 	.word	0x0800615d
 8006180:	0800615d 	.word	0x0800615d
 8006184:	0800615d 	.word	0x0800615d
 8006188:	0800615d 	.word	0x0800615d
 800618c:	080061e1 	.word	0x080061e1
 8006190:	0800615d 	.word	0x0800615d
 8006194:	0800615d 	.word	0x0800615d
 8006198:	0800615d 	.word	0x0800615d
 800619c:	0800615d 	.word	0x0800615d
 80061a0:	080062e5 	.word	0x080062e5
 80061a4:	0800620d 	.word	0x0800620d
 80061a8:	0800629f 	.word	0x0800629f
 80061ac:	0800615d 	.word	0x0800615d
 80061b0:	0800615d 	.word	0x0800615d
 80061b4:	08006307 	.word	0x08006307
 80061b8:	0800615d 	.word	0x0800615d
 80061bc:	0800620d 	.word	0x0800620d
 80061c0:	0800615d 	.word	0x0800615d
 80061c4:	0800615d 	.word	0x0800615d
 80061c8:	080062a7 	.word	0x080062a7
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	1d1a      	adds	r2, r3, #4
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	602a      	str	r2, [r5, #0]
 80061d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061dc:	2301      	movs	r3, #1
 80061de:	e09f      	b.n	8006320 <_printf_i+0x1ec>
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	682b      	ldr	r3, [r5, #0]
 80061e4:	0607      	lsls	r7, r0, #24
 80061e6:	f103 0104 	add.w	r1, r3, #4
 80061ea:	6029      	str	r1, [r5, #0]
 80061ec:	d501      	bpl.n	80061f2 <_printf_i+0xbe>
 80061ee:	681e      	ldr	r6, [r3, #0]
 80061f0:	e003      	b.n	80061fa <_printf_i+0xc6>
 80061f2:	0646      	lsls	r6, r0, #25
 80061f4:	d5fb      	bpl.n	80061ee <_printf_i+0xba>
 80061f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061fa:	2e00      	cmp	r6, #0
 80061fc:	da03      	bge.n	8006206 <_printf_i+0xd2>
 80061fe:	232d      	movs	r3, #45	; 0x2d
 8006200:	4276      	negs	r6, r6
 8006202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006206:	485a      	ldr	r0, [pc, #360]	; (8006370 <_printf_i+0x23c>)
 8006208:	230a      	movs	r3, #10
 800620a:	e012      	b.n	8006232 <_printf_i+0xfe>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	6820      	ldr	r0, [r4, #0]
 8006210:	1d19      	adds	r1, r3, #4
 8006212:	6029      	str	r1, [r5, #0]
 8006214:	0605      	lsls	r5, r0, #24
 8006216:	d501      	bpl.n	800621c <_printf_i+0xe8>
 8006218:	681e      	ldr	r6, [r3, #0]
 800621a:	e002      	b.n	8006222 <_printf_i+0xee>
 800621c:	0641      	lsls	r1, r0, #25
 800621e:	d5fb      	bpl.n	8006218 <_printf_i+0xe4>
 8006220:	881e      	ldrh	r6, [r3, #0]
 8006222:	4853      	ldr	r0, [pc, #332]	; (8006370 <_printf_i+0x23c>)
 8006224:	2f6f      	cmp	r7, #111	; 0x6f
 8006226:	bf0c      	ite	eq
 8006228:	2308      	moveq	r3, #8
 800622a:	230a      	movne	r3, #10
 800622c:	2100      	movs	r1, #0
 800622e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006232:	6865      	ldr	r5, [r4, #4]
 8006234:	60a5      	str	r5, [r4, #8]
 8006236:	2d00      	cmp	r5, #0
 8006238:	bfa2      	ittt	ge
 800623a:	6821      	ldrge	r1, [r4, #0]
 800623c:	f021 0104 	bicge.w	r1, r1, #4
 8006240:	6021      	strge	r1, [r4, #0]
 8006242:	b90e      	cbnz	r6, 8006248 <_printf_i+0x114>
 8006244:	2d00      	cmp	r5, #0
 8006246:	d04b      	beq.n	80062e0 <_printf_i+0x1ac>
 8006248:	4615      	mov	r5, r2
 800624a:	fbb6 f1f3 	udiv	r1, r6, r3
 800624e:	fb03 6711 	mls	r7, r3, r1, r6
 8006252:	5dc7      	ldrb	r7, [r0, r7]
 8006254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006258:	4637      	mov	r7, r6
 800625a:	42bb      	cmp	r3, r7
 800625c:	460e      	mov	r6, r1
 800625e:	d9f4      	bls.n	800624a <_printf_i+0x116>
 8006260:	2b08      	cmp	r3, #8
 8006262:	d10b      	bne.n	800627c <_printf_i+0x148>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	07de      	lsls	r6, r3, #31
 8006268:	d508      	bpl.n	800627c <_printf_i+0x148>
 800626a:	6923      	ldr	r3, [r4, #16]
 800626c:	6861      	ldr	r1, [r4, #4]
 800626e:	4299      	cmp	r1, r3
 8006270:	bfde      	ittt	le
 8006272:	2330      	movle	r3, #48	; 0x30
 8006274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006278:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800627c:	1b52      	subs	r2, r2, r5
 800627e:	6122      	str	r2, [r4, #16]
 8006280:	f8cd a000 	str.w	sl, [sp]
 8006284:	464b      	mov	r3, r9
 8006286:	aa03      	add	r2, sp, #12
 8006288:	4621      	mov	r1, r4
 800628a:	4640      	mov	r0, r8
 800628c:	f7ff fee4 	bl	8006058 <_printf_common>
 8006290:	3001      	adds	r0, #1
 8006292:	d14a      	bne.n	800632a <_printf_i+0x1f6>
 8006294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006298:	b004      	add	sp, #16
 800629a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	f043 0320 	orr.w	r3, r3, #32
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	4833      	ldr	r0, [pc, #204]	; (8006374 <_printf_i+0x240>)
 80062a8:	2778      	movs	r7, #120	; 0x78
 80062aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	6829      	ldr	r1, [r5, #0]
 80062b2:	061f      	lsls	r7, r3, #24
 80062b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062b8:	d402      	bmi.n	80062c0 <_printf_i+0x18c>
 80062ba:	065f      	lsls	r7, r3, #25
 80062bc:	bf48      	it	mi
 80062be:	b2b6      	uxthmi	r6, r6
 80062c0:	07df      	lsls	r7, r3, #31
 80062c2:	bf48      	it	mi
 80062c4:	f043 0320 	orrmi.w	r3, r3, #32
 80062c8:	6029      	str	r1, [r5, #0]
 80062ca:	bf48      	it	mi
 80062cc:	6023      	strmi	r3, [r4, #0]
 80062ce:	b91e      	cbnz	r6, 80062d8 <_printf_i+0x1a4>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	f023 0320 	bic.w	r3, r3, #32
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	2310      	movs	r3, #16
 80062da:	e7a7      	b.n	800622c <_printf_i+0xf8>
 80062dc:	4824      	ldr	r0, [pc, #144]	; (8006370 <_printf_i+0x23c>)
 80062de:	e7e4      	b.n	80062aa <_printf_i+0x176>
 80062e0:	4615      	mov	r5, r2
 80062e2:	e7bd      	b.n	8006260 <_printf_i+0x12c>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	6826      	ldr	r6, [r4, #0]
 80062e8:	6961      	ldr	r1, [r4, #20]
 80062ea:	1d18      	adds	r0, r3, #4
 80062ec:	6028      	str	r0, [r5, #0]
 80062ee:	0635      	lsls	r5, r6, #24
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	d501      	bpl.n	80062f8 <_printf_i+0x1c4>
 80062f4:	6019      	str	r1, [r3, #0]
 80062f6:	e002      	b.n	80062fe <_printf_i+0x1ca>
 80062f8:	0670      	lsls	r0, r6, #25
 80062fa:	d5fb      	bpl.n	80062f4 <_printf_i+0x1c0>
 80062fc:	8019      	strh	r1, [r3, #0]
 80062fe:	2300      	movs	r3, #0
 8006300:	6123      	str	r3, [r4, #16]
 8006302:	4615      	mov	r5, r2
 8006304:	e7bc      	b.n	8006280 <_printf_i+0x14c>
 8006306:	682b      	ldr	r3, [r5, #0]
 8006308:	1d1a      	adds	r2, r3, #4
 800630a:	602a      	str	r2, [r5, #0]
 800630c:	681d      	ldr	r5, [r3, #0]
 800630e:	6862      	ldr	r2, [r4, #4]
 8006310:	2100      	movs	r1, #0
 8006312:	4628      	mov	r0, r5
 8006314:	f7f9 ff7c 	bl	8000210 <memchr>
 8006318:	b108      	cbz	r0, 800631e <_printf_i+0x1ea>
 800631a:	1b40      	subs	r0, r0, r5
 800631c:	6060      	str	r0, [r4, #4]
 800631e:	6863      	ldr	r3, [r4, #4]
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	2300      	movs	r3, #0
 8006324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006328:	e7aa      	b.n	8006280 <_printf_i+0x14c>
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	462a      	mov	r2, r5
 800632e:	4649      	mov	r1, r9
 8006330:	4640      	mov	r0, r8
 8006332:	47d0      	blx	sl
 8006334:	3001      	adds	r0, #1
 8006336:	d0ad      	beq.n	8006294 <_printf_i+0x160>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	079b      	lsls	r3, r3, #30
 800633c:	d413      	bmi.n	8006366 <_printf_i+0x232>
 800633e:	68e0      	ldr	r0, [r4, #12]
 8006340:	9b03      	ldr	r3, [sp, #12]
 8006342:	4298      	cmp	r0, r3
 8006344:	bfb8      	it	lt
 8006346:	4618      	movlt	r0, r3
 8006348:	e7a6      	b.n	8006298 <_printf_i+0x164>
 800634a:	2301      	movs	r3, #1
 800634c:	4632      	mov	r2, r6
 800634e:	4649      	mov	r1, r9
 8006350:	4640      	mov	r0, r8
 8006352:	47d0      	blx	sl
 8006354:	3001      	adds	r0, #1
 8006356:	d09d      	beq.n	8006294 <_printf_i+0x160>
 8006358:	3501      	adds	r5, #1
 800635a:	68e3      	ldr	r3, [r4, #12]
 800635c:	9903      	ldr	r1, [sp, #12]
 800635e:	1a5b      	subs	r3, r3, r1
 8006360:	42ab      	cmp	r3, r5
 8006362:	dcf2      	bgt.n	800634a <_printf_i+0x216>
 8006364:	e7eb      	b.n	800633e <_printf_i+0x20a>
 8006366:	2500      	movs	r5, #0
 8006368:	f104 0619 	add.w	r6, r4, #25
 800636c:	e7f5      	b.n	800635a <_printf_i+0x226>
 800636e:	bf00      	nop
 8006370:	0800885a 	.word	0x0800885a
 8006374:	0800886b 	.word	0x0800886b

08006378 <siprintf>:
 8006378:	b40e      	push	{r1, r2, r3}
 800637a:	b500      	push	{lr}
 800637c:	b09c      	sub	sp, #112	; 0x70
 800637e:	ab1d      	add	r3, sp, #116	; 0x74
 8006380:	9002      	str	r0, [sp, #8]
 8006382:	9006      	str	r0, [sp, #24]
 8006384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006388:	4809      	ldr	r0, [pc, #36]	; (80063b0 <siprintf+0x38>)
 800638a:	9107      	str	r1, [sp, #28]
 800638c:	9104      	str	r1, [sp, #16]
 800638e:	4909      	ldr	r1, [pc, #36]	; (80063b4 <siprintf+0x3c>)
 8006390:	f853 2b04 	ldr.w	r2, [r3], #4
 8006394:	9105      	str	r1, [sp, #20]
 8006396:	6800      	ldr	r0, [r0, #0]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	a902      	add	r1, sp, #8
 800639c:	f000 ffec 	bl	8007378 <_svfiprintf_r>
 80063a0:	9b02      	ldr	r3, [sp, #8]
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	b01c      	add	sp, #112	; 0x70
 80063a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ac:	b003      	add	sp, #12
 80063ae:	4770      	bx	lr
 80063b0:	20000084 	.word	0x20000084
 80063b4:	ffff0208 	.word	0xffff0208

080063b8 <std>:
 80063b8:	2300      	movs	r3, #0
 80063ba:	b510      	push	{r4, lr}
 80063bc:	4604      	mov	r4, r0
 80063be:	e9c0 3300 	strd	r3, r3, [r0]
 80063c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063c6:	6083      	str	r3, [r0, #8]
 80063c8:	8181      	strh	r1, [r0, #12]
 80063ca:	6643      	str	r3, [r0, #100]	; 0x64
 80063cc:	81c2      	strh	r2, [r0, #14]
 80063ce:	6183      	str	r3, [r0, #24]
 80063d0:	4619      	mov	r1, r3
 80063d2:	2208      	movs	r2, #8
 80063d4:	305c      	adds	r0, #92	; 0x5c
 80063d6:	f000 f8b1 	bl	800653c <memset>
 80063da:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <std+0x58>)
 80063dc:	6263      	str	r3, [r4, #36]	; 0x24
 80063de:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <std+0x5c>)
 80063e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80063e2:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <std+0x60>)
 80063e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063e6:	4b0d      	ldr	r3, [pc, #52]	; (800641c <std+0x64>)
 80063e8:	6323      	str	r3, [r4, #48]	; 0x30
 80063ea:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <std+0x68>)
 80063ec:	6224      	str	r4, [r4, #32]
 80063ee:	429c      	cmp	r4, r3
 80063f0:	d006      	beq.n	8006400 <std+0x48>
 80063f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80063f6:	4294      	cmp	r4, r2
 80063f8:	d002      	beq.n	8006400 <std+0x48>
 80063fa:	33d0      	adds	r3, #208	; 0xd0
 80063fc:	429c      	cmp	r4, r3
 80063fe:	d105      	bne.n	800640c <std+0x54>
 8006400:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006408:	f000 b8ce 	b.w	80065a8 <__retarget_lock_init_recursive>
 800640c:	bd10      	pop	{r4, pc}
 800640e:	bf00      	nop
 8006410:	08007f31 	.word	0x08007f31
 8006414:	08007f53 	.word	0x08007f53
 8006418:	08007f8b 	.word	0x08007f8b
 800641c:	08007faf 	.word	0x08007faf
 8006420:	20000344 	.word	0x20000344

08006424 <stdio_exit_handler>:
 8006424:	4a02      	ldr	r2, [pc, #8]	; (8006430 <stdio_exit_handler+0xc>)
 8006426:	4903      	ldr	r1, [pc, #12]	; (8006434 <stdio_exit_handler+0x10>)
 8006428:	4803      	ldr	r0, [pc, #12]	; (8006438 <stdio_exit_handler+0x14>)
 800642a:	f000 b869 	b.w	8006500 <_fwalk_sglue>
 800642e:	bf00      	nop
 8006430:	2000002c 	.word	0x2000002c
 8006434:	080077d1 	.word	0x080077d1
 8006438:	20000038 	.word	0x20000038

0800643c <cleanup_stdio>:
 800643c:	6841      	ldr	r1, [r0, #4]
 800643e:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <cleanup_stdio+0x34>)
 8006440:	4299      	cmp	r1, r3
 8006442:	b510      	push	{r4, lr}
 8006444:	4604      	mov	r4, r0
 8006446:	d001      	beq.n	800644c <cleanup_stdio+0x10>
 8006448:	f001 f9c2 	bl	80077d0 <_fflush_r>
 800644c:	68a1      	ldr	r1, [r4, #8]
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <cleanup_stdio+0x38>)
 8006450:	4299      	cmp	r1, r3
 8006452:	d002      	beq.n	800645a <cleanup_stdio+0x1e>
 8006454:	4620      	mov	r0, r4
 8006456:	f001 f9bb 	bl	80077d0 <_fflush_r>
 800645a:	68e1      	ldr	r1, [r4, #12]
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <cleanup_stdio+0x3c>)
 800645e:	4299      	cmp	r1, r3
 8006460:	d004      	beq.n	800646c <cleanup_stdio+0x30>
 8006462:	4620      	mov	r0, r4
 8006464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006468:	f001 b9b2 	b.w	80077d0 <_fflush_r>
 800646c:	bd10      	pop	{r4, pc}
 800646e:	bf00      	nop
 8006470:	20000344 	.word	0x20000344
 8006474:	200003ac 	.word	0x200003ac
 8006478:	20000414 	.word	0x20000414

0800647c <global_stdio_init.part.0>:
 800647c:	b510      	push	{r4, lr}
 800647e:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <global_stdio_init.part.0+0x30>)
 8006480:	4c0b      	ldr	r4, [pc, #44]	; (80064b0 <global_stdio_init.part.0+0x34>)
 8006482:	4a0c      	ldr	r2, [pc, #48]	; (80064b4 <global_stdio_init.part.0+0x38>)
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	4620      	mov	r0, r4
 8006488:	2200      	movs	r2, #0
 800648a:	2104      	movs	r1, #4
 800648c:	f7ff ff94 	bl	80063b8 <std>
 8006490:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006494:	2201      	movs	r2, #1
 8006496:	2109      	movs	r1, #9
 8006498:	f7ff ff8e 	bl	80063b8 <std>
 800649c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80064a0:	2202      	movs	r2, #2
 80064a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a6:	2112      	movs	r1, #18
 80064a8:	f7ff bf86 	b.w	80063b8 <std>
 80064ac:	2000047c 	.word	0x2000047c
 80064b0:	20000344 	.word	0x20000344
 80064b4:	08006425 	.word	0x08006425

080064b8 <__sfp_lock_acquire>:
 80064b8:	4801      	ldr	r0, [pc, #4]	; (80064c0 <__sfp_lock_acquire+0x8>)
 80064ba:	f000 b876 	b.w	80065aa <__retarget_lock_acquire_recursive>
 80064be:	bf00      	nop
 80064c0:	20000481 	.word	0x20000481

080064c4 <__sfp_lock_release>:
 80064c4:	4801      	ldr	r0, [pc, #4]	; (80064cc <__sfp_lock_release+0x8>)
 80064c6:	f000 b871 	b.w	80065ac <__retarget_lock_release_recursive>
 80064ca:	bf00      	nop
 80064cc:	20000481 	.word	0x20000481

080064d0 <__sinit>:
 80064d0:	b510      	push	{r4, lr}
 80064d2:	4604      	mov	r4, r0
 80064d4:	f7ff fff0 	bl	80064b8 <__sfp_lock_acquire>
 80064d8:	6a23      	ldr	r3, [r4, #32]
 80064da:	b11b      	cbz	r3, 80064e4 <__sinit+0x14>
 80064dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e0:	f7ff bff0 	b.w	80064c4 <__sfp_lock_release>
 80064e4:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <__sinit+0x28>)
 80064e6:	6223      	str	r3, [r4, #32]
 80064e8:	4b04      	ldr	r3, [pc, #16]	; (80064fc <__sinit+0x2c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f5      	bne.n	80064dc <__sinit+0xc>
 80064f0:	f7ff ffc4 	bl	800647c <global_stdio_init.part.0>
 80064f4:	e7f2      	b.n	80064dc <__sinit+0xc>
 80064f6:	bf00      	nop
 80064f8:	0800643d 	.word	0x0800643d
 80064fc:	2000047c 	.word	0x2000047c

08006500 <_fwalk_sglue>:
 8006500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006504:	4607      	mov	r7, r0
 8006506:	4688      	mov	r8, r1
 8006508:	4614      	mov	r4, r2
 800650a:	2600      	movs	r6, #0
 800650c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006510:	f1b9 0901 	subs.w	r9, r9, #1
 8006514:	d505      	bpl.n	8006522 <_fwalk_sglue+0x22>
 8006516:	6824      	ldr	r4, [r4, #0]
 8006518:	2c00      	cmp	r4, #0
 800651a:	d1f7      	bne.n	800650c <_fwalk_sglue+0xc>
 800651c:	4630      	mov	r0, r6
 800651e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006522:	89ab      	ldrh	r3, [r5, #12]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d907      	bls.n	8006538 <_fwalk_sglue+0x38>
 8006528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800652c:	3301      	adds	r3, #1
 800652e:	d003      	beq.n	8006538 <_fwalk_sglue+0x38>
 8006530:	4629      	mov	r1, r5
 8006532:	4638      	mov	r0, r7
 8006534:	47c0      	blx	r8
 8006536:	4306      	orrs	r6, r0
 8006538:	3568      	adds	r5, #104	; 0x68
 800653a:	e7e9      	b.n	8006510 <_fwalk_sglue+0x10>

0800653c <memset>:
 800653c:	4402      	add	r2, r0
 800653e:	4603      	mov	r3, r0
 8006540:	4293      	cmp	r3, r2
 8006542:	d100      	bne.n	8006546 <memset+0xa>
 8006544:	4770      	bx	lr
 8006546:	f803 1b01 	strb.w	r1, [r3], #1
 800654a:	e7f9      	b.n	8006540 <memset+0x4>

0800654c <_localeconv_r>:
 800654c:	4800      	ldr	r0, [pc, #0]	; (8006550 <_localeconv_r+0x4>)
 800654e:	4770      	bx	lr
 8006550:	20000178 	.word	0x20000178

08006554 <__errno>:
 8006554:	4b01      	ldr	r3, [pc, #4]	; (800655c <__errno+0x8>)
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000084 	.word	0x20000084

08006560 <__libc_init_array>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	4d0d      	ldr	r5, [pc, #52]	; (8006598 <__libc_init_array+0x38>)
 8006564:	4c0d      	ldr	r4, [pc, #52]	; (800659c <__libc_init_array+0x3c>)
 8006566:	1b64      	subs	r4, r4, r5
 8006568:	10a4      	asrs	r4, r4, #2
 800656a:	2600      	movs	r6, #0
 800656c:	42a6      	cmp	r6, r4
 800656e:	d109      	bne.n	8006584 <__libc_init_array+0x24>
 8006570:	4d0b      	ldr	r5, [pc, #44]	; (80065a0 <__libc_init_array+0x40>)
 8006572:	4c0c      	ldr	r4, [pc, #48]	; (80065a4 <__libc_init_array+0x44>)
 8006574:	f002 f920 	bl	80087b8 <_init>
 8006578:	1b64      	subs	r4, r4, r5
 800657a:	10a4      	asrs	r4, r4, #2
 800657c:	2600      	movs	r6, #0
 800657e:	42a6      	cmp	r6, r4
 8006580:	d105      	bne.n	800658e <__libc_init_array+0x2e>
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	f855 3b04 	ldr.w	r3, [r5], #4
 8006588:	4798      	blx	r3
 800658a:	3601      	adds	r6, #1
 800658c:	e7ee      	b.n	800656c <__libc_init_array+0xc>
 800658e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006592:	4798      	blx	r3
 8006594:	3601      	adds	r6, #1
 8006596:	e7f2      	b.n	800657e <__libc_init_array+0x1e>
 8006598:	08008bc4 	.word	0x08008bc4
 800659c:	08008bc4 	.word	0x08008bc4
 80065a0:	08008bc4 	.word	0x08008bc4
 80065a4:	08008bc8 	.word	0x08008bc8

080065a8 <__retarget_lock_init_recursive>:
 80065a8:	4770      	bx	lr

080065aa <__retarget_lock_acquire_recursive>:
 80065aa:	4770      	bx	lr

080065ac <__retarget_lock_release_recursive>:
 80065ac:	4770      	bx	lr

080065ae <memcpy>:
 80065ae:	440a      	add	r2, r1
 80065b0:	4291      	cmp	r1, r2
 80065b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80065b6:	d100      	bne.n	80065ba <memcpy+0xc>
 80065b8:	4770      	bx	lr
 80065ba:	b510      	push	{r4, lr}
 80065bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065c4:	4291      	cmp	r1, r2
 80065c6:	d1f9      	bne.n	80065bc <memcpy+0xe>
 80065c8:	bd10      	pop	{r4, pc}

080065ca <quorem>:
 80065ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ce:	6903      	ldr	r3, [r0, #16]
 80065d0:	690c      	ldr	r4, [r1, #16]
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	4607      	mov	r7, r0
 80065d6:	db7e      	blt.n	80066d6 <quorem+0x10c>
 80065d8:	3c01      	subs	r4, #1
 80065da:	f101 0814 	add.w	r8, r1, #20
 80065de:	f100 0514 	add.w	r5, r0, #20
 80065e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065f0:	3301      	adds	r3, #1
 80065f2:	429a      	cmp	r2, r3
 80065f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006600:	d331      	bcc.n	8006666 <quorem+0x9c>
 8006602:	f04f 0e00 	mov.w	lr, #0
 8006606:	4640      	mov	r0, r8
 8006608:	46ac      	mov	ip, r5
 800660a:	46f2      	mov	sl, lr
 800660c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006610:	b293      	uxth	r3, r2
 8006612:	fb06 e303 	mla	r3, r6, r3, lr
 8006616:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800661a:	0c1a      	lsrs	r2, r3, #16
 800661c:	b29b      	uxth	r3, r3
 800661e:	ebaa 0303 	sub.w	r3, sl, r3
 8006622:	f8dc a000 	ldr.w	sl, [ip]
 8006626:	fa13 f38a 	uxtah	r3, r3, sl
 800662a:	fb06 220e 	mla	r2, r6, lr, r2
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	9b00      	ldr	r3, [sp, #0]
 8006632:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006636:	b292      	uxth	r2, r2
 8006638:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800663c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006640:	f8bd 3000 	ldrh.w	r3, [sp]
 8006644:	4581      	cmp	r9, r0
 8006646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800664a:	f84c 3b04 	str.w	r3, [ip], #4
 800664e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006652:	d2db      	bcs.n	800660c <quorem+0x42>
 8006654:	f855 300b 	ldr.w	r3, [r5, fp]
 8006658:	b92b      	cbnz	r3, 8006666 <quorem+0x9c>
 800665a:	9b01      	ldr	r3, [sp, #4]
 800665c:	3b04      	subs	r3, #4
 800665e:	429d      	cmp	r5, r3
 8006660:	461a      	mov	r2, r3
 8006662:	d32c      	bcc.n	80066be <quorem+0xf4>
 8006664:	613c      	str	r4, [r7, #16]
 8006666:	4638      	mov	r0, r7
 8006668:	f001 fb62 	bl	8007d30 <__mcmp>
 800666c:	2800      	cmp	r0, #0
 800666e:	db22      	blt.n	80066b6 <quorem+0xec>
 8006670:	3601      	adds	r6, #1
 8006672:	4629      	mov	r1, r5
 8006674:	2000      	movs	r0, #0
 8006676:	f858 2b04 	ldr.w	r2, [r8], #4
 800667a:	f8d1 c000 	ldr.w	ip, [r1]
 800667e:	b293      	uxth	r3, r2
 8006680:	1ac3      	subs	r3, r0, r3
 8006682:	0c12      	lsrs	r2, r2, #16
 8006684:	fa13 f38c 	uxtah	r3, r3, ip
 8006688:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800668c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006690:	b29b      	uxth	r3, r3
 8006692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006696:	45c1      	cmp	r9, r8
 8006698:	f841 3b04 	str.w	r3, [r1], #4
 800669c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066a0:	d2e9      	bcs.n	8006676 <quorem+0xac>
 80066a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066aa:	b922      	cbnz	r2, 80066b6 <quorem+0xec>
 80066ac:	3b04      	subs	r3, #4
 80066ae:	429d      	cmp	r5, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	d30a      	bcc.n	80066ca <quorem+0x100>
 80066b4:	613c      	str	r4, [r7, #16]
 80066b6:	4630      	mov	r0, r6
 80066b8:	b003      	add	sp, #12
 80066ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	3b04      	subs	r3, #4
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	d1ce      	bne.n	8006664 <quorem+0x9a>
 80066c6:	3c01      	subs	r4, #1
 80066c8:	e7c9      	b.n	800665e <quorem+0x94>
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	3b04      	subs	r3, #4
 80066ce:	2a00      	cmp	r2, #0
 80066d0:	d1f0      	bne.n	80066b4 <quorem+0xea>
 80066d2:	3c01      	subs	r4, #1
 80066d4:	e7eb      	b.n	80066ae <quorem+0xe4>
 80066d6:	2000      	movs	r0, #0
 80066d8:	e7ee      	b.n	80066b8 <quorem+0xee>
 80066da:	0000      	movs	r0, r0
 80066dc:	0000      	movs	r0, r0
	...

080066e0 <_dtoa_r>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	ed2d 8b04 	vpush	{d8-d9}
 80066e8:	69c5      	ldr	r5, [r0, #28]
 80066ea:	b093      	sub	sp, #76	; 0x4c
 80066ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80066f0:	ec57 6b10 	vmov	r6, r7, d0
 80066f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80066f8:	9107      	str	r1, [sp, #28]
 80066fa:	4604      	mov	r4, r0
 80066fc:	920a      	str	r2, [sp, #40]	; 0x28
 80066fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006700:	b975      	cbnz	r5, 8006720 <_dtoa_r+0x40>
 8006702:	2010      	movs	r0, #16
 8006704:	f000 ff36 	bl	8007574 <malloc>
 8006708:	4602      	mov	r2, r0
 800670a:	61e0      	str	r0, [r4, #28]
 800670c:	b920      	cbnz	r0, 8006718 <_dtoa_r+0x38>
 800670e:	4bae      	ldr	r3, [pc, #696]	; (80069c8 <_dtoa_r+0x2e8>)
 8006710:	21ef      	movs	r1, #239	; 0xef
 8006712:	48ae      	ldr	r0, [pc, #696]	; (80069cc <_dtoa_r+0x2ec>)
 8006714:	f001 fcee 	bl	80080f4 <__assert_func>
 8006718:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800671c:	6005      	str	r5, [r0, #0]
 800671e:	60c5      	str	r5, [r0, #12]
 8006720:	69e3      	ldr	r3, [r4, #28]
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	b151      	cbz	r1, 800673c <_dtoa_r+0x5c>
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	604a      	str	r2, [r1, #4]
 800672a:	2301      	movs	r3, #1
 800672c:	4093      	lsls	r3, r2
 800672e:	608b      	str	r3, [r1, #8]
 8006730:	4620      	mov	r0, r4
 8006732:	f001 f8c1 	bl	80078b8 <_Bfree>
 8006736:	69e3      	ldr	r3, [r4, #28]
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	1e3b      	subs	r3, r7, #0
 800673e:	bfbb      	ittet	lt
 8006740:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006744:	9303      	strlt	r3, [sp, #12]
 8006746:	2300      	movge	r3, #0
 8006748:	2201      	movlt	r2, #1
 800674a:	bfac      	ite	ge
 800674c:	f8c8 3000 	strge.w	r3, [r8]
 8006750:	f8c8 2000 	strlt.w	r2, [r8]
 8006754:	4b9e      	ldr	r3, [pc, #632]	; (80069d0 <_dtoa_r+0x2f0>)
 8006756:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800675a:	ea33 0308 	bics.w	r3, r3, r8
 800675e:	d11b      	bne.n	8006798 <_dtoa_r+0xb8>
 8006760:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006762:	f242 730f 	movw	r3, #9999	; 0x270f
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800676c:	4333      	orrs	r3, r6
 800676e:	f000 8593 	beq.w	8007298 <_dtoa_r+0xbb8>
 8006772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006774:	b963      	cbnz	r3, 8006790 <_dtoa_r+0xb0>
 8006776:	4b97      	ldr	r3, [pc, #604]	; (80069d4 <_dtoa_r+0x2f4>)
 8006778:	e027      	b.n	80067ca <_dtoa_r+0xea>
 800677a:	4b97      	ldr	r3, [pc, #604]	; (80069d8 <_dtoa_r+0x2f8>)
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	9800      	ldr	r0, [sp, #0]
 8006786:	b013      	add	sp, #76	; 0x4c
 8006788:	ecbd 8b04 	vpop	{d8-d9}
 800678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006790:	4b90      	ldr	r3, [pc, #576]	; (80069d4 <_dtoa_r+0x2f4>)
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	3303      	adds	r3, #3
 8006796:	e7f3      	b.n	8006780 <_dtoa_r+0xa0>
 8006798:	ed9d 7b02 	vldr	d7, [sp, #8]
 800679c:	2200      	movs	r2, #0
 800679e:	ec51 0b17 	vmov	r0, r1, d7
 80067a2:	eeb0 8a47 	vmov.f32	s16, s14
 80067a6:	eef0 8a67 	vmov.f32	s17, s15
 80067aa:	2300      	movs	r3, #0
 80067ac:	f7fa f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 80067b0:	4681      	mov	r9, r0
 80067b2:	b160      	cbz	r0, 80067ce <_dtoa_r+0xee>
 80067b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067b6:	2301      	movs	r3, #1
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8568 	beq.w	8007292 <_dtoa_r+0xbb2>
 80067c2:	4b86      	ldr	r3, [pc, #536]	; (80069dc <_dtoa_r+0x2fc>)
 80067c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	e7da      	b.n	8006784 <_dtoa_r+0xa4>
 80067ce:	aa10      	add	r2, sp, #64	; 0x40
 80067d0:	a911      	add	r1, sp, #68	; 0x44
 80067d2:	4620      	mov	r0, r4
 80067d4:	eeb0 0a48 	vmov.f32	s0, s16
 80067d8:	eef0 0a68 	vmov.f32	s1, s17
 80067dc:	f001 fb4e 	bl	8007e7c <__d2b>
 80067e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80067e4:	4682      	mov	sl, r0
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	d07f      	beq.n	80068ea <_dtoa_r+0x20a>
 80067ea:	ee18 3a90 	vmov	r3, s17
 80067ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80067f6:	ec51 0b18 	vmov	r0, r1, d8
 80067fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80067fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006802:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006806:	4619      	mov	r1, r3
 8006808:	2200      	movs	r2, #0
 800680a:	4b75      	ldr	r3, [pc, #468]	; (80069e0 <_dtoa_r+0x300>)
 800680c:	f7f9 fd5c 	bl	80002c8 <__aeabi_dsub>
 8006810:	a367      	add	r3, pc, #412	; (adr r3, 80069b0 <_dtoa_r+0x2d0>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f7f9 ff0f 	bl	8000638 <__aeabi_dmul>
 800681a:	a367      	add	r3, pc, #412	; (adr r3, 80069b8 <_dtoa_r+0x2d8>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f7f9 fd54 	bl	80002cc <__adddf3>
 8006824:	4606      	mov	r6, r0
 8006826:	4628      	mov	r0, r5
 8006828:	460f      	mov	r7, r1
 800682a:	f7f9 fe9b 	bl	8000564 <__aeabi_i2d>
 800682e:	a364      	add	r3, pc, #400	; (adr r3, 80069c0 <_dtoa_r+0x2e0>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f7f9 ff00 	bl	8000638 <__aeabi_dmul>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7f9 fd44 	bl	80002cc <__adddf3>
 8006844:	4606      	mov	r6, r0
 8006846:	460f      	mov	r7, r1
 8006848:	f7fa f9a6 	bl	8000b98 <__aeabi_d2iz>
 800684c:	2200      	movs	r2, #0
 800684e:	4683      	mov	fp, r0
 8006850:	2300      	movs	r3, #0
 8006852:	4630      	mov	r0, r6
 8006854:	4639      	mov	r1, r7
 8006856:	f7fa f961 	bl	8000b1c <__aeabi_dcmplt>
 800685a:	b148      	cbz	r0, 8006870 <_dtoa_r+0x190>
 800685c:	4658      	mov	r0, fp
 800685e:	f7f9 fe81 	bl	8000564 <__aeabi_i2d>
 8006862:	4632      	mov	r2, r6
 8006864:	463b      	mov	r3, r7
 8006866:	f7fa f94f 	bl	8000b08 <__aeabi_dcmpeq>
 800686a:	b908      	cbnz	r0, 8006870 <_dtoa_r+0x190>
 800686c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006870:	f1bb 0f16 	cmp.w	fp, #22
 8006874:	d857      	bhi.n	8006926 <_dtoa_r+0x246>
 8006876:	4b5b      	ldr	r3, [pc, #364]	; (80069e4 <_dtoa_r+0x304>)
 8006878:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	ec51 0b18 	vmov	r0, r1, d8
 8006884:	f7fa f94a 	bl	8000b1c <__aeabi_dcmplt>
 8006888:	2800      	cmp	r0, #0
 800688a:	d04e      	beq.n	800692a <_dtoa_r+0x24a>
 800688c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006890:	2300      	movs	r3, #0
 8006892:	930c      	str	r3, [sp, #48]	; 0x30
 8006894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006896:	1b5b      	subs	r3, r3, r5
 8006898:	1e5a      	subs	r2, r3, #1
 800689a:	bf45      	ittet	mi
 800689c:	f1c3 0301 	rsbmi	r3, r3, #1
 80068a0:	9305      	strmi	r3, [sp, #20]
 80068a2:	2300      	movpl	r3, #0
 80068a4:	2300      	movmi	r3, #0
 80068a6:	9206      	str	r2, [sp, #24]
 80068a8:	bf54      	ite	pl
 80068aa:	9305      	strpl	r3, [sp, #20]
 80068ac:	9306      	strmi	r3, [sp, #24]
 80068ae:	f1bb 0f00 	cmp.w	fp, #0
 80068b2:	db3c      	blt.n	800692e <_dtoa_r+0x24e>
 80068b4:	9b06      	ldr	r3, [sp, #24]
 80068b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80068ba:	445b      	add	r3, fp
 80068bc:	9306      	str	r3, [sp, #24]
 80068be:	2300      	movs	r3, #0
 80068c0:	9308      	str	r3, [sp, #32]
 80068c2:	9b07      	ldr	r3, [sp, #28]
 80068c4:	2b09      	cmp	r3, #9
 80068c6:	d868      	bhi.n	800699a <_dtoa_r+0x2ba>
 80068c8:	2b05      	cmp	r3, #5
 80068ca:	bfc4      	itt	gt
 80068cc:	3b04      	subgt	r3, #4
 80068ce:	9307      	strgt	r3, [sp, #28]
 80068d0:	9b07      	ldr	r3, [sp, #28]
 80068d2:	f1a3 0302 	sub.w	r3, r3, #2
 80068d6:	bfcc      	ite	gt
 80068d8:	2500      	movgt	r5, #0
 80068da:	2501      	movle	r5, #1
 80068dc:	2b03      	cmp	r3, #3
 80068de:	f200 8085 	bhi.w	80069ec <_dtoa_r+0x30c>
 80068e2:	e8df f003 	tbb	[pc, r3]
 80068e6:	3b2e      	.short	0x3b2e
 80068e8:	5839      	.short	0x5839
 80068ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80068ee:	441d      	add	r5, r3
 80068f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	bfc1      	itttt	gt
 80068f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80068fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006900:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006904:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006908:	bfd6      	itet	le
 800690a:	f1c3 0320 	rsble	r3, r3, #32
 800690e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006912:	fa06 f003 	lslle.w	r0, r6, r3
 8006916:	f7f9 fe15 	bl	8000544 <__aeabi_ui2d>
 800691a:	2201      	movs	r2, #1
 800691c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006920:	3d01      	subs	r5, #1
 8006922:	920e      	str	r2, [sp, #56]	; 0x38
 8006924:	e76f      	b.n	8006806 <_dtoa_r+0x126>
 8006926:	2301      	movs	r3, #1
 8006928:	e7b3      	b.n	8006892 <_dtoa_r+0x1b2>
 800692a:	900c      	str	r0, [sp, #48]	; 0x30
 800692c:	e7b2      	b.n	8006894 <_dtoa_r+0x1b4>
 800692e:	9b05      	ldr	r3, [sp, #20]
 8006930:	eba3 030b 	sub.w	r3, r3, fp
 8006934:	9305      	str	r3, [sp, #20]
 8006936:	f1cb 0300 	rsb	r3, fp, #0
 800693a:	9308      	str	r3, [sp, #32]
 800693c:	2300      	movs	r3, #0
 800693e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006940:	e7bf      	b.n	80068c2 <_dtoa_r+0x1e2>
 8006942:	2300      	movs	r3, #0
 8006944:	9309      	str	r3, [sp, #36]	; 0x24
 8006946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006948:	2b00      	cmp	r3, #0
 800694a:	dc52      	bgt.n	80069f2 <_dtoa_r+0x312>
 800694c:	2301      	movs	r3, #1
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	9304      	str	r3, [sp, #16]
 8006952:	461a      	mov	r2, r3
 8006954:	920a      	str	r2, [sp, #40]	; 0x28
 8006956:	e00b      	b.n	8006970 <_dtoa_r+0x290>
 8006958:	2301      	movs	r3, #1
 800695a:	e7f3      	b.n	8006944 <_dtoa_r+0x264>
 800695c:	2300      	movs	r3, #0
 800695e:	9309      	str	r3, [sp, #36]	; 0x24
 8006960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006962:	445b      	add	r3, fp
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	3301      	adds	r3, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	9304      	str	r3, [sp, #16]
 800696c:	bfb8      	it	lt
 800696e:	2301      	movlt	r3, #1
 8006970:	69e0      	ldr	r0, [r4, #28]
 8006972:	2100      	movs	r1, #0
 8006974:	2204      	movs	r2, #4
 8006976:	f102 0614 	add.w	r6, r2, #20
 800697a:	429e      	cmp	r6, r3
 800697c:	d93d      	bls.n	80069fa <_dtoa_r+0x31a>
 800697e:	6041      	str	r1, [r0, #4]
 8006980:	4620      	mov	r0, r4
 8006982:	f000 ff59 	bl	8007838 <_Balloc>
 8006986:	9000      	str	r0, [sp, #0]
 8006988:	2800      	cmp	r0, #0
 800698a:	d139      	bne.n	8006a00 <_dtoa_r+0x320>
 800698c:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <_dtoa_r+0x308>)
 800698e:	4602      	mov	r2, r0
 8006990:	f240 11af 	movw	r1, #431	; 0x1af
 8006994:	e6bd      	b.n	8006712 <_dtoa_r+0x32>
 8006996:	2301      	movs	r3, #1
 8006998:	e7e1      	b.n	800695e <_dtoa_r+0x27e>
 800699a:	2501      	movs	r5, #1
 800699c:	2300      	movs	r3, #0
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	9509      	str	r5, [sp, #36]	; 0x24
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	2200      	movs	r2, #0
 80069ac:	2312      	movs	r3, #18
 80069ae:	e7d1      	b.n	8006954 <_dtoa_r+0x274>
 80069b0:	636f4361 	.word	0x636f4361
 80069b4:	3fd287a7 	.word	0x3fd287a7
 80069b8:	8b60c8b3 	.word	0x8b60c8b3
 80069bc:	3fc68a28 	.word	0x3fc68a28
 80069c0:	509f79fb 	.word	0x509f79fb
 80069c4:	3fd34413 	.word	0x3fd34413
 80069c8:	08008889 	.word	0x08008889
 80069cc:	080088a0 	.word	0x080088a0
 80069d0:	7ff00000 	.word	0x7ff00000
 80069d4:	08008885 	.word	0x08008885
 80069d8:	0800887c 	.word	0x0800887c
 80069dc:	08008859 	.word	0x08008859
 80069e0:	3ff80000 	.word	0x3ff80000
 80069e4:	080089a0 	.word	0x080089a0
 80069e8:	080088f8 	.word	0x080088f8
 80069ec:	2301      	movs	r3, #1
 80069ee:	9309      	str	r3, [sp, #36]	; 0x24
 80069f0:	e7d7      	b.n	80069a2 <_dtoa_r+0x2c2>
 80069f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	e7ba      	b.n	8006970 <_dtoa_r+0x290>
 80069fa:	3101      	adds	r1, #1
 80069fc:	0052      	lsls	r2, r2, #1
 80069fe:	e7ba      	b.n	8006976 <_dtoa_r+0x296>
 8006a00:	69e3      	ldr	r3, [r4, #28]
 8006a02:	9a00      	ldr	r2, [sp, #0]
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	9b04      	ldr	r3, [sp, #16]
 8006a08:	2b0e      	cmp	r3, #14
 8006a0a:	f200 80a8 	bhi.w	8006b5e <_dtoa_r+0x47e>
 8006a0e:	2d00      	cmp	r5, #0
 8006a10:	f000 80a5 	beq.w	8006b5e <_dtoa_r+0x47e>
 8006a14:	f1bb 0f00 	cmp.w	fp, #0
 8006a18:	dd38      	ble.n	8006a8c <_dtoa_r+0x3ac>
 8006a1a:	4bc0      	ldr	r3, [pc, #768]	; (8006d1c <_dtoa_r+0x63c>)
 8006a1c:	f00b 020f 	and.w	r2, fp, #15
 8006a20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006a28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006a30:	d019      	beq.n	8006a66 <_dtoa_r+0x386>
 8006a32:	4bbb      	ldr	r3, [pc, #748]	; (8006d20 <_dtoa_r+0x640>)
 8006a34:	ec51 0b18 	vmov	r0, r1, d8
 8006a38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a3c:	f7f9 ff26 	bl	800088c <__aeabi_ddiv>
 8006a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a44:	f008 080f 	and.w	r8, r8, #15
 8006a48:	2503      	movs	r5, #3
 8006a4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006d20 <_dtoa_r+0x640>
 8006a4e:	f1b8 0f00 	cmp.w	r8, #0
 8006a52:	d10a      	bne.n	8006a6a <_dtoa_r+0x38a>
 8006a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a58:	4632      	mov	r2, r6
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	f7f9 ff16 	bl	800088c <__aeabi_ddiv>
 8006a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a64:	e02b      	b.n	8006abe <_dtoa_r+0x3de>
 8006a66:	2502      	movs	r5, #2
 8006a68:	e7ef      	b.n	8006a4a <_dtoa_r+0x36a>
 8006a6a:	f018 0f01 	tst.w	r8, #1
 8006a6e:	d008      	beq.n	8006a82 <_dtoa_r+0x3a2>
 8006a70:	4630      	mov	r0, r6
 8006a72:	4639      	mov	r1, r7
 8006a74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a78:	f7f9 fdde 	bl	8000638 <__aeabi_dmul>
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460f      	mov	r7, r1
 8006a82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006a86:	f109 0908 	add.w	r9, r9, #8
 8006a8a:	e7e0      	b.n	8006a4e <_dtoa_r+0x36e>
 8006a8c:	f000 809f 	beq.w	8006bce <_dtoa_r+0x4ee>
 8006a90:	f1cb 0600 	rsb	r6, fp, #0
 8006a94:	4ba1      	ldr	r3, [pc, #644]	; (8006d1c <_dtoa_r+0x63c>)
 8006a96:	4fa2      	ldr	r7, [pc, #648]	; (8006d20 <_dtoa_r+0x640>)
 8006a98:	f006 020f 	and.w	r2, r6, #15
 8006a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	ec51 0b18 	vmov	r0, r1, d8
 8006aa8:	f7f9 fdc6 	bl	8000638 <__aeabi_dmul>
 8006aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ab0:	1136      	asrs	r6, r6, #4
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2502      	movs	r5, #2
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	d17e      	bne.n	8006bb8 <_dtoa_r+0x4d8>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1d0      	bne.n	8006a60 <_dtoa_r+0x380>
 8006abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ac0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8084 	beq.w	8006bd2 <_dtoa_r+0x4f2>
 8006aca:	4b96      	ldr	r3, [pc, #600]	; (8006d24 <_dtoa_r+0x644>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	4640      	mov	r0, r8
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	f7fa f823 	bl	8000b1c <__aeabi_dcmplt>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d07b      	beq.n	8006bd2 <_dtoa_r+0x4f2>
 8006ada:	9b04      	ldr	r3, [sp, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d078      	beq.n	8006bd2 <_dtoa_r+0x4f2>
 8006ae0:	9b01      	ldr	r3, [sp, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	dd39      	ble.n	8006b5a <_dtoa_r+0x47a>
 8006ae6:	4b90      	ldr	r3, [pc, #576]	; (8006d28 <_dtoa_r+0x648>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4640      	mov	r0, r8
 8006aec:	4649      	mov	r1, r9
 8006aee:	f7f9 fda3 	bl	8000638 <__aeabi_dmul>
 8006af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006af6:	9e01      	ldr	r6, [sp, #4]
 8006af8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006afc:	3501      	adds	r5, #1
 8006afe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7f9 fd2e 	bl	8000564 <__aeabi_i2d>
 8006b08:	4642      	mov	r2, r8
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	f7f9 fd94 	bl	8000638 <__aeabi_dmul>
 8006b10:	4b86      	ldr	r3, [pc, #536]	; (8006d2c <_dtoa_r+0x64c>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	f7f9 fbda 	bl	80002cc <__adddf3>
 8006b18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b20:	9303      	str	r3, [sp, #12]
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	d158      	bne.n	8006bd8 <_dtoa_r+0x4f8>
 8006b26:	4b82      	ldr	r3, [pc, #520]	; (8006d30 <_dtoa_r+0x650>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7f9 fbcb 	bl	80002c8 <__aeabi_dsub>
 8006b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b36:	4680      	mov	r8, r0
 8006b38:	4689      	mov	r9, r1
 8006b3a:	f7fa f80d 	bl	8000b58 <__aeabi_dcmpgt>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f040 8296 	bne.w	8007070 <_dtoa_r+0x990>
 8006b44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006b48:	4640      	mov	r0, r8
 8006b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b4e:	4649      	mov	r1, r9
 8006b50:	f7f9 ffe4 	bl	8000b1c <__aeabi_dcmplt>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	f040 8289 	bne.w	800706c <_dtoa_r+0x98c>
 8006b5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006b5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f2c0 814e 	blt.w	8006e02 <_dtoa_r+0x722>
 8006b66:	f1bb 0f0e 	cmp.w	fp, #14
 8006b6a:	f300 814a 	bgt.w	8006e02 <_dtoa_r+0x722>
 8006b6e:	4b6b      	ldr	r3, [pc, #428]	; (8006d1c <_dtoa_r+0x63c>)
 8006b70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f280 80dc 	bge.w	8006d38 <_dtoa_r+0x658>
 8006b80:	9b04      	ldr	r3, [sp, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f300 80d8 	bgt.w	8006d38 <_dtoa_r+0x658>
 8006b88:	f040 826f 	bne.w	800706a <_dtoa_r+0x98a>
 8006b8c:	4b68      	ldr	r3, [pc, #416]	; (8006d30 <_dtoa_r+0x650>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4640      	mov	r0, r8
 8006b92:	4649      	mov	r1, r9
 8006b94:	f7f9 fd50 	bl	8000638 <__aeabi_dmul>
 8006b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b9c:	f7f9 ffd2 	bl	8000b44 <__aeabi_dcmpge>
 8006ba0:	9e04      	ldr	r6, [sp, #16]
 8006ba2:	4637      	mov	r7, r6
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	f040 8245 	bne.w	8007034 <_dtoa_r+0x954>
 8006baa:	9d00      	ldr	r5, [sp, #0]
 8006bac:	2331      	movs	r3, #49	; 0x31
 8006bae:	f805 3b01 	strb.w	r3, [r5], #1
 8006bb2:	f10b 0b01 	add.w	fp, fp, #1
 8006bb6:	e241      	b.n	800703c <_dtoa_r+0x95c>
 8006bb8:	07f2      	lsls	r2, r6, #31
 8006bba:	d505      	bpl.n	8006bc8 <_dtoa_r+0x4e8>
 8006bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc0:	f7f9 fd3a 	bl	8000638 <__aeabi_dmul>
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	1076      	asrs	r6, r6, #1
 8006bca:	3708      	adds	r7, #8
 8006bcc:	e773      	b.n	8006ab6 <_dtoa_r+0x3d6>
 8006bce:	2502      	movs	r5, #2
 8006bd0:	e775      	b.n	8006abe <_dtoa_r+0x3de>
 8006bd2:	9e04      	ldr	r6, [sp, #16]
 8006bd4:	465f      	mov	r7, fp
 8006bd6:	e792      	b.n	8006afe <_dtoa_r+0x41e>
 8006bd8:	9900      	ldr	r1, [sp, #0]
 8006bda:	4b50      	ldr	r3, [pc, #320]	; (8006d1c <_dtoa_r+0x63c>)
 8006bdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006be0:	4431      	add	r1, r6
 8006be2:	9102      	str	r1, [sp, #8]
 8006be4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006be6:	eeb0 9a47 	vmov.f32	s18, s14
 8006bea:	eef0 9a67 	vmov.f32	s19, s15
 8006bee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006bf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bf6:	2900      	cmp	r1, #0
 8006bf8:	d044      	beq.n	8006c84 <_dtoa_r+0x5a4>
 8006bfa:	494e      	ldr	r1, [pc, #312]	; (8006d34 <_dtoa_r+0x654>)
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	f7f9 fe45 	bl	800088c <__aeabi_ddiv>
 8006c02:	ec53 2b19 	vmov	r2, r3, d9
 8006c06:	f7f9 fb5f 	bl	80002c8 <__aeabi_dsub>
 8006c0a:	9d00      	ldr	r5, [sp, #0]
 8006c0c:	ec41 0b19 	vmov	d9, r0, r1
 8006c10:	4649      	mov	r1, r9
 8006c12:	4640      	mov	r0, r8
 8006c14:	f7f9 ffc0 	bl	8000b98 <__aeabi_d2iz>
 8006c18:	4606      	mov	r6, r0
 8006c1a:	f7f9 fca3 	bl	8000564 <__aeabi_i2d>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 fb4f 	bl	80002c8 <__aeabi_dsub>
 8006c2a:	3630      	adds	r6, #48	; 0x30
 8006c2c:	f805 6b01 	strb.w	r6, [r5], #1
 8006c30:	ec53 2b19 	vmov	r2, r3, d9
 8006c34:	4680      	mov	r8, r0
 8006c36:	4689      	mov	r9, r1
 8006c38:	f7f9 ff70 	bl	8000b1c <__aeabi_dcmplt>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d164      	bne.n	8006d0a <_dtoa_r+0x62a>
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	4937      	ldr	r1, [pc, #220]	; (8006d24 <_dtoa_r+0x644>)
 8006c46:	2000      	movs	r0, #0
 8006c48:	f7f9 fb3e 	bl	80002c8 <__aeabi_dsub>
 8006c4c:	ec53 2b19 	vmov	r2, r3, d9
 8006c50:	f7f9 ff64 	bl	8000b1c <__aeabi_dcmplt>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	f040 80b6 	bne.w	8006dc6 <_dtoa_r+0x6e6>
 8006c5a:	9b02      	ldr	r3, [sp, #8]
 8006c5c:	429d      	cmp	r5, r3
 8006c5e:	f43f af7c 	beq.w	8006b5a <_dtoa_r+0x47a>
 8006c62:	4b31      	ldr	r3, [pc, #196]	; (8006d28 <_dtoa_r+0x648>)
 8006c64:	ec51 0b19 	vmov	r0, r1, d9
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f7f9 fce5 	bl	8000638 <__aeabi_dmul>
 8006c6e:	4b2e      	ldr	r3, [pc, #184]	; (8006d28 <_dtoa_r+0x648>)
 8006c70:	ec41 0b19 	vmov	d9, r0, r1
 8006c74:	2200      	movs	r2, #0
 8006c76:	4640      	mov	r0, r8
 8006c78:	4649      	mov	r1, r9
 8006c7a:	f7f9 fcdd 	bl	8000638 <__aeabi_dmul>
 8006c7e:	4680      	mov	r8, r0
 8006c80:	4689      	mov	r9, r1
 8006c82:	e7c5      	b.n	8006c10 <_dtoa_r+0x530>
 8006c84:	ec51 0b17 	vmov	r0, r1, d7
 8006c88:	f7f9 fcd6 	bl	8000638 <__aeabi_dmul>
 8006c8c:	9b02      	ldr	r3, [sp, #8]
 8006c8e:	9d00      	ldr	r5, [sp, #0]
 8006c90:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c92:	ec41 0b19 	vmov	d9, r0, r1
 8006c96:	4649      	mov	r1, r9
 8006c98:	4640      	mov	r0, r8
 8006c9a:	f7f9 ff7d 	bl	8000b98 <__aeabi_d2iz>
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	f7f9 fc60 	bl	8000564 <__aeabi_i2d>
 8006ca4:	3630      	adds	r6, #48	; 0x30
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4640      	mov	r0, r8
 8006cac:	4649      	mov	r1, r9
 8006cae:	f7f9 fb0b 	bl	80002c8 <__aeabi_dsub>
 8006cb2:	f805 6b01 	strb.w	r6, [r5], #1
 8006cb6:	9b02      	ldr	r3, [sp, #8]
 8006cb8:	429d      	cmp	r5, r3
 8006cba:	4680      	mov	r8, r0
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	d124      	bne.n	8006d0e <_dtoa_r+0x62e>
 8006cc4:	4b1b      	ldr	r3, [pc, #108]	; (8006d34 <_dtoa_r+0x654>)
 8006cc6:	ec51 0b19 	vmov	r0, r1, d9
 8006cca:	f7f9 faff 	bl	80002cc <__adddf3>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	f7f9 ff3f 	bl	8000b58 <__aeabi_dcmpgt>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d173      	bne.n	8006dc6 <_dtoa_r+0x6e6>
 8006cde:	ec53 2b19 	vmov	r2, r3, d9
 8006ce2:	4914      	ldr	r1, [pc, #80]	; (8006d34 <_dtoa_r+0x654>)
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f7f9 faef 	bl	80002c8 <__aeabi_dsub>
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	f7f9 ff13 	bl	8000b1c <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f af2f 	beq.w	8006b5a <_dtoa_r+0x47a>
 8006cfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006cfe:	1e6b      	subs	r3, r5, #1
 8006d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d06:	2b30      	cmp	r3, #48	; 0x30
 8006d08:	d0f8      	beq.n	8006cfc <_dtoa_r+0x61c>
 8006d0a:	46bb      	mov	fp, r7
 8006d0c:	e04a      	b.n	8006da4 <_dtoa_r+0x6c4>
 8006d0e:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <_dtoa_r+0x648>)
 8006d10:	f7f9 fc92 	bl	8000638 <__aeabi_dmul>
 8006d14:	4680      	mov	r8, r0
 8006d16:	4689      	mov	r9, r1
 8006d18:	e7bd      	b.n	8006c96 <_dtoa_r+0x5b6>
 8006d1a:	bf00      	nop
 8006d1c:	080089a0 	.word	0x080089a0
 8006d20:	08008978 	.word	0x08008978
 8006d24:	3ff00000 	.word	0x3ff00000
 8006d28:	40240000 	.word	0x40240000
 8006d2c:	401c0000 	.word	0x401c0000
 8006d30:	40140000 	.word	0x40140000
 8006d34:	3fe00000 	.word	0x3fe00000
 8006d38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d3c:	9d00      	ldr	r5, [sp, #0]
 8006d3e:	4642      	mov	r2, r8
 8006d40:	464b      	mov	r3, r9
 8006d42:	4630      	mov	r0, r6
 8006d44:	4639      	mov	r1, r7
 8006d46:	f7f9 fda1 	bl	800088c <__aeabi_ddiv>
 8006d4a:	f7f9 ff25 	bl	8000b98 <__aeabi_d2iz>
 8006d4e:	9001      	str	r0, [sp, #4]
 8006d50:	f7f9 fc08 	bl	8000564 <__aeabi_i2d>
 8006d54:	4642      	mov	r2, r8
 8006d56:	464b      	mov	r3, r9
 8006d58:	f7f9 fc6e 	bl	8000638 <__aeabi_dmul>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4630      	mov	r0, r6
 8006d62:	4639      	mov	r1, r7
 8006d64:	f7f9 fab0 	bl	80002c8 <__aeabi_dsub>
 8006d68:	9e01      	ldr	r6, [sp, #4]
 8006d6a:	9f04      	ldr	r7, [sp, #16]
 8006d6c:	3630      	adds	r6, #48	; 0x30
 8006d6e:	f805 6b01 	strb.w	r6, [r5], #1
 8006d72:	9e00      	ldr	r6, [sp, #0]
 8006d74:	1bae      	subs	r6, r5, r6
 8006d76:	42b7      	cmp	r7, r6
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	d134      	bne.n	8006de8 <_dtoa_r+0x708>
 8006d7e:	f7f9 faa5 	bl	80002cc <__adddf3>
 8006d82:	4642      	mov	r2, r8
 8006d84:	464b      	mov	r3, r9
 8006d86:	4606      	mov	r6, r0
 8006d88:	460f      	mov	r7, r1
 8006d8a:	f7f9 fee5 	bl	8000b58 <__aeabi_dcmpgt>
 8006d8e:	b9c8      	cbnz	r0, 8006dc4 <_dtoa_r+0x6e4>
 8006d90:	4642      	mov	r2, r8
 8006d92:	464b      	mov	r3, r9
 8006d94:	4630      	mov	r0, r6
 8006d96:	4639      	mov	r1, r7
 8006d98:	f7f9 feb6 	bl	8000b08 <__aeabi_dcmpeq>
 8006d9c:	b110      	cbz	r0, 8006da4 <_dtoa_r+0x6c4>
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	07db      	lsls	r3, r3, #31
 8006da2:	d40f      	bmi.n	8006dc4 <_dtoa_r+0x6e4>
 8006da4:	4651      	mov	r1, sl
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 fd86 	bl	80078b8 <_Bfree>
 8006dac:	2300      	movs	r3, #0
 8006dae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006db0:	702b      	strb	r3, [r5, #0]
 8006db2:	f10b 0301 	add.w	r3, fp, #1
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f43f ace2 	beq.w	8006784 <_dtoa_r+0xa4>
 8006dc0:	601d      	str	r5, [r3, #0]
 8006dc2:	e4df      	b.n	8006784 <_dtoa_r+0xa4>
 8006dc4:	465f      	mov	r7, fp
 8006dc6:	462b      	mov	r3, r5
 8006dc8:	461d      	mov	r5, r3
 8006dca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dce:	2a39      	cmp	r2, #57	; 0x39
 8006dd0:	d106      	bne.n	8006de0 <_dtoa_r+0x700>
 8006dd2:	9a00      	ldr	r2, [sp, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d1f7      	bne.n	8006dc8 <_dtoa_r+0x6e8>
 8006dd8:	9900      	ldr	r1, [sp, #0]
 8006dda:	2230      	movs	r2, #48	; 0x30
 8006ddc:	3701      	adds	r7, #1
 8006dde:	700a      	strb	r2, [r1, #0]
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	3201      	adds	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	e790      	b.n	8006d0a <_dtoa_r+0x62a>
 8006de8:	4ba3      	ldr	r3, [pc, #652]	; (8007078 <_dtoa_r+0x998>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7f9 fc24 	bl	8000638 <__aeabi_dmul>
 8006df0:	2200      	movs	r2, #0
 8006df2:	2300      	movs	r3, #0
 8006df4:	4606      	mov	r6, r0
 8006df6:	460f      	mov	r7, r1
 8006df8:	f7f9 fe86 	bl	8000b08 <__aeabi_dcmpeq>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d09e      	beq.n	8006d3e <_dtoa_r+0x65e>
 8006e00:	e7d0      	b.n	8006da4 <_dtoa_r+0x6c4>
 8006e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e04:	2a00      	cmp	r2, #0
 8006e06:	f000 80ca 	beq.w	8006f9e <_dtoa_r+0x8be>
 8006e0a:	9a07      	ldr	r2, [sp, #28]
 8006e0c:	2a01      	cmp	r2, #1
 8006e0e:	f300 80ad 	bgt.w	8006f6c <_dtoa_r+0x88c>
 8006e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	f000 80a5 	beq.w	8006f64 <_dtoa_r+0x884>
 8006e1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e1e:	9e08      	ldr	r6, [sp, #32]
 8006e20:	9d05      	ldr	r5, [sp, #20]
 8006e22:	9a05      	ldr	r2, [sp, #20]
 8006e24:	441a      	add	r2, r3
 8006e26:	9205      	str	r2, [sp, #20]
 8006e28:	9a06      	ldr	r2, [sp, #24]
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	441a      	add	r2, r3
 8006e2e:	4620      	mov	r0, r4
 8006e30:	9206      	str	r2, [sp, #24]
 8006e32:	f000 fdf7 	bl	8007a24 <__i2b>
 8006e36:	4607      	mov	r7, r0
 8006e38:	b165      	cbz	r5, 8006e54 <_dtoa_r+0x774>
 8006e3a:	9b06      	ldr	r3, [sp, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dd09      	ble.n	8006e54 <_dtoa_r+0x774>
 8006e40:	42ab      	cmp	r3, r5
 8006e42:	9a05      	ldr	r2, [sp, #20]
 8006e44:	bfa8      	it	ge
 8006e46:	462b      	movge	r3, r5
 8006e48:	1ad2      	subs	r2, r2, r3
 8006e4a:	9205      	str	r2, [sp, #20]
 8006e4c:	9a06      	ldr	r2, [sp, #24]
 8006e4e:	1aed      	subs	r5, r5, r3
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	9306      	str	r3, [sp, #24]
 8006e54:	9b08      	ldr	r3, [sp, #32]
 8006e56:	b1f3      	cbz	r3, 8006e96 <_dtoa_r+0x7b6>
 8006e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80a3 	beq.w	8006fa6 <_dtoa_r+0x8c6>
 8006e60:	2e00      	cmp	r6, #0
 8006e62:	dd10      	ble.n	8006e86 <_dtoa_r+0x7a6>
 8006e64:	4639      	mov	r1, r7
 8006e66:	4632      	mov	r2, r6
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f000 fe9b 	bl	8007ba4 <__pow5mult>
 8006e6e:	4652      	mov	r2, sl
 8006e70:	4601      	mov	r1, r0
 8006e72:	4607      	mov	r7, r0
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fdeb 	bl	8007a50 <__multiply>
 8006e7a:	4651      	mov	r1, sl
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fd1a 	bl	80078b8 <_Bfree>
 8006e84:	46c2      	mov	sl, r8
 8006e86:	9b08      	ldr	r3, [sp, #32]
 8006e88:	1b9a      	subs	r2, r3, r6
 8006e8a:	d004      	beq.n	8006e96 <_dtoa_r+0x7b6>
 8006e8c:	4651      	mov	r1, sl
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 fe88 	bl	8007ba4 <__pow5mult>
 8006e94:	4682      	mov	sl, r0
 8006e96:	2101      	movs	r1, #1
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 fdc3 	bl	8007a24 <__i2b>
 8006e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	f340 8081 	ble.w	8006faa <_dtoa_r+0x8ca>
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4601      	mov	r1, r0
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 fe79 	bl	8007ba4 <__pow5mult>
 8006eb2:	9b07      	ldr	r3, [sp, #28]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	dd7a      	ble.n	8006fb0 <_dtoa_r+0x8d0>
 8006eba:	f04f 0800 	mov.w	r8, #0
 8006ebe:	6933      	ldr	r3, [r6, #16]
 8006ec0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ec4:	6918      	ldr	r0, [r3, #16]
 8006ec6:	f000 fd5f 	bl	8007988 <__hi0bits>
 8006eca:	f1c0 0020 	rsb	r0, r0, #32
 8006ece:	9b06      	ldr	r3, [sp, #24]
 8006ed0:	4418      	add	r0, r3
 8006ed2:	f010 001f 	ands.w	r0, r0, #31
 8006ed6:	f000 8094 	beq.w	8007002 <_dtoa_r+0x922>
 8006eda:	f1c0 0320 	rsb	r3, r0, #32
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	f340 8085 	ble.w	8006fee <_dtoa_r+0x90e>
 8006ee4:	9b05      	ldr	r3, [sp, #20]
 8006ee6:	f1c0 001c 	rsb	r0, r0, #28
 8006eea:	4403      	add	r3, r0
 8006eec:	9305      	str	r3, [sp, #20]
 8006eee:	9b06      	ldr	r3, [sp, #24]
 8006ef0:	4403      	add	r3, r0
 8006ef2:	4405      	add	r5, r0
 8006ef4:	9306      	str	r3, [sp, #24]
 8006ef6:	9b05      	ldr	r3, [sp, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dd05      	ble.n	8006f08 <_dtoa_r+0x828>
 8006efc:	4651      	mov	r1, sl
 8006efe:	461a      	mov	r2, r3
 8006f00:	4620      	mov	r0, r4
 8006f02:	f000 fea9 	bl	8007c58 <__lshift>
 8006f06:	4682      	mov	sl, r0
 8006f08:	9b06      	ldr	r3, [sp, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	dd05      	ble.n	8006f1a <_dtoa_r+0x83a>
 8006f0e:	4631      	mov	r1, r6
 8006f10:	461a      	mov	r2, r3
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 fea0 	bl	8007c58 <__lshift>
 8006f18:	4606      	mov	r6, r0
 8006f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d072      	beq.n	8007006 <_dtoa_r+0x926>
 8006f20:	4631      	mov	r1, r6
 8006f22:	4650      	mov	r0, sl
 8006f24:	f000 ff04 	bl	8007d30 <__mcmp>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	da6c      	bge.n	8007006 <_dtoa_r+0x926>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4651      	mov	r1, sl
 8006f30:	220a      	movs	r2, #10
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 fce2 	bl	80078fc <__multadd>
 8006f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006f3e:	4682      	mov	sl, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 81b0 	beq.w	80072a6 <_dtoa_r+0xbc6>
 8006f46:	2300      	movs	r3, #0
 8006f48:	4639      	mov	r1, r7
 8006f4a:	220a      	movs	r2, #10
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 fcd5 	bl	80078fc <__multadd>
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	4607      	mov	r7, r0
 8006f58:	f300 8096 	bgt.w	8007088 <_dtoa_r+0x9a8>
 8006f5c:	9b07      	ldr	r3, [sp, #28]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	dc59      	bgt.n	8007016 <_dtoa_r+0x936>
 8006f62:	e091      	b.n	8007088 <_dtoa_r+0x9a8>
 8006f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f6a:	e758      	b.n	8006e1e <_dtoa_r+0x73e>
 8006f6c:	9b04      	ldr	r3, [sp, #16]
 8006f6e:	1e5e      	subs	r6, r3, #1
 8006f70:	9b08      	ldr	r3, [sp, #32]
 8006f72:	42b3      	cmp	r3, r6
 8006f74:	bfbf      	itttt	lt
 8006f76:	9b08      	ldrlt	r3, [sp, #32]
 8006f78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006f7a:	9608      	strlt	r6, [sp, #32]
 8006f7c:	1af3      	sublt	r3, r6, r3
 8006f7e:	bfb4      	ite	lt
 8006f80:	18d2      	addlt	r2, r2, r3
 8006f82:	1b9e      	subge	r6, r3, r6
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	bfbc      	itt	lt
 8006f88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006f8a:	2600      	movlt	r6, #0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	bfb7      	itett	lt
 8006f90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006f94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006f98:	1a9d      	sublt	r5, r3, r2
 8006f9a:	2300      	movlt	r3, #0
 8006f9c:	e741      	b.n	8006e22 <_dtoa_r+0x742>
 8006f9e:	9e08      	ldr	r6, [sp, #32]
 8006fa0:	9d05      	ldr	r5, [sp, #20]
 8006fa2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fa4:	e748      	b.n	8006e38 <_dtoa_r+0x758>
 8006fa6:	9a08      	ldr	r2, [sp, #32]
 8006fa8:	e770      	b.n	8006e8c <_dtoa_r+0x7ac>
 8006faa:	9b07      	ldr	r3, [sp, #28]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	dc19      	bgt.n	8006fe4 <_dtoa_r+0x904>
 8006fb0:	9b02      	ldr	r3, [sp, #8]
 8006fb2:	b9bb      	cbnz	r3, 8006fe4 <_dtoa_r+0x904>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fba:	b99b      	cbnz	r3, 8006fe4 <_dtoa_r+0x904>
 8006fbc:	9b03      	ldr	r3, [sp, #12]
 8006fbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fc2:	0d1b      	lsrs	r3, r3, #20
 8006fc4:	051b      	lsls	r3, r3, #20
 8006fc6:	b183      	cbz	r3, 8006fea <_dtoa_r+0x90a>
 8006fc8:	9b05      	ldr	r3, [sp, #20]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	9305      	str	r3, [sp, #20]
 8006fce:	9b06      	ldr	r3, [sp, #24]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	9306      	str	r3, [sp, #24]
 8006fd4:	f04f 0801 	mov.w	r8, #1
 8006fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f47f af6f 	bne.w	8006ebe <_dtoa_r+0x7de>
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e774      	b.n	8006ece <_dtoa_r+0x7ee>
 8006fe4:	f04f 0800 	mov.w	r8, #0
 8006fe8:	e7f6      	b.n	8006fd8 <_dtoa_r+0x8f8>
 8006fea:	4698      	mov	r8, r3
 8006fec:	e7f4      	b.n	8006fd8 <_dtoa_r+0x8f8>
 8006fee:	d082      	beq.n	8006ef6 <_dtoa_r+0x816>
 8006ff0:	9a05      	ldr	r2, [sp, #20]
 8006ff2:	331c      	adds	r3, #28
 8006ff4:	441a      	add	r2, r3
 8006ff6:	9205      	str	r2, [sp, #20]
 8006ff8:	9a06      	ldr	r2, [sp, #24]
 8006ffa:	441a      	add	r2, r3
 8006ffc:	441d      	add	r5, r3
 8006ffe:	9206      	str	r2, [sp, #24]
 8007000:	e779      	b.n	8006ef6 <_dtoa_r+0x816>
 8007002:	4603      	mov	r3, r0
 8007004:	e7f4      	b.n	8006ff0 <_dtoa_r+0x910>
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	dc37      	bgt.n	800707c <_dtoa_r+0x99c>
 800700c:	9b07      	ldr	r3, [sp, #28]
 800700e:	2b02      	cmp	r3, #2
 8007010:	dd34      	ble.n	800707c <_dtoa_r+0x99c>
 8007012:	9b04      	ldr	r3, [sp, #16]
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	b963      	cbnz	r3, 8007034 <_dtoa_r+0x954>
 800701a:	4631      	mov	r1, r6
 800701c:	2205      	movs	r2, #5
 800701e:	4620      	mov	r0, r4
 8007020:	f000 fc6c 	bl	80078fc <__multadd>
 8007024:	4601      	mov	r1, r0
 8007026:	4606      	mov	r6, r0
 8007028:	4650      	mov	r0, sl
 800702a:	f000 fe81 	bl	8007d30 <__mcmp>
 800702e:	2800      	cmp	r0, #0
 8007030:	f73f adbb 	bgt.w	8006baa <_dtoa_r+0x4ca>
 8007034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007036:	9d00      	ldr	r5, [sp, #0]
 8007038:	ea6f 0b03 	mvn.w	fp, r3
 800703c:	f04f 0800 	mov.w	r8, #0
 8007040:	4631      	mov	r1, r6
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fc38 	bl	80078b8 <_Bfree>
 8007048:	2f00      	cmp	r7, #0
 800704a:	f43f aeab 	beq.w	8006da4 <_dtoa_r+0x6c4>
 800704e:	f1b8 0f00 	cmp.w	r8, #0
 8007052:	d005      	beq.n	8007060 <_dtoa_r+0x980>
 8007054:	45b8      	cmp	r8, r7
 8007056:	d003      	beq.n	8007060 <_dtoa_r+0x980>
 8007058:	4641      	mov	r1, r8
 800705a:	4620      	mov	r0, r4
 800705c:	f000 fc2c 	bl	80078b8 <_Bfree>
 8007060:	4639      	mov	r1, r7
 8007062:	4620      	mov	r0, r4
 8007064:	f000 fc28 	bl	80078b8 <_Bfree>
 8007068:	e69c      	b.n	8006da4 <_dtoa_r+0x6c4>
 800706a:	2600      	movs	r6, #0
 800706c:	4637      	mov	r7, r6
 800706e:	e7e1      	b.n	8007034 <_dtoa_r+0x954>
 8007070:	46bb      	mov	fp, r7
 8007072:	4637      	mov	r7, r6
 8007074:	e599      	b.n	8006baa <_dtoa_r+0x4ca>
 8007076:	bf00      	nop
 8007078:	40240000 	.word	0x40240000
 800707c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 80c8 	beq.w	8007214 <_dtoa_r+0xb34>
 8007084:	9b04      	ldr	r3, [sp, #16]
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	2d00      	cmp	r5, #0
 800708a:	dd05      	ble.n	8007098 <_dtoa_r+0x9b8>
 800708c:	4639      	mov	r1, r7
 800708e:	462a      	mov	r2, r5
 8007090:	4620      	mov	r0, r4
 8007092:	f000 fde1 	bl	8007c58 <__lshift>
 8007096:	4607      	mov	r7, r0
 8007098:	f1b8 0f00 	cmp.w	r8, #0
 800709c:	d05b      	beq.n	8007156 <_dtoa_r+0xa76>
 800709e:	6879      	ldr	r1, [r7, #4]
 80070a0:	4620      	mov	r0, r4
 80070a2:	f000 fbc9 	bl	8007838 <_Balloc>
 80070a6:	4605      	mov	r5, r0
 80070a8:	b928      	cbnz	r0, 80070b6 <_dtoa_r+0x9d6>
 80070aa:	4b83      	ldr	r3, [pc, #524]	; (80072b8 <_dtoa_r+0xbd8>)
 80070ac:	4602      	mov	r2, r0
 80070ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80070b2:	f7ff bb2e 	b.w	8006712 <_dtoa_r+0x32>
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	3202      	adds	r2, #2
 80070ba:	0092      	lsls	r2, r2, #2
 80070bc:	f107 010c 	add.w	r1, r7, #12
 80070c0:	300c      	adds	r0, #12
 80070c2:	f7ff fa74 	bl	80065ae <memcpy>
 80070c6:	2201      	movs	r2, #1
 80070c8:	4629      	mov	r1, r5
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 fdc4 	bl	8007c58 <__lshift>
 80070d0:	9b00      	ldr	r3, [sp, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070da:	4413      	add	r3, r2
 80070dc:	9308      	str	r3, [sp, #32]
 80070de:	9b02      	ldr	r3, [sp, #8]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	46b8      	mov	r8, r7
 80070e6:	9306      	str	r3, [sp, #24]
 80070e8:	4607      	mov	r7, r0
 80070ea:	9b04      	ldr	r3, [sp, #16]
 80070ec:	4631      	mov	r1, r6
 80070ee:	3b01      	subs	r3, #1
 80070f0:	4650      	mov	r0, sl
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	f7ff fa69 	bl	80065ca <quorem>
 80070f8:	4641      	mov	r1, r8
 80070fa:	9002      	str	r0, [sp, #8]
 80070fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007100:	4650      	mov	r0, sl
 8007102:	f000 fe15 	bl	8007d30 <__mcmp>
 8007106:	463a      	mov	r2, r7
 8007108:	9005      	str	r0, [sp, #20]
 800710a:	4631      	mov	r1, r6
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fe2b 	bl	8007d68 <__mdiff>
 8007112:	68c2      	ldr	r2, [r0, #12]
 8007114:	4605      	mov	r5, r0
 8007116:	bb02      	cbnz	r2, 800715a <_dtoa_r+0xa7a>
 8007118:	4601      	mov	r1, r0
 800711a:	4650      	mov	r0, sl
 800711c:	f000 fe08 	bl	8007d30 <__mcmp>
 8007120:	4602      	mov	r2, r0
 8007122:	4629      	mov	r1, r5
 8007124:	4620      	mov	r0, r4
 8007126:	9209      	str	r2, [sp, #36]	; 0x24
 8007128:	f000 fbc6 	bl	80078b8 <_Bfree>
 800712c:	9b07      	ldr	r3, [sp, #28]
 800712e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007130:	9d04      	ldr	r5, [sp, #16]
 8007132:	ea43 0102 	orr.w	r1, r3, r2
 8007136:	9b06      	ldr	r3, [sp, #24]
 8007138:	4319      	orrs	r1, r3
 800713a:	d110      	bne.n	800715e <_dtoa_r+0xa7e>
 800713c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007140:	d029      	beq.n	8007196 <_dtoa_r+0xab6>
 8007142:	9b05      	ldr	r3, [sp, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	dd02      	ble.n	800714e <_dtoa_r+0xa6e>
 8007148:	9b02      	ldr	r3, [sp, #8]
 800714a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	f883 9000 	strb.w	r9, [r3]
 8007154:	e774      	b.n	8007040 <_dtoa_r+0x960>
 8007156:	4638      	mov	r0, r7
 8007158:	e7ba      	b.n	80070d0 <_dtoa_r+0x9f0>
 800715a:	2201      	movs	r2, #1
 800715c:	e7e1      	b.n	8007122 <_dtoa_r+0xa42>
 800715e:	9b05      	ldr	r3, [sp, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	db04      	blt.n	800716e <_dtoa_r+0xa8e>
 8007164:	9907      	ldr	r1, [sp, #28]
 8007166:	430b      	orrs	r3, r1
 8007168:	9906      	ldr	r1, [sp, #24]
 800716a:	430b      	orrs	r3, r1
 800716c:	d120      	bne.n	80071b0 <_dtoa_r+0xad0>
 800716e:	2a00      	cmp	r2, #0
 8007170:	dded      	ble.n	800714e <_dtoa_r+0xa6e>
 8007172:	4651      	mov	r1, sl
 8007174:	2201      	movs	r2, #1
 8007176:	4620      	mov	r0, r4
 8007178:	f000 fd6e 	bl	8007c58 <__lshift>
 800717c:	4631      	mov	r1, r6
 800717e:	4682      	mov	sl, r0
 8007180:	f000 fdd6 	bl	8007d30 <__mcmp>
 8007184:	2800      	cmp	r0, #0
 8007186:	dc03      	bgt.n	8007190 <_dtoa_r+0xab0>
 8007188:	d1e1      	bne.n	800714e <_dtoa_r+0xa6e>
 800718a:	f019 0f01 	tst.w	r9, #1
 800718e:	d0de      	beq.n	800714e <_dtoa_r+0xa6e>
 8007190:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007194:	d1d8      	bne.n	8007148 <_dtoa_r+0xa68>
 8007196:	9a01      	ldr	r2, [sp, #4]
 8007198:	2339      	movs	r3, #57	; 0x39
 800719a:	7013      	strb	r3, [r2, #0]
 800719c:	462b      	mov	r3, r5
 800719e:	461d      	mov	r5, r3
 80071a0:	3b01      	subs	r3, #1
 80071a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071a6:	2a39      	cmp	r2, #57	; 0x39
 80071a8:	d06c      	beq.n	8007284 <_dtoa_r+0xba4>
 80071aa:	3201      	adds	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e747      	b.n	8007040 <_dtoa_r+0x960>
 80071b0:	2a00      	cmp	r2, #0
 80071b2:	dd07      	ble.n	80071c4 <_dtoa_r+0xae4>
 80071b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071b8:	d0ed      	beq.n	8007196 <_dtoa_r+0xab6>
 80071ba:	9a01      	ldr	r2, [sp, #4]
 80071bc:	f109 0301 	add.w	r3, r9, #1
 80071c0:	7013      	strb	r3, [r2, #0]
 80071c2:	e73d      	b.n	8007040 <_dtoa_r+0x960>
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	9a08      	ldr	r2, [sp, #32]
 80071c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d043      	beq.n	8007258 <_dtoa_r+0xb78>
 80071d0:	4651      	mov	r1, sl
 80071d2:	2300      	movs	r3, #0
 80071d4:	220a      	movs	r2, #10
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fb90 	bl	80078fc <__multadd>
 80071dc:	45b8      	cmp	r8, r7
 80071de:	4682      	mov	sl, r0
 80071e0:	f04f 0300 	mov.w	r3, #0
 80071e4:	f04f 020a 	mov.w	r2, #10
 80071e8:	4641      	mov	r1, r8
 80071ea:	4620      	mov	r0, r4
 80071ec:	d107      	bne.n	80071fe <_dtoa_r+0xb1e>
 80071ee:	f000 fb85 	bl	80078fc <__multadd>
 80071f2:	4680      	mov	r8, r0
 80071f4:	4607      	mov	r7, r0
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	3301      	adds	r3, #1
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	e775      	b.n	80070ea <_dtoa_r+0xa0a>
 80071fe:	f000 fb7d 	bl	80078fc <__multadd>
 8007202:	4639      	mov	r1, r7
 8007204:	4680      	mov	r8, r0
 8007206:	2300      	movs	r3, #0
 8007208:	220a      	movs	r2, #10
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fb76 	bl	80078fc <__multadd>
 8007210:	4607      	mov	r7, r0
 8007212:	e7f0      	b.n	80071f6 <_dtoa_r+0xb16>
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	9d00      	ldr	r5, [sp, #0]
 800721a:	4631      	mov	r1, r6
 800721c:	4650      	mov	r0, sl
 800721e:	f7ff f9d4 	bl	80065ca <quorem>
 8007222:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007226:	9b00      	ldr	r3, [sp, #0]
 8007228:	f805 9b01 	strb.w	r9, [r5], #1
 800722c:	1aea      	subs	r2, r5, r3
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	4293      	cmp	r3, r2
 8007232:	dd07      	ble.n	8007244 <_dtoa_r+0xb64>
 8007234:	4651      	mov	r1, sl
 8007236:	2300      	movs	r3, #0
 8007238:	220a      	movs	r2, #10
 800723a:	4620      	mov	r0, r4
 800723c:	f000 fb5e 	bl	80078fc <__multadd>
 8007240:	4682      	mov	sl, r0
 8007242:	e7ea      	b.n	800721a <_dtoa_r+0xb3a>
 8007244:	9b01      	ldr	r3, [sp, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfc8      	it	gt
 800724a:	461d      	movgt	r5, r3
 800724c:	9b00      	ldr	r3, [sp, #0]
 800724e:	bfd8      	it	le
 8007250:	2501      	movle	r5, #1
 8007252:	441d      	add	r5, r3
 8007254:	f04f 0800 	mov.w	r8, #0
 8007258:	4651      	mov	r1, sl
 800725a:	2201      	movs	r2, #1
 800725c:	4620      	mov	r0, r4
 800725e:	f000 fcfb 	bl	8007c58 <__lshift>
 8007262:	4631      	mov	r1, r6
 8007264:	4682      	mov	sl, r0
 8007266:	f000 fd63 	bl	8007d30 <__mcmp>
 800726a:	2800      	cmp	r0, #0
 800726c:	dc96      	bgt.n	800719c <_dtoa_r+0xabc>
 800726e:	d102      	bne.n	8007276 <_dtoa_r+0xb96>
 8007270:	f019 0f01 	tst.w	r9, #1
 8007274:	d192      	bne.n	800719c <_dtoa_r+0xabc>
 8007276:	462b      	mov	r3, r5
 8007278:	461d      	mov	r5, r3
 800727a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800727e:	2a30      	cmp	r2, #48	; 0x30
 8007280:	d0fa      	beq.n	8007278 <_dtoa_r+0xb98>
 8007282:	e6dd      	b.n	8007040 <_dtoa_r+0x960>
 8007284:	9a00      	ldr	r2, [sp, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d189      	bne.n	800719e <_dtoa_r+0xabe>
 800728a:	f10b 0b01 	add.w	fp, fp, #1
 800728e:	2331      	movs	r3, #49	; 0x31
 8007290:	e796      	b.n	80071c0 <_dtoa_r+0xae0>
 8007292:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <_dtoa_r+0xbdc>)
 8007294:	f7ff ba99 	b.w	80067ca <_dtoa_r+0xea>
 8007298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800729a:	2b00      	cmp	r3, #0
 800729c:	f47f aa6d 	bne.w	800677a <_dtoa_r+0x9a>
 80072a0:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <_dtoa_r+0xbe0>)
 80072a2:	f7ff ba92 	b.w	80067ca <_dtoa_r+0xea>
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	dcb5      	bgt.n	8007218 <_dtoa_r+0xb38>
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	f73f aeb1 	bgt.w	8007016 <_dtoa_r+0x936>
 80072b4:	e7b0      	b.n	8007218 <_dtoa_r+0xb38>
 80072b6:	bf00      	nop
 80072b8:	080088f8 	.word	0x080088f8
 80072bc:	08008858 	.word	0x08008858
 80072c0:	0800887c 	.word	0x0800887c

080072c4 <__ssputs_r>:
 80072c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	688e      	ldr	r6, [r1, #8]
 80072ca:	461f      	mov	r7, r3
 80072cc:	42be      	cmp	r6, r7
 80072ce:	680b      	ldr	r3, [r1, #0]
 80072d0:	4682      	mov	sl, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	4690      	mov	r8, r2
 80072d6:	d82c      	bhi.n	8007332 <__ssputs_r+0x6e>
 80072d8:	898a      	ldrh	r2, [r1, #12]
 80072da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072de:	d026      	beq.n	800732e <__ssputs_r+0x6a>
 80072e0:	6965      	ldr	r5, [r4, #20]
 80072e2:	6909      	ldr	r1, [r1, #16]
 80072e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072e8:	eba3 0901 	sub.w	r9, r3, r1
 80072ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072f0:	1c7b      	adds	r3, r7, #1
 80072f2:	444b      	add	r3, r9
 80072f4:	106d      	asrs	r5, r5, #1
 80072f6:	429d      	cmp	r5, r3
 80072f8:	bf38      	it	cc
 80072fa:	461d      	movcc	r5, r3
 80072fc:	0553      	lsls	r3, r2, #21
 80072fe:	d527      	bpl.n	8007350 <__ssputs_r+0x8c>
 8007300:	4629      	mov	r1, r5
 8007302:	f000 f95f 	bl	80075c4 <_malloc_r>
 8007306:	4606      	mov	r6, r0
 8007308:	b360      	cbz	r0, 8007364 <__ssputs_r+0xa0>
 800730a:	6921      	ldr	r1, [r4, #16]
 800730c:	464a      	mov	r2, r9
 800730e:	f7ff f94e 	bl	80065ae <memcpy>
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	6126      	str	r6, [r4, #16]
 8007320:	6165      	str	r5, [r4, #20]
 8007322:	444e      	add	r6, r9
 8007324:	eba5 0509 	sub.w	r5, r5, r9
 8007328:	6026      	str	r6, [r4, #0]
 800732a:	60a5      	str	r5, [r4, #8]
 800732c:	463e      	mov	r6, r7
 800732e:	42be      	cmp	r6, r7
 8007330:	d900      	bls.n	8007334 <__ssputs_r+0x70>
 8007332:	463e      	mov	r6, r7
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	4632      	mov	r2, r6
 8007338:	4641      	mov	r1, r8
 800733a:	f000 fe6b 	bl	8008014 <memmove>
 800733e:	68a3      	ldr	r3, [r4, #8]
 8007340:	1b9b      	subs	r3, r3, r6
 8007342:	60a3      	str	r3, [r4, #8]
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	4433      	add	r3, r6
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	2000      	movs	r0, #0
 800734c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007350:	462a      	mov	r2, r5
 8007352:	f000 fe30 	bl	8007fb6 <_realloc_r>
 8007356:	4606      	mov	r6, r0
 8007358:	2800      	cmp	r0, #0
 800735a:	d1e0      	bne.n	800731e <__ssputs_r+0x5a>
 800735c:	6921      	ldr	r1, [r4, #16]
 800735e:	4650      	mov	r0, sl
 8007360:	f000 fefc 	bl	800815c <_free_r>
 8007364:	230c      	movs	r3, #12
 8007366:	f8ca 3000 	str.w	r3, [sl]
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007376:	e7e9      	b.n	800734c <__ssputs_r+0x88>

08007378 <_svfiprintf_r>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	4698      	mov	r8, r3
 800737e:	898b      	ldrh	r3, [r1, #12]
 8007380:	061b      	lsls	r3, r3, #24
 8007382:	b09d      	sub	sp, #116	; 0x74
 8007384:	4607      	mov	r7, r0
 8007386:	460d      	mov	r5, r1
 8007388:	4614      	mov	r4, r2
 800738a:	d50e      	bpl.n	80073aa <_svfiprintf_r+0x32>
 800738c:	690b      	ldr	r3, [r1, #16]
 800738e:	b963      	cbnz	r3, 80073aa <_svfiprintf_r+0x32>
 8007390:	2140      	movs	r1, #64	; 0x40
 8007392:	f000 f917 	bl	80075c4 <_malloc_r>
 8007396:	6028      	str	r0, [r5, #0]
 8007398:	6128      	str	r0, [r5, #16]
 800739a:	b920      	cbnz	r0, 80073a6 <_svfiprintf_r+0x2e>
 800739c:	230c      	movs	r3, #12
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073a4:	e0d0      	b.n	8007548 <_svfiprintf_r+0x1d0>
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	616b      	str	r3, [r5, #20]
 80073aa:	2300      	movs	r3, #0
 80073ac:	9309      	str	r3, [sp, #36]	; 0x24
 80073ae:	2320      	movs	r3, #32
 80073b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b8:	2330      	movs	r3, #48	; 0x30
 80073ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007560 <_svfiprintf_r+0x1e8>
 80073be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073c2:	f04f 0901 	mov.w	r9, #1
 80073c6:	4623      	mov	r3, r4
 80073c8:	469a      	mov	sl, r3
 80073ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ce:	b10a      	cbz	r2, 80073d4 <_svfiprintf_r+0x5c>
 80073d0:	2a25      	cmp	r2, #37	; 0x25
 80073d2:	d1f9      	bne.n	80073c8 <_svfiprintf_r+0x50>
 80073d4:	ebba 0b04 	subs.w	fp, sl, r4
 80073d8:	d00b      	beq.n	80073f2 <_svfiprintf_r+0x7a>
 80073da:	465b      	mov	r3, fp
 80073dc:	4622      	mov	r2, r4
 80073de:	4629      	mov	r1, r5
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7ff ff6f 	bl	80072c4 <__ssputs_r>
 80073e6:	3001      	adds	r0, #1
 80073e8:	f000 80a9 	beq.w	800753e <_svfiprintf_r+0x1c6>
 80073ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ee:	445a      	add	r2, fp
 80073f0:	9209      	str	r2, [sp, #36]	; 0x24
 80073f2:	f89a 3000 	ldrb.w	r3, [sl]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 80a1 	beq.w	800753e <_svfiprintf_r+0x1c6>
 80073fc:	2300      	movs	r3, #0
 80073fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007406:	f10a 0a01 	add.w	sl, sl, #1
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	9307      	str	r3, [sp, #28]
 800740e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007412:	931a      	str	r3, [sp, #104]	; 0x68
 8007414:	4654      	mov	r4, sl
 8007416:	2205      	movs	r2, #5
 8007418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741c:	4850      	ldr	r0, [pc, #320]	; (8007560 <_svfiprintf_r+0x1e8>)
 800741e:	f7f8 fef7 	bl	8000210 <memchr>
 8007422:	9a04      	ldr	r2, [sp, #16]
 8007424:	b9d8      	cbnz	r0, 800745e <_svfiprintf_r+0xe6>
 8007426:	06d0      	lsls	r0, r2, #27
 8007428:	bf44      	itt	mi
 800742a:	2320      	movmi	r3, #32
 800742c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007430:	0711      	lsls	r1, r2, #28
 8007432:	bf44      	itt	mi
 8007434:	232b      	movmi	r3, #43	; 0x2b
 8007436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800743a:	f89a 3000 	ldrb.w	r3, [sl]
 800743e:	2b2a      	cmp	r3, #42	; 0x2a
 8007440:	d015      	beq.n	800746e <_svfiprintf_r+0xf6>
 8007442:	9a07      	ldr	r2, [sp, #28]
 8007444:	4654      	mov	r4, sl
 8007446:	2000      	movs	r0, #0
 8007448:	f04f 0c0a 	mov.w	ip, #10
 800744c:	4621      	mov	r1, r4
 800744e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007452:	3b30      	subs	r3, #48	; 0x30
 8007454:	2b09      	cmp	r3, #9
 8007456:	d94d      	bls.n	80074f4 <_svfiprintf_r+0x17c>
 8007458:	b1b0      	cbz	r0, 8007488 <_svfiprintf_r+0x110>
 800745a:	9207      	str	r2, [sp, #28]
 800745c:	e014      	b.n	8007488 <_svfiprintf_r+0x110>
 800745e:	eba0 0308 	sub.w	r3, r0, r8
 8007462:	fa09 f303 	lsl.w	r3, r9, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	46a2      	mov	sl, r4
 800746c:	e7d2      	b.n	8007414 <_svfiprintf_r+0x9c>
 800746e:	9b03      	ldr	r3, [sp, #12]
 8007470:	1d19      	adds	r1, r3, #4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	9103      	str	r1, [sp, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	bfbb      	ittet	lt
 800747a:	425b      	neglt	r3, r3
 800747c:	f042 0202 	orrlt.w	r2, r2, #2
 8007480:	9307      	strge	r3, [sp, #28]
 8007482:	9307      	strlt	r3, [sp, #28]
 8007484:	bfb8      	it	lt
 8007486:	9204      	strlt	r2, [sp, #16]
 8007488:	7823      	ldrb	r3, [r4, #0]
 800748a:	2b2e      	cmp	r3, #46	; 0x2e
 800748c:	d10c      	bne.n	80074a8 <_svfiprintf_r+0x130>
 800748e:	7863      	ldrb	r3, [r4, #1]
 8007490:	2b2a      	cmp	r3, #42	; 0x2a
 8007492:	d134      	bne.n	80074fe <_svfiprintf_r+0x186>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	1d1a      	adds	r2, r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	9203      	str	r2, [sp, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfb8      	it	lt
 80074a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80074a4:	3402      	adds	r4, #2
 80074a6:	9305      	str	r3, [sp, #20]
 80074a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007570 <_svfiprintf_r+0x1f8>
 80074ac:	7821      	ldrb	r1, [r4, #0]
 80074ae:	2203      	movs	r2, #3
 80074b0:	4650      	mov	r0, sl
 80074b2:	f7f8 fead 	bl	8000210 <memchr>
 80074b6:	b138      	cbz	r0, 80074c8 <_svfiprintf_r+0x150>
 80074b8:	9b04      	ldr	r3, [sp, #16]
 80074ba:	eba0 000a 	sub.w	r0, r0, sl
 80074be:	2240      	movs	r2, #64	; 0x40
 80074c0:	4082      	lsls	r2, r0
 80074c2:	4313      	orrs	r3, r2
 80074c4:	3401      	adds	r4, #1
 80074c6:	9304      	str	r3, [sp, #16]
 80074c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074cc:	4825      	ldr	r0, [pc, #148]	; (8007564 <_svfiprintf_r+0x1ec>)
 80074ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074d2:	2206      	movs	r2, #6
 80074d4:	f7f8 fe9c 	bl	8000210 <memchr>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d038      	beq.n	800754e <_svfiprintf_r+0x1d6>
 80074dc:	4b22      	ldr	r3, [pc, #136]	; (8007568 <_svfiprintf_r+0x1f0>)
 80074de:	bb1b      	cbnz	r3, 8007528 <_svfiprintf_r+0x1b0>
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	3307      	adds	r3, #7
 80074e4:	f023 0307 	bic.w	r3, r3, #7
 80074e8:	3308      	adds	r3, #8
 80074ea:	9303      	str	r3, [sp, #12]
 80074ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ee:	4433      	add	r3, r6
 80074f0:	9309      	str	r3, [sp, #36]	; 0x24
 80074f2:	e768      	b.n	80073c6 <_svfiprintf_r+0x4e>
 80074f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80074f8:	460c      	mov	r4, r1
 80074fa:	2001      	movs	r0, #1
 80074fc:	e7a6      	b.n	800744c <_svfiprintf_r+0xd4>
 80074fe:	2300      	movs	r3, #0
 8007500:	3401      	adds	r4, #1
 8007502:	9305      	str	r3, [sp, #20]
 8007504:	4619      	mov	r1, r3
 8007506:	f04f 0c0a 	mov.w	ip, #10
 800750a:	4620      	mov	r0, r4
 800750c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007510:	3a30      	subs	r2, #48	; 0x30
 8007512:	2a09      	cmp	r2, #9
 8007514:	d903      	bls.n	800751e <_svfiprintf_r+0x1a6>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0c6      	beq.n	80074a8 <_svfiprintf_r+0x130>
 800751a:	9105      	str	r1, [sp, #20]
 800751c:	e7c4      	b.n	80074a8 <_svfiprintf_r+0x130>
 800751e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007522:	4604      	mov	r4, r0
 8007524:	2301      	movs	r3, #1
 8007526:	e7f0      	b.n	800750a <_svfiprintf_r+0x192>
 8007528:	ab03      	add	r3, sp, #12
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	462a      	mov	r2, r5
 800752e:	4b0f      	ldr	r3, [pc, #60]	; (800756c <_svfiprintf_r+0x1f4>)
 8007530:	a904      	add	r1, sp, #16
 8007532:	4638      	mov	r0, r7
 8007534:	f7fe fb5a 	bl	8005bec <_printf_float>
 8007538:	1c42      	adds	r2, r0, #1
 800753a:	4606      	mov	r6, r0
 800753c:	d1d6      	bne.n	80074ec <_svfiprintf_r+0x174>
 800753e:	89ab      	ldrh	r3, [r5, #12]
 8007540:	065b      	lsls	r3, r3, #25
 8007542:	f53f af2d 	bmi.w	80073a0 <_svfiprintf_r+0x28>
 8007546:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007548:	b01d      	add	sp, #116	; 0x74
 800754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754e:	ab03      	add	r3, sp, #12
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	462a      	mov	r2, r5
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <_svfiprintf_r+0x1f4>)
 8007556:	a904      	add	r1, sp, #16
 8007558:	4638      	mov	r0, r7
 800755a:	f7fe fdeb 	bl	8006134 <_printf_i>
 800755e:	e7eb      	b.n	8007538 <_svfiprintf_r+0x1c0>
 8007560:	08008909 	.word	0x08008909
 8007564:	08008913 	.word	0x08008913
 8007568:	08005bed 	.word	0x08005bed
 800756c:	080072c5 	.word	0x080072c5
 8007570:	0800890f 	.word	0x0800890f

08007574 <malloc>:
 8007574:	4b02      	ldr	r3, [pc, #8]	; (8007580 <malloc+0xc>)
 8007576:	4601      	mov	r1, r0
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	f000 b823 	b.w	80075c4 <_malloc_r>
 800757e:	bf00      	nop
 8007580:	20000084 	.word	0x20000084

08007584 <sbrk_aligned>:
 8007584:	b570      	push	{r4, r5, r6, lr}
 8007586:	4e0e      	ldr	r6, [pc, #56]	; (80075c0 <sbrk_aligned+0x3c>)
 8007588:	460c      	mov	r4, r1
 800758a:	6831      	ldr	r1, [r6, #0]
 800758c:	4605      	mov	r5, r0
 800758e:	b911      	cbnz	r1, 8007596 <sbrk_aligned+0x12>
 8007590:	f000 fd8e 	bl	80080b0 <_sbrk_r>
 8007594:	6030      	str	r0, [r6, #0]
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f000 fd89 	bl	80080b0 <_sbrk_r>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	d00a      	beq.n	80075b8 <sbrk_aligned+0x34>
 80075a2:	1cc4      	adds	r4, r0, #3
 80075a4:	f024 0403 	bic.w	r4, r4, #3
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d007      	beq.n	80075bc <sbrk_aligned+0x38>
 80075ac:	1a21      	subs	r1, r4, r0
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 fd7e 	bl	80080b0 <_sbrk_r>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d101      	bne.n	80075bc <sbrk_aligned+0x38>
 80075b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075bc:	4620      	mov	r0, r4
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	20000488 	.word	0x20000488

080075c4 <_malloc_r>:
 80075c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c8:	1ccd      	adds	r5, r1, #3
 80075ca:	f025 0503 	bic.w	r5, r5, #3
 80075ce:	3508      	adds	r5, #8
 80075d0:	2d0c      	cmp	r5, #12
 80075d2:	bf38      	it	cc
 80075d4:	250c      	movcc	r5, #12
 80075d6:	2d00      	cmp	r5, #0
 80075d8:	4607      	mov	r7, r0
 80075da:	db01      	blt.n	80075e0 <_malloc_r+0x1c>
 80075dc:	42a9      	cmp	r1, r5
 80075de:	d905      	bls.n	80075ec <_malloc_r+0x28>
 80075e0:	230c      	movs	r3, #12
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	2600      	movs	r6, #0
 80075e6:	4630      	mov	r0, r6
 80075e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076c0 <_malloc_r+0xfc>
 80075f0:	f000 f916 	bl	8007820 <__malloc_lock>
 80075f4:	f8d8 3000 	ldr.w	r3, [r8]
 80075f8:	461c      	mov	r4, r3
 80075fa:	bb5c      	cbnz	r4, 8007654 <_malloc_r+0x90>
 80075fc:	4629      	mov	r1, r5
 80075fe:	4638      	mov	r0, r7
 8007600:	f7ff ffc0 	bl	8007584 <sbrk_aligned>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	4604      	mov	r4, r0
 8007608:	d155      	bne.n	80076b6 <_malloc_r+0xf2>
 800760a:	f8d8 4000 	ldr.w	r4, [r8]
 800760e:	4626      	mov	r6, r4
 8007610:	2e00      	cmp	r6, #0
 8007612:	d145      	bne.n	80076a0 <_malloc_r+0xdc>
 8007614:	2c00      	cmp	r4, #0
 8007616:	d048      	beq.n	80076aa <_malloc_r+0xe6>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	4631      	mov	r1, r6
 800761c:	4638      	mov	r0, r7
 800761e:	eb04 0903 	add.w	r9, r4, r3
 8007622:	f000 fd45 	bl	80080b0 <_sbrk_r>
 8007626:	4581      	cmp	r9, r0
 8007628:	d13f      	bne.n	80076aa <_malloc_r+0xe6>
 800762a:	6821      	ldr	r1, [r4, #0]
 800762c:	1a6d      	subs	r5, r5, r1
 800762e:	4629      	mov	r1, r5
 8007630:	4638      	mov	r0, r7
 8007632:	f7ff ffa7 	bl	8007584 <sbrk_aligned>
 8007636:	3001      	adds	r0, #1
 8007638:	d037      	beq.n	80076aa <_malloc_r+0xe6>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	442b      	add	r3, r5
 800763e:	6023      	str	r3, [r4, #0]
 8007640:	f8d8 3000 	ldr.w	r3, [r8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d038      	beq.n	80076ba <_malloc_r+0xf6>
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	42a2      	cmp	r2, r4
 800764c:	d12b      	bne.n	80076a6 <_malloc_r+0xe2>
 800764e:	2200      	movs	r2, #0
 8007650:	605a      	str	r2, [r3, #4]
 8007652:	e00f      	b.n	8007674 <_malloc_r+0xb0>
 8007654:	6822      	ldr	r2, [r4, #0]
 8007656:	1b52      	subs	r2, r2, r5
 8007658:	d41f      	bmi.n	800769a <_malloc_r+0xd6>
 800765a:	2a0b      	cmp	r2, #11
 800765c:	d917      	bls.n	800768e <_malloc_r+0xca>
 800765e:	1961      	adds	r1, r4, r5
 8007660:	42a3      	cmp	r3, r4
 8007662:	6025      	str	r5, [r4, #0]
 8007664:	bf18      	it	ne
 8007666:	6059      	strne	r1, [r3, #4]
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	bf08      	it	eq
 800766c:	f8c8 1000 	streq.w	r1, [r8]
 8007670:	5162      	str	r2, [r4, r5]
 8007672:	604b      	str	r3, [r1, #4]
 8007674:	4638      	mov	r0, r7
 8007676:	f104 060b 	add.w	r6, r4, #11
 800767a:	f000 f8d7 	bl	800782c <__malloc_unlock>
 800767e:	f026 0607 	bic.w	r6, r6, #7
 8007682:	1d23      	adds	r3, r4, #4
 8007684:	1af2      	subs	r2, r6, r3
 8007686:	d0ae      	beq.n	80075e6 <_malloc_r+0x22>
 8007688:	1b9b      	subs	r3, r3, r6
 800768a:	50a3      	str	r3, [r4, r2]
 800768c:	e7ab      	b.n	80075e6 <_malloc_r+0x22>
 800768e:	42a3      	cmp	r3, r4
 8007690:	6862      	ldr	r2, [r4, #4]
 8007692:	d1dd      	bne.n	8007650 <_malloc_r+0x8c>
 8007694:	f8c8 2000 	str.w	r2, [r8]
 8007698:	e7ec      	b.n	8007674 <_malloc_r+0xb0>
 800769a:	4623      	mov	r3, r4
 800769c:	6864      	ldr	r4, [r4, #4]
 800769e:	e7ac      	b.n	80075fa <_malloc_r+0x36>
 80076a0:	4634      	mov	r4, r6
 80076a2:	6876      	ldr	r6, [r6, #4]
 80076a4:	e7b4      	b.n	8007610 <_malloc_r+0x4c>
 80076a6:	4613      	mov	r3, r2
 80076a8:	e7cc      	b.n	8007644 <_malloc_r+0x80>
 80076aa:	230c      	movs	r3, #12
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	4638      	mov	r0, r7
 80076b0:	f000 f8bc 	bl	800782c <__malloc_unlock>
 80076b4:	e797      	b.n	80075e6 <_malloc_r+0x22>
 80076b6:	6025      	str	r5, [r4, #0]
 80076b8:	e7dc      	b.n	8007674 <_malloc_r+0xb0>
 80076ba:	605b      	str	r3, [r3, #4]
 80076bc:	deff      	udf	#255	; 0xff
 80076be:	bf00      	nop
 80076c0:	20000484 	.word	0x20000484

080076c4 <__sflush_r>:
 80076c4:	898a      	ldrh	r2, [r1, #12]
 80076c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ca:	4605      	mov	r5, r0
 80076cc:	0710      	lsls	r0, r2, #28
 80076ce:	460c      	mov	r4, r1
 80076d0:	d458      	bmi.n	8007784 <__sflush_r+0xc0>
 80076d2:	684b      	ldr	r3, [r1, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dc05      	bgt.n	80076e4 <__sflush_r+0x20>
 80076d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dc02      	bgt.n	80076e4 <__sflush_r+0x20>
 80076de:	2000      	movs	r0, #0
 80076e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076e6:	2e00      	cmp	r6, #0
 80076e8:	d0f9      	beq.n	80076de <__sflush_r+0x1a>
 80076ea:	2300      	movs	r3, #0
 80076ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076f0:	682f      	ldr	r7, [r5, #0]
 80076f2:	6a21      	ldr	r1, [r4, #32]
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	d032      	beq.n	800775e <__sflush_r+0x9a>
 80076f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	075a      	lsls	r2, r3, #29
 80076fe:	d505      	bpl.n	800770c <__sflush_r+0x48>
 8007700:	6863      	ldr	r3, [r4, #4]
 8007702:	1ac0      	subs	r0, r0, r3
 8007704:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007706:	b10b      	cbz	r3, 800770c <__sflush_r+0x48>
 8007708:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800770a:	1ac0      	subs	r0, r0, r3
 800770c:	2300      	movs	r3, #0
 800770e:	4602      	mov	r2, r0
 8007710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007712:	6a21      	ldr	r1, [r4, #32]
 8007714:	4628      	mov	r0, r5
 8007716:	47b0      	blx	r6
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	d106      	bne.n	800772c <__sflush_r+0x68>
 800771e:	6829      	ldr	r1, [r5, #0]
 8007720:	291d      	cmp	r1, #29
 8007722:	d82b      	bhi.n	800777c <__sflush_r+0xb8>
 8007724:	4a29      	ldr	r2, [pc, #164]	; (80077cc <__sflush_r+0x108>)
 8007726:	410a      	asrs	r2, r1
 8007728:	07d6      	lsls	r6, r2, #31
 800772a:	d427      	bmi.n	800777c <__sflush_r+0xb8>
 800772c:	2200      	movs	r2, #0
 800772e:	6062      	str	r2, [r4, #4]
 8007730:	04d9      	lsls	r1, r3, #19
 8007732:	6922      	ldr	r2, [r4, #16]
 8007734:	6022      	str	r2, [r4, #0]
 8007736:	d504      	bpl.n	8007742 <__sflush_r+0x7e>
 8007738:	1c42      	adds	r2, r0, #1
 800773a:	d101      	bne.n	8007740 <__sflush_r+0x7c>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b903      	cbnz	r3, 8007742 <__sflush_r+0x7e>
 8007740:	6560      	str	r0, [r4, #84]	; 0x54
 8007742:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007744:	602f      	str	r7, [r5, #0]
 8007746:	2900      	cmp	r1, #0
 8007748:	d0c9      	beq.n	80076de <__sflush_r+0x1a>
 800774a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800774e:	4299      	cmp	r1, r3
 8007750:	d002      	beq.n	8007758 <__sflush_r+0x94>
 8007752:	4628      	mov	r0, r5
 8007754:	f000 fd02 	bl	800815c <_free_r>
 8007758:	2000      	movs	r0, #0
 800775a:	6360      	str	r0, [r4, #52]	; 0x34
 800775c:	e7c0      	b.n	80076e0 <__sflush_r+0x1c>
 800775e:	2301      	movs	r3, #1
 8007760:	4628      	mov	r0, r5
 8007762:	47b0      	blx	r6
 8007764:	1c41      	adds	r1, r0, #1
 8007766:	d1c8      	bne.n	80076fa <__sflush_r+0x36>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0c5      	beq.n	80076fa <__sflush_r+0x36>
 800776e:	2b1d      	cmp	r3, #29
 8007770:	d001      	beq.n	8007776 <__sflush_r+0xb2>
 8007772:	2b16      	cmp	r3, #22
 8007774:	d101      	bne.n	800777a <__sflush_r+0xb6>
 8007776:	602f      	str	r7, [r5, #0]
 8007778:	e7b1      	b.n	80076de <__sflush_r+0x1a>
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	e7ad      	b.n	80076e0 <__sflush_r+0x1c>
 8007784:	690f      	ldr	r7, [r1, #16]
 8007786:	2f00      	cmp	r7, #0
 8007788:	d0a9      	beq.n	80076de <__sflush_r+0x1a>
 800778a:	0793      	lsls	r3, r2, #30
 800778c:	680e      	ldr	r6, [r1, #0]
 800778e:	bf08      	it	eq
 8007790:	694b      	ldreq	r3, [r1, #20]
 8007792:	600f      	str	r7, [r1, #0]
 8007794:	bf18      	it	ne
 8007796:	2300      	movne	r3, #0
 8007798:	eba6 0807 	sub.w	r8, r6, r7
 800779c:	608b      	str	r3, [r1, #8]
 800779e:	f1b8 0f00 	cmp.w	r8, #0
 80077a2:	dd9c      	ble.n	80076de <__sflush_r+0x1a>
 80077a4:	6a21      	ldr	r1, [r4, #32]
 80077a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077a8:	4643      	mov	r3, r8
 80077aa:	463a      	mov	r2, r7
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b0      	blx	r6
 80077b0:	2800      	cmp	r0, #0
 80077b2:	dc06      	bgt.n	80077c2 <__sflush_r+0xfe>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077c0:	e78e      	b.n	80076e0 <__sflush_r+0x1c>
 80077c2:	4407      	add	r7, r0
 80077c4:	eba8 0800 	sub.w	r8, r8, r0
 80077c8:	e7e9      	b.n	800779e <__sflush_r+0xda>
 80077ca:	bf00      	nop
 80077cc:	dfbffffe 	.word	0xdfbffffe

080077d0 <_fflush_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	690b      	ldr	r3, [r1, #16]
 80077d4:	4605      	mov	r5, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	b913      	cbnz	r3, 80077e0 <_fflush_r+0x10>
 80077da:	2500      	movs	r5, #0
 80077dc:	4628      	mov	r0, r5
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	b118      	cbz	r0, 80077ea <_fflush_r+0x1a>
 80077e2:	6a03      	ldr	r3, [r0, #32]
 80077e4:	b90b      	cbnz	r3, 80077ea <_fflush_r+0x1a>
 80077e6:	f7fe fe73 	bl	80064d0 <__sinit>
 80077ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0f3      	beq.n	80077da <_fflush_r+0xa>
 80077f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077f4:	07d0      	lsls	r0, r2, #31
 80077f6:	d404      	bmi.n	8007802 <_fflush_r+0x32>
 80077f8:	0599      	lsls	r1, r3, #22
 80077fa:	d402      	bmi.n	8007802 <_fflush_r+0x32>
 80077fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077fe:	f7fe fed4 	bl	80065aa <__retarget_lock_acquire_recursive>
 8007802:	4628      	mov	r0, r5
 8007804:	4621      	mov	r1, r4
 8007806:	f7ff ff5d 	bl	80076c4 <__sflush_r>
 800780a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800780c:	07da      	lsls	r2, r3, #31
 800780e:	4605      	mov	r5, r0
 8007810:	d4e4      	bmi.n	80077dc <_fflush_r+0xc>
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	059b      	lsls	r3, r3, #22
 8007816:	d4e1      	bmi.n	80077dc <_fflush_r+0xc>
 8007818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800781a:	f7fe fec7 	bl	80065ac <__retarget_lock_release_recursive>
 800781e:	e7dd      	b.n	80077dc <_fflush_r+0xc>

08007820 <__malloc_lock>:
 8007820:	4801      	ldr	r0, [pc, #4]	; (8007828 <__malloc_lock+0x8>)
 8007822:	f7fe bec2 	b.w	80065aa <__retarget_lock_acquire_recursive>
 8007826:	bf00      	nop
 8007828:	20000480 	.word	0x20000480

0800782c <__malloc_unlock>:
 800782c:	4801      	ldr	r0, [pc, #4]	; (8007834 <__malloc_unlock+0x8>)
 800782e:	f7fe bebd 	b.w	80065ac <__retarget_lock_release_recursive>
 8007832:	bf00      	nop
 8007834:	20000480 	.word	0x20000480

08007838 <_Balloc>:
 8007838:	b570      	push	{r4, r5, r6, lr}
 800783a:	69c6      	ldr	r6, [r0, #28]
 800783c:	4604      	mov	r4, r0
 800783e:	460d      	mov	r5, r1
 8007840:	b976      	cbnz	r6, 8007860 <_Balloc+0x28>
 8007842:	2010      	movs	r0, #16
 8007844:	f7ff fe96 	bl	8007574 <malloc>
 8007848:	4602      	mov	r2, r0
 800784a:	61e0      	str	r0, [r4, #28]
 800784c:	b920      	cbnz	r0, 8007858 <_Balloc+0x20>
 800784e:	4b18      	ldr	r3, [pc, #96]	; (80078b0 <_Balloc+0x78>)
 8007850:	4818      	ldr	r0, [pc, #96]	; (80078b4 <_Balloc+0x7c>)
 8007852:	216b      	movs	r1, #107	; 0x6b
 8007854:	f000 fc4e 	bl	80080f4 <__assert_func>
 8007858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800785c:	6006      	str	r6, [r0, #0]
 800785e:	60c6      	str	r6, [r0, #12]
 8007860:	69e6      	ldr	r6, [r4, #28]
 8007862:	68f3      	ldr	r3, [r6, #12]
 8007864:	b183      	cbz	r3, 8007888 <_Balloc+0x50>
 8007866:	69e3      	ldr	r3, [r4, #28]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800786e:	b9b8      	cbnz	r0, 80078a0 <_Balloc+0x68>
 8007870:	2101      	movs	r1, #1
 8007872:	fa01 f605 	lsl.w	r6, r1, r5
 8007876:	1d72      	adds	r2, r6, #5
 8007878:	0092      	lsls	r2, r2, #2
 800787a:	4620      	mov	r0, r4
 800787c:	f000 fc58 	bl	8008130 <_calloc_r>
 8007880:	b160      	cbz	r0, 800789c <_Balloc+0x64>
 8007882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007886:	e00e      	b.n	80078a6 <_Balloc+0x6e>
 8007888:	2221      	movs	r2, #33	; 0x21
 800788a:	2104      	movs	r1, #4
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fc4f 	bl	8008130 <_calloc_r>
 8007892:	69e3      	ldr	r3, [r4, #28]
 8007894:	60f0      	str	r0, [r6, #12]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e4      	bne.n	8007866 <_Balloc+0x2e>
 800789c:	2000      	movs	r0, #0
 800789e:	bd70      	pop	{r4, r5, r6, pc}
 80078a0:	6802      	ldr	r2, [r0, #0]
 80078a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078a6:	2300      	movs	r3, #0
 80078a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078ac:	e7f7      	b.n	800789e <_Balloc+0x66>
 80078ae:	bf00      	nop
 80078b0:	08008889 	.word	0x08008889
 80078b4:	0800891a 	.word	0x0800891a

080078b8 <_Bfree>:
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	69c6      	ldr	r6, [r0, #28]
 80078bc:	4605      	mov	r5, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	b976      	cbnz	r6, 80078e0 <_Bfree+0x28>
 80078c2:	2010      	movs	r0, #16
 80078c4:	f7ff fe56 	bl	8007574 <malloc>
 80078c8:	4602      	mov	r2, r0
 80078ca:	61e8      	str	r0, [r5, #28]
 80078cc:	b920      	cbnz	r0, 80078d8 <_Bfree+0x20>
 80078ce:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <_Bfree+0x3c>)
 80078d0:	4809      	ldr	r0, [pc, #36]	; (80078f8 <_Bfree+0x40>)
 80078d2:	218f      	movs	r1, #143	; 0x8f
 80078d4:	f000 fc0e 	bl	80080f4 <__assert_func>
 80078d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078dc:	6006      	str	r6, [r0, #0]
 80078de:	60c6      	str	r6, [r0, #12]
 80078e0:	b13c      	cbz	r4, 80078f2 <_Bfree+0x3a>
 80078e2:	69eb      	ldr	r3, [r5, #28]
 80078e4:	6862      	ldr	r2, [r4, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078ec:	6021      	str	r1, [r4, #0]
 80078ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	08008889 	.word	0x08008889
 80078f8:	0800891a 	.word	0x0800891a

080078fc <__multadd>:
 80078fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007900:	690d      	ldr	r5, [r1, #16]
 8007902:	4607      	mov	r7, r0
 8007904:	460c      	mov	r4, r1
 8007906:	461e      	mov	r6, r3
 8007908:	f101 0c14 	add.w	ip, r1, #20
 800790c:	2000      	movs	r0, #0
 800790e:	f8dc 3000 	ldr.w	r3, [ip]
 8007912:	b299      	uxth	r1, r3
 8007914:	fb02 6101 	mla	r1, r2, r1, r6
 8007918:	0c1e      	lsrs	r6, r3, #16
 800791a:	0c0b      	lsrs	r3, r1, #16
 800791c:	fb02 3306 	mla	r3, r2, r6, r3
 8007920:	b289      	uxth	r1, r1
 8007922:	3001      	adds	r0, #1
 8007924:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007928:	4285      	cmp	r5, r0
 800792a:	f84c 1b04 	str.w	r1, [ip], #4
 800792e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007932:	dcec      	bgt.n	800790e <__multadd+0x12>
 8007934:	b30e      	cbz	r6, 800797a <__multadd+0x7e>
 8007936:	68a3      	ldr	r3, [r4, #8]
 8007938:	42ab      	cmp	r3, r5
 800793a:	dc19      	bgt.n	8007970 <__multadd+0x74>
 800793c:	6861      	ldr	r1, [r4, #4]
 800793e:	4638      	mov	r0, r7
 8007940:	3101      	adds	r1, #1
 8007942:	f7ff ff79 	bl	8007838 <_Balloc>
 8007946:	4680      	mov	r8, r0
 8007948:	b928      	cbnz	r0, 8007956 <__multadd+0x5a>
 800794a:	4602      	mov	r2, r0
 800794c:	4b0c      	ldr	r3, [pc, #48]	; (8007980 <__multadd+0x84>)
 800794e:	480d      	ldr	r0, [pc, #52]	; (8007984 <__multadd+0x88>)
 8007950:	21ba      	movs	r1, #186	; 0xba
 8007952:	f000 fbcf 	bl	80080f4 <__assert_func>
 8007956:	6922      	ldr	r2, [r4, #16]
 8007958:	3202      	adds	r2, #2
 800795a:	f104 010c 	add.w	r1, r4, #12
 800795e:	0092      	lsls	r2, r2, #2
 8007960:	300c      	adds	r0, #12
 8007962:	f7fe fe24 	bl	80065ae <memcpy>
 8007966:	4621      	mov	r1, r4
 8007968:	4638      	mov	r0, r7
 800796a:	f7ff ffa5 	bl	80078b8 <_Bfree>
 800796e:	4644      	mov	r4, r8
 8007970:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007974:	3501      	adds	r5, #1
 8007976:	615e      	str	r6, [r3, #20]
 8007978:	6125      	str	r5, [r4, #16]
 800797a:	4620      	mov	r0, r4
 800797c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007980:	080088f8 	.word	0x080088f8
 8007984:	0800891a 	.word	0x0800891a

08007988 <__hi0bits>:
 8007988:	0c03      	lsrs	r3, r0, #16
 800798a:	041b      	lsls	r3, r3, #16
 800798c:	b9d3      	cbnz	r3, 80079c4 <__hi0bits+0x3c>
 800798e:	0400      	lsls	r0, r0, #16
 8007990:	2310      	movs	r3, #16
 8007992:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007996:	bf04      	itt	eq
 8007998:	0200      	lsleq	r0, r0, #8
 800799a:	3308      	addeq	r3, #8
 800799c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079a0:	bf04      	itt	eq
 80079a2:	0100      	lsleq	r0, r0, #4
 80079a4:	3304      	addeq	r3, #4
 80079a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079aa:	bf04      	itt	eq
 80079ac:	0080      	lsleq	r0, r0, #2
 80079ae:	3302      	addeq	r3, #2
 80079b0:	2800      	cmp	r0, #0
 80079b2:	db05      	blt.n	80079c0 <__hi0bits+0x38>
 80079b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079b8:	f103 0301 	add.w	r3, r3, #1
 80079bc:	bf08      	it	eq
 80079be:	2320      	moveq	r3, #32
 80079c0:	4618      	mov	r0, r3
 80079c2:	4770      	bx	lr
 80079c4:	2300      	movs	r3, #0
 80079c6:	e7e4      	b.n	8007992 <__hi0bits+0xa>

080079c8 <__lo0bits>:
 80079c8:	6803      	ldr	r3, [r0, #0]
 80079ca:	f013 0207 	ands.w	r2, r3, #7
 80079ce:	d00c      	beq.n	80079ea <__lo0bits+0x22>
 80079d0:	07d9      	lsls	r1, r3, #31
 80079d2:	d422      	bmi.n	8007a1a <__lo0bits+0x52>
 80079d4:	079a      	lsls	r2, r3, #30
 80079d6:	bf49      	itett	mi
 80079d8:	085b      	lsrmi	r3, r3, #1
 80079da:	089b      	lsrpl	r3, r3, #2
 80079dc:	6003      	strmi	r3, [r0, #0]
 80079de:	2201      	movmi	r2, #1
 80079e0:	bf5c      	itt	pl
 80079e2:	6003      	strpl	r3, [r0, #0]
 80079e4:	2202      	movpl	r2, #2
 80079e6:	4610      	mov	r0, r2
 80079e8:	4770      	bx	lr
 80079ea:	b299      	uxth	r1, r3
 80079ec:	b909      	cbnz	r1, 80079f2 <__lo0bits+0x2a>
 80079ee:	0c1b      	lsrs	r3, r3, #16
 80079f0:	2210      	movs	r2, #16
 80079f2:	b2d9      	uxtb	r1, r3
 80079f4:	b909      	cbnz	r1, 80079fa <__lo0bits+0x32>
 80079f6:	3208      	adds	r2, #8
 80079f8:	0a1b      	lsrs	r3, r3, #8
 80079fa:	0719      	lsls	r1, r3, #28
 80079fc:	bf04      	itt	eq
 80079fe:	091b      	lsreq	r3, r3, #4
 8007a00:	3204      	addeq	r2, #4
 8007a02:	0799      	lsls	r1, r3, #30
 8007a04:	bf04      	itt	eq
 8007a06:	089b      	lsreq	r3, r3, #2
 8007a08:	3202      	addeq	r2, #2
 8007a0a:	07d9      	lsls	r1, r3, #31
 8007a0c:	d403      	bmi.n	8007a16 <__lo0bits+0x4e>
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	f102 0201 	add.w	r2, r2, #1
 8007a14:	d003      	beq.n	8007a1e <__lo0bits+0x56>
 8007a16:	6003      	str	r3, [r0, #0]
 8007a18:	e7e5      	b.n	80079e6 <__lo0bits+0x1e>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	e7e3      	b.n	80079e6 <__lo0bits+0x1e>
 8007a1e:	2220      	movs	r2, #32
 8007a20:	e7e1      	b.n	80079e6 <__lo0bits+0x1e>
	...

08007a24 <__i2b>:
 8007a24:	b510      	push	{r4, lr}
 8007a26:	460c      	mov	r4, r1
 8007a28:	2101      	movs	r1, #1
 8007a2a:	f7ff ff05 	bl	8007838 <_Balloc>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	b928      	cbnz	r0, 8007a3e <__i2b+0x1a>
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <__i2b+0x24>)
 8007a34:	4805      	ldr	r0, [pc, #20]	; (8007a4c <__i2b+0x28>)
 8007a36:	f240 1145 	movw	r1, #325	; 0x145
 8007a3a:	f000 fb5b 	bl	80080f4 <__assert_func>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	6144      	str	r4, [r0, #20]
 8007a42:	6103      	str	r3, [r0, #16]
 8007a44:	bd10      	pop	{r4, pc}
 8007a46:	bf00      	nop
 8007a48:	080088f8 	.word	0x080088f8
 8007a4c:	0800891a 	.word	0x0800891a

08007a50 <__multiply>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	4691      	mov	r9, r2
 8007a56:	690a      	ldr	r2, [r1, #16]
 8007a58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	bfb8      	it	lt
 8007a60:	460b      	movlt	r3, r1
 8007a62:	460c      	mov	r4, r1
 8007a64:	bfbc      	itt	lt
 8007a66:	464c      	movlt	r4, r9
 8007a68:	4699      	movlt	r9, r3
 8007a6a:	6927      	ldr	r7, [r4, #16]
 8007a6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a70:	68a3      	ldr	r3, [r4, #8]
 8007a72:	6861      	ldr	r1, [r4, #4]
 8007a74:	eb07 060a 	add.w	r6, r7, sl
 8007a78:	42b3      	cmp	r3, r6
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	bfb8      	it	lt
 8007a7e:	3101      	addlt	r1, #1
 8007a80:	f7ff feda 	bl	8007838 <_Balloc>
 8007a84:	b930      	cbnz	r0, 8007a94 <__multiply+0x44>
 8007a86:	4602      	mov	r2, r0
 8007a88:	4b44      	ldr	r3, [pc, #272]	; (8007b9c <__multiply+0x14c>)
 8007a8a:	4845      	ldr	r0, [pc, #276]	; (8007ba0 <__multiply+0x150>)
 8007a8c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a90:	f000 fb30 	bl	80080f4 <__assert_func>
 8007a94:	f100 0514 	add.w	r5, r0, #20
 8007a98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4543      	cmp	r3, r8
 8007aa2:	d321      	bcc.n	8007ae8 <__multiply+0x98>
 8007aa4:	f104 0314 	add.w	r3, r4, #20
 8007aa8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007aac:	f109 0314 	add.w	r3, r9, #20
 8007ab0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ab4:	9202      	str	r2, [sp, #8]
 8007ab6:	1b3a      	subs	r2, r7, r4
 8007ab8:	3a15      	subs	r2, #21
 8007aba:	f022 0203 	bic.w	r2, r2, #3
 8007abe:	3204      	adds	r2, #4
 8007ac0:	f104 0115 	add.w	r1, r4, #21
 8007ac4:	428f      	cmp	r7, r1
 8007ac6:	bf38      	it	cc
 8007ac8:	2204      	movcc	r2, #4
 8007aca:	9201      	str	r2, [sp, #4]
 8007acc:	9a02      	ldr	r2, [sp, #8]
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d80c      	bhi.n	8007aee <__multiply+0x9e>
 8007ad4:	2e00      	cmp	r6, #0
 8007ad6:	dd03      	ble.n	8007ae0 <__multiply+0x90>
 8007ad8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d05b      	beq.n	8007b98 <__multiply+0x148>
 8007ae0:	6106      	str	r6, [r0, #16]
 8007ae2:	b005      	add	sp, #20
 8007ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae8:	f843 2b04 	str.w	r2, [r3], #4
 8007aec:	e7d8      	b.n	8007aa0 <__multiply+0x50>
 8007aee:	f8b3 a000 	ldrh.w	sl, [r3]
 8007af2:	f1ba 0f00 	cmp.w	sl, #0
 8007af6:	d024      	beq.n	8007b42 <__multiply+0xf2>
 8007af8:	f104 0e14 	add.w	lr, r4, #20
 8007afc:	46a9      	mov	r9, r5
 8007afe:	f04f 0c00 	mov.w	ip, #0
 8007b02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b06:	f8d9 1000 	ldr.w	r1, [r9]
 8007b0a:	fa1f fb82 	uxth.w	fp, r2
 8007b0e:	b289      	uxth	r1, r1
 8007b10:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b18:	f8d9 2000 	ldr.w	r2, [r9]
 8007b1c:	4461      	add	r1, ip
 8007b1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b22:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b2a:	b289      	uxth	r1, r1
 8007b2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b30:	4577      	cmp	r7, lr
 8007b32:	f849 1b04 	str.w	r1, [r9], #4
 8007b36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b3a:	d8e2      	bhi.n	8007b02 <__multiply+0xb2>
 8007b3c:	9a01      	ldr	r2, [sp, #4]
 8007b3e:	f845 c002 	str.w	ip, [r5, r2]
 8007b42:	9a03      	ldr	r2, [sp, #12]
 8007b44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	f1b9 0f00 	cmp.w	r9, #0
 8007b4e:	d021      	beq.n	8007b94 <__multiply+0x144>
 8007b50:	6829      	ldr	r1, [r5, #0]
 8007b52:	f104 0c14 	add.w	ip, r4, #20
 8007b56:	46ae      	mov	lr, r5
 8007b58:	f04f 0a00 	mov.w	sl, #0
 8007b5c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b64:	fb09 220b 	mla	r2, r9, fp, r2
 8007b68:	4452      	add	r2, sl
 8007b6a:	b289      	uxth	r1, r1
 8007b6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b70:	f84e 1b04 	str.w	r1, [lr], #4
 8007b74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b7c:	f8be 1000 	ldrh.w	r1, [lr]
 8007b80:	fb09 110a 	mla	r1, r9, sl, r1
 8007b84:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b88:	4567      	cmp	r7, ip
 8007b8a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b8e:	d8e5      	bhi.n	8007b5c <__multiply+0x10c>
 8007b90:	9a01      	ldr	r2, [sp, #4]
 8007b92:	50a9      	str	r1, [r5, r2]
 8007b94:	3504      	adds	r5, #4
 8007b96:	e799      	b.n	8007acc <__multiply+0x7c>
 8007b98:	3e01      	subs	r6, #1
 8007b9a:	e79b      	b.n	8007ad4 <__multiply+0x84>
 8007b9c:	080088f8 	.word	0x080088f8
 8007ba0:	0800891a 	.word	0x0800891a

08007ba4 <__pow5mult>:
 8007ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba8:	4615      	mov	r5, r2
 8007baa:	f012 0203 	ands.w	r2, r2, #3
 8007bae:	4606      	mov	r6, r0
 8007bb0:	460f      	mov	r7, r1
 8007bb2:	d007      	beq.n	8007bc4 <__pow5mult+0x20>
 8007bb4:	4c25      	ldr	r4, [pc, #148]	; (8007c4c <__pow5mult+0xa8>)
 8007bb6:	3a01      	subs	r2, #1
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bbe:	f7ff fe9d 	bl	80078fc <__multadd>
 8007bc2:	4607      	mov	r7, r0
 8007bc4:	10ad      	asrs	r5, r5, #2
 8007bc6:	d03d      	beq.n	8007c44 <__pow5mult+0xa0>
 8007bc8:	69f4      	ldr	r4, [r6, #28]
 8007bca:	b97c      	cbnz	r4, 8007bec <__pow5mult+0x48>
 8007bcc:	2010      	movs	r0, #16
 8007bce:	f7ff fcd1 	bl	8007574 <malloc>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	61f0      	str	r0, [r6, #28]
 8007bd6:	b928      	cbnz	r0, 8007be4 <__pow5mult+0x40>
 8007bd8:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <__pow5mult+0xac>)
 8007bda:	481e      	ldr	r0, [pc, #120]	; (8007c54 <__pow5mult+0xb0>)
 8007bdc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007be0:	f000 fa88 	bl	80080f4 <__assert_func>
 8007be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007be8:	6004      	str	r4, [r0, #0]
 8007bea:	60c4      	str	r4, [r0, #12]
 8007bec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bf4:	b94c      	cbnz	r4, 8007c0a <__pow5mult+0x66>
 8007bf6:	f240 2171 	movw	r1, #625	; 0x271
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f7ff ff12 	bl	8007a24 <__i2b>
 8007c00:	2300      	movs	r3, #0
 8007c02:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c06:	4604      	mov	r4, r0
 8007c08:	6003      	str	r3, [r0, #0]
 8007c0a:	f04f 0900 	mov.w	r9, #0
 8007c0e:	07eb      	lsls	r3, r5, #31
 8007c10:	d50a      	bpl.n	8007c28 <__pow5mult+0x84>
 8007c12:	4639      	mov	r1, r7
 8007c14:	4622      	mov	r2, r4
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7ff ff1a 	bl	8007a50 <__multiply>
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	4680      	mov	r8, r0
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7ff fe49 	bl	80078b8 <_Bfree>
 8007c26:	4647      	mov	r7, r8
 8007c28:	106d      	asrs	r5, r5, #1
 8007c2a:	d00b      	beq.n	8007c44 <__pow5mult+0xa0>
 8007c2c:	6820      	ldr	r0, [r4, #0]
 8007c2e:	b938      	cbnz	r0, 8007c40 <__pow5mult+0x9c>
 8007c30:	4622      	mov	r2, r4
 8007c32:	4621      	mov	r1, r4
 8007c34:	4630      	mov	r0, r6
 8007c36:	f7ff ff0b 	bl	8007a50 <__multiply>
 8007c3a:	6020      	str	r0, [r4, #0]
 8007c3c:	f8c0 9000 	str.w	r9, [r0]
 8007c40:	4604      	mov	r4, r0
 8007c42:	e7e4      	b.n	8007c0e <__pow5mult+0x6a>
 8007c44:	4638      	mov	r0, r7
 8007c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c4a:	bf00      	nop
 8007c4c:	08008a68 	.word	0x08008a68
 8007c50:	08008889 	.word	0x08008889
 8007c54:	0800891a 	.word	0x0800891a

08007c58 <__lshift>:
 8007c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	6849      	ldr	r1, [r1, #4]
 8007c60:	6923      	ldr	r3, [r4, #16]
 8007c62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	4607      	mov	r7, r0
 8007c6a:	4691      	mov	r9, r2
 8007c6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c70:	f108 0601 	add.w	r6, r8, #1
 8007c74:	42b3      	cmp	r3, r6
 8007c76:	db0b      	blt.n	8007c90 <__lshift+0x38>
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7ff fddd 	bl	8007838 <_Balloc>
 8007c7e:	4605      	mov	r5, r0
 8007c80:	b948      	cbnz	r0, 8007c96 <__lshift+0x3e>
 8007c82:	4602      	mov	r2, r0
 8007c84:	4b28      	ldr	r3, [pc, #160]	; (8007d28 <__lshift+0xd0>)
 8007c86:	4829      	ldr	r0, [pc, #164]	; (8007d2c <__lshift+0xd4>)
 8007c88:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c8c:	f000 fa32 	bl	80080f4 <__assert_func>
 8007c90:	3101      	adds	r1, #1
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	e7ee      	b.n	8007c74 <__lshift+0x1c>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f100 0114 	add.w	r1, r0, #20
 8007c9c:	f100 0210 	add.w	r2, r0, #16
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	4553      	cmp	r3, sl
 8007ca4:	db33      	blt.n	8007d0e <__lshift+0xb6>
 8007ca6:	6920      	ldr	r0, [r4, #16]
 8007ca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cac:	f104 0314 	add.w	r3, r4, #20
 8007cb0:	f019 091f 	ands.w	r9, r9, #31
 8007cb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cbc:	d02b      	beq.n	8007d16 <__lshift+0xbe>
 8007cbe:	f1c9 0e20 	rsb	lr, r9, #32
 8007cc2:	468a      	mov	sl, r1
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	fa00 f009 	lsl.w	r0, r0, r9
 8007ccc:	4310      	orrs	r0, r2
 8007cce:	f84a 0b04 	str.w	r0, [sl], #4
 8007cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd6:	459c      	cmp	ip, r3
 8007cd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cdc:	d8f3      	bhi.n	8007cc6 <__lshift+0x6e>
 8007cde:	ebac 0304 	sub.w	r3, ip, r4
 8007ce2:	3b15      	subs	r3, #21
 8007ce4:	f023 0303 	bic.w	r3, r3, #3
 8007ce8:	3304      	adds	r3, #4
 8007cea:	f104 0015 	add.w	r0, r4, #21
 8007cee:	4584      	cmp	ip, r0
 8007cf0:	bf38      	it	cc
 8007cf2:	2304      	movcc	r3, #4
 8007cf4:	50ca      	str	r2, [r1, r3]
 8007cf6:	b10a      	cbz	r2, 8007cfc <__lshift+0xa4>
 8007cf8:	f108 0602 	add.w	r6, r8, #2
 8007cfc:	3e01      	subs	r6, #1
 8007cfe:	4638      	mov	r0, r7
 8007d00:	612e      	str	r6, [r5, #16]
 8007d02:	4621      	mov	r1, r4
 8007d04:	f7ff fdd8 	bl	80078b8 <_Bfree>
 8007d08:	4628      	mov	r0, r5
 8007d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d12:	3301      	adds	r3, #1
 8007d14:	e7c5      	b.n	8007ca2 <__lshift+0x4a>
 8007d16:	3904      	subs	r1, #4
 8007d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d20:	459c      	cmp	ip, r3
 8007d22:	d8f9      	bhi.n	8007d18 <__lshift+0xc0>
 8007d24:	e7ea      	b.n	8007cfc <__lshift+0xa4>
 8007d26:	bf00      	nop
 8007d28:	080088f8 	.word	0x080088f8
 8007d2c:	0800891a 	.word	0x0800891a

08007d30 <__mcmp>:
 8007d30:	b530      	push	{r4, r5, lr}
 8007d32:	6902      	ldr	r2, [r0, #16]
 8007d34:	690c      	ldr	r4, [r1, #16]
 8007d36:	1b12      	subs	r2, r2, r4
 8007d38:	d10e      	bne.n	8007d58 <__mcmp+0x28>
 8007d3a:	f100 0314 	add.w	r3, r0, #20
 8007d3e:	3114      	adds	r1, #20
 8007d40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d50:	42a5      	cmp	r5, r4
 8007d52:	d003      	beq.n	8007d5c <__mcmp+0x2c>
 8007d54:	d305      	bcc.n	8007d62 <__mcmp+0x32>
 8007d56:	2201      	movs	r2, #1
 8007d58:	4610      	mov	r0, r2
 8007d5a:	bd30      	pop	{r4, r5, pc}
 8007d5c:	4283      	cmp	r3, r0
 8007d5e:	d3f3      	bcc.n	8007d48 <__mcmp+0x18>
 8007d60:	e7fa      	b.n	8007d58 <__mcmp+0x28>
 8007d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d66:	e7f7      	b.n	8007d58 <__mcmp+0x28>

08007d68 <__mdiff>:
 8007d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	4606      	mov	r6, r0
 8007d70:	4611      	mov	r1, r2
 8007d72:	4620      	mov	r0, r4
 8007d74:	4690      	mov	r8, r2
 8007d76:	f7ff ffdb 	bl	8007d30 <__mcmp>
 8007d7a:	1e05      	subs	r5, r0, #0
 8007d7c:	d110      	bne.n	8007da0 <__mdiff+0x38>
 8007d7e:	4629      	mov	r1, r5
 8007d80:	4630      	mov	r0, r6
 8007d82:	f7ff fd59 	bl	8007838 <_Balloc>
 8007d86:	b930      	cbnz	r0, 8007d96 <__mdiff+0x2e>
 8007d88:	4b3a      	ldr	r3, [pc, #232]	; (8007e74 <__mdiff+0x10c>)
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	f240 2137 	movw	r1, #567	; 0x237
 8007d90:	4839      	ldr	r0, [pc, #228]	; (8007e78 <__mdiff+0x110>)
 8007d92:	f000 f9af 	bl	80080f4 <__assert_func>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	bfa4      	itt	ge
 8007da2:	4643      	movge	r3, r8
 8007da4:	46a0      	movge	r8, r4
 8007da6:	4630      	mov	r0, r6
 8007da8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dac:	bfa6      	itte	ge
 8007dae:	461c      	movge	r4, r3
 8007db0:	2500      	movge	r5, #0
 8007db2:	2501      	movlt	r5, #1
 8007db4:	f7ff fd40 	bl	8007838 <_Balloc>
 8007db8:	b920      	cbnz	r0, 8007dc4 <__mdiff+0x5c>
 8007dba:	4b2e      	ldr	r3, [pc, #184]	; (8007e74 <__mdiff+0x10c>)
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	f240 2145 	movw	r1, #581	; 0x245
 8007dc2:	e7e5      	b.n	8007d90 <__mdiff+0x28>
 8007dc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007dc8:	6926      	ldr	r6, [r4, #16]
 8007dca:	60c5      	str	r5, [r0, #12]
 8007dcc:	f104 0914 	add.w	r9, r4, #20
 8007dd0:	f108 0514 	add.w	r5, r8, #20
 8007dd4:	f100 0e14 	add.w	lr, r0, #20
 8007dd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ddc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007de0:	f108 0210 	add.w	r2, r8, #16
 8007de4:	46f2      	mov	sl, lr
 8007de6:	2100      	movs	r1, #0
 8007de8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007df0:	fa11 f88b 	uxtah	r8, r1, fp
 8007df4:	b299      	uxth	r1, r3
 8007df6:	0c1b      	lsrs	r3, r3, #16
 8007df8:	eba8 0801 	sub.w	r8, r8, r1
 8007dfc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e00:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e04:	fa1f f888 	uxth.w	r8, r8
 8007e08:	1419      	asrs	r1, r3, #16
 8007e0a:	454e      	cmp	r6, r9
 8007e0c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e10:	f84a 3b04 	str.w	r3, [sl], #4
 8007e14:	d8e8      	bhi.n	8007de8 <__mdiff+0x80>
 8007e16:	1b33      	subs	r3, r6, r4
 8007e18:	3b15      	subs	r3, #21
 8007e1a:	f023 0303 	bic.w	r3, r3, #3
 8007e1e:	3304      	adds	r3, #4
 8007e20:	3415      	adds	r4, #21
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	bf38      	it	cc
 8007e26:	2304      	movcc	r3, #4
 8007e28:	441d      	add	r5, r3
 8007e2a:	4473      	add	r3, lr
 8007e2c:	469e      	mov	lr, r3
 8007e2e:	462e      	mov	r6, r5
 8007e30:	4566      	cmp	r6, ip
 8007e32:	d30e      	bcc.n	8007e52 <__mdiff+0xea>
 8007e34:	f10c 0203 	add.w	r2, ip, #3
 8007e38:	1b52      	subs	r2, r2, r5
 8007e3a:	f022 0203 	bic.w	r2, r2, #3
 8007e3e:	3d03      	subs	r5, #3
 8007e40:	45ac      	cmp	ip, r5
 8007e42:	bf38      	it	cc
 8007e44:	2200      	movcc	r2, #0
 8007e46:	4413      	add	r3, r2
 8007e48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e4c:	b17a      	cbz	r2, 8007e6e <__mdiff+0x106>
 8007e4e:	6107      	str	r7, [r0, #16]
 8007e50:	e7a4      	b.n	8007d9c <__mdiff+0x34>
 8007e52:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e56:	fa11 f288 	uxtah	r2, r1, r8
 8007e5a:	1414      	asrs	r4, r2, #16
 8007e5c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e60:	b292      	uxth	r2, r2
 8007e62:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e66:	f84e 2b04 	str.w	r2, [lr], #4
 8007e6a:	1421      	asrs	r1, r4, #16
 8007e6c:	e7e0      	b.n	8007e30 <__mdiff+0xc8>
 8007e6e:	3f01      	subs	r7, #1
 8007e70:	e7ea      	b.n	8007e48 <__mdiff+0xe0>
 8007e72:	bf00      	nop
 8007e74:	080088f8 	.word	0x080088f8
 8007e78:	0800891a 	.word	0x0800891a

08007e7c <__d2b>:
 8007e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e80:	460f      	mov	r7, r1
 8007e82:	2101      	movs	r1, #1
 8007e84:	ec59 8b10 	vmov	r8, r9, d0
 8007e88:	4616      	mov	r6, r2
 8007e8a:	f7ff fcd5 	bl	8007838 <_Balloc>
 8007e8e:	4604      	mov	r4, r0
 8007e90:	b930      	cbnz	r0, 8007ea0 <__d2b+0x24>
 8007e92:	4602      	mov	r2, r0
 8007e94:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <__d2b+0xac>)
 8007e96:	4825      	ldr	r0, [pc, #148]	; (8007f2c <__d2b+0xb0>)
 8007e98:	f240 310f 	movw	r1, #783	; 0x30f
 8007e9c:	f000 f92a 	bl	80080f4 <__assert_func>
 8007ea0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ea4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ea8:	bb2d      	cbnz	r5, 8007ef6 <__d2b+0x7a>
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	f1b8 0300 	subs.w	r3, r8, #0
 8007eb0:	d026      	beq.n	8007f00 <__d2b+0x84>
 8007eb2:	4668      	mov	r0, sp
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	f7ff fd87 	bl	80079c8 <__lo0bits>
 8007eba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ebe:	b1e8      	cbz	r0, 8007efc <__d2b+0x80>
 8007ec0:	f1c0 0320 	rsb	r3, r0, #32
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	40c2      	lsrs	r2, r0
 8007ecc:	6163      	str	r3, [r4, #20]
 8007ece:	9201      	str	r2, [sp, #4]
 8007ed0:	9b01      	ldr	r3, [sp, #4]
 8007ed2:	61a3      	str	r3, [r4, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bf14      	ite	ne
 8007ed8:	2202      	movne	r2, #2
 8007eda:	2201      	moveq	r2, #1
 8007edc:	6122      	str	r2, [r4, #16]
 8007ede:	b1bd      	cbz	r5, 8007f10 <__d2b+0x94>
 8007ee0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ee4:	4405      	add	r5, r0
 8007ee6:	603d      	str	r5, [r7, #0]
 8007ee8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007eec:	6030      	str	r0, [r6, #0]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	b003      	add	sp, #12
 8007ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007efa:	e7d6      	b.n	8007eaa <__d2b+0x2e>
 8007efc:	6161      	str	r1, [r4, #20]
 8007efe:	e7e7      	b.n	8007ed0 <__d2b+0x54>
 8007f00:	a801      	add	r0, sp, #4
 8007f02:	f7ff fd61 	bl	80079c8 <__lo0bits>
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	6163      	str	r3, [r4, #20]
 8007f0a:	3020      	adds	r0, #32
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	e7e5      	b.n	8007edc <__d2b+0x60>
 8007f10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f18:	6038      	str	r0, [r7, #0]
 8007f1a:	6918      	ldr	r0, [r3, #16]
 8007f1c:	f7ff fd34 	bl	8007988 <__hi0bits>
 8007f20:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f24:	e7e2      	b.n	8007eec <__d2b+0x70>
 8007f26:	bf00      	nop
 8007f28:	080088f8 	.word	0x080088f8
 8007f2c:	0800891a 	.word	0x0800891a

08007f30 <__sread>:
 8007f30:	b510      	push	{r4, lr}
 8007f32:	460c      	mov	r4, r1
 8007f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f38:	f000 f8a8 	bl	800808c <_read_r>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	bfab      	itete	ge
 8007f40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f42:	89a3      	ldrhlt	r3, [r4, #12]
 8007f44:	181b      	addge	r3, r3, r0
 8007f46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f4a:	bfac      	ite	ge
 8007f4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f4e:	81a3      	strhlt	r3, [r4, #12]
 8007f50:	bd10      	pop	{r4, pc}

08007f52 <__swrite>:
 8007f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f56:	461f      	mov	r7, r3
 8007f58:	898b      	ldrh	r3, [r1, #12]
 8007f5a:	05db      	lsls	r3, r3, #23
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	4616      	mov	r6, r2
 8007f62:	d505      	bpl.n	8007f70 <__swrite+0x1e>
 8007f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f68:	2302      	movs	r3, #2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f000 f87c 	bl	8008068 <_lseek_r>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	463b      	mov	r3, r7
 8007f80:	4628      	mov	r0, r5
 8007f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f86:	f000 b8a3 	b.w	80080d0 <_write_r>

08007f8a <__sseek>:
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f92:	f000 f869 	bl	8008068 <_lseek_r>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	bf15      	itete	ne
 8007f9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fa6:	81a3      	strheq	r3, [r4, #12]
 8007fa8:	bf18      	it	ne
 8007faa:	81a3      	strhne	r3, [r4, #12]
 8007fac:	bd10      	pop	{r4, pc}

08007fae <__sclose>:
 8007fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb2:	f000 b849 	b.w	8008048 <_close_r>

08007fb6 <_realloc_r>:
 8007fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fba:	4680      	mov	r8, r0
 8007fbc:	4614      	mov	r4, r2
 8007fbe:	460e      	mov	r6, r1
 8007fc0:	b921      	cbnz	r1, 8007fcc <_realloc_r+0x16>
 8007fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	f7ff bafc 	b.w	80075c4 <_malloc_r>
 8007fcc:	b92a      	cbnz	r2, 8007fda <_realloc_r+0x24>
 8007fce:	f000 f8c5 	bl	800815c <_free_r>
 8007fd2:	4625      	mov	r5, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fda:	f000 f91d 	bl	8008218 <_malloc_usable_size_r>
 8007fde:	4284      	cmp	r4, r0
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	d802      	bhi.n	8007fea <_realloc_r+0x34>
 8007fe4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fe8:	d812      	bhi.n	8008010 <_realloc_r+0x5a>
 8007fea:	4621      	mov	r1, r4
 8007fec:	4640      	mov	r0, r8
 8007fee:	f7ff fae9 	bl	80075c4 <_malloc_r>
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d0ed      	beq.n	8007fd4 <_realloc_r+0x1e>
 8007ff8:	42bc      	cmp	r4, r7
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	bf28      	it	cs
 8008000:	463a      	movcs	r2, r7
 8008002:	f7fe fad4 	bl	80065ae <memcpy>
 8008006:	4631      	mov	r1, r6
 8008008:	4640      	mov	r0, r8
 800800a:	f000 f8a7 	bl	800815c <_free_r>
 800800e:	e7e1      	b.n	8007fd4 <_realloc_r+0x1e>
 8008010:	4635      	mov	r5, r6
 8008012:	e7df      	b.n	8007fd4 <_realloc_r+0x1e>

08008014 <memmove>:
 8008014:	4288      	cmp	r0, r1
 8008016:	b510      	push	{r4, lr}
 8008018:	eb01 0402 	add.w	r4, r1, r2
 800801c:	d902      	bls.n	8008024 <memmove+0x10>
 800801e:	4284      	cmp	r4, r0
 8008020:	4623      	mov	r3, r4
 8008022:	d807      	bhi.n	8008034 <memmove+0x20>
 8008024:	1e43      	subs	r3, r0, #1
 8008026:	42a1      	cmp	r1, r4
 8008028:	d008      	beq.n	800803c <memmove+0x28>
 800802a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800802e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008032:	e7f8      	b.n	8008026 <memmove+0x12>
 8008034:	4402      	add	r2, r0
 8008036:	4601      	mov	r1, r0
 8008038:	428a      	cmp	r2, r1
 800803a:	d100      	bne.n	800803e <memmove+0x2a>
 800803c:	bd10      	pop	{r4, pc}
 800803e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008046:	e7f7      	b.n	8008038 <memmove+0x24>

08008048 <_close_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d06      	ldr	r5, [pc, #24]	; (8008064 <_close_r+0x1c>)
 800804c:	2300      	movs	r3, #0
 800804e:	4604      	mov	r4, r0
 8008050:	4608      	mov	r0, r1
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	f7fa f8c7 	bl	80021e6 <_close>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_close_r+0x1a>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_close_r+0x1a>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	2000048c 	.word	0x2000048c

08008068 <_lseek_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d07      	ldr	r5, [pc, #28]	; (8008088 <_lseek_r+0x20>)
 800806c:	4604      	mov	r4, r0
 800806e:	4608      	mov	r0, r1
 8008070:	4611      	mov	r1, r2
 8008072:	2200      	movs	r2, #0
 8008074:	602a      	str	r2, [r5, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	f7fa f8dc 	bl	8002234 <_lseek>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_lseek_r+0x1e>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b103      	cbz	r3, 8008086 <_lseek_r+0x1e>
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	2000048c 	.word	0x2000048c

0800808c <_read_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d07      	ldr	r5, [pc, #28]	; (80080ac <_read_r+0x20>)
 8008090:	4604      	mov	r4, r0
 8008092:	4608      	mov	r0, r1
 8008094:	4611      	mov	r1, r2
 8008096:	2200      	movs	r2, #0
 8008098:	602a      	str	r2, [r5, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	f7fa f86a 	bl	8002174 <_read>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_read_r+0x1e>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_read_r+0x1e>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	2000048c 	.word	0x2000048c

080080b0 <_sbrk_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d06      	ldr	r5, [pc, #24]	; (80080cc <_sbrk_r+0x1c>)
 80080b4:	2300      	movs	r3, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	f7fa f8c8 	bl	8002250 <_sbrk>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_sbrk_r+0x1a>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_sbrk_r+0x1a>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	2000048c 	.word	0x2000048c

080080d0 <_write_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4d07      	ldr	r5, [pc, #28]	; (80080f0 <_write_r+0x20>)
 80080d4:	4604      	mov	r4, r0
 80080d6:	4608      	mov	r0, r1
 80080d8:	4611      	mov	r1, r2
 80080da:	2200      	movs	r2, #0
 80080dc:	602a      	str	r2, [r5, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	f7fa f865 	bl	80021ae <_write>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_write_r+0x1e>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_write_r+0x1e>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	2000048c 	.word	0x2000048c

080080f4 <__assert_func>:
 80080f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080f6:	4614      	mov	r4, r2
 80080f8:	461a      	mov	r2, r3
 80080fa:	4b09      	ldr	r3, [pc, #36]	; (8008120 <__assert_func+0x2c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4605      	mov	r5, r0
 8008100:	68d8      	ldr	r0, [r3, #12]
 8008102:	b14c      	cbz	r4, 8008118 <__assert_func+0x24>
 8008104:	4b07      	ldr	r3, [pc, #28]	; (8008124 <__assert_func+0x30>)
 8008106:	9100      	str	r1, [sp, #0]
 8008108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800810c:	4906      	ldr	r1, [pc, #24]	; (8008128 <__assert_func+0x34>)
 800810e:	462b      	mov	r3, r5
 8008110:	f000 f88a 	bl	8008228 <fiprintf>
 8008114:	f000 f8a7 	bl	8008266 <abort>
 8008118:	4b04      	ldr	r3, [pc, #16]	; (800812c <__assert_func+0x38>)
 800811a:	461c      	mov	r4, r3
 800811c:	e7f3      	b.n	8008106 <__assert_func+0x12>
 800811e:	bf00      	nop
 8008120:	20000084 	.word	0x20000084
 8008124:	08008b7f 	.word	0x08008b7f
 8008128:	08008b8c 	.word	0x08008b8c
 800812c:	08008bba 	.word	0x08008bba

08008130 <_calloc_r>:
 8008130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008132:	fba1 2402 	umull	r2, r4, r1, r2
 8008136:	b94c      	cbnz	r4, 800814c <_calloc_r+0x1c>
 8008138:	4611      	mov	r1, r2
 800813a:	9201      	str	r2, [sp, #4]
 800813c:	f7ff fa42 	bl	80075c4 <_malloc_r>
 8008140:	9a01      	ldr	r2, [sp, #4]
 8008142:	4605      	mov	r5, r0
 8008144:	b930      	cbnz	r0, 8008154 <_calloc_r+0x24>
 8008146:	4628      	mov	r0, r5
 8008148:	b003      	add	sp, #12
 800814a:	bd30      	pop	{r4, r5, pc}
 800814c:	220c      	movs	r2, #12
 800814e:	6002      	str	r2, [r0, #0]
 8008150:	2500      	movs	r5, #0
 8008152:	e7f8      	b.n	8008146 <_calloc_r+0x16>
 8008154:	4621      	mov	r1, r4
 8008156:	f7fe f9f1 	bl	800653c <memset>
 800815a:	e7f4      	b.n	8008146 <_calloc_r+0x16>

0800815c <_free_r>:
 800815c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800815e:	2900      	cmp	r1, #0
 8008160:	d044      	beq.n	80081ec <_free_r+0x90>
 8008162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008166:	9001      	str	r0, [sp, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	f1a1 0404 	sub.w	r4, r1, #4
 800816e:	bfb8      	it	lt
 8008170:	18e4      	addlt	r4, r4, r3
 8008172:	f7ff fb55 	bl	8007820 <__malloc_lock>
 8008176:	4a1e      	ldr	r2, [pc, #120]	; (80081f0 <_free_r+0x94>)
 8008178:	9801      	ldr	r0, [sp, #4]
 800817a:	6813      	ldr	r3, [r2, #0]
 800817c:	b933      	cbnz	r3, 800818c <_free_r+0x30>
 800817e:	6063      	str	r3, [r4, #4]
 8008180:	6014      	str	r4, [r2, #0]
 8008182:	b003      	add	sp, #12
 8008184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008188:	f7ff bb50 	b.w	800782c <__malloc_unlock>
 800818c:	42a3      	cmp	r3, r4
 800818e:	d908      	bls.n	80081a2 <_free_r+0x46>
 8008190:	6825      	ldr	r5, [r4, #0]
 8008192:	1961      	adds	r1, r4, r5
 8008194:	428b      	cmp	r3, r1
 8008196:	bf01      	itttt	eq
 8008198:	6819      	ldreq	r1, [r3, #0]
 800819a:	685b      	ldreq	r3, [r3, #4]
 800819c:	1949      	addeq	r1, r1, r5
 800819e:	6021      	streq	r1, [r4, #0]
 80081a0:	e7ed      	b.n	800817e <_free_r+0x22>
 80081a2:	461a      	mov	r2, r3
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	b10b      	cbz	r3, 80081ac <_free_r+0x50>
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	d9fa      	bls.n	80081a2 <_free_r+0x46>
 80081ac:	6811      	ldr	r1, [r2, #0]
 80081ae:	1855      	adds	r5, r2, r1
 80081b0:	42a5      	cmp	r5, r4
 80081b2:	d10b      	bne.n	80081cc <_free_r+0x70>
 80081b4:	6824      	ldr	r4, [r4, #0]
 80081b6:	4421      	add	r1, r4
 80081b8:	1854      	adds	r4, r2, r1
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	6011      	str	r1, [r2, #0]
 80081be:	d1e0      	bne.n	8008182 <_free_r+0x26>
 80081c0:	681c      	ldr	r4, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	6053      	str	r3, [r2, #4]
 80081c6:	440c      	add	r4, r1
 80081c8:	6014      	str	r4, [r2, #0]
 80081ca:	e7da      	b.n	8008182 <_free_r+0x26>
 80081cc:	d902      	bls.n	80081d4 <_free_r+0x78>
 80081ce:	230c      	movs	r3, #12
 80081d0:	6003      	str	r3, [r0, #0]
 80081d2:	e7d6      	b.n	8008182 <_free_r+0x26>
 80081d4:	6825      	ldr	r5, [r4, #0]
 80081d6:	1961      	adds	r1, r4, r5
 80081d8:	428b      	cmp	r3, r1
 80081da:	bf04      	itt	eq
 80081dc:	6819      	ldreq	r1, [r3, #0]
 80081de:	685b      	ldreq	r3, [r3, #4]
 80081e0:	6063      	str	r3, [r4, #4]
 80081e2:	bf04      	itt	eq
 80081e4:	1949      	addeq	r1, r1, r5
 80081e6:	6021      	streq	r1, [r4, #0]
 80081e8:	6054      	str	r4, [r2, #4]
 80081ea:	e7ca      	b.n	8008182 <_free_r+0x26>
 80081ec:	b003      	add	sp, #12
 80081ee:	bd30      	pop	{r4, r5, pc}
 80081f0:	20000484 	.word	0x20000484

080081f4 <__ascii_mbtowc>:
 80081f4:	b082      	sub	sp, #8
 80081f6:	b901      	cbnz	r1, 80081fa <__ascii_mbtowc+0x6>
 80081f8:	a901      	add	r1, sp, #4
 80081fa:	b142      	cbz	r2, 800820e <__ascii_mbtowc+0x1a>
 80081fc:	b14b      	cbz	r3, 8008212 <__ascii_mbtowc+0x1e>
 80081fe:	7813      	ldrb	r3, [r2, #0]
 8008200:	600b      	str	r3, [r1, #0]
 8008202:	7812      	ldrb	r2, [r2, #0]
 8008204:	1e10      	subs	r0, r2, #0
 8008206:	bf18      	it	ne
 8008208:	2001      	movne	r0, #1
 800820a:	b002      	add	sp, #8
 800820c:	4770      	bx	lr
 800820e:	4610      	mov	r0, r2
 8008210:	e7fb      	b.n	800820a <__ascii_mbtowc+0x16>
 8008212:	f06f 0001 	mvn.w	r0, #1
 8008216:	e7f8      	b.n	800820a <__ascii_mbtowc+0x16>

08008218 <_malloc_usable_size_r>:
 8008218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800821c:	1f18      	subs	r0, r3, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	bfbc      	itt	lt
 8008222:	580b      	ldrlt	r3, [r1, r0]
 8008224:	18c0      	addlt	r0, r0, r3
 8008226:	4770      	bx	lr

08008228 <fiprintf>:
 8008228:	b40e      	push	{r1, r2, r3}
 800822a:	b503      	push	{r0, r1, lr}
 800822c:	4601      	mov	r1, r0
 800822e:	ab03      	add	r3, sp, #12
 8008230:	4805      	ldr	r0, [pc, #20]	; (8008248 <fiprintf+0x20>)
 8008232:	f853 2b04 	ldr.w	r2, [r3], #4
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	f000 f845 	bl	80082c8 <_vfiprintf_r>
 800823e:	b002      	add	sp, #8
 8008240:	f85d eb04 	ldr.w	lr, [sp], #4
 8008244:	b003      	add	sp, #12
 8008246:	4770      	bx	lr
 8008248:	20000084 	.word	0x20000084

0800824c <__ascii_wctomb>:
 800824c:	b149      	cbz	r1, 8008262 <__ascii_wctomb+0x16>
 800824e:	2aff      	cmp	r2, #255	; 0xff
 8008250:	bf85      	ittet	hi
 8008252:	238a      	movhi	r3, #138	; 0x8a
 8008254:	6003      	strhi	r3, [r0, #0]
 8008256:	700a      	strbls	r2, [r1, #0]
 8008258:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800825c:	bf98      	it	ls
 800825e:	2001      	movls	r0, #1
 8008260:	4770      	bx	lr
 8008262:	4608      	mov	r0, r1
 8008264:	4770      	bx	lr

08008266 <abort>:
 8008266:	b508      	push	{r3, lr}
 8008268:	2006      	movs	r0, #6
 800826a:	f000 fa89 	bl	8008780 <raise>
 800826e:	2001      	movs	r0, #1
 8008270:	f7f9 ff76 	bl	8002160 <_exit>

08008274 <__sfputc_r>:
 8008274:	6893      	ldr	r3, [r2, #8]
 8008276:	3b01      	subs	r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	b410      	push	{r4}
 800827c:	6093      	str	r3, [r2, #8]
 800827e:	da08      	bge.n	8008292 <__sfputc_r+0x1e>
 8008280:	6994      	ldr	r4, [r2, #24]
 8008282:	42a3      	cmp	r3, r4
 8008284:	db01      	blt.n	800828a <__sfputc_r+0x16>
 8008286:	290a      	cmp	r1, #10
 8008288:	d103      	bne.n	8008292 <__sfputc_r+0x1e>
 800828a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800828e:	f000 b935 	b.w	80084fc <__swbuf_r>
 8008292:	6813      	ldr	r3, [r2, #0]
 8008294:	1c58      	adds	r0, r3, #1
 8008296:	6010      	str	r0, [r2, #0]
 8008298:	7019      	strb	r1, [r3, #0]
 800829a:	4608      	mov	r0, r1
 800829c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <__sfputs_r>:
 80082a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a4:	4606      	mov	r6, r0
 80082a6:	460f      	mov	r7, r1
 80082a8:	4614      	mov	r4, r2
 80082aa:	18d5      	adds	r5, r2, r3
 80082ac:	42ac      	cmp	r4, r5
 80082ae:	d101      	bne.n	80082b4 <__sfputs_r+0x12>
 80082b0:	2000      	movs	r0, #0
 80082b2:	e007      	b.n	80082c4 <__sfputs_r+0x22>
 80082b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b8:	463a      	mov	r2, r7
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7ff ffda 	bl	8008274 <__sfputc_r>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d1f3      	bne.n	80082ac <__sfputs_r+0xa>
 80082c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082c8 <_vfiprintf_r>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	460d      	mov	r5, r1
 80082ce:	b09d      	sub	sp, #116	; 0x74
 80082d0:	4614      	mov	r4, r2
 80082d2:	4698      	mov	r8, r3
 80082d4:	4606      	mov	r6, r0
 80082d6:	b118      	cbz	r0, 80082e0 <_vfiprintf_r+0x18>
 80082d8:	6a03      	ldr	r3, [r0, #32]
 80082da:	b90b      	cbnz	r3, 80082e0 <_vfiprintf_r+0x18>
 80082dc:	f7fe f8f8 	bl	80064d0 <__sinit>
 80082e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082e2:	07d9      	lsls	r1, r3, #31
 80082e4:	d405      	bmi.n	80082f2 <_vfiprintf_r+0x2a>
 80082e6:	89ab      	ldrh	r3, [r5, #12]
 80082e8:	059a      	lsls	r2, r3, #22
 80082ea:	d402      	bmi.n	80082f2 <_vfiprintf_r+0x2a>
 80082ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ee:	f7fe f95c 	bl	80065aa <__retarget_lock_acquire_recursive>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	071b      	lsls	r3, r3, #28
 80082f6:	d501      	bpl.n	80082fc <_vfiprintf_r+0x34>
 80082f8:	692b      	ldr	r3, [r5, #16]
 80082fa:	b99b      	cbnz	r3, 8008324 <_vfiprintf_r+0x5c>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4630      	mov	r0, r6
 8008300:	f000 f93a 	bl	8008578 <__swsetup_r>
 8008304:	b170      	cbz	r0, 8008324 <_vfiprintf_r+0x5c>
 8008306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008308:	07dc      	lsls	r4, r3, #31
 800830a:	d504      	bpl.n	8008316 <_vfiprintf_r+0x4e>
 800830c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008310:	b01d      	add	sp, #116	; 0x74
 8008312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008316:	89ab      	ldrh	r3, [r5, #12]
 8008318:	0598      	lsls	r0, r3, #22
 800831a:	d4f7      	bmi.n	800830c <_vfiprintf_r+0x44>
 800831c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800831e:	f7fe f945 	bl	80065ac <__retarget_lock_release_recursive>
 8008322:	e7f3      	b.n	800830c <_vfiprintf_r+0x44>
 8008324:	2300      	movs	r3, #0
 8008326:	9309      	str	r3, [sp, #36]	; 0x24
 8008328:	2320      	movs	r3, #32
 800832a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800832e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008332:	2330      	movs	r3, #48	; 0x30
 8008334:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80084e8 <_vfiprintf_r+0x220>
 8008338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800833c:	f04f 0901 	mov.w	r9, #1
 8008340:	4623      	mov	r3, r4
 8008342:	469a      	mov	sl, r3
 8008344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008348:	b10a      	cbz	r2, 800834e <_vfiprintf_r+0x86>
 800834a:	2a25      	cmp	r2, #37	; 0x25
 800834c:	d1f9      	bne.n	8008342 <_vfiprintf_r+0x7a>
 800834e:	ebba 0b04 	subs.w	fp, sl, r4
 8008352:	d00b      	beq.n	800836c <_vfiprintf_r+0xa4>
 8008354:	465b      	mov	r3, fp
 8008356:	4622      	mov	r2, r4
 8008358:	4629      	mov	r1, r5
 800835a:	4630      	mov	r0, r6
 800835c:	f7ff ffa1 	bl	80082a2 <__sfputs_r>
 8008360:	3001      	adds	r0, #1
 8008362:	f000 80a9 	beq.w	80084b8 <_vfiprintf_r+0x1f0>
 8008366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008368:	445a      	add	r2, fp
 800836a:	9209      	str	r2, [sp, #36]	; 0x24
 800836c:	f89a 3000 	ldrb.w	r3, [sl]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80a1 	beq.w	80084b8 <_vfiprintf_r+0x1f0>
 8008376:	2300      	movs	r3, #0
 8008378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800837c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008380:	f10a 0a01 	add.w	sl, sl, #1
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	9307      	str	r3, [sp, #28]
 8008388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800838c:	931a      	str	r3, [sp, #104]	; 0x68
 800838e:	4654      	mov	r4, sl
 8008390:	2205      	movs	r2, #5
 8008392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008396:	4854      	ldr	r0, [pc, #336]	; (80084e8 <_vfiprintf_r+0x220>)
 8008398:	f7f7 ff3a 	bl	8000210 <memchr>
 800839c:	9a04      	ldr	r2, [sp, #16]
 800839e:	b9d8      	cbnz	r0, 80083d8 <_vfiprintf_r+0x110>
 80083a0:	06d1      	lsls	r1, r2, #27
 80083a2:	bf44      	itt	mi
 80083a4:	2320      	movmi	r3, #32
 80083a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083aa:	0713      	lsls	r3, r2, #28
 80083ac:	bf44      	itt	mi
 80083ae:	232b      	movmi	r3, #43	; 0x2b
 80083b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b4:	f89a 3000 	ldrb.w	r3, [sl]
 80083b8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ba:	d015      	beq.n	80083e8 <_vfiprintf_r+0x120>
 80083bc:	9a07      	ldr	r2, [sp, #28]
 80083be:	4654      	mov	r4, sl
 80083c0:	2000      	movs	r0, #0
 80083c2:	f04f 0c0a 	mov.w	ip, #10
 80083c6:	4621      	mov	r1, r4
 80083c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083cc:	3b30      	subs	r3, #48	; 0x30
 80083ce:	2b09      	cmp	r3, #9
 80083d0:	d94d      	bls.n	800846e <_vfiprintf_r+0x1a6>
 80083d2:	b1b0      	cbz	r0, 8008402 <_vfiprintf_r+0x13a>
 80083d4:	9207      	str	r2, [sp, #28]
 80083d6:	e014      	b.n	8008402 <_vfiprintf_r+0x13a>
 80083d8:	eba0 0308 	sub.w	r3, r0, r8
 80083dc:	fa09 f303 	lsl.w	r3, r9, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	46a2      	mov	sl, r4
 80083e6:	e7d2      	b.n	800838e <_vfiprintf_r+0xc6>
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	1d19      	adds	r1, r3, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	9103      	str	r1, [sp, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	bfbb      	ittet	lt
 80083f4:	425b      	neglt	r3, r3
 80083f6:	f042 0202 	orrlt.w	r2, r2, #2
 80083fa:	9307      	strge	r3, [sp, #28]
 80083fc:	9307      	strlt	r3, [sp, #28]
 80083fe:	bfb8      	it	lt
 8008400:	9204      	strlt	r2, [sp, #16]
 8008402:	7823      	ldrb	r3, [r4, #0]
 8008404:	2b2e      	cmp	r3, #46	; 0x2e
 8008406:	d10c      	bne.n	8008422 <_vfiprintf_r+0x15a>
 8008408:	7863      	ldrb	r3, [r4, #1]
 800840a:	2b2a      	cmp	r3, #42	; 0x2a
 800840c:	d134      	bne.n	8008478 <_vfiprintf_r+0x1b0>
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	1d1a      	adds	r2, r3, #4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	9203      	str	r2, [sp, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfb8      	it	lt
 800841a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800841e:	3402      	adds	r4, #2
 8008420:	9305      	str	r3, [sp, #20]
 8008422:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80084f8 <_vfiprintf_r+0x230>
 8008426:	7821      	ldrb	r1, [r4, #0]
 8008428:	2203      	movs	r2, #3
 800842a:	4650      	mov	r0, sl
 800842c:	f7f7 fef0 	bl	8000210 <memchr>
 8008430:	b138      	cbz	r0, 8008442 <_vfiprintf_r+0x17a>
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	eba0 000a 	sub.w	r0, r0, sl
 8008438:	2240      	movs	r2, #64	; 0x40
 800843a:	4082      	lsls	r2, r0
 800843c:	4313      	orrs	r3, r2
 800843e:	3401      	adds	r4, #1
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008446:	4829      	ldr	r0, [pc, #164]	; (80084ec <_vfiprintf_r+0x224>)
 8008448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800844c:	2206      	movs	r2, #6
 800844e:	f7f7 fedf 	bl	8000210 <memchr>
 8008452:	2800      	cmp	r0, #0
 8008454:	d03f      	beq.n	80084d6 <_vfiprintf_r+0x20e>
 8008456:	4b26      	ldr	r3, [pc, #152]	; (80084f0 <_vfiprintf_r+0x228>)
 8008458:	bb1b      	cbnz	r3, 80084a2 <_vfiprintf_r+0x1da>
 800845a:	9b03      	ldr	r3, [sp, #12]
 800845c:	3307      	adds	r3, #7
 800845e:	f023 0307 	bic.w	r3, r3, #7
 8008462:	3308      	adds	r3, #8
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008468:	443b      	add	r3, r7
 800846a:	9309      	str	r3, [sp, #36]	; 0x24
 800846c:	e768      	b.n	8008340 <_vfiprintf_r+0x78>
 800846e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008472:	460c      	mov	r4, r1
 8008474:	2001      	movs	r0, #1
 8008476:	e7a6      	b.n	80083c6 <_vfiprintf_r+0xfe>
 8008478:	2300      	movs	r3, #0
 800847a:	3401      	adds	r4, #1
 800847c:	9305      	str	r3, [sp, #20]
 800847e:	4619      	mov	r1, r3
 8008480:	f04f 0c0a 	mov.w	ip, #10
 8008484:	4620      	mov	r0, r4
 8008486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800848a:	3a30      	subs	r2, #48	; 0x30
 800848c:	2a09      	cmp	r2, #9
 800848e:	d903      	bls.n	8008498 <_vfiprintf_r+0x1d0>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0c6      	beq.n	8008422 <_vfiprintf_r+0x15a>
 8008494:	9105      	str	r1, [sp, #20]
 8008496:	e7c4      	b.n	8008422 <_vfiprintf_r+0x15a>
 8008498:	fb0c 2101 	mla	r1, ip, r1, r2
 800849c:	4604      	mov	r4, r0
 800849e:	2301      	movs	r3, #1
 80084a0:	e7f0      	b.n	8008484 <_vfiprintf_r+0x1bc>
 80084a2:	ab03      	add	r3, sp, #12
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	462a      	mov	r2, r5
 80084a8:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <_vfiprintf_r+0x22c>)
 80084aa:	a904      	add	r1, sp, #16
 80084ac:	4630      	mov	r0, r6
 80084ae:	f7fd fb9d 	bl	8005bec <_printf_float>
 80084b2:	4607      	mov	r7, r0
 80084b4:	1c78      	adds	r0, r7, #1
 80084b6:	d1d6      	bne.n	8008466 <_vfiprintf_r+0x19e>
 80084b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ba:	07d9      	lsls	r1, r3, #31
 80084bc:	d405      	bmi.n	80084ca <_vfiprintf_r+0x202>
 80084be:	89ab      	ldrh	r3, [r5, #12]
 80084c0:	059a      	lsls	r2, r3, #22
 80084c2:	d402      	bmi.n	80084ca <_vfiprintf_r+0x202>
 80084c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084c6:	f7fe f871 	bl	80065ac <__retarget_lock_release_recursive>
 80084ca:	89ab      	ldrh	r3, [r5, #12]
 80084cc:	065b      	lsls	r3, r3, #25
 80084ce:	f53f af1d 	bmi.w	800830c <_vfiprintf_r+0x44>
 80084d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084d4:	e71c      	b.n	8008310 <_vfiprintf_r+0x48>
 80084d6:	ab03      	add	r3, sp, #12
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	462a      	mov	r2, r5
 80084dc:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <_vfiprintf_r+0x22c>)
 80084de:	a904      	add	r1, sp, #16
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7fd fe27 	bl	8006134 <_printf_i>
 80084e6:	e7e4      	b.n	80084b2 <_vfiprintf_r+0x1ea>
 80084e8:	08008909 	.word	0x08008909
 80084ec:	08008913 	.word	0x08008913
 80084f0:	08005bed 	.word	0x08005bed
 80084f4:	080082a3 	.word	0x080082a3
 80084f8:	0800890f 	.word	0x0800890f

080084fc <__swbuf_r>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	460e      	mov	r6, r1
 8008500:	4614      	mov	r4, r2
 8008502:	4605      	mov	r5, r0
 8008504:	b118      	cbz	r0, 800850e <__swbuf_r+0x12>
 8008506:	6a03      	ldr	r3, [r0, #32]
 8008508:	b90b      	cbnz	r3, 800850e <__swbuf_r+0x12>
 800850a:	f7fd ffe1 	bl	80064d0 <__sinit>
 800850e:	69a3      	ldr	r3, [r4, #24]
 8008510:	60a3      	str	r3, [r4, #8]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	071a      	lsls	r2, r3, #28
 8008516:	d525      	bpl.n	8008564 <__swbuf_r+0x68>
 8008518:	6923      	ldr	r3, [r4, #16]
 800851a:	b31b      	cbz	r3, 8008564 <__swbuf_r+0x68>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	6922      	ldr	r2, [r4, #16]
 8008520:	1a98      	subs	r0, r3, r2
 8008522:	6963      	ldr	r3, [r4, #20]
 8008524:	b2f6      	uxtb	r6, r6
 8008526:	4283      	cmp	r3, r0
 8008528:	4637      	mov	r7, r6
 800852a:	dc04      	bgt.n	8008536 <__swbuf_r+0x3a>
 800852c:	4621      	mov	r1, r4
 800852e:	4628      	mov	r0, r5
 8008530:	f7ff f94e 	bl	80077d0 <_fflush_r>
 8008534:	b9e0      	cbnz	r0, 8008570 <__swbuf_r+0x74>
 8008536:	68a3      	ldr	r3, [r4, #8]
 8008538:	3b01      	subs	r3, #1
 800853a:	60a3      	str	r3, [r4, #8]
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	6022      	str	r2, [r4, #0]
 8008542:	701e      	strb	r6, [r3, #0]
 8008544:	6962      	ldr	r2, [r4, #20]
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	429a      	cmp	r2, r3
 800854a:	d004      	beq.n	8008556 <__swbuf_r+0x5a>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	07db      	lsls	r3, r3, #31
 8008550:	d506      	bpl.n	8008560 <__swbuf_r+0x64>
 8008552:	2e0a      	cmp	r6, #10
 8008554:	d104      	bne.n	8008560 <__swbuf_r+0x64>
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f7ff f939 	bl	80077d0 <_fflush_r>
 800855e:	b938      	cbnz	r0, 8008570 <__swbuf_r+0x74>
 8008560:	4638      	mov	r0, r7
 8008562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008564:	4621      	mov	r1, r4
 8008566:	4628      	mov	r0, r5
 8008568:	f000 f806 	bl	8008578 <__swsetup_r>
 800856c:	2800      	cmp	r0, #0
 800856e:	d0d5      	beq.n	800851c <__swbuf_r+0x20>
 8008570:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008574:	e7f4      	b.n	8008560 <__swbuf_r+0x64>
	...

08008578 <__swsetup_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4b2a      	ldr	r3, [pc, #168]	; (8008624 <__swsetup_r+0xac>)
 800857c:	4605      	mov	r5, r0
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	460c      	mov	r4, r1
 8008582:	b118      	cbz	r0, 800858c <__swsetup_r+0x14>
 8008584:	6a03      	ldr	r3, [r0, #32]
 8008586:	b90b      	cbnz	r3, 800858c <__swsetup_r+0x14>
 8008588:	f7fd ffa2 	bl	80064d0 <__sinit>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008592:	0718      	lsls	r0, r3, #28
 8008594:	d422      	bmi.n	80085dc <__swsetup_r+0x64>
 8008596:	06d9      	lsls	r1, r3, #27
 8008598:	d407      	bmi.n	80085aa <__swsetup_r+0x32>
 800859a:	2309      	movs	r3, #9
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a8:	e034      	b.n	8008614 <__swsetup_r+0x9c>
 80085aa:	0758      	lsls	r0, r3, #29
 80085ac:	d512      	bpl.n	80085d4 <__swsetup_r+0x5c>
 80085ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085b0:	b141      	cbz	r1, 80085c4 <__swsetup_r+0x4c>
 80085b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b6:	4299      	cmp	r1, r3
 80085b8:	d002      	beq.n	80085c0 <__swsetup_r+0x48>
 80085ba:	4628      	mov	r0, r5
 80085bc:	f7ff fdce 	bl	800815c <_free_r>
 80085c0:	2300      	movs	r3, #0
 80085c2:	6363      	str	r3, [r4, #52]	; 0x34
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	2300      	movs	r3, #0
 80085ce:	6063      	str	r3, [r4, #4]
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	f043 0308 	orr.w	r3, r3, #8
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	b94b      	cbnz	r3, 80085f4 <__swsetup_r+0x7c>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ea:	d003      	beq.n	80085f4 <__swsetup_r+0x7c>
 80085ec:	4621      	mov	r1, r4
 80085ee:	4628      	mov	r0, r5
 80085f0:	f000 f840 	bl	8008674 <__smakebuf_r>
 80085f4:	89a0      	ldrh	r0, [r4, #12]
 80085f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085fa:	f010 0301 	ands.w	r3, r0, #1
 80085fe:	d00a      	beq.n	8008616 <__swsetup_r+0x9e>
 8008600:	2300      	movs	r3, #0
 8008602:	60a3      	str	r3, [r4, #8]
 8008604:	6963      	ldr	r3, [r4, #20]
 8008606:	425b      	negs	r3, r3
 8008608:	61a3      	str	r3, [r4, #24]
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	b943      	cbnz	r3, 8008620 <__swsetup_r+0xa8>
 800860e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008612:	d1c4      	bne.n	800859e <__swsetup_r+0x26>
 8008614:	bd38      	pop	{r3, r4, r5, pc}
 8008616:	0781      	lsls	r1, r0, #30
 8008618:	bf58      	it	pl
 800861a:	6963      	ldrpl	r3, [r4, #20]
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	e7f4      	b.n	800860a <__swsetup_r+0x92>
 8008620:	2000      	movs	r0, #0
 8008622:	e7f7      	b.n	8008614 <__swsetup_r+0x9c>
 8008624:	20000084 	.word	0x20000084

08008628 <__swhatbuf_r>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	460c      	mov	r4, r1
 800862c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008630:	2900      	cmp	r1, #0
 8008632:	b096      	sub	sp, #88	; 0x58
 8008634:	4615      	mov	r5, r2
 8008636:	461e      	mov	r6, r3
 8008638:	da0d      	bge.n	8008656 <__swhatbuf_r+0x2e>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008640:	f04f 0100 	mov.w	r1, #0
 8008644:	bf0c      	ite	eq
 8008646:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800864a:	2340      	movne	r3, #64	; 0x40
 800864c:	2000      	movs	r0, #0
 800864e:	6031      	str	r1, [r6, #0]
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	b016      	add	sp, #88	; 0x58
 8008654:	bd70      	pop	{r4, r5, r6, pc}
 8008656:	466a      	mov	r2, sp
 8008658:	f000 f848 	bl	80086ec <_fstat_r>
 800865c:	2800      	cmp	r0, #0
 800865e:	dbec      	blt.n	800863a <__swhatbuf_r+0x12>
 8008660:	9901      	ldr	r1, [sp, #4]
 8008662:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008666:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800866a:	4259      	negs	r1, r3
 800866c:	4159      	adcs	r1, r3
 800866e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008672:	e7eb      	b.n	800864c <__swhatbuf_r+0x24>

08008674 <__smakebuf_r>:
 8008674:	898b      	ldrh	r3, [r1, #12]
 8008676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008678:	079d      	lsls	r5, r3, #30
 800867a:	4606      	mov	r6, r0
 800867c:	460c      	mov	r4, r1
 800867e:	d507      	bpl.n	8008690 <__smakebuf_r+0x1c>
 8008680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	2301      	movs	r3, #1
 800868a:	6163      	str	r3, [r4, #20]
 800868c:	b002      	add	sp, #8
 800868e:	bd70      	pop	{r4, r5, r6, pc}
 8008690:	ab01      	add	r3, sp, #4
 8008692:	466a      	mov	r2, sp
 8008694:	f7ff ffc8 	bl	8008628 <__swhatbuf_r>
 8008698:	9900      	ldr	r1, [sp, #0]
 800869a:	4605      	mov	r5, r0
 800869c:	4630      	mov	r0, r6
 800869e:	f7fe ff91 	bl	80075c4 <_malloc_r>
 80086a2:	b948      	cbnz	r0, 80086b8 <__smakebuf_r+0x44>
 80086a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a8:	059a      	lsls	r2, r3, #22
 80086aa:	d4ef      	bmi.n	800868c <__smakebuf_r+0x18>
 80086ac:	f023 0303 	bic.w	r3, r3, #3
 80086b0:	f043 0302 	orr.w	r3, r3, #2
 80086b4:	81a3      	strh	r3, [r4, #12]
 80086b6:	e7e3      	b.n	8008680 <__smakebuf_r+0xc>
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	6020      	str	r0, [r4, #0]
 80086bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	9b00      	ldr	r3, [sp, #0]
 80086c4:	6163      	str	r3, [r4, #20]
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	6120      	str	r0, [r4, #16]
 80086ca:	b15b      	cbz	r3, 80086e4 <__smakebuf_r+0x70>
 80086cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 f81d 	bl	8008710 <_isatty_r>
 80086d6:	b128      	cbz	r0, 80086e4 <__smakebuf_r+0x70>
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f023 0303 	bic.w	r3, r3, #3
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	81a3      	strh	r3, [r4, #12]
 80086e4:	89a3      	ldrh	r3, [r4, #12]
 80086e6:	431d      	orrs	r5, r3
 80086e8:	81a5      	strh	r5, [r4, #12]
 80086ea:	e7cf      	b.n	800868c <__smakebuf_r+0x18>

080086ec <_fstat_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4d07      	ldr	r5, [pc, #28]	; (800870c <_fstat_r+0x20>)
 80086f0:	2300      	movs	r3, #0
 80086f2:	4604      	mov	r4, r0
 80086f4:	4608      	mov	r0, r1
 80086f6:	4611      	mov	r1, r2
 80086f8:	602b      	str	r3, [r5, #0]
 80086fa:	f7f9 fd80 	bl	80021fe <_fstat>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	d102      	bne.n	8008708 <_fstat_r+0x1c>
 8008702:	682b      	ldr	r3, [r5, #0]
 8008704:	b103      	cbz	r3, 8008708 <_fstat_r+0x1c>
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	bd38      	pop	{r3, r4, r5, pc}
 800870a:	bf00      	nop
 800870c:	2000048c 	.word	0x2000048c

08008710 <_isatty_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d06      	ldr	r5, [pc, #24]	; (800872c <_isatty_r+0x1c>)
 8008714:	2300      	movs	r3, #0
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	f7f9 fd7f 	bl	800221e <_isatty>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_isatty_r+0x1a>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_isatty_r+0x1a>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	2000048c 	.word	0x2000048c

08008730 <_raise_r>:
 8008730:	291f      	cmp	r1, #31
 8008732:	b538      	push	{r3, r4, r5, lr}
 8008734:	4604      	mov	r4, r0
 8008736:	460d      	mov	r5, r1
 8008738:	d904      	bls.n	8008744 <_raise_r+0x14>
 800873a:	2316      	movs	r3, #22
 800873c:	6003      	str	r3, [r0, #0]
 800873e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008746:	b112      	cbz	r2, 800874e <_raise_r+0x1e>
 8008748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800874c:	b94b      	cbnz	r3, 8008762 <_raise_r+0x32>
 800874e:	4620      	mov	r0, r4
 8008750:	f000 f830 	bl	80087b4 <_getpid_r>
 8008754:	462a      	mov	r2, r5
 8008756:	4601      	mov	r1, r0
 8008758:	4620      	mov	r0, r4
 800875a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875e:	f000 b817 	b.w	8008790 <_kill_r>
 8008762:	2b01      	cmp	r3, #1
 8008764:	d00a      	beq.n	800877c <_raise_r+0x4c>
 8008766:	1c59      	adds	r1, r3, #1
 8008768:	d103      	bne.n	8008772 <_raise_r+0x42>
 800876a:	2316      	movs	r3, #22
 800876c:	6003      	str	r3, [r0, #0]
 800876e:	2001      	movs	r0, #1
 8008770:	e7e7      	b.n	8008742 <_raise_r+0x12>
 8008772:	2400      	movs	r4, #0
 8008774:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008778:	4628      	mov	r0, r5
 800877a:	4798      	blx	r3
 800877c:	2000      	movs	r0, #0
 800877e:	e7e0      	b.n	8008742 <_raise_r+0x12>

08008780 <raise>:
 8008780:	4b02      	ldr	r3, [pc, #8]	; (800878c <raise+0xc>)
 8008782:	4601      	mov	r1, r0
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	f7ff bfd3 	b.w	8008730 <_raise_r>
 800878a:	bf00      	nop
 800878c:	20000084 	.word	0x20000084

08008790 <_kill_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d07      	ldr	r5, [pc, #28]	; (80087b0 <_kill_r+0x20>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	4611      	mov	r1, r2
 800879c:	602b      	str	r3, [r5, #0]
 800879e:	f7f9 fccf 	bl	8002140 <_kill>
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	d102      	bne.n	80087ac <_kill_r+0x1c>
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	b103      	cbz	r3, 80087ac <_kill_r+0x1c>
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	bd38      	pop	{r3, r4, r5, pc}
 80087ae:	bf00      	nop
 80087b0:	2000048c 	.word	0x2000048c

080087b4 <_getpid_r>:
 80087b4:	f7f9 bcbc 	b.w	8002130 <_getpid>

080087b8 <_init>:
 80087b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ba:	bf00      	nop
 80087bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087be:	bc08      	pop	{r3}
 80087c0:	469e      	mov	lr, r3
 80087c2:	4770      	bx	lr

080087c4 <_fini>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	bf00      	nop
 80087c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ca:	bc08      	pop	{r3}
 80087cc:	469e      	mov	lr, r3
 80087ce:	4770      	bx	lr
