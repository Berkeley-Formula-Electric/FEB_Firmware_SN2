
LVPDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008658  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008828  08008828  00018828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c24  08008c24  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c2c  08008c2c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c2c  08008c2c  00018c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08008c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000200  08008e34  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08008e34  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1a8  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000203f  00000000  00000000  0002e41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  00030460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000968  00000000  00000000  00031068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022dd0  00000000  00000000  000319d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f82f  00000000  00000000  000547a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf740  00000000  00000000  00063fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043d0  00000000  00000000  00133710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00137ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008810 	.word	0x08008810

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08008810 	.word	0x08008810

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <FEB_TPS2482_SETUP>:
#include "FEB_TPS2482.h"

void FEB_TPS2482_SETUP(I2C_HandleTypeDef *hi2cp, uint8_t DEV_ADDR, uint8_t CONFIG[], uint8_t CAL_REG[], uint8_t ALERT[], uint8_t LIMIT[]) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	460b      	mov	r3, r1
 8000f92:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x00, 1, CONFIG, 2, HAL_MAX_DELAY); // configure
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	b299      	uxth	r1, r3
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f002 ff42 	bl	8003e34 <HAL_I2C_Mem_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x05, 1, CAL_REG, 2, HAL_MAX_DELAY); // calibrate
 8000fb4:	7afb      	ldrb	r3, [r7, #11]
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2205      	movs	r2, #5
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f002 ff32 	bl	8003e34 <HAL_I2C_Mem_Write>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x06, 1, ALERT, 2, HAL_MAX_DELAY); // set alert
 8000fd4:	7afb      	ldrb	r3, [r7, #11]
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	2206      	movs	r2, #6
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f002 ff22 	bl	8003e34 <HAL_I2C_Mem_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//			// error handler
//		__disable_irq();
//		while(1);
//	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x07, 1, LIMIT, 2, HAL_MAX_DELAY); // set limit
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	b299      	uxth	r1, r3
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2302      	movs	r3, #2
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	2207      	movs	r2, #7
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f002 ff12 	bl	8003e34 <HAL_I2C_Mem_Write>
 8001010:	4603      	mov	r3, r0
 8001012:	75fb      	strb	r3, [r7, #23]
//	if (ret != HAL_OK) {
//		// error handler
//		__disable_irq();
//		while(1);
//	}
}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	0000      	movs	r0, r0
	...

08001020 <FEB_TPS2482_PollBusCurrent>:

//Brief: Uses I2C to pull current value from a device on the bus
//Param: hi2c Pointer to a I2C_HandleTypeDef structure that contains
//                the configuration information for the specified I2C.
//Param: DEV_ADDR which points to which device on the bus you want to poll
float FEB_TPS2482_PollBusCurrent(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
	//Buffer to store data;
	uint8_t buf[12];
	buf[0] = 4; //4 is the register that stores the current value
 800102c:	2304      	movs	r3, #4
 800102e:	733b      	strb	r3, [r7, #12]
	float returnVal = -1; //Set return val default to -1 as an "error". Not that great since we can actually have negative current
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <FEB_TPS2482_PollBusCurrent+0xc0>)
 8001032:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	b299      	uxth	r1, r3
 8001038:	f107 020c 	add.w	r2, r7, #12
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f002 fbd2 	bl	80037ec <HAL_I2C_Master_Transmit>
 8001048:	4603      	mov	r3, r0
 800104a:	76fb      	strb	r3, [r7, #27]
	if(ret == HAL_OK){
 800104c:	7efb      	ldrb	r3, [r7, #27]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d127      	bne.n	80010a2 <FEB_TPS2482_PollBusCurrent+0x82>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2,100);
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	b299      	uxth	r1, r3
 8001056:	f107 020c 	add.w	r2, r7, #12
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2302      	movs	r3, #2
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f002 fcc1 	bl	80039e8 <HAL_I2C_Master_Receive>
 8001066:	4603      	mov	r3, r0
 8001068:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 800106a:	7efb      	ldrb	r3, [r7, #27]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d118      	bne.n	80010a2 <FEB_TPS2482_PollBusCurrent+0x82>
			int16_t val = (buf[0]<<8) | buf[1]; //Not sure if little endian or not, needs testing!
 8001070:	7b3b      	ldrb	r3, [r7, #12]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7b7b      	ldrb	r3, [r7, #13]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	833b      	strh	r3, [r7, #24]
			returnVal = val * 0.002; // LSB-weight = 2mA/bit
 800107e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa6e 	bl	8000564 <__aeabi_i2d>
 8001088:	a313      	add	r3, pc, #76	; (adr r3, 80010d8 <FEB_TPS2482_PollBusCurrent+0xb8>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fad3 	bl	8000638 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fda5 	bl	8000be8 <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	61fb      	str	r3, [r7, #28]
		}
	}
//	HAL_I2C_IsDeviceReady(hi2c, DEV_ADDR, 1, 100);
	if(ret == HAL_ERROR) return -2.0;
 80010a2:	7efb      	ldrb	r3, [r7, #27]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d102      	bne.n	80010ae <FEB_TPS2482_PollBusCurrent+0x8e>
 80010a8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010ac:	e00a      	b.n	80010c4 <FEB_TPS2482_PollBusCurrent+0xa4>
	if(ret == HAL_BUSY) return -3.0;
 80010ae:	7efb      	ldrb	r3, [r7, #27]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d101      	bne.n	80010b8 <FEB_TPS2482_PollBusCurrent+0x98>
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <FEB_TPS2482_PollBusCurrent+0xc4>)
 80010b6:	e005      	b.n	80010c4 <FEB_TPS2482_PollBusCurrent+0xa4>
	if(ret == HAL_TIMEOUT) return -4.0;
 80010b8:	7efb      	ldrb	r3, [r7, #27]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d101      	bne.n	80010c2 <FEB_TPS2482_PollBusCurrent+0xa2>
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <FEB_TPS2482_PollBusCurrent+0xc8>)
 80010c0:	e000      	b.n	80010c4 <FEB_TPS2482_PollBusCurrent+0xa4>

	return returnVal;
 80010c2:	69fb      	ldr	r3, [r7, #28]
}
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010dc:	3f60624d 	.word	0x3f60624d
 80010e0:	bf800000 	.word	0xbf800000
 80010e4:	c0400000 	.word	0xc0400000
 80010e8:	c0800000 	.word	0xc0800000
 80010ec:	00000000 	.word	0x00000000

080010f0 <FEB_TPS2482_PollShuntVolt>:

//-----------------------
float FEB_TPS2482_PollShuntVolt(I2C_HandleTypeDef * hi2c, uint8_t DEV_ADDR){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	//Buffer to store data;
	uint8_t buf[12];
	buf[0] = 1; //1 is the register that stores the shunt voltage value
 80010fc:	2301      	movs	r3, #1
 80010fe:	723b      	strb	r3, [r7, #8]
	float returnVal = -1; //Set return val default to -1 as an "error". Not that great since we can actually have negative current
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <FEB_TPS2482_PollShuntVolt+0xc8>)
 8001102:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, DEV_ADDR, buf, 1, 100);
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	b299      	uxth	r1, r3
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f002 fb6a 	bl	80037ec <HAL_I2C_Master_Transmit>
 8001118:	4603      	mov	r3, r0
 800111a:	76fb      	strb	r3, [r7, #27]
	if(ret == HAL_OK){
 800111c:	7efb      	ldrb	r3, [r7, #27]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d12c      	bne.n	800117c <FEB_TPS2482_PollShuntVolt+0x8c>
		ret = HAL_I2C_Master_Receive(hi2c, DEV_ADDR, buf, 2,100);
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	b299      	uxth	r1, r3
 8001126:	f107 0208 	add.w	r2, r7, #8
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2302      	movs	r3, #2
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f002 fc59 	bl	80039e8 <HAL_I2C_Master_Receive>
 8001136:	4603      	mov	r3, r0
 8001138:	76fb      	strb	r3, [r7, #27]
		if(ret == HAL_OK){
 800113a:	7efb      	ldrb	r3, [r7, #27]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d11d      	bne.n	800117c <FEB_TPS2482_PollShuntVolt+0x8c>
			int val = ((int16_t)buf[0] << 4) | (buf[1] >> 4); // combine the 2 bytes
 8001140:	7a3b      	ldrb	r3, [r7, #8]
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	7a7a      	ldrb	r2, [r7, #9]
 8001146:	0912      	lsrs	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	4313      	orrs	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
			val = val - 1;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3b01      	subs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
			val |= 0xF000; // subtract 1 and take complement
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800115a:	617b      	str	r3, [r7, #20]
			returnVal = val * 0.0000025;
 800115c:	6978      	ldr	r0, [r7, #20]
 800115e:	f7ff fa01 	bl	8000564 <__aeabi_i2d>
 8001162:	a313      	add	r3, pc, #76	; (adr r3, 80011b0 <FEB_TPS2482_PollShuntVolt+0xc0>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fa66 	bl	8000638 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd38 	bl	8000be8 <__aeabi_d2f>
 8001178:	4603      	mov	r3, r0
 800117a:	61fb      	str	r3, [r7, #28]
			//returnVal = val * 0.0000025; // LSB-weight = 2.5uV/bit
			// COULD BE IN BINARY, MAP FROM 0 - 2^(ADC conversion factor)
		}
	}
//	HAL_I2C_IsDeviceReady(hi2c, DEV_ADDR, 1, 100);
	if(ret == HAL_ERROR) return -2.0;
 800117c:	7efb      	ldrb	r3, [r7, #27]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d102      	bne.n	8001188 <FEB_TPS2482_PollShuntVolt+0x98>
 8001182:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001186:	e00a      	b.n	800119e <FEB_TPS2482_PollShuntVolt+0xae>
	if(ret == HAL_BUSY) return -3.0;
 8001188:	7efb      	ldrb	r3, [r7, #27]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d101      	bne.n	8001192 <FEB_TPS2482_PollShuntVolt+0xa2>
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <FEB_TPS2482_PollShuntVolt+0xcc>)
 8001190:	e005      	b.n	800119e <FEB_TPS2482_PollShuntVolt+0xae>
	if(ret == HAL_TIMEOUT) return -4.0;
 8001192:	7efb      	ldrb	r3, [r7, #27]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d101      	bne.n	800119c <FEB_TPS2482_PollShuntVolt+0xac>
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <FEB_TPS2482_PollShuntVolt+0xd0>)
 800119a:	e000      	b.n	800119e <FEB_TPS2482_PollShuntVolt+0xae>

	return returnVal;
 800119c:	69fb      	ldr	r3, [r7, #28]
}
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	88e368f1 	.word	0x88e368f1
 80011b4:	3ec4f8b5 	.word	0x3ec4f8b5
 80011b8:	bf800000 	.word	0xbf800000
 80011bc:	c0400000 	.word	0xc0400000
 80011c0:	c0800000 	.word	0xc0800000

080011c4 <Store_EMERGENCY_Msg>:
    EMERGENCY_APPS_EMERGENCY_TYPE apps_emergency;
    EMERGENCY_SW_EMERGENCY_TYPE sw_emergency;
} EMERGENCY_MESSAGE_TYPE;
EMERGENCY_MESSAGE_TYPE EMERGENCY_MESSAGE;

void Store_EMERGENCY_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
    switch (RxId){
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <Store_EMERGENCY_Msg+0x1a>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d006      	beq.n	80011ea <Store_EMERGENCY_Msg+0x26>
            break;
        case EMERGENCY_SW_EMERGENCY:
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
            break;
    }
}
 80011dc:	e00b      	b.n	80011f6 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.apps_emergency), RxData, data_length);
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <Store_EMERGENCY_Msg+0x3c>)
 80011e4:	f005 fa0f 	bl	8006606 <memcpy>
            break;
 80011e8:	e005      	b.n	80011f6 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <Store_EMERGENCY_Msg+0x40>)
 80011f0:	f005 fa09 	bl	8006606 <memcpy>
            break;
 80011f4:	bf00      	nop
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000021c 	.word	0x2000021c
 8001204:	2000021d 	.word	0x2000021d

08001208 <Store_BMS_Msg>:
    BMS_TEMPERATURE_TYPE temperature;
    BMS_VOLTAGE_TYPE voltage;
} BMS_MESSAGE_TYPE;
BMS_MESSAGE_TYPE BMS_MESSAGE;

void Store_BMS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d003      	beq.n	8001222 <Store_BMS_Msg+0x1a>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b11      	cmp	r3, #17
 800121e:	d006      	beq.n	800122e <Store_BMS_Msg+0x26>
            break;
        case BMS_VOLTAGE:
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
            break;
    }
}
 8001220:	e00b      	b.n	800123a <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.temperature), RxData, data_length);
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <Store_BMS_Msg+0x3c>)
 8001228:	f005 f9ed 	bl	8006606 <memcpy>
            break;
 800122c:	e005      	b.n	800123a <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <Store_BMS_Msg+0x40>)
 8001234:	f005 f9e7 	bl	8006606 <memcpy>
            break;
 8001238:	bf00      	nop
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000220 	.word	0x20000220
 8001248:	20000224 	.word	0x20000224

0800124c <Store_SW_Msg>:
    SW_ACUMULATOR_FANS_TYPE acumulator_fans;
    SW_EXTRA_TYPE extra;
} SW_MESSAGE_TYPE;
SW_MESSAGE_TYPE SW_MESSAGE;

void Store_SW_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3b20      	subs	r3, #32
 800125c:	2b03      	cmp	r3, #3
 800125e:	d823      	bhi.n	80012a8 <Store_SW_Msg+0x5c>
 8001260:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <Store_SW_Msg+0x1c>)
 8001262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001266:	bf00      	nop
 8001268:	08001279 	.word	0x08001279
 800126c:	08001285 	.word	0x08001285
 8001270:	08001291 	.word	0x08001291
 8001274:	0800129d 	.word	0x0800129d
        case SW_READY_TO_DRIVE:
            memcpy(&(SW_MESSAGE.ready_to_drive), RxData, data_length);
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <Store_SW_Msg+0x64>)
 800127e:	f005 f9c2 	bl	8006606 <memcpy>
            break;
 8001282:	e011      	b.n	80012a8 <Store_SW_Msg+0x5c>
        case SW_COOLANT_PUMP:
            memcpy(&(SW_MESSAGE.coolant_pump), RxData, data_length);
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	480a      	ldr	r0, [pc, #40]	; (80012b4 <Store_SW_Msg+0x68>)
 800128a:	f005 f9bc 	bl	8006606 <memcpy>
            break;
 800128e:	e00b      	b.n	80012a8 <Store_SW_Msg+0x5c>
        case SW_ACUMULATOR_FANS:
            memcpy(&(SW_MESSAGE.acumulator_fans), RxData, data_length);
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	68b9      	ldr	r1, [r7, #8]
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <Store_SW_Msg+0x6c>)
 8001296:	f005 f9b6 	bl	8006606 <memcpy>
            break;
 800129a:	e005      	b.n	80012a8 <Store_SW_Msg+0x5c>
        case SW_EXTRA:
            memcpy(&(SW_MESSAGE.extra), RxData, data_length);
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <Store_SW_Msg+0x70>)
 80012a2:	f005 f9b0 	bl	8006606 <memcpy>
            break;
 80012a6:	bf00      	nop
    }
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000228 	.word	0x20000228
 80012b4:	20000229 	.word	0x20000229
 80012b8:	2000022a 	.word	0x2000022a
 80012bc:	2000022b 	.word	0x2000022b

080012c0 <Store_APPS_Msg>:
    APPS_TORQUE_TYPE torque;
    float current;
} APPS_MESSAGE_TYPE;
APPS_MESSAGE_TYPE APPS_MESSAGE;

void Store_APPS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
    switch (RxId){
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3b30      	subs	r3, #48	; 0x30
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d82b      	bhi.n	800132c <Store_APPS_Msg+0x6c>
 80012d4:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <Store_APPS_Msg+0x1c>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	080012f1 	.word	0x080012f1
 80012e0:	080012fd 	.word	0x080012fd
 80012e4:	08001309 	.word	0x08001309
 80012e8:	08001315 	.word	0x08001315
 80012ec:	08001321 	.word	0x08001321
        case APPS_ACCELERATOR1_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator1_pedal), RxData, data_length);
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68b9      	ldr	r1, [r7, #8]
 80012f4:	480f      	ldr	r0, [pc, #60]	; (8001334 <Store_APPS_Msg+0x74>)
 80012f6:	f005 f986 	bl	8006606 <memcpy>
            break;
 80012fa:	e017      	b.n	800132c <Store_APPS_Msg+0x6c>
        case APPS_ACCELERATOR2_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator2_pedal), RxData, data_length);
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <Store_APPS_Msg+0x78>)
 8001302:	f005 f980 	bl	8006606 <memcpy>
            break;
 8001306:	e011      	b.n	800132c <Store_APPS_Msg+0x6c>
        case APPS_BRAKE_PEDAL:
            memcpy(&(APPS_MESSAGE.brake_pedal), RxData, data_length);
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <Store_APPS_Msg+0x7c>)
 800130e:	f005 f97a 	bl	8006606 <memcpy>
            break;
 8001312:	e00b      	b.n	800132c <Store_APPS_Msg+0x6c>
        case APPS_TORQUE:
            memcpy(&(APPS_MESSAGE.torque), RxData, data_length);
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <Store_APPS_Msg+0x80>)
 800131a:	f005 f974 	bl	8006606 <memcpy>
            break;
 800131e:	e005      	b.n	800132c <Store_APPS_Msg+0x6c>
        case APPS_CURRENT:
            memcpy(&(APPS_MESSAGE.current), RxData, data_length);
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <Store_APPS_Msg+0x84>)
 8001326:	f005 f96e 	bl	8006606 <memcpy>
            break;
 800132a:	bf00      	nop
    }
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000022c 	.word	0x2000022c
 8001338:	20000230 	.word	0x20000230
 800133c:	20000234 	.word	0x20000234
 8001340:	20000238 	.word	0x20000238
 8001344:	2000023c 	.word	0x2000023c

08001348 <assign_filter_array>:
const FilterArrayLength LVPDB_RX_NUM = 2;

const AddressIdType IVPDB_RX_ID[] = {SW_ID};
const FilterArrayLength IVPDB_RX_NUM = 1;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	2b04      	cmp	r3, #4
 8001356:	d815      	bhi.n	8001384 <assign_filter_array+0x3c>
 8001358:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <assign_filter_array+0x18>)
 800135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135e:	bf00      	nop
 8001360:	08001375 	.word	0x08001375
 8001364:	08001385 	.word	0x08001385
 8001368:	08001379 	.word	0x08001379
 800136c:	0800137d 	.word	0x0800137d
 8001370:	08001381 	.word	0x08001381
        case BMS_ID:
            return BMS_RX_ID;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <assign_filter_array+0x4c>)
 8001376:	e006      	b.n	8001386 <assign_filter_array+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <assign_filter_array+0x50>)
 800137a:	e004      	b.n	8001386 <assign_filter_array+0x3e>
            break;
        case LVPDB_ID:
            return LVPDB_RX_ID;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <assign_filter_array+0x54>)
 800137e:	e002      	b.n	8001386 <assign_filter_array+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_ID;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <assign_filter_array+0x58>)
 8001382:	e000      	b.n	8001386 <assign_filter_array+0x3e>
            break;
    }
    return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	08008880 	.word	0x08008880
 8001398:	08008884 	.word	0x08008884
 800139c:	0800888c 	.word	0x0800888c
 80013a0:	08008894 	.word	0x08008894

080013a4 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d815      	bhi.n	80013e0 <assign_filter_array_legnth+0x3c>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <assign_filter_array_legnth+0x18>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013d1 	.word	0x080013d1
 80013c0:	080013e1 	.word	0x080013e1
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013d9 	.word	0x080013d9
 80013cc:	080013dd 	.word	0x080013dd
        case BMS_ID:
            return BMS_RX_NUM;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e006      	b.n	80013e2 <assign_filter_array_legnth+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 80013d4:	2302      	movs	r3, #2
 80013d6:	e004      	b.n	80013e2 <assign_filter_array_legnth+0x3e>
            break;
        case LVPDB_ID:
            return LVPDB_RX_NUM;
 80013d8:	2302      	movs	r3, #2
 80013da:	e002      	b.n	80013e2 <assign_filter_array_legnth+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_NUM;
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <assign_filter_array_legnth+0x3e>
            break;
    }
    return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <store_msg>:

void store_msg(CAN_RxHeaderTypeDef *pHeader, uint8_t RxData[]) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
    switch(pHeader->StdId >> BITS_PER_MESSAGE_TYPE) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	2b03      	cmp	r3, #3
 8001402:	d82f      	bhi.n	8001464 <store_msg+0x74>
 8001404:	a201      	add	r2, pc, #4	; (adr r2, 800140c <store_msg+0x1c>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	0800141d 	.word	0x0800141d
 8001410:	0800142f 	.word	0x0800142f
 8001414:	08001441 	.word	0x08001441
 8001418:	08001453 	.word	0x08001453
        case EMERGENCY_ID:
            Store_EMERGENCY_Msg(pHeader->StdId, RxData, pHeader->DLC);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	461a      	mov	r2, r3
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	f7ff fecc 	bl	80011c4 <Store_EMERGENCY_Msg>
            break;
 800142c:	e01a      	b.n	8001464 <store_msg+0x74>
        case BMS_ID:
            Store_BMS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	461a      	mov	r2, r3
 8001438:	6839      	ldr	r1, [r7, #0]
 800143a:	f7ff fee5 	bl	8001208 <Store_BMS_Msg>
            break;
 800143e:	e011      	b.n	8001464 <store_msg+0x74>
        case SW_ID:
            Store_SW_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	461a      	mov	r2, r3
 800144a:	6839      	ldr	r1, [r7, #0]
 800144c:	f7ff fefe 	bl	800124c <Store_SW_Msg>
            break;
 8001450:	e008      	b.n	8001464 <store_msg+0x74>
        case APPS_ID:
            Store_APPS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	461a      	mov	r2, r3
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	f7ff ff2f 	bl	80012c0 <Store_APPS_Msg>
            break;
 8001462:	bf00      	nop
    }
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <FEB_CAN_Filter_Config>:
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void Error_Handler(void);

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b090      	sub	sp, #64	; 0x40
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	460b      	mov	r3, r1
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	4613      	mov	r3, r2
 8001480:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001486:	e027      	b.n	80014d8 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001488:	2301      	movs	r3, #1
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 800148c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8001494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	4413      	add	r3, r2
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	025b      	lsls	r3, r3, #9
 80014a0:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 80014a6:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80014aa:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80014b4:	2301      	movs	r3, #1
 80014b6:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 80014b8:	231b      	movs	r3, #27
 80014ba:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 ffe4 	bl	8002490 <HAL_CAN_ConfigFilter>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 80014ce:	f000 fbf7 	bl	8001cc0 <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 80014d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014d4:	3301      	adds	r3, #1
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbd3      	blt.n	8001488 <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3740      	adds	r7, #64	; 0x40
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <FEB_CAN_Init+0x80>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d104      	bne.n	800150a <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 8001500:	2300      	movs	r3, #0
 8001502:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 8001504:	2302      	movs	r3, #2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	e008      	b.n	800151c <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <FEB_CAN_Init+0x84>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d103      	bne.n	800151c <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 8001514:	2301      	movs	r3, #1
 8001516:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8001518:	2310      	movs	r3, #16
 800151a:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <FEB_CAN_Init+0x88>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <FEB_CAN_Init+0x88>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <FEB_CAN_Init+0x88>)
 800152a:	2200      	movs	r2, #0
 800152c:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 800152e:	6838      	ldr	r0, [r7, #0]
 8001530:	f7ff ff0a 	bl	8001348 <assign_filter_array>
 8001534:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 8001536:	6838      	ldr	r0, [r7, #0]
 8001538:	f7ff ff34 	bl	80013a4 <assign_filter_array_legnth>
 800153c:	4603      	mov	r3, r0
 800153e:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	7afa      	ldrb	r2, [r7, #11]
 8001544:	68f9      	ldr	r1, [r7, #12]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ff90 	bl	800146c <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f001 f87f 	bl	8002650 <HAL_CAN_Start>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <FEB_CAN_Init+0x70>
	  Error_Handler();
 8001558:	f000 fbb2 	bl	8001cc0 <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f001 fadc 	bl	8002b1c <HAL_CAN_ActivateNotification>

}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40006400 	.word	0x40006400
 8001570:	40006800 	.word	0x40006800
 8001574:	20000240 	.word	0x20000240

08001578 <FEB_CAN_Receive>:

void FEB_CAN_Receive(CAN_HandleTypeDef *hcan, uint32_t CAN_RX_FIFO) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <FEB_CAN_Receive+0x30>)
 8001584:	4a09      	ldr	r2, [pc, #36]	; (80015ac <FEB_CAN_Receive+0x34>)
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f001 f9b5 	bl	80028f8 <HAL_CAN_GetRxMessage>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <FEB_CAN_Receive+0x20>
		Error_Handler();
 8001594:	f000 fb94 	bl	8001cc0 <Error_Handler>
	}
	store_msg(&RxHeader, RxData);
 8001598:	4903      	ldr	r1, [pc, #12]	; (80015a8 <FEB_CAN_Receive+0x30>)
 800159a:	4804      	ldr	r0, [pc, #16]	; (80015ac <FEB_CAN_Receive+0x34>)
 800159c:	f7ff ff28 	bl	80013f0 <store_msg>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000027c 	.word	0x2000027c
 80015ac:	20000258 	.word	0x20000258

080015b0 <FEB_CAN_Transmit>:

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	461a      	mov	r2, r3
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	480f      	ldr	r0, [pc, #60]	; (8001604 <FEB_CAN_Transmit+0x54>)
 80015c6:	f005 f81e 	bl	8006606 <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <FEB_CAN_Transmit+0x58>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <FEB_CAN_Transmit+0x58>)
 80015d4:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 80015d6:	bf00      	nop
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f001 f958 	bl	800288e <HAL_CAN_GetTxMailboxesFreeLevel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f9      	beq.n	80015d8 <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <FEB_CAN_Transmit+0x5c>)
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <FEB_CAN_Transmit+0x54>)
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <FEB_CAN_Transmit+0x58>)
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f001 f874 	bl	80026d8 <HAL_CAN_AddTxMessage>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 80015f6:	f000 fb63 	bl	8001cc0 <Error_Handler>
	}
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000274 	.word	0x20000274
 8001608:	20000240 	.word	0x20000240
 800160c:	20000284 	.word	0x20000284

08001610 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO0);
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffac 	bl	8001578 <FEB_CAN_Receive>
	CAN_Flag = 1;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000288 	.word	0x20000288

08001634 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO1);
 800163c:	2101      	movs	r1, #1
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff9a 	bl	8001578 <FEB_CAN_Receive>
	CAN_Flag = 1;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000288 	.word	0x20000288

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b0a8      	sub	sp, #160	; 0xa0
 800165c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165e:	f000 fd85 	bl	800216c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001662:	f000 f975 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001666:	f000 fa6d 	bl	8001b44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800166a:	f000 fa41 	bl	8001af0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800166e:	f000 f9db 	bl	8001a28 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001672:	f000 fa0f 	bl	8001a94 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	FEB_CAN_Init(&hcan1, LVPDB_ID);
 8001676:	2104      	movs	r1, #4
 8001678:	489d      	ldr	r0, [pc, #628]	; (80018f0 <main+0x298>)
 800167a:	f7ff ff37 	bl	80014ec <FEB_CAN_Init>

	hi2c1p = &hi2c1;
 800167e:	4b9d      	ldr	r3, [pc, #628]	; (80018f4 <main+0x29c>)
 8001680:	4a9d      	ldr	r2, [pc, #628]	; (80018f8 <main+0x2a0>)
 8001682:	601a      	str	r2, [r3, #0]

	// uncomment if we need to pull ENs high to start
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);// pull PC11 high to enable coolant pump
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800168a:	489c      	ldr	r0, [pc, #624]	; (80018fc <main+0x2a4>)
 800168c:	f001 ff50 	bl	8003530 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);// pull PB5 high to enable accumulator fans
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);// pull PC3 high to enable extra

	FEB_TPS2482_SETUP(hi2c1p, LV_ADDR, CONFIG, MAIN_CAL, UNDERV, LV_NEW_LIMIT);
 8001690:	4b98      	ldr	r3, [pc, #608]	; (80018f4 <main+0x29c>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	4b9a      	ldr	r3, [pc, #616]	; (8001900 <main+0x2a8>)
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	4b9a      	ldr	r3, [pc, #616]	; (8001904 <main+0x2ac>)
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	4b9a      	ldr	r3, [pc, #616]	; (8001908 <main+0x2b0>)
 80016a0:	4a9a      	ldr	r2, [pc, #616]	; (800190c <main+0x2b4>)
 80016a2:	f7ff fc6f 	bl	8000f84 <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1p, CP_ADDR, CONFIG, CP_CAL, OVERPWR, CP_LIMIT);
 80016a6:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <main+0x29c>)
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	2188      	movs	r1, #136	; 0x88
 80016ac:	4b98      	ldr	r3, [pc, #608]	; (8001910 <main+0x2b8>)
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	4b98      	ldr	r3, [pc, #608]	; (8001914 <main+0x2bc>)
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4b98      	ldr	r3, [pc, #608]	; (8001918 <main+0x2c0>)
 80016b6:	4a95      	ldr	r2, [pc, #596]	; (800190c <main+0x2b4>)
 80016b8:	f7ff fc64 	bl	8000f84 <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1p, AF_ADDR, CONFIG, AF_CAL, OVERPWR, AF_LIMIT);
 80016bc:	4b8d      	ldr	r3, [pc, #564]	; (80018f4 <main+0x29c>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	218a      	movs	r1, #138	; 0x8a
 80016c2:	4b96      	ldr	r3, [pc, #600]	; (800191c <main+0x2c4>)
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	4b93      	ldr	r3, [pc, #588]	; (8001914 <main+0x2bc>)
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	4b95      	ldr	r3, [pc, #596]	; (8001920 <main+0x2c8>)
 80016cc:	4a8f      	ldr	r2, [pc, #572]	; (800190c <main+0x2b4>)
 80016ce:	f7ff fc59 	bl	8000f84 <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1p, EX_ADDR, CONFIG, EX_CAL, OVERPWR, EX_LIMIT);
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <main+0x29c>)
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	2182      	movs	r1, #130	; 0x82
 80016d8:	4b92      	ldr	r3, [pc, #584]	; (8001924 <main+0x2cc>)
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	4b8d      	ldr	r3, [pc, #564]	; (8001914 <main+0x2bc>)
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4b91      	ldr	r3, [pc, #580]	; (8001928 <main+0x2d0>)
 80016e2:	4a8a      	ldr	r2, [pc, #552]	; (800190c <main+0x2b4>)
 80016e4:	f7ff fc4e 	bl	8000f84 <FEB_TPS2482_SETUP>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Brake Light
	  if (APPS_MESSAGE.brake_pedal > BRAKE_THRE) {
 80016e8:	4b90      	ldr	r3, [pc, #576]	; (800192c <main+0x2d4>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff4b 	bl	8000588 <__aeabi_f2d>
 80016f2:	a37d      	add	r3, pc, #500	; (adr r3, 80018e8 <main+0x290>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7ff fa2e 	bl	8000b58 <__aeabi_dcmpgt>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <main+0xb6>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);// PA1 high
 8001702:	2201      	movs	r2, #1
 8001704:	2102      	movs	r1, #2
 8001706:	488a      	ldr	r0, [pc, #552]	; (8001930 <main+0x2d8>)
 8001708:	f001 ff12 	bl	8003530 <HAL_GPIO_WritePin>
 800170c:	e004      	b.n	8001718 <main+0xc0>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);// PA1 low
 800170e:	2200      	movs	r2, #0
 8001710:	2102      	movs	r1, #2
 8001712:	4887      	ldr	r0, [pc, #540]	; (8001930 <main+0x2d8>)
 8001714:	f001 ff0c 	bl	8003530 <HAL_GPIO_WritePin>
	  }

	  // activate peripheral devices if ready to drive
	  if (SW_MESSAGE.ready_to_drive == 1 && !isDriving) {
 8001718:	4b86      	ldr	r3, [pc, #536]	; (8001934 <main+0x2dc>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d11a      	bne.n	8001756 <main+0xfe>
 8001720:	4b85      	ldr	r3, [pc, #532]	; (8001938 <main+0x2e0>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d013      	beq.n	8001756 <main+0xfe>
		  isDriving = true;
 800172e:	4b82      	ldr	r3, [pc, #520]	; (8001938 <main+0x2e0>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);// pull PC11 high to enable coolant pump
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173a:	4870      	ldr	r0, [pc, #448]	; (80018fc <main+0x2a4>)
 800173c:	f001 fef8 	bl	8003530 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);// pull PB5 high to enable accumulator fans
 8001740:	2201      	movs	r2, #1
 8001742:	2120      	movs	r1, #32
 8001744:	487d      	ldr	r0, [pc, #500]	; (800193c <main+0x2e4>)
 8001746:	f001 fef3 	bl	8003530 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);// pull PC3 high to enable extra
 800174a:	2201      	movs	r2, #1
 800174c:	2108      	movs	r1, #8
 800174e:	486b      	ldr	r0, [pc, #428]	; (80018fc <main+0x2a4>)
 8001750:	f001 feee 	bl	8003530 <HAL_GPIO_WritePin>
 8001754:	e01a      	b.n	800178c <main+0x134>

	  // de-activate if not ready to drive
	  } else if (SW_MESSAGE.ready_to_drive == 0 && isDriving) {
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <main+0x2dc>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <main+0x134>
 800175e:	4b76      	ldr	r3, [pc, #472]	; (8001938 <main+0x2e0>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d012      	beq.n	800178c <main+0x134>
		  isDriving = false;
 8001766:	4b74      	ldr	r3, [pc, #464]	; (8001938 <main+0x2e0>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001772:	4862      	ldr	r0, [pc, #392]	; (80018fc <main+0x2a4>)
 8001774:	f001 fedc 	bl	8003530 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	2120      	movs	r1, #32
 800177c:	486f      	ldr	r0, [pc, #444]	; (800193c <main+0x2e4>)
 800177e:	f001 fed7 	bl	8003530 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2108      	movs	r1, #8
 8001786:	485d      	ldr	r0, [pc, #372]	; (80018fc <main+0x2a4>)
 8001788:	f001 fed2 	bl	8003530 <HAL_GPIO_WritePin>


	  // lv hotswap
	  // if receives undervoltage alert (PB7 pulled low) or PG low (PB6), pull all ENs for other hotswaps low and turn off brake light

	  if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET) || (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET)) {
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	486b      	ldr	r0, [pc, #428]	; (800193c <main+0x2e4>)
 8001790:	f001 feb6 	bl	8003500 <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <main+0x150>
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	4867      	ldr	r0, [pc, #412]	; (800193c <main+0x2e4>)
 800179e:	f001 feaf 	bl	8003500 <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d11c      	bne.n	80017e2 <main+0x18a>
		  // pull all ENs low
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ae:	4853      	ldr	r0, [pc, #332]	; (80018fc <main+0x2a4>)
 80017b0:	f001 febe 	bl	8003530 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2120      	movs	r1, #32
 80017b8:	4860      	ldr	r0, [pc, #384]	; (800193c <main+0x2e4>)
 80017ba:	f001 feb9 	bl	8003530 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2108      	movs	r1, #8
 80017c2:	484e      	ldr	r0, [pc, #312]	; (80018fc <main+0x2a4>)
 80017c4:	f001 feb4 	bl	8003530 <HAL_GPIO_WritePin>
		  //turn off brake light
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2102      	movs	r1, #2
 80017cc:	4858      	ldr	r0, [pc, #352]	; (8001930 <main+0x2d8>)
 80017ce:	f001 feaf 	bl	8003530 <HAL_GPIO_WritePin>
		  buf_len = sprintf((char*) buf, "Pulled Low\n");
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	495a      	ldr	r1, [pc, #360]	; (8001940 <main+0x2e8>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 fdf9 	bl	80063d0 <siprintf>
 80017de:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	  FEB_TPS2482_shutdownIfError(hi2c1p, AF_ADDR, GPIOB, GPIO_PIN_5, GPIOC, GPIO_PIN_12, GPIOB, GPIO_PIN_4, 22.5, 25.5, 9, 6, 200, 160);

	  // extra hotswap
	  FEB_TPS2482_shutdownIfError(hi2c1p, EX_ADDR, GPIOC, GPIO_PIN_3, GPIOC, GPIO_PIN_1, GPIOC, GPIO_PIN_2, 22.5, 25.5, 7, 4, 150, 120);
***/
	  current_reading = FEB_TPS2482_PollBusCurrent(hi2c1p,LV_ADDR);
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <main+0x29c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fc18 	bl	8001020 <FEB_TPS2482_PollBusCurrent>
 80017f0:	eef0 7a40 	vmov.f32	s15, s0
 80017f4:	edc7 7a02 	vstr	s15, [r7, #8]
	  ex_current_reading = FEB_TPS2482_PollBusCurrent(hi2c1p,EX_ADDR);
 80017f8:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <main+0x29c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2282      	movs	r2, #130	; 0x82
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fc0d 	bl	8001020 <FEB_TPS2482_PollBusCurrent>
 8001806:	eef0 7a40 	vmov.f32	s15, s0
 800180a:	edc7 7a01 	vstr	s15, [r7, #4]
	  cp_current_reading = FEB_TPS2482_PollBusCurrent(hi2c1p,CP_ADDR+1);
 800180e:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <main+0x29c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2288      	movs	r2, #136	; 0x88
 8001814:	3201      	adds	r2, #1
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fc00 	bl	8001020 <FEB_TPS2482_PollBusCurrent>
 8001820:	eef0 7a40 	vmov.f32	s15, s0
 8001824:	edc7 7a00 	vstr	s15, [r7]
	  FEB_CAN_Transmit(&hcan1, LVPDB_LV_CURRENT,&current_reading,sizeof(float));
 8001828:	f107 0208 	add.w	r2, r7, #8
 800182c:	2304      	movs	r3, #4
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	482f      	ldr	r0, [pc, #188]	; (80018f0 <main+0x298>)
 8001832:	f7ff febd 	bl	80015b0 <FEB_CAN_Transmit>
	  FEB_CAN_Transmit(&hcan1, LVPDB_EX_CURRENT,&ex_current_reading,sizeof(float));
 8001836:	1d3a      	adds	r2, r7, #4
 8001838:	2304      	movs	r3, #4
 800183a:	2143      	movs	r1, #67	; 0x43
 800183c:	482c      	ldr	r0, [pc, #176]	; (80018f0 <main+0x298>)
 800183e:	f7ff feb7 	bl	80015b0 <FEB_CAN_Transmit>
	  FEB_CAN_Transmit(&hcan1, LVPDB_CP_CURRENT,&cp_current_reading,sizeof(float));
 8001842:	463a      	mov	r2, r7
 8001844:	2304      	movs	r3, #4
 8001846:	2141      	movs	r1, #65	; 0x41
 8001848:	4829      	ldr	r0, [pc, #164]	; (80018f0 <main+0x298>)
 800184a:	f7ff feb1 	bl	80015b0 <FEB_CAN_Transmit>
	  apps_current_reading = APPS_MESSAGE.current;
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <main+0x2d4>)
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  shunt_voltage_reading = FEB_TPS2482_PollShuntVolt(hi2c1p, CP_ADDR+1);
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <main+0x29c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2288      	movs	r2, #136	; 0x88
 800185c:	3201      	adds	r2, #1
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc45 	bl	80010f0 <FEB_TPS2482_PollShuntVolt>
 8001866:	ee07 0a90 	vmov	s15, r0
 800186a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c


	  buf_len = sprintf((char*)buf, "ready: %d, brake: %.3f\r\n", SW_MESSAGE.ready_to_drive, APPS_MESSAGE.brake_pedal);
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <main+0x2dc>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461c      	mov	r4, r3
 8001878:	4b2c      	ldr	r3, [pc, #176]	; (800192c <main+0x2d4>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe83 	bl	8000588 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	f107 000c 	add.w	r0, r7, #12
 800188a:	e9cd 2300 	strd	r2, r3, [sp]
 800188e:	4622      	mov	r2, r4
 8001890:	492c      	ldr	r1, [pc, #176]	; (8001944 <main+0x2ec>)
 8001892:	f004 fd9d 	bl	80063d0 <siprintf>
 8001896:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);

	  //buf_len = sprintf((char*) buf, "Current Draw (LV, EX, CP, APPS): %.3f, %.3f, %.3f, %.3f\r\n", current_reading, ex_current_reading, cp_current_reading, apps_current_reading);
	  buf_len = sprintf((char*) buf, "TPS Draw: Shunt Voltage: %.3f, Current: %.3f\r\n", shunt_voltage_reading, cp_current_reading);
 800189a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800189e:	f7fe fe73 	bl	8000588 <__aeabi_f2d>
 80018a2:	4604      	mov	r4, r0
 80018a4:	460d      	mov	r5, r1
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe6d 	bl	8000588 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	f107 000c 	add.w	r0, r7, #12
 80018b6:	e9cd 2300 	strd	r2, r3, [sp]
 80018ba:	4622      	mov	r2, r4
 80018bc:	462b      	mov	r3, r5
 80018be:	4922      	ldr	r1, [pc, #136]	; (8001948 <main+0x2f0>)
 80018c0:	f004 fd86 	bl	80063d0 <siprintf>
 80018c4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80018c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 010c 	add.w	r1, r7, #12
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d6:	481d      	ldr	r0, [pc, #116]	; (800194c <main+0x2f4>)
 80018d8:	f003 fd9f 	bl	800541a <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(SLEEP_TIME);
 80018dc:	200a      	movs	r0, #10
 80018de:	f000 fcb7 	bl	8002250 <HAL_Delay>
  {
 80018e2:	e701      	b.n	80016e8 <main+0x90>
 80018e4:	f3af 8000 	nop.w
 80018e8:	9999999a 	.word	0x9999999a
 80018ec:	3fc99999 	.word	0x3fc99999
 80018f0:	2000028c 	.word	0x2000028c
 80018f4:	20000308 	.word	0x20000308
 80018f8:	200002b4 	.word	0x200002b4
 80018fc:	40020800 	.word	0x40020800
 8001900:	2000001c 	.word	0x2000001c
 8001904:	20000014 	.word	0x20000014
 8001908:	20000004 	.word	0x20000004
 800190c:	20000000 	.word	0x20000000
 8001910:	20000020 	.word	0x20000020
 8001914:	20000018 	.word	0x20000018
 8001918:	20000008 	.word	0x20000008
 800191c:	20000024 	.word	0x20000024
 8001920:	2000000c 	.word	0x2000000c
 8001924:	20000028 	.word	0x20000028
 8001928:	20000010 	.word	0x20000010
 800192c:	2000022c 	.word	0x2000022c
 8001930:	40020000 	.word	0x40020000
 8001934:	20000228 	.word	0x20000228
 8001938:	20000350 	.word	0x20000350
 800193c:	40020400 	.word	0x40020400
 8001940:	08008828 	.word	0x08008828
 8001944:	08008834 	.word	0x08008834
 8001948:	08008850 	.word	0x08008850
 800194c:	2000030c 	.word	0x2000030c

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b094      	sub	sp, #80	; 0x50
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	2234      	movs	r2, #52	; 0x34
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f004 fe18 	bl	8006594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <SystemClock_Config+0xd0>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <SystemClock_Config+0xd0>)
 800197e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <SystemClock_Config+0xd0>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <SystemClock_Config+0xd4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <SystemClock_Config+0xd4>)
 800199a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <SystemClock_Config+0xd4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b6:	2302      	movs	r3, #2
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019c0:	2304      	movs	r3, #4
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80019c4:	23a0      	movs	r3, #160	; 0xa0
 80019c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fa33 	bl	8004e44 <HAL_RCC_OscConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019e4:	f000 f96c 	bl	8001cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e8:	230f      	movs	r3, #15
 80019ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ec:	2302      	movs	r3, #2
 80019ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	2105      	movs	r1, #5
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fed2 	bl	80047b0 <HAL_RCC_ClockConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a12:	f000 f955 	bl	8001cc0 <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3750      	adds	r7, #80	; 0x50
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <MX_CAN1_Init+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a34:	2210      	movs	r2, #16
 8001a36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a4a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a78:	f000 fc0e 	bl	8002298 <HAL_CAN_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a82:	f000 f91d 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000028c 	.word	0x2000028c
 8001a90:	40006400 	.word	0x40006400

08001a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <MX_I2C1_Init+0x54>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aa0:	4a12      	ldr	r2, [pc, #72]	; (8001aec <MX_I2C1_Init+0x58>)
 8001aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <MX_I2C1_Init+0x50>)
 8001ad2:	f001 fd47 	bl	8003564 <HAL_I2C_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001adc:	f000 f8f0 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200002b4 	.word	0x200002b4
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	000186a0 	.word	0x000186a0

08001af0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <MX_USART2_UART_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b28:	f003 fc2a 	bl	8005380 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b32:	f000 f8c5 	bl	8001cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000030c 	.word	0x2000030c
 8001b40:	40004400 	.word	0x40004400

08001b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a53      	ldr	r2, [pc, #332]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a4c      	ldr	r2, [pc, #304]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a45      	ldr	r2, [pc, #276]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a3e      	ldr	r2, [pc, #248]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <MX_GPIO_Init+0x16c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f640 0108 	movw	r1, #2056	; 0x808
 8001bd0:	4838      	ldr	r0, [pc, #224]	; (8001cb4 <MX_GPIO_Init+0x170>)
 8001bd2:	f001 fcad 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2122      	movs	r1, #34	; 0x22
 8001bda:	4837      	ldr	r0, [pc, #220]	; (8001cb8 <MX_GPIO_Init+0x174>)
 8001bdc:	f001 fca8 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2120      	movs	r1, #32
 8001be4:	4835      	ldr	r0, [pc, #212]	; (8001cbc <MX_GPIO_Init+0x178>)
 8001be6:	f001 fca3 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	482c      	ldr	r0, [pc, #176]	; (8001cb4 <MX_GPIO_Init+0x170>)
 8001c02:	f001 fae9 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12;
 8001c06:	f241 4306 	movw	r3, #5126	; 0x1406
 8001c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4826      	ldr	r0, [pc, #152]	; (8001cb4 <MX_GPIO_Init+0x170>)
 8001c1c:	f001 fadc 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11;
 8001c20:	f640 0308 	movw	r3, #2056	; 0x808
 8001c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	4619      	mov	r1, r3
 8001c38:	481e      	ldr	r0, [pc, #120]	; (8001cb4 <MX_GPIO_Init+0x170>)
 8001c3a:	f001 facd 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8001c3e:	2322      	movs	r3, #34	; 0x22
 8001c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4818      	ldr	r0, [pc, #96]	; (8001cb8 <MX_GPIO_Init+0x174>)
 8001c56:	f001 fabf 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <MX_GPIO_Init+0x174>)
 8001c70:	f001 fab2 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001c74:	23d0      	movs	r3, #208	; 0xd0
 8001c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <MX_GPIO_Init+0x178>)
 8001c88:	f001 faa6 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <MX_GPIO_Init+0x178>)
 8001ca4:	f001 fa98 	bl	80031d8 <HAL_GPIO_Init>

}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400

08001cc0 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc4:	b672      	cpsid	i
}
 8001cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <Error_Handler+0x8>
	...

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_MspInit+0x4c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d0a:	2007      	movs	r0, #7
 8001d0c:	f001 fa22 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_CAN_MspInit+0xa4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d13c      	bne.n	8001db8 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_CAN_MspInit+0xa8>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <HAL_CAN_MspInit+0xa8>)
 8001d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_CAN_MspInit+0xa8>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_CAN_MspInit+0xa8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_CAN_MspInit+0xa8>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_CAN_MspInit+0xa8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d88:	2309      	movs	r3, #9
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <HAL_CAN_MspInit+0xac>)
 8001d94:	f001 fa20 	bl	80031d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2014      	movs	r0, #20
 8001d9e:	f001 f9e4 	bl	800316a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001da2:	2014      	movs	r0, #20
 8001da4:	f001 f9fd 	bl	80031a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2100      	movs	r1, #0
 8001dac:	2015      	movs	r0, #21
 8001dae:	f001 f9dc 	bl	800316a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001db2:	2015      	movs	r0, #21
 8001db4:	f001 f9f5 	bl	80031a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40006400 	.word	0x40006400
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000

08001dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_I2C_MspInit+0x84>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d12c      	bne.n	8001e48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_I2C_MspInit+0x88>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_I2C_MspInit+0x88>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_I2C_MspInit+0x88>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e10:	2312      	movs	r3, #18
 8001e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	480c      	ldr	r0, [pc, #48]	; (8001e58 <HAL_I2C_MspInit+0x8c>)
 8001e28:	f001 f9d6 	bl	80031d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_I2C_MspInit+0x88>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_I2C_MspInit+0x88>)
 8001e36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_I2C_MspInit+0x88>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e48:	bf00      	nop
 8001e4a:	3728      	adds	r7, #40	; 0x28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40005400 	.word	0x40005400
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020400 	.word	0x40020400

08001e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_UART_MspInit+0x84>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d12b      	bne.n	8001ed6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_UART_MspInit+0x8c>)
 8001ed2:	f001 f981 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40004400 	.word	0x40004400
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f96a 	bl	8002210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <CAN1_RX0_IRQHandler+0x10>)
 8001f46:	f000 fe0f 	bl	8002b68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000028c 	.word	0x2000028c

08001f54 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <CAN1_RX1_IRQHandler+0x10>)
 8001f5a:	f000 fe05 	bl	8002b68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000028c 	.word	0x2000028c

08001f68 <_getpid>:
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_kill>:
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	f004 fb13 	bl	80065ac <__errno>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2216      	movs	r2, #22
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_exit>:
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ffe7 	bl	8001f78 <_kill>
 8001faa:	e7fe      	b.n	8001faa <_exit+0x12>

08001fac <_read>:
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	e00a      	b.n	8001fd4 <_read+0x28>
 8001fbe:	f3af 8000 	nop.w
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	60ba      	str	r2, [r7, #8]
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbf0      	blt.n	8001fbe <_read+0x12>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_write>:
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e009      	b.n	800200c <_write+0x26>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f3af 8000 	nop.w
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3301      	adds	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	dbf1      	blt.n	8001ff8 <_write+0x12>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <_close>:
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <_fstat>:
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	2300      	movs	r3, #0
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <_isatty>:
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	2301      	movs	r3, #1
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_lseek>:
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	2300      	movs	r3, #0
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <_sbrk>:
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <_sbrk+0x5c>)
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <_sbrk+0x60>)
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <_sbrk+0x22>
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <_sbrk+0x64>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <_sbrk+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d207      	bcs.n	80020c8 <_sbrk+0x40>
 80020b8:	f004 fa78 	bl	80065ac <__errno>
 80020bc:	4603      	mov	r3, r0
 80020be:	220c      	movs	r2, #12
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c6:	e009      	b.n	80020dc <_sbrk+0x54>
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <_sbrk+0x64>)
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20020000 	.word	0x20020000
 80020e8:	00000400 	.word	0x00000400
 80020ec:	20000354 	.word	0x20000354
 80020f0:	200004a8 	.word	0x200004a8

080020f4 <SystemInit>:
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <SystemInit+0x20>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <SystemInit+0x20>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800211c:	480d      	ldr	r0, [pc, #52]	; (8002154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800211e:	490e      	ldr	r1, [pc, #56]	; (8002158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002120:	4a0e      	ldr	r2, [pc, #56]	; (800215c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002134:	4c0b      	ldr	r4, [pc, #44]	; (8002164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002142:	f7ff ffd7 	bl	80020f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002146:	f004 fa37 	bl	80065b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214a:	f7ff fa85 	bl	8001658 <main>
  bx  lr    
 800214e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800215c:	08008c34 	.word	0x08008c34
  ldr r2, =_sbss
 8002160:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002164:	200004a8 	.word	0x200004a8

08002168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC_IRQHandler>
	...

0800216c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <HAL_Init+0x40>)
 8002176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800217a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <HAL_Init+0x40>)
 8002182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a07      	ldr	r2, [pc, #28]	; (80021ac <HAL_Init+0x40>)
 800218e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002194:	2003      	movs	r0, #3
 8002196:	f000 ffdd 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219a:	2000      	movs	r0, #0
 800219c:	f000 f808 	bl	80021b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a0:	f7ff fd94 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023c00 	.word	0x40023c00

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_InitTick+0x54>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_InitTick+0x58>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fff5 	bl	80031be <HAL_SYSTICK_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e00e      	b.n	80021fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d80a      	bhi.n	80021fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e4:	2200      	movs	r2, #0
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ec:	f000 ffbd 	bl	800316a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_InitTick+0x5c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	2000002c 	.word	0x2000002c
 8002208:	20000034 	.word	0x20000034
 800220c:	20000030 	.word	0x20000030

08002210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_IncTick+0x20>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x24>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_IncTick+0x24>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000034 	.word	0x20000034
 8002234:	20000358 	.word	0x20000358

08002238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_GetTick+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000358 	.word	0x20000358

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff ffee 	bl	8002238 <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002268:	d005      	beq.n	8002276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_Delay+0x44>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002276:	bf00      	nop
 8002278:	f7ff ffde 	bl	8002238 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8f7      	bhi.n	8002278 <HAL_Delay+0x28>
  {
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000034 	.word	0x20000034

08002298 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0ed      	b.n	8002486 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fd30 	bl	8001d1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022cc:	f7ff ffb4 	bl	8002238 <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022d2:	e012      	b.n	80022fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022d4:	f7ff ffb0 	bl	8002238 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b0a      	cmp	r3, #10
 80022e0:	d90b      	bls.n	80022fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2205      	movs	r2, #5
 80022f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0c5      	b.n	8002486 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0e5      	beq.n	80022d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0202 	bic.w	r2, r2, #2
 8002316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002318:	f7ff ff8e 	bl	8002238 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800231e:	e012      	b.n	8002346 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002320:	f7ff ff8a 	bl	8002238 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b0a      	cmp	r3, #10
 800232c:	d90b      	bls.n	8002346 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2205      	movs	r2, #5
 800233e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e09f      	b.n	8002486 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e5      	bne.n	8002320 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7e1b      	ldrb	r3, [r3, #24]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d108      	bne.n	800236e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e007      	b.n	800237e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7e5b      	ldrb	r3, [r3, #25]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e007      	b.n	80023a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7e9b      	ldrb	r3, [r3, #26]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d108      	bne.n	80023c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0220 	orr.w	r2, r2, #32
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e007      	b.n	80023d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0220 	bic.w	r2, r2, #32
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7edb      	ldrb	r3, [r3, #27]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d108      	bne.n	80023ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0210 	bic.w	r2, r2, #16
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e007      	b.n	80023fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0210 	orr.w	r2, r2, #16
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7f1b      	ldrb	r3, [r3, #28]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e007      	b.n	8002426 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0208 	bic.w	r2, r2, #8
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7f5b      	ldrb	r3, [r3, #29]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0204 	orr.w	r2, r2, #4
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0204 	bic.w	r2, r2, #4
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	ea42 0103 	orr.w	r1, r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d003      	beq.n	80024b6 <HAL_CAN_ConfigFilter+0x26>
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	f040 80be 	bne.w	8002632 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_CAN_ConfigFilter+0x1bc>)
 80024b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	431a      	orrs	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2201      	movs	r2, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	43db      	mvns	r3, r3
 8002508:	401a      	ands	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d123      	bne.n	8002560 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43db      	mvns	r3, r3
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800253a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3248      	adds	r2, #72	; 0x48
 8002540:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002554:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002556:	6979      	ldr	r1, [r7, #20]
 8002558:	3348      	adds	r3, #72	; 0x48
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d122      	bne.n	80025ae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	431a      	orrs	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002588:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3248      	adds	r2, #72	; 0x48
 800258e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a4:	6979      	ldr	r1, [r7, #20]
 80025a6:	3348      	adds	r3, #72	; 0x48
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025c8:	e007      	b.n	80025da <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	401a      	ands	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025f4:	e007      	b.n	8002606 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	431a      	orrs	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	431a      	orrs	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002624:	f023 0201 	bic.w	r2, r3, #1
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e006      	b.n	8002640 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40006400 	.word	0x40006400

08002650 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d12e      	bne.n	80026c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800267c:	f7ff fddc 	bl	8002238 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002682:	e012      	b.n	80026aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002684:	f7ff fdd8 	bl	8002238 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b0a      	cmp	r3, #10
 8002690:	d90b      	bls.n	80026aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2205      	movs	r2, #5
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e012      	b.n	80026d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e5      	bne.n	8002684 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e006      	b.n	80026d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026f6:	7ffb      	ldrb	r3, [r7, #31]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d003      	beq.n	8002704 <HAL_CAN_AddTxMessage+0x2c>
 80026fc:	7ffb      	ldrb	r3, [r7, #31]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	f040 80b8 	bne.w	8002874 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002714:	2b00      	cmp	r3, #0
 8002716:	d105      	bne.n	8002724 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80a0 	beq.w	8002864 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	0e1b      	lsrs	r3, r3, #24
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d907      	bls.n	8002744 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e09e      	b.n	8002882 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002744:	2201      	movs	r2, #1
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	409a      	lsls	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002760:	68f9      	ldr	r1, [r7, #12]
 8002762:	6809      	ldr	r1, [r1, #0]
 8002764:	431a      	orrs	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3318      	adds	r3, #24
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	440b      	add	r3, r1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e00f      	b.n	8002792 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800277c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002782:	68f9      	ldr	r1, [r7, #12]
 8002784:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002786:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3318      	adds	r3, #24
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	440b      	add	r3, r1
 8002790:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6819      	ldr	r1, [r3, #0]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3318      	adds	r3, #24
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	440b      	add	r3, r1
 80027a2:	3304      	adds	r3, #4
 80027a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	7d1b      	ldrb	r3, [r3, #20]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d111      	bne.n	80027d2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3318      	adds	r3, #24
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	4413      	add	r3, r2
 80027ba:	3304      	adds	r3, #4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	6811      	ldr	r1, [r2, #0]
 80027c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3318      	adds	r3, #24
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	440b      	add	r3, r1
 80027ce:	3304      	adds	r3, #4
 80027d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3307      	adds	r3, #7
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	061a      	lsls	r2, r3, #24
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3306      	adds	r3, #6
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3305      	adds	r3, #5
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	4313      	orrs	r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	3204      	adds	r2, #4
 80027f2:	7812      	ldrb	r2, [r2, #0]
 80027f4:	4610      	mov	r0, r2
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	6811      	ldr	r1, [r2, #0]
 80027fa:	ea43 0200 	orr.w	r2, r3, r0
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	440b      	add	r3, r1
 8002804:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002808:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3303      	adds	r3, #3
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	061a      	lsls	r2, r3, #24
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3302      	adds	r3, #2
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3301      	adds	r3, #1
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	4313      	orrs	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	4610      	mov	r0, r2
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	6811      	ldr	r1, [r2, #0]
 8002830:	ea43 0200 	orr.w	r2, r3, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	440b      	add	r3, r1
 800283a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800283e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3318      	adds	r3, #24
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	4413      	add	r3, r2
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	6811      	ldr	r1, [r2, #0]
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3318      	adds	r3, #24
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	440b      	add	r3, r1
 800285e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e00e      	b.n	8002882 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e006      	b.n	8002882 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d002      	beq.n	80028ae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80028a8:	7afb      	ldrb	r3, [r7, #11]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d11d      	bne.n	80028ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3301      	adds	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3301      	adds	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800290c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d003      	beq.n	800291c <HAL_CAN_GetRxMessage+0x24>
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b02      	cmp	r3, #2
 8002918:	f040 80f3 	bne.w	8002b02 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10e      	bne.n	8002940 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d116      	bne.n	800295e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0e7      	b.n	8002b10 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0d8      	b.n	8002b10 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	331b      	adds	r3, #27
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0204 	and.w	r2, r3, #4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10c      	bne.n	8002996 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	331b      	adds	r3, #27
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	4413      	add	r3, r2
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0d5b      	lsrs	r3, r3, #21
 800298c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e00b      	b.n	80029ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	331b      	adds	r3, #27
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	4413      	add	r3, r2
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	331b      	adds	r3, #27
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	4413      	add	r3, r2
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0202 	and.w	r2, r3, #2
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	331b      	adds	r3, #27
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	4413      	add	r3, r2
 80029d0:	3304      	adds	r3, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 020f 	and.w	r2, r3, #15
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	331b      	adds	r3, #27
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	3304      	adds	r3, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	331b      	adds	r3, #27
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4413      	add	r3, r2
 8002a00:	3304      	adds	r3, #4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0a1a      	lsrs	r2, r3, #8
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0c1a      	lsrs	r2, r3, #16
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	3302      	adds	r3, #2
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e1a      	lsrs	r2, r3, #24
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	3303      	adds	r3, #3
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	3304      	adds	r3, #4
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0a1a      	lsrs	r2, r3, #8
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	3305      	adds	r3, #5
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0c1a      	lsrs	r2, r3, #16
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	3306      	adds	r3, #6
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0e1a      	lsrs	r2, r3, #24
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	3307      	adds	r3, #7
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	e007      	b.n	8002afe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0220 	orr.w	r2, r2, #32
 8002afc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e006      	b.n	8002b10 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b2c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d002      	beq.n	8002b3a <HAL_CAN_ActivateNotification+0x1e>
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d109      	bne.n	8002b4e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6959      	ldr	r1, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e006      	b.n	8002b5c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
  }
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d07c      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d023      	beq.n	8002c00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f983 	bl	8002ed6 <HAL_CAN_TxMailbox0CompleteCallback>
 8002bd0:	e016      	b.n	8002c00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	e00c      	b.n	8002c00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf8:	e002      	b.n	8002c00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f989 	bl	8002f12 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d024      	beq.n	8002c54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f963 	bl	8002eea <HAL_CAN_TxMailbox1CompleteCallback>
 8002c24:	e016      	b.n	8002c54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	e00c      	b.n	8002c54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	e002      	b.n	8002c54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f969 	bl	8002f26 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d024      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f943 	bl	8002efe <HAL_CAN_TxMailbox2CompleteCallback>
 8002c78:	e016      	b.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8c:	e00c      	b.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca0:	e002      	b.n	8002ca8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f949 	bl	8002f3a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f930 	bl	8002f4e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fe fc82 	bl	8001610 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00c      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2208      	movs	r2, #8
 8002d4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f908 	bl	8002f62 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d009      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fc62 	bl	8001634 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f8f2 	bl	8002f76 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2208      	movs	r2, #8
 8002dac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f8eb 	bl	8002f8a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d07b      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d072      	beq.n	8002eae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	f043 0302 	orr.w	r3, r3, #2
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d043      	beq.n	8002eae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d03e      	beq.n	8002eae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e36:	2b60      	cmp	r3, #96	; 0x60
 8002e38:	d02b      	beq.n	8002e92 <HAL_CAN_IRQHandler+0x32a>
 8002e3a:	2b60      	cmp	r3, #96	; 0x60
 8002e3c:	d82e      	bhi.n	8002e9c <HAL_CAN_IRQHandler+0x334>
 8002e3e:	2b50      	cmp	r3, #80	; 0x50
 8002e40:	d022      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x320>
 8002e42:	2b50      	cmp	r3, #80	; 0x50
 8002e44:	d82a      	bhi.n	8002e9c <HAL_CAN_IRQHandler+0x334>
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d019      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x316>
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d826      	bhi.n	8002e9c <HAL_CAN_IRQHandler+0x334>
 8002e4e:	2b30      	cmp	r3, #48	; 0x30
 8002e50:	d010      	beq.n	8002e74 <HAL_CAN_IRQHandler+0x30c>
 8002e52:	2b30      	cmp	r3, #48	; 0x30
 8002e54:	d822      	bhi.n	8002e9c <HAL_CAN_IRQHandler+0x334>
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d002      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x2f8>
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d005      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e5e:	e01d      	b.n	8002e9c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e68:	e019      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e72:	e014      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f043 0320 	orr.w	r3, r3, #32
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e7c:	e00f      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e86:	e00a      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e90:	e005      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e9a:	e000      	b.n	8002e9e <HAL_CAN_IRQHandler+0x336>
            break;
 8002e9c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002eac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f868 	bl	8002f9e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ece:	bf00      	nop
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <__NVIC_GetPriorityGrouping+0x18>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 0307 	and.w	r3, r3, #7
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db0b      	blt.n	8003042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4907      	ldr	r1, [pc, #28]	; (8003050 <__NVIC_EnableIRQ+0x38>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e100 	.word	0xe000e100

08003054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db0a      	blt.n	800307e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	490c      	ldr	r1, [pc, #48]	; (80030a0 <__NVIC_SetPriority+0x4c>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	440b      	add	r3, r1
 8003078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800307c:	e00a      	b.n	8003094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4908      	ldr	r1, [pc, #32]	; (80030a4 <__NVIC_SetPriority+0x50>)
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	3b04      	subs	r3, #4
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	440b      	add	r3, r1
 8003092:	761a      	strb	r2, [r3, #24]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000e100 	.word	0xe000e100
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f1c3 0307 	rsb	r3, r3, #7
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	bf28      	it	cs
 80030c6:	2304      	movcs	r3, #4
 80030c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d902      	bls.n	80030d8 <NVIC_EncodePriority+0x30>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3b03      	subs	r3, #3
 80030d6:	e000      	b.n	80030da <NVIC_EncodePriority+0x32>
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	43d9      	mvns	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	4313      	orrs	r3, r2
         );
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	; 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003120:	d301      	bcc.n	8003126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003122:	2301      	movs	r3, #1
 8003124:	e00f      	b.n	8003146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <SysTick_Config+0x40>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312e:	210f      	movs	r1, #15
 8003130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003134:	f7ff ff8e 	bl	8003054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <SysTick_Config+0x40>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <SysTick_Config+0x40>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010

08003154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff29 	bl	8002fb4 <__NVIC_SetPriorityGrouping>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800317c:	f7ff ff3e 	bl	8002ffc <__NVIC_GetPriorityGrouping>
 8003180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	6978      	ldr	r0, [r7, #20]
 8003188:	f7ff ff8e 	bl	80030a8 <NVIC_EncodePriority>
 800318c:	4602      	mov	r2, r0
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff5d 	bl	8003054 <__NVIC_SetPriority>
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff31 	bl	8003018 <__NVIC_EnableIRQ>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ffa2 	bl	8003110 <SysTick_Config>
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	e165      	b.n	80034c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f4:	2201      	movs	r2, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	429a      	cmp	r2, r3
 800320e:	f040 8154 	bne.w	80034ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d005      	beq.n	800322a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003226:	2b02      	cmp	r3, #2
 8003228:	d130      	bne.n	800328c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003260:	2201      	movs	r2, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 0201 	and.w	r2, r3, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b03      	cmp	r3, #3
 8003296:	d017      	beq.n	80032c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d123      	bne.n	800331c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	69b9      	ldr	r1, [r7, #24]
 8003318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0203 	and.w	r2, r3, #3
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80ae 	beq.w	80034ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <HAL_GPIO_Init+0x300>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	4a5c      	ldr	r2, [pc, #368]	; (80034d8 <HAL_GPIO_Init+0x300>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336c:	6453      	str	r3, [r2, #68]	; 0x44
 800336e:	4b5a      	ldr	r3, [pc, #360]	; (80034d8 <HAL_GPIO_Init+0x300>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800337a:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_GPIO_Init+0x304>)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3302      	adds	r3, #2
 8003382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	220f      	movs	r2, #15
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4f      	ldr	r2, [pc, #316]	; (80034e0 <HAL_GPIO_Init+0x308>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d025      	beq.n	80033f2 <HAL_GPIO_Init+0x21a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4e      	ldr	r2, [pc, #312]	; (80034e4 <HAL_GPIO_Init+0x30c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01f      	beq.n	80033ee <HAL_GPIO_Init+0x216>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a4d      	ldr	r2, [pc, #308]	; (80034e8 <HAL_GPIO_Init+0x310>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d019      	beq.n	80033ea <HAL_GPIO_Init+0x212>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4c      	ldr	r2, [pc, #304]	; (80034ec <HAL_GPIO_Init+0x314>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_GPIO_Init+0x20e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4b      	ldr	r2, [pc, #300]	; (80034f0 <HAL_GPIO_Init+0x318>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00d      	beq.n	80033e2 <HAL_GPIO_Init+0x20a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <HAL_GPIO_Init+0x31c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <HAL_GPIO_Init+0x206>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a49      	ldr	r2, [pc, #292]	; (80034f8 <HAL_GPIO_Init+0x320>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_GPIO_Init+0x202>
 80033d6:	2306      	movs	r3, #6
 80033d8:	e00c      	b.n	80033f4 <HAL_GPIO_Init+0x21c>
 80033da:	2307      	movs	r3, #7
 80033dc:	e00a      	b.n	80033f4 <HAL_GPIO_Init+0x21c>
 80033de:	2305      	movs	r3, #5
 80033e0:	e008      	b.n	80033f4 <HAL_GPIO_Init+0x21c>
 80033e2:	2304      	movs	r3, #4
 80033e4:	e006      	b.n	80033f4 <HAL_GPIO_Init+0x21c>
 80033e6:	2303      	movs	r3, #3
 80033e8:	e004      	b.n	80033f4 <HAL_GPIO_Init+0x21c>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e002      	b.n	80033f4 <HAL_GPIO_Init+0x21c>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_GPIO_Init+0x21c>
 80033f2:	2300      	movs	r3, #0
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	f002 0203 	and.w	r2, r2, #3
 80033fa:	0092      	lsls	r2, r2, #2
 80033fc:	4093      	lsls	r3, r2
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003404:	4935      	ldr	r1, [pc, #212]	; (80034dc <HAL_GPIO_Init+0x304>)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	3302      	adds	r3, #2
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003412:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_GPIO_Init+0x324>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003436:	4a31      	ldr	r2, [pc, #196]	; (80034fc <HAL_GPIO_Init+0x324>)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800343c:	4b2f      	ldr	r3, [pc, #188]	; (80034fc <HAL_GPIO_Init+0x324>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003460:	4a26      	ldr	r2, [pc, #152]	; (80034fc <HAL_GPIO_Init+0x324>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003466:	4b25      	ldr	r3, [pc, #148]	; (80034fc <HAL_GPIO_Init+0x324>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348a:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <HAL_GPIO_Init+0x324>)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_GPIO_Init+0x324>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b4:	4a11      	ldr	r2, [pc, #68]	; (80034fc <HAL_GPIO_Init+0x324>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3301      	adds	r3, #1
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	f67f ae96 	bls.w	80031f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	3724      	adds	r7, #36	; 0x24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40013800 	.word	0x40013800
 80034e0:	40020000 	.word	0x40020000
 80034e4:	40020400 	.word	0x40020400
 80034e8:	40020800 	.word	0x40020800
 80034ec:	40020c00 	.word	0x40020c00
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40021400 	.word	0x40021400
 80034f8:	40021800 	.word	0x40021800
 80034fc:	40013c00 	.word	0x40013c00

08003500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
 800351c:	e001      	b.n	8003522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800354c:	e003      	b.n	8003556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	041a      	lsls	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	619a      	str	r2, [r3, #24]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e12b      	b.n	80037ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe fc1e 	bl	8001dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c8:	f001 f9e4 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a81      	ldr	r2, [pc, #516]	; (80037d8 <HAL_I2C_Init+0x274>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d807      	bhi.n	80035e8 <HAL_I2C_Init+0x84>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a80      	ldr	r2, [pc, #512]	; (80037dc <HAL_I2C_Init+0x278>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	bf94      	ite	ls
 80035e0:	2301      	movls	r3, #1
 80035e2:	2300      	movhi	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e006      	b.n	80035f6 <HAL_I2C_Init+0x92>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a7d      	ldr	r2, [pc, #500]	; (80037e0 <HAL_I2C_Init+0x27c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bf94      	ite	ls
 80035f0:	2301      	movls	r3, #1
 80035f2:	2300      	movhi	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0e7      	b.n	80037ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a78      	ldr	r2, [pc, #480]	; (80037e4 <HAL_I2C_Init+0x280>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0c9b      	lsrs	r3, r3, #18
 8003608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a6a      	ldr	r2, [pc, #424]	; (80037d8 <HAL_I2C_Init+0x274>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d802      	bhi.n	8003638 <HAL_I2C_Init+0xd4>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3301      	adds	r3, #1
 8003636:	e009      	b.n	800364c <HAL_I2C_Init+0xe8>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	4a69      	ldr	r2, [pc, #420]	; (80037e8 <HAL_I2C_Init+0x284>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	3301      	adds	r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	430b      	orrs	r3, r1
 8003652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800365e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	495c      	ldr	r1, [pc, #368]	; (80037d8 <HAL_I2C_Init+0x274>)
 8003668:	428b      	cmp	r3, r1
 800366a:	d819      	bhi.n	80036a0 <HAL_I2C_Init+0x13c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e59      	subs	r1, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fbb1 f3f3 	udiv	r3, r1, r3
 800367a:	1c59      	adds	r1, r3, #1
 800367c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003680:	400b      	ands	r3, r1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_I2C_Init+0x138>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e59      	subs	r1, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fbb1 f3f3 	udiv	r3, r1, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369a:	e051      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 800369c:	2304      	movs	r3, #4
 800369e:	e04f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_I2C_Init+0x168>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_I2C_Init+0x18e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	0099      	lsls	r1, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Init+0x196>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e022      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10e      	bne.n	8003720 <HAL_I2C_Init+0x1bc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e58      	subs	r0, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	440b      	add	r3, r1
 8003710:	fbb0 f3f3 	udiv	r3, r0, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	0099      	lsls	r1, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800376e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6911      	ldr	r1, [r2, #16]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	000186a0 	.word	0x000186a0
 80037dc:	001e847f 	.word	0x001e847f
 80037e0:	003d08ff 	.word	0x003d08ff
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	10624dd3 	.word	0x10624dd3

080037ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	461a      	mov	r2, r3
 80037f8:	460b      	mov	r3, r1
 80037fa:	817b      	strh	r3, [r7, #10]
 80037fc:	4613      	mov	r3, r2
 80037fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7fe fd1a 	bl	8002238 <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	f040 80e0 	bne.w	80039d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2319      	movs	r3, #25
 800381a:	2201      	movs	r2, #1
 800381c:	4970      	ldr	r1, [pc, #448]	; (80039e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fde8 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	e0d3      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_I2C_Master_Transmit+0x50>
 8003838:	2302      	movs	r3, #2
 800383a:	e0cc      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d007      	beq.n	8003862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2221      	movs	r2, #33	; 0x21
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2210      	movs	r2, #16
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	893a      	ldrh	r2, [r7, #8]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a50      	ldr	r2, [pc, #320]	; (80039e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fbbc 	bl	8004028 <I2C_MasterRequestWrite>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e08d      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038d0:	e066      	b.n	80039a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fe62 	bl	80045a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d107      	bne.n	80038fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06b      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b04      	cmp	r3, #4
 800393a:	d11b      	bne.n	8003974 <HAL_I2C_Master_Transmit+0x188>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6a39      	ldr	r1, [r7, #32]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fe52 	bl	8004622 <I2C_WaitOnBTFFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e01a      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d194      	bne.n	80038d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	00100002 	.word	0x00100002
 80039e4:	ffff0000 	.word	0xffff0000

080039e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	; 0x30
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	461a      	mov	r2, r3
 80039f4:	460b      	mov	r3, r1
 80039f6:	817b      	strh	r3, [r7, #10]
 80039f8:	4613      	mov	r3, r2
 80039fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7fe fc1c 	bl	8002238 <HAL_GetTick>
 8003a00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	f040 820b 	bne.w	8003e26 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2319      	movs	r3, #25
 8003a16:	2201      	movs	r2, #1
 8003a18:	497c      	ldr	r1, [pc, #496]	; (8003c0c <HAL_I2C_Master_Receive+0x224>)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fcea 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
 8003a28:	e1fe      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_I2C_Master_Receive+0x50>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e1f7      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d007      	beq.n	8003a5e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2222      	movs	r2, #34	; 0x22
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2210      	movs	r2, #16
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	893a      	ldrh	r2, [r7, #8]
 8003a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a5c      	ldr	r2, [pc, #368]	; (8003c10 <HAL_I2C_Master_Receive+0x228>)
 8003a9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003aa0:	8979      	ldrh	r1, [r7, #10]
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb40 	bl	800412c <I2C_MasterRequestRead>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1b8      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d113      	bne.n	8003ae6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	623b      	str	r3, [r7, #32]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	623b      	str	r3, [r7, #32]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e18c      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d11b      	bne.n	8003b26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e16c      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d11b      	bne.n	8003b66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	e14c      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b8c:	e138      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	f200 80f1 	bhi.w	8003d7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d123      	bne.n	8003be8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fd7d 	bl	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e139      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be6:	e10b      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d14e      	bne.n	8003c8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4906      	ldr	r1, [pc, #24]	; (8003c14 <HAL_I2C_Master_Receive+0x22c>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fbfa 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e10e      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
 8003c0a:	bf00      	nop
 8003c0c:	00100002 	.word	0x00100002
 8003c10:	ffff0000 	.word	0xffff0000
 8003c14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c8c:	e0b8      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	2200      	movs	r2, #0
 8003c96:	4966      	ldr	r1, [pc, #408]	; (8003e30 <HAL_I2C_Master_Receive+0x448>)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fbab 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0bf      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	494f      	ldr	r1, [pc, #316]	; (8003e30 <HAL_I2C_Master_Receive+0x448>)
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fb7d 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e091      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d78:	e042      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fc90 	bl	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e04c      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d118      	bne.n	8003e00 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f47f aec2 	bne.w	8003b8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3728      	adds	r7, #40	; 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	00010004 	.word	0x00010004

08003e34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	817b      	strh	r3, [r7, #10]
 8003e46:	460b      	mov	r3, r1
 8003e48:	813b      	strh	r3, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e4e:	f7fe f9f3 	bl	8002238 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	f040 80d9 	bne.w	8004014 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2319      	movs	r3, #25
 8003e68:	2201      	movs	r2, #1
 8003e6a:	496d      	ldr	r1, [pc, #436]	; (8004020 <HAL_I2C_Mem_Write+0x1ec>)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fac1 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e0cc      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2C_Mem_Write+0x56>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0c5      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d007      	beq.n	8003eb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ebe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2221      	movs	r2, #33	; 0x21
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2240      	movs	r2, #64	; 0x40
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a4d      	ldr	r2, [pc, #308]	; (8004024 <HAL_I2C_Mem_Write+0x1f0>)
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ef2:	88f8      	ldrh	r0, [r7, #6]
 8003ef4:	893a      	ldrh	r2, [r7, #8]
 8003ef6:	8979      	ldrh	r1, [r7, #10]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4603      	mov	r3, r0
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f9e0 	bl	80042c8 <I2C_RequestMemoryWrite>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d052      	beq.n	8003fb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e081      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fb42 	bl	80045a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d107      	bne.n	8003f3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e06b      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_I2C_Mem_Write+0x180>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d017      	beq.n	8003fb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1aa      	bne.n	8003f12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fb2e 	bl	8004622 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d107      	bne.n	8003fe4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e016      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	00100002 	.word	0x00100002
 8004024:	ffff0000 	.word	0xffff0000

08004028 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	460b      	mov	r3, r1
 8004036:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d006      	beq.n	8004052 <I2C_MasterRequestWrite+0x2a>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d003      	beq.n	8004052 <I2C_MasterRequestWrite+0x2a>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004050:	d108      	bne.n	8004064 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e00b      	b.n	800407c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	2b12      	cmp	r3, #18
 800406a:	d107      	bne.n	800407c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800407a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f9b3 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00d      	beq.n	80040b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a2:	d103      	bne.n	80040ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e035      	b.n	800411c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b8:	d108      	bne.n	80040cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ba:	897b      	ldrh	r3, [r7, #10]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040c8:	611a      	str	r2, [r3, #16]
 80040ca:	e01b      	b.n	8004104 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040cc:	897b      	ldrh	r3, [r7, #10]
 80040ce:	11db      	asrs	r3, r3, #7
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0306 	and.w	r3, r3, #6
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f063 030f 	orn	r3, r3, #15
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	490e      	ldr	r1, [pc, #56]	; (8004124 <I2C_MasterRequestWrite+0xfc>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f9d9 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e010      	b.n	800411c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4907      	ldr	r1, [pc, #28]	; (8004128 <I2C_MasterRequestWrite+0x100>)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f9c9 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	00010008 	.word	0x00010008
 8004128:	00010002 	.word	0x00010002

0800412c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	460b      	mov	r3, r1
 800413a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004150:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d006      	beq.n	8004166 <I2C_MasterRequestRead+0x3a>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d003      	beq.n	8004166 <I2C_MasterRequestRead+0x3a>
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004164:	d108      	bne.n	8004178 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	e00b      	b.n	8004190 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	2b11      	cmp	r3, #17
 800417e:	d107      	bne.n	8004190 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f929 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00d      	beq.n	80041c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b6:	d103      	bne.n	80041c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e079      	b.n	80042b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041cc:	d108      	bne.n	80041e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041ce:	897b      	ldrh	r3, [r7, #10]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	611a      	str	r2, [r3, #16]
 80041de:	e05f      	b.n	80042a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041e0:	897b      	ldrh	r3, [r7, #10]
 80041e2:	11db      	asrs	r3, r3, #7
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0306 	and.w	r3, r3, #6
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f063 030f 	orn	r3, r3, #15
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4930      	ldr	r1, [pc, #192]	; (80042c0 <I2C_MasterRequestRead+0x194>)
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f94f 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e054      	b.n	80042b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800420e:	897b      	ldrh	r3, [r7, #10]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	4929      	ldr	r1, [pc, #164]	; (80042c4 <I2C_MasterRequestRead+0x198>)
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f93f 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e044      	b.n	80042b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004252:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f8c7 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427a:	d103      	bne.n	8004284 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e017      	b.n	80042b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004288:	897b      	ldrh	r3, [r7, #10]
 800428a:	11db      	asrs	r3, r3, #7
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f003 0306 	and.w	r3, r3, #6
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f063 030e 	orn	r3, r3, #14
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4907      	ldr	r1, [pc, #28]	; (80042c4 <I2C_MasterRequestRead+0x198>)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f8fb 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	00010008 	.word	0x00010008
 80042c4:	00010002 	.word	0x00010002

080042c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	4608      	mov	r0, r1
 80042d2:	4611      	mov	r1, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	817b      	strh	r3, [r7, #10]
 80042da:	460b      	mov	r3, r1
 80042dc:	813b      	strh	r3, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f878 	bl	80043f4 <I2C_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004318:	d103      	bne.n	8004322 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e05f      	b.n	80043e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004326:	897b      	ldrh	r3, [r7, #10]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	492d      	ldr	r1, [pc, #180]	; (80043f0 <I2C_RequestMemoryWrite+0x128>)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f8b0 	bl	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e04c      	b.n	80043e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	6a39      	ldr	r1, [r7, #32]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f91a 	bl	80045a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b04      	cmp	r3, #4
 8004378:	d107      	bne.n	800438a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e02b      	b.n	80043e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004394:	893b      	ldrh	r3, [r7, #8]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	611a      	str	r2, [r3, #16]
 800439e:	e021      	b.n	80043e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043a0:	893b      	ldrh	r3, [r7, #8]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	6a39      	ldr	r1, [r7, #32]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f8f4 	bl	80045a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00d      	beq.n	80043da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d107      	bne.n	80043d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e005      	b.n	80043e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043da:	893b      	ldrh	r3, [r7, #8]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	00010002 	.word	0x00010002

080043f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004404:	e025      	b.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440c:	d021      	beq.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fd ff13 	bl	8002238 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d116      	bne.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e023      	b.n	800449a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d10d      	bne.n	8004478 <I2C_WaitOnFlagUntilTimeout+0x84>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4013      	ands	r3, r2
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf0c      	ite	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	2300      	movne	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	e00c      	b.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d0b6      	beq.n	8004406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044b0:	e051      	b.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c0:	d123      	bne.n	800450a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0204 	orr.w	r2, r3, #4
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e046      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004510:	d021      	beq.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fd fe91 	bl	8002238 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e020      	b.n	8004598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10c      	bne.n	800457a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	43da      	mvns	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	e00b      	b.n	8004592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	43da      	mvns	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4013      	ands	r3, r2
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d18d      	bne.n	80044b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ac:	e02d      	b.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f8ce 	bl	8004750 <I2C_IsAcknowledgeFailed>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e02d      	b.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c4:	d021      	beq.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c6:	f7fd fe37 	bl	8002238 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d116      	bne.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f043 0220 	orr.w	r2, r3, #32
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e007      	b.n	800461a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d1ca      	bne.n	80045ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800462e:	e02d      	b.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f88d 	bl	8004750 <I2C_IsAcknowledgeFailed>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e02d      	b.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004646:	d021      	beq.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004648:	f7fd fdf6 	bl	8002238 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	429a      	cmp	r2, r3
 8004656:	d302      	bcc.n	800465e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d116      	bne.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e007      	b.n	800469c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d1ca      	bne.n	8004630 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b0:	e042      	b.n	8004738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d119      	bne.n	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0210 	mvn.w	r2, #16
 80046c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e029      	b.n	8004748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7fd fda0 	bl	8002238 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e007      	b.n	8004748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	d1b5      	bne.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d11b      	bne.n	80047a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004770:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0204 	orr.w	r2, r3, #4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0cc      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d90c      	bls.n	80047ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b65      	ldr	r3, [pc, #404]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0b8      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004804:	4b59      	ldr	r3, [pc, #356]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a58      	ldr	r2, [pc, #352]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800481c:	4b53      	ldr	r3, [pc, #332]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a52      	ldr	r2, [pc, #328]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004828:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	494d      	ldr	r1, [pc, #308]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d044      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b47      	ldr	r3, [pc, #284]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d119      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e07f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	4b3f      	ldr	r3, [pc, #252]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e067      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b37      	ldr	r3, [pc, #220]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4934      	ldr	r1, [pc, #208]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a0:	f7fd fcca 	bl	8002238 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fd fcc6 	bl	8002238 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 020c 	and.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1eb      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20c      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e032      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4916      	ldr	r1, [pc, #88]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004922:	4b12      	ldr	r3, [pc, #72]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	490e      	ldr	r1, [pc, #56]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004936:	f000 f855 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490a      	ldr	r1, [pc, #40]	; (8004970 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	4a09      	ldr	r2, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fd fc2a 	bl	80021b0 <HAL_InitTick>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00
 800496c:	40023800 	.word	0x40023800
 8004970:	08008898 	.word	0x08008898
 8004974:	2000002c 	.word	0x2000002c
 8004978:	20000030 	.word	0x20000030

0800497c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004980:	4b03      	ldr	r3, [pc, #12]	; (8004990 <HAL_RCC_GetHCLKFreq+0x14>)
 8004982:	681b      	ldr	r3, [r3, #0]
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	2000002c 	.word	0x2000002c

08004994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004998:	f7ff fff0 	bl	800497c <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	0a9b      	lsrs	r3, r3, #10
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4903      	ldr	r1, [pc, #12]	; (80049b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40023800 	.word	0x40023800
 80049b8:	080088a8 	.word	0x080088a8

080049bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049c0:	f7ff ffdc 	bl	800497c <HAL_RCC_GetHCLKFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	0b5b      	lsrs	r3, r3, #13
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	4903      	ldr	r1, [pc, #12]	; (80049e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40023800 	.word	0x40023800
 80049e0:	080088a8 	.word	0x080088a8

080049e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e8:	b0ae      	sub	sp, #184	; 0xb8
 80049ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a0a:	4bcb      	ldr	r3, [pc, #812]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	f200 8206 	bhi.w	8004e24 <HAL_RCC_GetSysClockFreq+0x440>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004e25 	.word	0x08004e25
 8004a28:	08004e25 	.word	0x08004e25
 8004a2c:	08004e25 	.word	0x08004e25
 8004a30:	08004a5d 	.word	0x08004a5d
 8004a34:	08004e25 	.word	0x08004e25
 8004a38:	08004e25 	.word	0x08004e25
 8004a3c:	08004e25 	.word	0x08004e25
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004e25 	.word	0x08004e25
 8004a48:	08004e25 	.word	0x08004e25
 8004a4c:	08004e25 	.word	0x08004e25
 8004a50:	08004c55 	.word	0x08004c55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a54:	4bb9      	ldr	r3, [pc, #740]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x358>)
 8004a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004a5a:	e1e7      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a5c:	4bb8      	ldr	r3, [pc, #736]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a62:	e1e3      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a64:	4bb4      	ldr	r3, [pc, #720]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a70:	4bb1      	ldr	r3, [pc, #708]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d071      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7c:	4bae      	ldr	r3, [pc, #696]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	099b      	lsrs	r3, r3, #6
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	f04f 0000 	mov.w	r0, #0
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	0159      	lsls	r1, r3, #5
 8004ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab4:	0150      	lsls	r0, r2, #5
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4621      	mov	r1, r4
 8004abc:	1a51      	subs	r1, r2, r1
 8004abe:	6439      	str	r1, [r7, #64]	; 0x40
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	018b      	lsls	r3, r1, #6
 8004ad8:	4641      	mov	r1, r8
 8004ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ade:	4641      	mov	r1, r8
 8004ae0:	018a      	lsls	r2, r1, #6
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	1a51      	subs	r1, r2, r1
 8004ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ae8:	4649      	mov	r1, r9
 8004aea:	eb63 0301 	sbc.w	r3, r3, r1
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004afc:	4649      	mov	r1, r9
 8004afe:	00cb      	lsls	r3, r1, #3
 8004b00:	4641      	mov	r1, r8
 8004b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b06:	4641      	mov	r1, r8
 8004b08:	00ca      	lsls	r2, r1, #3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4622      	mov	r2, r4
 8004b12:	189b      	adds	r3, r3, r2
 8004b14:	633b      	str	r3, [r7, #48]	; 0x30
 8004b16:	462b      	mov	r3, r5
 8004b18:	460a      	mov	r2, r1
 8004b1a:	eb42 0303 	adc.w	r3, r2, r3
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	024b      	lsls	r3, r1, #9
 8004b30:	4621      	mov	r1, r4
 8004b32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b36:	4621      	mov	r1, r4
 8004b38:	024a      	lsls	r2, r1, #9
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004b50:	f7fc f89a 	bl	8000c88 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b5e:	e067      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b60:	4b75      	ldr	r3, [pc, #468]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004b70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004b82:	4622      	mov	r2, r4
 8004b84:	462b      	mov	r3, r5
 8004b86:	f04f 0000 	mov.w	r0, #0
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	0159      	lsls	r1, r3, #5
 8004b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b94:	0150      	lsls	r0, r2, #5
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	1a51      	subs	r1, r2, r1
 8004b9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	018b      	lsls	r3, r1, #6
 8004bb8:	4641      	mov	r1, r8
 8004bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	018a      	lsls	r2, r1, #6
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bc8:	4649      	mov	r1, r9
 8004bca:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004be2:	4692      	mov	sl, r2
 8004be4:	469b      	mov	fp, r3
 8004be6:	4623      	mov	r3, r4
 8004be8:	eb1a 0303 	adds.w	r3, sl, r3
 8004bec:	623b      	str	r3, [r7, #32]
 8004bee:	462b      	mov	r3, r5
 8004bf0:	eb4b 0303 	adc.w	r3, fp, r3
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c02:	4629      	mov	r1, r5
 8004c04:	028b      	lsls	r3, r1, #10
 8004c06:	4621      	mov	r1, r4
 8004c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	028a      	lsls	r2, r1, #10
 8004c10:	4610      	mov	r0, r2
 8004c12:	4619      	mov	r1, r3
 8004c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c18:	2200      	movs	r2, #0
 8004c1a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c1c:	677a      	str	r2, [r7, #116]	; 0x74
 8004c1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004c22:	f7fc f831 	bl	8000c88 <__aeabi_uldivmod>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c30:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c52:	e0eb      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c54:	4b38      	ldr	r3, [pc, #224]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c60:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d06b      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6c:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	2200      	movs	r2, #0
 8004c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c80:	2300      	movs	r3, #0
 8004c82:	667b      	str	r3, [r7, #100]	; 0x64
 8004c84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c88:	4622      	mov	r2, r4
 8004c8a:	462b      	mov	r3, r5
 8004c8c:	f04f 0000 	mov.w	r0, #0
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	0159      	lsls	r1, r3, #5
 8004c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c9a:	0150      	lsls	r0, r2, #5
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	1a51      	subs	r1, r2, r1
 8004ca4:	61b9      	str	r1, [r7, #24]
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	eb63 0301 	sbc.w	r3, r3, r1
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004cba:	4659      	mov	r1, fp
 8004cbc:	018b      	lsls	r3, r1, #6
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	018a      	lsls	r2, r1, #6
 8004cc8:	4651      	mov	r1, sl
 8004cca:	ebb2 0801 	subs.w	r8, r2, r1
 8004cce:	4659      	mov	r1, fp
 8004cd0:	eb63 0901 	sbc.w	r9, r3, r1
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ce0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ce4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ce8:	4690      	mov	r8, r2
 8004cea:	4699      	mov	r9, r3
 8004cec:	4623      	mov	r3, r4
 8004cee:	eb18 0303 	adds.w	r3, r8, r3
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	eb49 0303 	adc.w	r3, r9, r3
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d08:	4629      	mov	r1, r5
 8004d0a:	024b      	lsls	r3, r1, #9
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d12:	4621      	mov	r1, r4
 8004d14:	024a      	lsls	r2, r1, #9
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d1e:	2200      	movs	r2, #0
 8004d20:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004d24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d28:	f7fb ffae 	bl	8000c88 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4613      	mov	r3, r2
 8004d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d36:	e065      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x420>
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	00f42400 	.word	0x00f42400
 8004d40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d44:	4b3d      	ldr	r3, [pc, #244]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x458>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	099b      	lsrs	r3, r3, #6
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	4611      	mov	r1, r2
 8004d50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d54:	653b      	str	r3, [r7, #80]	; 0x50
 8004d56:	2300      	movs	r3, #0
 8004d58:	657b      	str	r3, [r7, #84]	; 0x54
 8004d5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004d5e:	4642      	mov	r2, r8
 8004d60:	464b      	mov	r3, r9
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f04f 0100 	mov.w	r1, #0
 8004d6a:	0159      	lsls	r1, r3, #5
 8004d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d70:	0150      	lsls	r0, r2, #5
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4641      	mov	r1, r8
 8004d78:	1a51      	subs	r1, r2, r1
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d90:	4659      	mov	r1, fp
 8004d92:	018b      	lsls	r3, r1, #6
 8004d94:	4651      	mov	r1, sl
 8004d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	018a      	lsls	r2, r1, #6
 8004d9e:	4651      	mov	r1, sl
 8004da0:	1a54      	subs	r4, r2, r1
 8004da2:	4659      	mov	r1, fp
 8004da4:	eb63 0501 	sbc.w	r5, r3, r1
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	00eb      	lsls	r3, r5, #3
 8004db2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db6:	00e2      	lsls	r2, r4, #3
 8004db8:	4614      	mov	r4, r2
 8004dba:	461d      	mov	r5, r3
 8004dbc:	4643      	mov	r3, r8
 8004dbe:	18e3      	adds	r3, r4, r3
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	eb45 0303 	adc.w	r3, r5, r3
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	028b      	lsls	r3, r1, #10
 8004dda:	4621      	mov	r1, r4
 8004ddc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004de0:	4621      	mov	r1, r4
 8004de2:	028a      	lsls	r2, r1, #10
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dec:	2200      	movs	r2, #0
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004df2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004df6:	f7fb ff47 	bl	8000c88 <__aeabi_uldivmod>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4613      	mov	r3, r2
 8004e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x458>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	0f1b      	lsrs	r3, r3, #28
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e22:	e003      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	37b8      	adds	r7, #184	; 0xb8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00f42400 	.word	0x00f42400

08004e44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e28d      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8083 	beq.w	8004f6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e64:	4b94      	ldr	r3, [pc, #592]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d019      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e70:	4b91      	ldr	r3, [pc, #580]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e7c:	4b8e      	ldr	r3, [pc, #568]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e88:	d00c      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8a:	4b8b      	ldr	r3, [pc, #556]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d112      	bne.n	8004ebc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e96:	4b88      	ldr	r3, [pc, #544]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea2:	d10b      	bne.n	8004ebc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea4:	4b84      	ldr	r3, [pc, #528]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d05b      	beq.n	8004f68 <HAL_RCC_OscConfig+0x124>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d157      	bne.n	8004f68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e25a      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d106      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x90>
 8004ec6:	4b7c      	ldr	r3, [pc, #496]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a7b      	ldr	r2, [pc, #492]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e01d      	b.n	8004f10 <HAL_RCC_OscConfig+0xcc>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0xb4>
 8004ede:	4b76      	ldr	r3, [pc, #472]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a75      	ldr	r2, [pc, #468]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b73      	ldr	r3, [pc, #460]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a72      	ldr	r2, [pc, #456]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCC_OscConfig+0xcc>
 8004ef8:	4b6f      	ldr	r3, [pc, #444]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a6e      	ldr	r2, [pc, #440]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b6c      	ldr	r3, [pc, #432]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a6b      	ldr	r2, [pc, #428]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d013      	beq.n	8004f40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd f98e 	bl	8002238 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fd f98a 	bl	8002238 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	; 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e21f      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f32:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0xdc>
 8004f3e:	e014      	b.n	8004f6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd f97a 	bl	8002238 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fd f976 	bl	8002238 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e20b      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5a:	4b57      	ldr	r3, [pc, #348]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x104>
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d06f      	beq.n	8005056 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f76:	4b50      	ldr	r3, [pc, #320]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d017      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f82:	4b4d      	ldr	r3, [pc, #308]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d105      	bne.n	8004f9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f8e:	4b4a      	ldr	r3, [pc, #296]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f9a:	4b47      	ldr	r3, [pc, #284]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004fa2:	2b0c      	cmp	r3, #12
 8004fa4:	d11c      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa6:	4b44      	ldr	r3, [pc, #272]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d116      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb2:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <HAL_RCC_OscConfig+0x186>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d001      	beq.n	8004fca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e1d3      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fca:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4937      	ldr	r1, [pc, #220]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fde:	e03a      	b.n	8005056 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d020      	beq.n	800502a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe8:	4b34      	ldr	r3, [pc, #208]	; (80050bc <HAL_RCC_OscConfig+0x278>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7fd f923 	bl	8002238 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff6:	f7fd f91f 	bl	8002238 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e1b4      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005008:	4b2b      	ldr	r3, [pc, #172]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005014:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4925      	ldr	r1, [pc, #148]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 8005024:	4313      	orrs	r3, r2
 8005026:	600b      	str	r3, [r1, #0]
 8005028:	e015      	b.n	8005056 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <HAL_RCC_OscConfig+0x278>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd f902 	bl	8002238 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005038:	f7fd f8fe 	bl	8002238 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e193      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504a:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d036      	beq.n	80050d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d016      	beq.n	8005098 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506a:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 800506c:	2201      	movs	r2, #1
 800506e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005070:	f7fd f8e2 	bl	8002238 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005078:	f7fd f8de 	bl	8002238 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e173      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCC_OscConfig+0x274>)
 800508c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x234>
 8005096:	e01b      	b.n	80050d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005098:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_RCC_OscConfig+0x27c>)
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509e:	f7fd f8cb 	bl	8002238 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a4:	e00e      	b.n	80050c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a6:	f7fd f8c7 	bl	8002238 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d907      	bls.n	80050c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e15c      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
 80050b8:	40023800 	.word	0x40023800
 80050bc:	42470000 	.word	0x42470000
 80050c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	4b8a      	ldr	r3, [pc, #552]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 80050c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1ea      	bne.n	80050a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8097 	beq.w	800520c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e2:	4b83      	ldr	r3, [pc, #524]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10f      	bne.n	800510e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	4b7f      	ldr	r3, [pc, #508]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	4a7e      	ldr	r2, [pc, #504]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6413      	str	r3, [r2, #64]	; 0x40
 80050fe:	4b7c      	ldr	r3, [pc, #496]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800510a:	2301      	movs	r3, #1
 800510c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510e:	4b79      	ldr	r3, [pc, #484]	; (80052f4 <HAL_RCC_OscConfig+0x4b0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d118      	bne.n	800514c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800511a:	4b76      	ldr	r3, [pc, #472]	; (80052f4 <HAL_RCC_OscConfig+0x4b0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a75      	ldr	r2, [pc, #468]	; (80052f4 <HAL_RCC_OscConfig+0x4b0>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005126:	f7fd f887 	bl	8002238 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512e:	f7fd f883 	bl	8002238 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e118      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	4b6c      	ldr	r3, [pc, #432]	; (80052f4 <HAL_RCC_OscConfig+0x4b0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f0      	beq.n	800512e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d106      	bne.n	8005162 <HAL_RCC_OscConfig+0x31e>
 8005154:	4b66      	ldr	r3, [pc, #408]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	4a65      	ldr	r2, [pc, #404]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	6713      	str	r3, [r2, #112]	; 0x70
 8005160:	e01c      	b.n	800519c <HAL_RCC_OscConfig+0x358>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b05      	cmp	r3, #5
 8005168:	d10c      	bne.n	8005184 <HAL_RCC_OscConfig+0x340>
 800516a:	4b61      	ldr	r3, [pc, #388]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a60      	ldr	r2, [pc, #384]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	6713      	str	r3, [r2, #112]	; 0x70
 8005176:	4b5e      	ldr	r3, [pc, #376]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	4a5d      	ldr	r2, [pc, #372]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	6713      	str	r3, [r2, #112]	; 0x70
 8005182:	e00b      	b.n	800519c <HAL_RCC_OscConfig+0x358>
 8005184:	4b5a      	ldr	r3, [pc, #360]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	4a59      	ldr	r2, [pc, #356]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	6713      	str	r3, [r2, #112]	; 0x70
 8005190:	4b57      	ldr	r3, [pc, #348]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	4a56      	ldr	r2, [pc, #344]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005196:	f023 0304 	bic.w	r3, r3, #4
 800519a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d015      	beq.n	80051d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7fd f848 	bl	8002238 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051aa:	e00a      	b.n	80051c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ac:	f7fd f844 	bl	8002238 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e0d7      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	4b4b      	ldr	r3, [pc, #300]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0ee      	beq.n	80051ac <HAL_RCC_OscConfig+0x368>
 80051ce:	e014      	b.n	80051fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d0:	f7fd f832 	bl	8002238 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d8:	f7fd f82e 	bl	8002238 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e0c1      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ee:	4b40      	ldr	r3, [pc, #256]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ee      	bne.n	80051d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d105      	bne.n	800520c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005200:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	4a3a      	ldr	r2, [pc, #232]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80ad 	beq.w	8005370 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005216:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b08      	cmp	r3, #8
 8005220:	d060      	beq.n	80052e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d145      	bne.n	80052b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522a:	4b33      	ldr	r3, [pc, #204]	; (80052f8 <HAL_RCC_OscConfig+0x4b4>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fd f802 	bl	8002238 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005238:	f7fc fffe 	bl	8002238 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e093      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524a:	4b29      	ldr	r3, [pc, #164]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69da      	ldr	r2, [r3, #28]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	019b      	lsls	r3, r3, #6
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	3b01      	subs	r3, #1
 8005270:	041b      	lsls	r3, r3, #16
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	061b      	lsls	r3, r3, #24
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	071b      	lsls	r3, r3, #28
 8005282:	491b      	ldr	r1, [pc, #108]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 8005284:	4313      	orrs	r3, r2
 8005286:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005288:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCC_OscConfig+0x4b4>)
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528e:	f7fc ffd3 	bl	8002238 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005296:	f7fc ffcf 	bl	8002238 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e064      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x452>
 80052b4:	e05c      	b.n	8005370 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_RCC_OscConfig+0x4b4>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fc ffbc 	bl	8002238 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fc ffb8 	bl	8002238 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e04d      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCC_OscConfig+0x4ac>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x480>
 80052e2:	e045      	b.n	8005370 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e040      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40007000 	.word	0x40007000
 80052f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <HAL_RCC_OscConfig+0x538>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d030      	beq.n	800536c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d129      	bne.n	800536c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	429a      	cmp	r2, r3
 8005324:	d122      	bne.n	800536c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800532c:	4013      	ands	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005334:	4293      	cmp	r3, r2
 8005336:	d119      	bne.n	800536c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	3b01      	subs	r3, #1
 8005346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005348:	429a      	cmp	r2, r3
 800534a:	d10f      	bne.n	800536c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d107      	bne.n	800536c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800

08005380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e03f      	b.n	8005412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fc fd58 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2224      	movs	r2, #36	; 0x24
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f929 	bl	800561c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b08a      	sub	sp, #40	; 0x28
 800541e:	af02      	add	r7, sp, #8
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	603b      	str	r3, [r7, #0]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b20      	cmp	r3, #32
 8005438:	d17c      	bne.n	8005534 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <HAL_UART_Transmit+0x2c>
 8005440:	88fb      	ldrh	r3, [r7, #6]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e075      	b.n	8005536 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_UART_Transmit+0x3e>
 8005454:	2302      	movs	r3, #2
 8005456:	e06e      	b.n	8005536 <HAL_UART_Transmit+0x11c>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2221      	movs	r2, #33	; 0x21
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800546e:	f7fc fee3 	bl	8002238 <HAL_GetTick>
 8005472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	88fa      	ldrh	r2, [r7, #6]
 8005478:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005488:	d108      	bne.n	800549c <HAL_UART_Transmit+0x82>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d104      	bne.n	800549c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	61bb      	str	r3, [r7, #24]
 800549a:	e003      	b.n	80054a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054ac:	e02a      	b.n	8005504 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2180      	movs	r1, #128	; 0x80
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f840 	bl	800553e <UART_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e036      	b.n	8005536 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10b      	bne.n	80054e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	3302      	adds	r3, #2
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	e007      	b.n	80054f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	3301      	adds	r3, #1
 80054f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1cf      	bne.n	80054ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2200      	movs	r2, #0
 8005516:	2140      	movs	r1, #64	; 0x40
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f810 	bl	800553e <UART_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e006      	b.n	8005536 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	e000      	b.n	8005536 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005534:	2302      	movs	r3, #2
  }
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b090      	sub	sp, #64	; 0x40
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800554e:	e050      	b.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005556:	d04c      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x30>
 800555e:	f7fc fe6b 	bl	8002238 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800556a:	429a      	cmp	r2, r3
 800556c:	d241      	bcs.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800558e:	637a      	str	r2, [r7, #52]	; 0x34
 8005590:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3314      	adds	r3, #20
 80055a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	613b      	str	r3, [r7, #16]
   return(result);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c2:	623a      	str	r2, [r7, #32]
 80055c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	69f9      	ldr	r1, [r7, #28]
 80055c8:	6a3a      	ldr	r2, [r7, #32]
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e5      	bne.n	80055a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e00f      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	429a      	cmp	r2, r3
 8005600:	bf0c      	ite	eq
 8005602:	2301      	moveq	r3, #1
 8005604:	2300      	movne	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	429a      	cmp	r2, r3
 800560e:	d09f      	beq.n	8005550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3740      	adds	r7, #64	; 0x40
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800561c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005620:	b0c0      	sub	sp, #256	; 0x100
 8005622:	af00      	add	r7, sp, #0
 8005624:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	68d9      	ldr	r1, [r3, #12]
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	ea40 0301 	orr.w	r3, r0, r1
 8005644:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	431a      	orrs	r2, r3
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	431a      	orrs	r2, r3
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005674:	f021 010c 	bic.w	r1, r1, #12
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005682:	430b      	orrs	r3, r1
 8005684:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	6999      	ldr	r1, [r3, #24]
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	ea40 0301 	orr.w	r3, r0, r1
 80056a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b8f      	ldr	r3, [pc, #572]	; (80058e8 <UART_SetConfig+0x2cc>)
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d005      	beq.n	80056bc <UART_SetConfig+0xa0>
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4b8d      	ldr	r3, [pc, #564]	; (80058ec <UART_SetConfig+0x2d0>)
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d104      	bne.n	80056c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056bc:	f7ff f97e 	bl	80049bc <HAL_RCC_GetPCLK2Freq>
 80056c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056c4:	e003      	b.n	80056ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056c6:	f7ff f965 	bl	8004994 <HAL_RCC_GetPCLK1Freq>
 80056ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d8:	f040 810c 	bne.w	80058f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056ee:	4622      	mov	r2, r4
 80056f0:	462b      	mov	r3, r5
 80056f2:	1891      	adds	r1, r2, r2
 80056f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80056f6:	415b      	adcs	r3, r3
 80056f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056fe:	4621      	mov	r1, r4
 8005700:	eb12 0801 	adds.w	r8, r2, r1
 8005704:	4629      	mov	r1, r5
 8005706:	eb43 0901 	adc.w	r9, r3, r1
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800571a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800571e:	4690      	mov	r8, r2
 8005720:	4699      	mov	r9, r3
 8005722:	4623      	mov	r3, r4
 8005724:	eb18 0303 	adds.w	r3, r8, r3
 8005728:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800572c:	462b      	mov	r3, r5
 800572e:	eb49 0303 	adc.w	r3, r9, r3
 8005732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005742:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005746:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800574a:	460b      	mov	r3, r1
 800574c:	18db      	adds	r3, r3, r3
 800574e:	653b      	str	r3, [r7, #80]	; 0x50
 8005750:	4613      	mov	r3, r2
 8005752:	eb42 0303 	adc.w	r3, r2, r3
 8005756:	657b      	str	r3, [r7, #84]	; 0x54
 8005758:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800575c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005760:	f7fb fa92 	bl	8000c88 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4b61      	ldr	r3, [pc, #388]	; (80058f0 <UART_SetConfig+0x2d4>)
 800576a:	fba3 2302 	umull	r2, r3, r3, r2
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	011c      	lsls	r4, r3, #4
 8005772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800577c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005780:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005784:	4642      	mov	r2, r8
 8005786:	464b      	mov	r3, r9
 8005788:	1891      	adds	r1, r2, r2
 800578a:	64b9      	str	r1, [r7, #72]	; 0x48
 800578c:	415b      	adcs	r3, r3
 800578e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005790:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005794:	4641      	mov	r1, r8
 8005796:	eb12 0a01 	adds.w	sl, r2, r1
 800579a:	4649      	mov	r1, r9
 800579c:	eb43 0b01 	adc.w	fp, r3, r1
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057b4:	4692      	mov	sl, r2
 80057b6:	469b      	mov	fp, r3
 80057b8:	4643      	mov	r3, r8
 80057ba:	eb1a 0303 	adds.w	r3, sl, r3
 80057be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057c2:	464b      	mov	r3, r9
 80057c4:	eb4b 0303 	adc.w	r3, fp, r3
 80057c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057e0:	460b      	mov	r3, r1
 80057e2:	18db      	adds	r3, r3, r3
 80057e4:	643b      	str	r3, [r7, #64]	; 0x40
 80057e6:	4613      	mov	r3, r2
 80057e8:	eb42 0303 	adc.w	r3, r2, r3
 80057ec:	647b      	str	r3, [r7, #68]	; 0x44
 80057ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057f6:	f7fb fa47 	bl	8000c88 <__aeabi_uldivmod>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4611      	mov	r1, r2
 8005800:	4b3b      	ldr	r3, [pc, #236]	; (80058f0 <UART_SetConfig+0x2d4>)
 8005802:	fba3 2301 	umull	r2, r3, r3, r1
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	2264      	movs	r2, #100	; 0x64
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	1acb      	subs	r3, r1, r3
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005816:	4b36      	ldr	r3, [pc, #216]	; (80058f0 <UART_SetConfig+0x2d4>)
 8005818:	fba3 2302 	umull	r2, r3, r3, r2
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005824:	441c      	add	r4, r3
 8005826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582a:	2200      	movs	r2, #0
 800582c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005830:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005834:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005838:	4642      	mov	r2, r8
 800583a:	464b      	mov	r3, r9
 800583c:	1891      	adds	r1, r2, r2
 800583e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005840:	415b      	adcs	r3, r3
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005844:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005848:	4641      	mov	r1, r8
 800584a:	1851      	adds	r1, r2, r1
 800584c:	6339      	str	r1, [r7, #48]	; 0x30
 800584e:	4649      	mov	r1, r9
 8005850:	414b      	adcs	r3, r1
 8005852:	637b      	str	r3, [r7, #52]	; 0x34
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005860:	4659      	mov	r1, fp
 8005862:	00cb      	lsls	r3, r1, #3
 8005864:	4651      	mov	r1, sl
 8005866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800586a:	4651      	mov	r1, sl
 800586c:	00ca      	lsls	r2, r1, #3
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	4603      	mov	r3, r0
 8005874:	4642      	mov	r2, r8
 8005876:	189b      	adds	r3, r3, r2
 8005878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800587c:	464b      	mov	r3, r9
 800587e:	460a      	mov	r2, r1
 8005880:	eb42 0303 	adc.w	r3, r2, r3
 8005884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005894:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005898:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800589c:	460b      	mov	r3, r1
 800589e:	18db      	adds	r3, r3, r3
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a2:	4613      	mov	r3, r2
 80058a4:	eb42 0303 	adc.w	r3, r2, r3
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058b2:	f7fb f9e9 	bl	8000c88 <__aeabi_uldivmod>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <UART_SetConfig+0x2d4>)
 80058bc:	fba3 1302 	umull	r1, r3, r3, r2
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	2164      	movs	r1, #100	; 0x64
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	3332      	adds	r3, #50	; 0x32
 80058ce:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <UART_SetConfig+0x2d4>)
 80058d0:	fba2 2303 	umull	r2, r3, r2, r3
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	f003 0207 	and.w	r2, r3, #7
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4422      	add	r2, r4
 80058e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058e4:	e106      	b.n	8005af4 <UART_SetConfig+0x4d8>
 80058e6:	bf00      	nop
 80058e8:	40011000 	.word	0x40011000
 80058ec:	40011400 	.word	0x40011400
 80058f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f8:	2200      	movs	r2, #0
 80058fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005902:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005906:	4642      	mov	r2, r8
 8005908:	464b      	mov	r3, r9
 800590a:	1891      	adds	r1, r2, r2
 800590c:	6239      	str	r1, [r7, #32]
 800590e:	415b      	adcs	r3, r3
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
 8005912:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005916:	4641      	mov	r1, r8
 8005918:	1854      	adds	r4, r2, r1
 800591a:	4649      	mov	r1, r9
 800591c:	eb43 0501 	adc.w	r5, r3, r1
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	00eb      	lsls	r3, r5, #3
 800592a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800592e:	00e2      	lsls	r2, r4, #3
 8005930:	4614      	mov	r4, r2
 8005932:	461d      	mov	r5, r3
 8005934:	4643      	mov	r3, r8
 8005936:	18e3      	adds	r3, r4, r3
 8005938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800593c:	464b      	mov	r3, r9
 800593e:	eb45 0303 	adc.w	r3, r5, r3
 8005942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005952:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005962:	4629      	mov	r1, r5
 8005964:	008b      	lsls	r3, r1, #2
 8005966:	4621      	mov	r1, r4
 8005968:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800596c:	4621      	mov	r1, r4
 800596e:	008a      	lsls	r2, r1, #2
 8005970:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005974:	f7fb f988 	bl	8000c88 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4b60      	ldr	r3, [pc, #384]	; (8005b00 <UART_SetConfig+0x4e4>)
 800597e:	fba3 2302 	umull	r2, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	011c      	lsls	r4, r3, #4
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598a:	2200      	movs	r2, #0
 800598c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005990:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005994:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	1891      	adds	r1, r2, r2
 800599e:	61b9      	str	r1, [r7, #24]
 80059a0:	415b      	adcs	r3, r3
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059a8:	4641      	mov	r1, r8
 80059aa:	1851      	adds	r1, r2, r1
 80059ac:	6139      	str	r1, [r7, #16]
 80059ae:	4649      	mov	r1, r9
 80059b0:	414b      	adcs	r3, r1
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059c0:	4659      	mov	r1, fp
 80059c2:	00cb      	lsls	r3, r1, #3
 80059c4:	4651      	mov	r1, sl
 80059c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ca:	4651      	mov	r1, sl
 80059cc:	00ca      	lsls	r2, r1, #3
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	4642      	mov	r2, r8
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059dc:	464b      	mov	r3, r9
 80059de:	460a      	mov	r2, r1
 80059e0:	eb42 0303 	adc.w	r3, r2, r3
 80059e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80059f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a00:	4649      	mov	r1, r9
 8005a02:	008b      	lsls	r3, r1, #2
 8005a04:	4641      	mov	r1, r8
 8005a06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a0a:	4641      	mov	r1, r8
 8005a0c:	008a      	lsls	r2, r1, #2
 8005a0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a12:	f7fb f939 	bl	8000c88 <__aeabi_uldivmod>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	4b38      	ldr	r3, [pc, #224]	; (8005b00 <UART_SetConfig+0x4e4>)
 8005a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	2264      	movs	r2, #100	; 0x64
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	1acb      	subs	r3, r1, r3
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	3332      	adds	r3, #50	; 0x32
 8005a30:	4a33      	ldr	r2, [pc, #204]	; (8005b00 <UART_SetConfig+0x4e4>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a3c:	441c      	add	r4, r3
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a42:	2200      	movs	r2, #0
 8005a44:	673b      	str	r3, [r7, #112]	; 0x70
 8005a46:	677a      	str	r2, [r7, #116]	; 0x74
 8005a48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	1891      	adds	r1, r2, r2
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	415b      	adcs	r3, r3
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	1851      	adds	r1, r2, r1
 8005a60:	6039      	str	r1, [r7, #0]
 8005a62:	4649      	mov	r1, r9
 8005a64:	414b      	adcs	r3, r1
 8005a66:	607b      	str	r3, [r7, #4]
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a74:	4659      	mov	r1, fp
 8005a76:	00cb      	lsls	r3, r1, #3
 8005a78:	4651      	mov	r1, sl
 8005a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a7e:	4651      	mov	r1, sl
 8005a80:	00ca      	lsls	r2, r1, #3
 8005a82:	4610      	mov	r0, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	4642      	mov	r2, r8
 8005a8a:	189b      	adds	r3, r3, r2
 8005a8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a8e:	464b      	mov	r3, r9
 8005a90:	460a      	mov	r2, r1
 8005a92:	eb42 0303 	adc.w	r3, r2, r3
 8005a96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8005aa2:	667a      	str	r2, [r7, #100]	; 0x64
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	008b      	lsls	r3, r1, #2
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aba:	4641      	mov	r1, r8
 8005abc:	008a      	lsls	r2, r1, #2
 8005abe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ac2:	f7fb f8e1 	bl	8000c88 <__aeabi_uldivmod>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <UART_SetConfig+0x4e4>)
 8005acc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	2164      	movs	r1, #100	; 0x64
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	3332      	adds	r3, #50	; 0x32
 8005ade:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <UART_SetConfig+0x4e4>)
 8005ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	f003 020f 	and.w	r2, r3, #15
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4422      	add	r2, r4
 8005af2:	609a      	str	r2, [r3, #8]
}
 8005af4:	bf00      	nop
 8005af6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005afa:	46bd      	mov	sp, r7
 8005afc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b00:	51eb851f 	.word	0x51eb851f

08005b04 <__cvt>:
 8005b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b08:	ec55 4b10 	vmov	r4, r5, d0
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	460e      	mov	r6, r1
 8005b10:	4619      	mov	r1, r3
 8005b12:	462b      	mov	r3, r5
 8005b14:	bfbb      	ittet	lt
 8005b16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b1a:	461d      	movlt	r5, r3
 8005b1c:	2300      	movge	r3, #0
 8005b1e:	232d      	movlt	r3, #45	; 0x2d
 8005b20:	700b      	strb	r3, [r1, #0]
 8005b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b28:	4691      	mov	r9, r2
 8005b2a:	f023 0820 	bic.w	r8, r3, #32
 8005b2e:	bfbc      	itt	lt
 8005b30:	4622      	movlt	r2, r4
 8005b32:	4614      	movlt	r4, r2
 8005b34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b38:	d005      	beq.n	8005b46 <__cvt+0x42>
 8005b3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b3e:	d100      	bne.n	8005b42 <__cvt+0x3e>
 8005b40:	3601      	adds	r6, #1
 8005b42:	2102      	movs	r1, #2
 8005b44:	e000      	b.n	8005b48 <__cvt+0x44>
 8005b46:	2103      	movs	r1, #3
 8005b48:	ab03      	add	r3, sp, #12
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	ab02      	add	r3, sp, #8
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	ec45 4b10 	vmov	d0, r4, r5
 8005b54:	4653      	mov	r3, sl
 8005b56:	4632      	mov	r2, r6
 8005b58:	f000 fdee 	bl	8006738 <_dtoa_r>
 8005b5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b60:	4607      	mov	r7, r0
 8005b62:	d102      	bne.n	8005b6a <__cvt+0x66>
 8005b64:	f019 0f01 	tst.w	r9, #1
 8005b68:	d022      	beq.n	8005bb0 <__cvt+0xac>
 8005b6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b6e:	eb07 0906 	add.w	r9, r7, r6
 8005b72:	d110      	bne.n	8005b96 <__cvt+0x92>
 8005b74:	783b      	ldrb	r3, [r7, #0]
 8005b76:	2b30      	cmp	r3, #48	; 0x30
 8005b78:	d10a      	bne.n	8005b90 <__cvt+0x8c>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7fa ffc1 	bl	8000b08 <__aeabi_dcmpeq>
 8005b86:	b918      	cbnz	r0, 8005b90 <__cvt+0x8c>
 8005b88:	f1c6 0601 	rsb	r6, r6, #1
 8005b8c:	f8ca 6000 	str.w	r6, [sl]
 8005b90:	f8da 3000 	ldr.w	r3, [sl]
 8005b94:	4499      	add	r9, r3
 8005b96:	2200      	movs	r2, #0
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	f7fa ffb3 	bl	8000b08 <__aeabi_dcmpeq>
 8005ba2:	b108      	cbz	r0, 8005ba8 <__cvt+0xa4>
 8005ba4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ba8:	2230      	movs	r2, #48	; 0x30
 8005baa:	9b03      	ldr	r3, [sp, #12]
 8005bac:	454b      	cmp	r3, r9
 8005bae:	d307      	bcc.n	8005bc0 <__cvt+0xbc>
 8005bb0:	9b03      	ldr	r3, [sp, #12]
 8005bb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bb4:	1bdb      	subs	r3, r3, r7
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	b004      	add	sp, #16
 8005bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	9103      	str	r1, [sp, #12]
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	e7f0      	b.n	8005baa <__cvt+0xa6>

08005bc8 <__exponent>:
 8005bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	bfb8      	it	lt
 8005bd0:	4249      	neglt	r1, r1
 8005bd2:	f803 2b02 	strb.w	r2, [r3], #2
 8005bd6:	bfb4      	ite	lt
 8005bd8:	222d      	movlt	r2, #45	; 0x2d
 8005bda:	222b      	movge	r2, #43	; 0x2b
 8005bdc:	2909      	cmp	r1, #9
 8005bde:	7042      	strb	r2, [r0, #1]
 8005be0:	dd2a      	ble.n	8005c38 <__exponent+0x70>
 8005be2:	f10d 0207 	add.w	r2, sp, #7
 8005be6:	4617      	mov	r7, r2
 8005be8:	260a      	movs	r6, #10
 8005bea:	4694      	mov	ip, r2
 8005bec:	fb91 f5f6 	sdiv	r5, r1, r6
 8005bf0:	fb06 1415 	mls	r4, r6, r5, r1
 8005bf4:	3430      	adds	r4, #48	; 0x30
 8005bf6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	2c63      	cmp	r4, #99	; 0x63
 8005bfe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005c02:	4629      	mov	r1, r5
 8005c04:	dcf1      	bgt.n	8005bea <__exponent+0x22>
 8005c06:	3130      	adds	r1, #48	; 0x30
 8005c08:	f1ac 0402 	sub.w	r4, ip, #2
 8005c0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005c10:	1c41      	adds	r1, r0, #1
 8005c12:	4622      	mov	r2, r4
 8005c14:	42ba      	cmp	r2, r7
 8005c16:	d30a      	bcc.n	8005c2e <__exponent+0x66>
 8005c18:	f10d 0209 	add.w	r2, sp, #9
 8005c1c:	eba2 020c 	sub.w	r2, r2, ip
 8005c20:	42bc      	cmp	r4, r7
 8005c22:	bf88      	it	hi
 8005c24:	2200      	movhi	r2, #0
 8005c26:	4413      	add	r3, r2
 8005c28:	1a18      	subs	r0, r3, r0
 8005c2a:	b003      	add	sp, #12
 8005c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005c32:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005c36:	e7ed      	b.n	8005c14 <__exponent+0x4c>
 8005c38:	2330      	movs	r3, #48	; 0x30
 8005c3a:	3130      	adds	r1, #48	; 0x30
 8005c3c:	7083      	strb	r3, [r0, #2]
 8005c3e:	70c1      	strb	r1, [r0, #3]
 8005c40:	1d03      	adds	r3, r0, #4
 8005c42:	e7f1      	b.n	8005c28 <__exponent+0x60>

08005c44 <_printf_float>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	ed2d 8b02 	vpush	{d8}
 8005c4c:	b08d      	sub	sp, #52	; 0x34
 8005c4e:	460c      	mov	r4, r1
 8005c50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c54:	4616      	mov	r6, r2
 8005c56:	461f      	mov	r7, r3
 8005c58:	4605      	mov	r5, r0
 8005c5a:	f000 fca3 	bl	80065a4 <_localeconv_r>
 8005c5e:	f8d0 a000 	ldr.w	sl, [r0]
 8005c62:	4650      	mov	r0, sl
 8005c64:	f7fa fb24 	bl	80002b0 <strlen>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	9305      	str	r3, [sp, #20]
 8005c70:	f8d8 3000 	ldr.w	r3, [r8]
 8005c74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c78:	3307      	adds	r3, #7
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	f103 0208 	add.w	r2, r3, #8
 8005c82:	f8c8 2000 	str.w	r2, [r8]
 8005c86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c8e:	9307      	str	r3, [sp, #28]
 8005c90:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c94:	ee08 0a10 	vmov	s16, r0
 8005c98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ca0:	4b9e      	ldr	r3, [pc, #632]	; (8005f1c <_printf_float+0x2d8>)
 8005ca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca6:	f7fa ff61 	bl	8000b6c <__aeabi_dcmpun>
 8005caa:	bb88      	cbnz	r0, 8005d10 <_printf_float+0xcc>
 8005cac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cb0:	4b9a      	ldr	r3, [pc, #616]	; (8005f1c <_printf_float+0x2d8>)
 8005cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cb6:	f7fa ff3b 	bl	8000b30 <__aeabi_dcmple>
 8005cba:	bb48      	cbnz	r0, 8005d10 <_printf_float+0xcc>
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	f7fa ff2a 	bl	8000b1c <__aeabi_dcmplt>
 8005cc8:	b110      	cbz	r0, 8005cd0 <_printf_float+0x8c>
 8005cca:	232d      	movs	r3, #45	; 0x2d
 8005ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd0:	4a93      	ldr	r2, [pc, #588]	; (8005f20 <_printf_float+0x2dc>)
 8005cd2:	4b94      	ldr	r3, [pc, #592]	; (8005f24 <_printf_float+0x2e0>)
 8005cd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005cd8:	bf94      	ite	ls
 8005cda:	4690      	movls	r8, r2
 8005cdc:	4698      	movhi	r8, r3
 8005cde:	2303      	movs	r3, #3
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	9b05      	ldr	r3, [sp, #20]
 8005ce4:	f023 0304 	bic.w	r3, r3, #4
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	f04f 0900 	mov.w	r9, #0
 8005cee:	9700      	str	r7, [sp, #0]
 8005cf0:	4633      	mov	r3, r6
 8005cf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 f9da 	bl	80060b0 <_printf_common>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f040 8090 	bne.w	8005e22 <_printf_float+0x1de>
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d06:	b00d      	add	sp, #52	; 0x34
 8005d08:	ecbd 8b02 	vpop	{d8}
 8005d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d10:	4642      	mov	r2, r8
 8005d12:	464b      	mov	r3, r9
 8005d14:	4640      	mov	r0, r8
 8005d16:	4649      	mov	r1, r9
 8005d18:	f7fa ff28 	bl	8000b6c <__aeabi_dcmpun>
 8005d1c:	b140      	cbz	r0, 8005d30 <_printf_float+0xec>
 8005d1e:	464b      	mov	r3, r9
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bfbc      	itt	lt
 8005d24:	232d      	movlt	r3, #45	; 0x2d
 8005d26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d2a:	4a7f      	ldr	r2, [pc, #508]	; (8005f28 <_printf_float+0x2e4>)
 8005d2c:	4b7f      	ldr	r3, [pc, #508]	; (8005f2c <_printf_float+0x2e8>)
 8005d2e:	e7d1      	b.n	8005cd4 <_printf_float+0x90>
 8005d30:	6863      	ldr	r3, [r4, #4]
 8005d32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d36:	9206      	str	r2, [sp, #24]
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	d13f      	bne.n	8005dbc <_printf_float+0x178>
 8005d3c:	2306      	movs	r3, #6
 8005d3e:	6063      	str	r3, [r4, #4]
 8005d40:	9b05      	ldr	r3, [sp, #20]
 8005d42:	6861      	ldr	r1, [r4, #4]
 8005d44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9303      	str	r3, [sp, #12]
 8005d4c:	ab0a      	add	r3, sp, #40	; 0x28
 8005d4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d52:	ab09      	add	r3, sp, #36	; 0x24
 8005d54:	ec49 8b10 	vmov	d0, r8, r9
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	6022      	str	r2, [r4, #0]
 8005d5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d60:	4628      	mov	r0, r5
 8005d62:	f7ff fecf 	bl	8005b04 <__cvt>
 8005d66:	9b06      	ldr	r3, [sp, #24]
 8005d68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d6a:	2b47      	cmp	r3, #71	; 0x47
 8005d6c:	4680      	mov	r8, r0
 8005d6e:	d108      	bne.n	8005d82 <_printf_float+0x13e>
 8005d70:	1cc8      	adds	r0, r1, #3
 8005d72:	db02      	blt.n	8005d7a <_printf_float+0x136>
 8005d74:	6863      	ldr	r3, [r4, #4]
 8005d76:	4299      	cmp	r1, r3
 8005d78:	dd41      	ble.n	8005dfe <_printf_float+0x1ba>
 8005d7a:	f1ab 0302 	sub.w	r3, fp, #2
 8005d7e:	fa5f fb83 	uxtb.w	fp, r3
 8005d82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d86:	d820      	bhi.n	8005dca <_printf_float+0x186>
 8005d88:	3901      	subs	r1, #1
 8005d8a:	465a      	mov	r2, fp
 8005d8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d90:	9109      	str	r1, [sp, #36]	; 0x24
 8005d92:	f7ff ff19 	bl	8005bc8 <__exponent>
 8005d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d98:	1813      	adds	r3, r2, r0
 8005d9a:	2a01      	cmp	r2, #1
 8005d9c:	4681      	mov	r9, r0
 8005d9e:	6123      	str	r3, [r4, #16]
 8005da0:	dc02      	bgt.n	8005da8 <_printf_float+0x164>
 8005da2:	6822      	ldr	r2, [r4, #0]
 8005da4:	07d2      	lsls	r2, r2, #31
 8005da6:	d501      	bpl.n	8005dac <_printf_float+0x168>
 8005da8:	3301      	adds	r3, #1
 8005daa:	6123      	str	r3, [r4, #16]
 8005dac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d09c      	beq.n	8005cee <_printf_float+0xaa>
 8005db4:	232d      	movs	r3, #45	; 0x2d
 8005db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dba:	e798      	b.n	8005cee <_printf_float+0xaa>
 8005dbc:	9a06      	ldr	r2, [sp, #24]
 8005dbe:	2a47      	cmp	r2, #71	; 0x47
 8005dc0:	d1be      	bne.n	8005d40 <_printf_float+0xfc>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1bc      	bne.n	8005d40 <_printf_float+0xfc>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e7b9      	b.n	8005d3e <_printf_float+0xfa>
 8005dca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005dce:	d118      	bne.n	8005e02 <_printf_float+0x1be>
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	dd0b      	ble.n	8005dee <_printf_float+0x1aa>
 8005dd6:	6121      	str	r1, [r4, #16]
 8005dd8:	b913      	cbnz	r3, 8005de0 <_printf_float+0x19c>
 8005dda:	6822      	ldr	r2, [r4, #0]
 8005ddc:	07d0      	lsls	r0, r2, #31
 8005dde:	d502      	bpl.n	8005de6 <_printf_float+0x1a2>
 8005de0:	3301      	adds	r3, #1
 8005de2:	440b      	add	r3, r1
 8005de4:	6123      	str	r3, [r4, #16]
 8005de6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005de8:	f04f 0900 	mov.w	r9, #0
 8005dec:	e7de      	b.n	8005dac <_printf_float+0x168>
 8005dee:	b913      	cbnz	r3, 8005df6 <_printf_float+0x1b2>
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	07d2      	lsls	r2, r2, #31
 8005df4:	d501      	bpl.n	8005dfa <_printf_float+0x1b6>
 8005df6:	3302      	adds	r3, #2
 8005df8:	e7f4      	b.n	8005de4 <_printf_float+0x1a0>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e7f2      	b.n	8005de4 <_printf_float+0x1a0>
 8005dfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e04:	4299      	cmp	r1, r3
 8005e06:	db05      	blt.n	8005e14 <_printf_float+0x1d0>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	6121      	str	r1, [r4, #16]
 8005e0c:	07d8      	lsls	r0, r3, #31
 8005e0e:	d5ea      	bpl.n	8005de6 <_printf_float+0x1a2>
 8005e10:	1c4b      	adds	r3, r1, #1
 8005e12:	e7e7      	b.n	8005de4 <_printf_float+0x1a0>
 8005e14:	2900      	cmp	r1, #0
 8005e16:	bfd4      	ite	le
 8005e18:	f1c1 0202 	rsble	r2, r1, #2
 8005e1c:	2201      	movgt	r2, #1
 8005e1e:	4413      	add	r3, r2
 8005e20:	e7e0      	b.n	8005de4 <_printf_float+0x1a0>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	055a      	lsls	r2, r3, #21
 8005e26:	d407      	bmi.n	8005e38 <_printf_float+0x1f4>
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	4642      	mov	r2, r8
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4628      	mov	r0, r5
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	d12c      	bne.n	8005e90 <_printf_float+0x24c>
 8005e36:	e764      	b.n	8005d02 <_printf_float+0xbe>
 8005e38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e3c:	f240 80e0 	bls.w	8006000 <_printf_float+0x3bc>
 8005e40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e44:	2200      	movs	r2, #0
 8005e46:	2300      	movs	r3, #0
 8005e48:	f7fa fe5e 	bl	8000b08 <__aeabi_dcmpeq>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d034      	beq.n	8005eba <_printf_float+0x276>
 8005e50:	4a37      	ldr	r2, [pc, #220]	; (8005f30 <_printf_float+0x2ec>)
 8005e52:	2301      	movs	r3, #1
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f af51 	beq.w	8005d02 <_printf_float+0xbe>
 8005e60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e64:	429a      	cmp	r2, r3
 8005e66:	db02      	blt.n	8005e6e <_printf_float+0x22a>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	07d8      	lsls	r0, r3, #31
 8005e6c:	d510      	bpl.n	8005e90 <_printf_float+0x24c>
 8005e6e:	ee18 3a10 	vmov	r3, s16
 8005e72:	4652      	mov	r2, sl
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f43f af41 	beq.w	8005d02 <_printf_float+0xbe>
 8005e80:	f04f 0800 	mov.w	r8, #0
 8005e84:	f104 091a 	add.w	r9, r4, #26
 8005e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	4543      	cmp	r3, r8
 8005e8e:	dc09      	bgt.n	8005ea4 <_printf_float+0x260>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	079b      	lsls	r3, r3, #30
 8005e94:	f100 8107 	bmi.w	80060a6 <_printf_float+0x462>
 8005e98:	68e0      	ldr	r0, [r4, #12]
 8005e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e9c:	4298      	cmp	r0, r3
 8005e9e:	bfb8      	it	lt
 8005ea0:	4618      	movlt	r0, r3
 8005ea2:	e730      	b.n	8005d06 <_printf_float+0xc2>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	464a      	mov	r2, r9
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	4628      	mov	r0, r5
 8005eac:	47b8      	blx	r7
 8005eae:	3001      	adds	r0, #1
 8005eb0:	f43f af27 	beq.w	8005d02 <_printf_float+0xbe>
 8005eb4:	f108 0801 	add.w	r8, r8, #1
 8005eb8:	e7e6      	b.n	8005e88 <_printf_float+0x244>
 8005eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dc39      	bgt.n	8005f34 <_printf_float+0x2f0>
 8005ec0:	4a1b      	ldr	r2, [pc, #108]	; (8005f30 <_printf_float+0x2ec>)
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f af19 	beq.w	8005d02 <_printf_float+0xbe>
 8005ed0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	d102      	bne.n	8005ede <_printf_float+0x29a>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	07d9      	lsls	r1, r3, #31
 8005edc:	d5d8      	bpl.n	8005e90 <_printf_float+0x24c>
 8005ede:	ee18 3a10 	vmov	r3, s16
 8005ee2:	4652      	mov	r2, sl
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b8      	blx	r7
 8005eea:	3001      	adds	r0, #1
 8005eec:	f43f af09 	beq.w	8005d02 <_printf_float+0xbe>
 8005ef0:	f04f 0900 	mov.w	r9, #0
 8005ef4:	f104 0a1a 	add.w	sl, r4, #26
 8005ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efa:	425b      	negs	r3, r3
 8005efc:	454b      	cmp	r3, r9
 8005efe:	dc01      	bgt.n	8005f04 <_printf_float+0x2c0>
 8005f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f02:	e792      	b.n	8005e2a <_printf_float+0x1e6>
 8005f04:	2301      	movs	r3, #1
 8005f06:	4652      	mov	r2, sl
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f aef7 	beq.w	8005d02 <_printf_float+0xbe>
 8005f14:	f109 0901 	add.w	r9, r9, #1
 8005f18:	e7ee      	b.n	8005ef8 <_printf_float+0x2b4>
 8005f1a:	bf00      	nop
 8005f1c:	7fefffff 	.word	0x7fefffff
 8005f20:	080088b0 	.word	0x080088b0
 8005f24:	080088b4 	.word	0x080088b4
 8005f28:	080088b8 	.word	0x080088b8
 8005f2c:	080088bc 	.word	0x080088bc
 8005f30:	080088c0 	.word	0x080088c0
 8005f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	bfa8      	it	ge
 8005f3c:	461a      	movge	r2, r3
 8005f3e:	2a00      	cmp	r2, #0
 8005f40:	4691      	mov	r9, r2
 8005f42:	dc37      	bgt.n	8005fb4 <_printf_float+0x370>
 8005f44:	f04f 0b00 	mov.w	fp, #0
 8005f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f4c:	f104 021a 	add.w	r2, r4, #26
 8005f50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f52:	9305      	str	r3, [sp, #20]
 8005f54:	eba3 0309 	sub.w	r3, r3, r9
 8005f58:	455b      	cmp	r3, fp
 8005f5a:	dc33      	bgt.n	8005fc4 <_printf_float+0x380>
 8005f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f60:	429a      	cmp	r2, r3
 8005f62:	db3b      	blt.n	8005fdc <_printf_float+0x398>
 8005f64:	6823      	ldr	r3, [r4, #0]
 8005f66:	07da      	lsls	r2, r3, #31
 8005f68:	d438      	bmi.n	8005fdc <_printf_float+0x398>
 8005f6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f6e:	eba2 0903 	sub.w	r9, r2, r3
 8005f72:	9b05      	ldr	r3, [sp, #20]
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	4591      	cmp	r9, r2
 8005f78:	bfa8      	it	ge
 8005f7a:	4691      	movge	r9, r2
 8005f7c:	f1b9 0f00 	cmp.w	r9, #0
 8005f80:	dc35      	bgt.n	8005fee <_printf_float+0x3aa>
 8005f82:	f04f 0800 	mov.w	r8, #0
 8005f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f8a:	f104 0a1a 	add.w	sl, r4, #26
 8005f8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	eba3 0309 	sub.w	r3, r3, r9
 8005f98:	4543      	cmp	r3, r8
 8005f9a:	f77f af79 	ble.w	8005e90 <_printf_float+0x24c>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	4652      	mov	r2, sl
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f aeaa 	beq.w	8005d02 <_printf_float+0xbe>
 8005fae:	f108 0801 	add.w	r8, r8, #1
 8005fb2:	e7ec      	b.n	8005f8e <_printf_float+0x34a>
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4642      	mov	r2, r8
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d1c0      	bne.n	8005f44 <_printf_float+0x300>
 8005fc2:	e69e      	b.n	8005d02 <_printf_float+0xbe>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	9205      	str	r2, [sp, #20]
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f ae97 	beq.w	8005d02 <_printf_float+0xbe>
 8005fd4:	9a05      	ldr	r2, [sp, #20]
 8005fd6:	f10b 0b01 	add.w	fp, fp, #1
 8005fda:	e7b9      	b.n	8005f50 <_printf_float+0x30c>
 8005fdc:	ee18 3a10 	vmov	r3, s16
 8005fe0:	4652      	mov	r2, sl
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	47b8      	blx	r7
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d1be      	bne.n	8005f6a <_printf_float+0x326>
 8005fec:	e689      	b.n	8005d02 <_printf_float+0xbe>
 8005fee:	9a05      	ldr	r2, [sp, #20]
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	4442      	add	r2, r8
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d1c1      	bne.n	8005f82 <_printf_float+0x33e>
 8005ffe:	e680      	b.n	8005d02 <_printf_float+0xbe>
 8006000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006002:	2a01      	cmp	r2, #1
 8006004:	dc01      	bgt.n	800600a <_printf_float+0x3c6>
 8006006:	07db      	lsls	r3, r3, #31
 8006008:	d53a      	bpl.n	8006080 <_printf_float+0x43c>
 800600a:	2301      	movs	r3, #1
 800600c:	4642      	mov	r2, r8
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	f43f ae74 	beq.w	8005d02 <_printf_float+0xbe>
 800601a:	ee18 3a10 	vmov	r3, s16
 800601e:	4652      	mov	r2, sl
 8006020:	4631      	mov	r1, r6
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	f43f ae6b 	beq.w	8005d02 <_printf_float+0xbe>
 800602c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006030:	2200      	movs	r2, #0
 8006032:	2300      	movs	r3, #0
 8006034:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006038:	f7fa fd66 	bl	8000b08 <__aeabi_dcmpeq>
 800603c:	b9d8      	cbnz	r0, 8006076 <_printf_float+0x432>
 800603e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006042:	f108 0201 	add.w	r2, r8, #1
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	d10e      	bne.n	800606e <_printf_float+0x42a>
 8006050:	e657      	b.n	8005d02 <_printf_float+0xbe>
 8006052:	2301      	movs	r3, #1
 8006054:	4652      	mov	r2, sl
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	f43f ae50 	beq.w	8005d02 <_printf_float+0xbe>
 8006062:	f108 0801 	add.w	r8, r8, #1
 8006066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006068:	3b01      	subs	r3, #1
 800606a:	4543      	cmp	r3, r8
 800606c:	dcf1      	bgt.n	8006052 <_printf_float+0x40e>
 800606e:	464b      	mov	r3, r9
 8006070:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006074:	e6da      	b.n	8005e2c <_printf_float+0x1e8>
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	f104 0a1a 	add.w	sl, r4, #26
 800607e:	e7f2      	b.n	8006066 <_printf_float+0x422>
 8006080:	2301      	movs	r3, #1
 8006082:	4642      	mov	r2, r8
 8006084:	e7df      	b.n	8006046 <_printf_float+0x402>
 8006086:	2301      	movs	r3, #1
 8006088:	464a      	mov	r2, r9
 800608a:	4631      	mov	r1, r6
 800608c:	4628      	mov	r0, r5
 800608e:	47b8      	blx	r7
 8006090:	3001      	adds	r0, #1
 8006092:	f43f ae36 	beq.w	8005d02 <_printf_float+0xbe>
 8006096:	f108 0801 	add.w	r8, r8, #1
 800609a:	68e3      	ldr	r3, [r4, #12]
 800609c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800609e:	1a5b      	subs	r3, r3, r1
 80060a0:	4543      	cmp	r3, r8
 80060a2:	dcf0      	bgt.n	8006086 <_printf_float+0x442>
 80060a4:	e6f8      	b.n	8005e98 <_printf_float+0x254>
 80060a6:	f04f 0800 	mov.w	r8, #0
 80060aa:	f104 0919 	add.w	r9, r4, #25
 80060ae:	e7f4      	b.n	800609a <_printf_float+0x456>

080060b0 <_printf_common>:
 80060b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b4:	4616      	mov	r6, r2
 80060b6:	4699      	mov	r9, r3
 80060b8:	688a      	ldr	r2, [r1, #8]
 80060ba:	690b      	ldr	r3, [r1, #16]
 80060bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060c0:	4293      	cmp	r3, r2
 80060c2:	bfb8      	it	lt
 80060c4:	4613      	movlt	r3, r2
 80060c6:	6033      	str	r3, [r6, #0]
 80060c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060cc:	4607      	mov	r7, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	b10a      	cbz	r2, 80060d6 <_printf_common+0x26>
 80060d2:	3301      	adds	r3, #1
 80060d4:	6033      	str	r3, [r6, #0]
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	0699      	lsls	r1, r3, #26
 80060da:	bf42      	ittt	mi
 80060dc:	6833      	ldrmi	r3, [r6, #0]
 80060de:	3302      	addmi	r3, #2
 80060e0:	6033      	strmi	r3, [r6, #0]
 80060e2:	6825      	ldr	r5, [r4, #0]
 80060e4:	f015 0506 	ands.w	r5, r5, #6
 80060e8:	d106      	bne.n	80060f8 <_printf_common+0x48>
 80060ea:	f104 0a19 	add.w	sl, r4, #25
 80060ee:	68e3      	ldr	r3, [r4, #12]
 80060f0:	6832      	ldr	r2, [r6, #0]
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	42ab      	cmp	r3, r5
 80060f6:	dc26      	bgt.n	8006146 <_printf_common+0x96>
 80060f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060fc:	1e13      	subs	r3, r2, #0
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	bf18      	it	ne
 8006102:	2301      	movne	r3, #1
 8006104:	0692      	lsls	r2, r2, #26
 8006106:	d42b      	bmi.n	8006160 <_printf_common+0xb0>
 8006108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800610c:	4649      	mov	r1, r9
 800610e:	4638      	mov	r0, r7
 8006110:	47c0      	blx	r8
 8006112:	3001      	adds	r0, #1
 8006114:	d01e      	beq.n	8006154 <_printf_common+0xa4>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	6922      	ldr	r2, [r4, #16]
 800611a:	f003 0306 	and.w	r3, r3, #6
 800611e:	2b04      	cmp	r3, #4
 8006120:	bf02      	ittt	eq
 8006122:	68e5      	ldreq	r5, [r4, #12]
 8006124:	6833      	ldreq	r3, [r6, #0]
 8006126:	1aed      	subeq	r5, r5, r3
 8006128:	68a3      	ldr	r3, [r4, #8]
 800612a:	bf0c      	ite	eq
 800612c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006130:	2500      	movne	r5, #0
 8006132:	4293      	cmp	r3, r2
 8006134:	bfc4      	itt	gt
 8006136:	1a9b      	subgt	r3, r3, r2
 8006138:	18ed      	addgt	r5, r5, r3
 800613a:	2600      	movs	r6, #0
 800613c:	341a      	adds	r4, #26
 800613e:	42b5      	cmp	r5, r6
 8006140:	d11a      	bne.n	8006178 <_printf_common+0xc8>
 8006142:	2000      	movs	r0, #0
 8006144:	e008      	b.n	8006158 <_printf_common+0xa8>
 8006146:	2301      	movs	r3, #1
 8006148:	4652      	mov	r2, sl
 800614a:	4649      	mov	r1, r9
 800614c:	4638      	mov	r0, r7
 800614e:	47c0      	blx	r8
 8006150:	3001      	adds	r0, #1
 8006152:	d103      	bne.n	800615c <_printf_common+0xac>
 8006154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615c:	3501      	adds	r5, #1
 800615e:	e7c6      	b.n	80060ee <_printf_common+0x3e>
 8006160:	18e1      	adds	r1, r4, r3
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	2030      	movs	r0, #48	; 0x30
 8006166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800616a:	4422      	add	r2, r4
 800616c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006174:	3302      	adds	r3, #2
 8006176:	e7c7      	b.n	8006108 <_printf_common+0x58>
 8006178:	2301      	movs	r3, #1
 800617a:	4622      	mov	r2, r4
 800617c:	4649      	mov	r1, r9
 800617e:	4638      	mov	r0, r7
 8006180:	47c0      	blx	r8
 8006182:	3001      	adds	r0, #1
 8006184:	d0e6      	beq.n	8006154 <_printf_common+0xa4>
 8006186:	3601      	adds	r6, #1
 8006188:	e7d9      	b.n	800613e <_printf_common+0x8e>
	...

0800618c <_printf_i>:
 800618c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006190:	7e0f      	ldrb	r7, [r1, #24]
 8006192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006194:	2f78      	cmp	r7, #120	; 0x78
 8006196:	4691      	mov	r9, r2
 8006198:	4680      	mov	r8, r0
 800619a:	460c      	mov	r4, r1
 800619c:	469a      	mov	sl, r3
 800619e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061a2:	d807      	bhi.n	80061b4 <_printf_i+0x28>
 80061a4:	2f62      	cmp	r7, #98	; 0x62
 80061a6:	d80a      	bhi.n	80061be <_printf_i+0x32>
 80061a8:	2f00      	cmp	r7, #0
 80061aa:	f000 80d4 	beq.w	8006356 <_printf_i+0x1ca>
 80061ae:	2f58      	cmp	r7, #88	; 0x58
 80061b0:	f000 80c0 	beq.w	8006334 <_printf_i+0x1a8>
 80061b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061bc:	e03a      	b.n	8006234 <_printf_i+0xa8>
 80061be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061c2:	2b15      	cmp	r3, #21
 80061c4:	d8f6      	bhi.n	80061b4 <_printf_i+0x28>
 80061c6:	a101      	add	r1, pc, #4	; (adr r1, 80061cc <_printf_i+0x40>)
 80061c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061cc:	08006225 	.word	0x08006225
 80061d0:	08006239 	.word	0x08006239
 80061d4:	080061b5 	.word	0x080061b5
 80061d8:	080061b5 	.word	0x080061b5
 80061dc:	080061b5 	.word	0x080061b5
 80061e0:	080061b5 	.word	0x080061b5
 80061e4:	08006239 	.word	0x08006239
 80061e8:	080061b5 	.word	0x080061b5
 80061ec:	080061b5 	.word	0x080061b5
 80061f0:	080061b5 	.word	0x080061b5
 80061f4:	080061b5 	.word	0x080061b5
 80061f8:	0800633d 	.word	0x0800633d
 80061fc:	08006265 	.word	0x08006265
 8006200:	080062f7 	.word	0x080062f7
 8006204:	080061b5 	.word	0x080061b5
 8006208:	080061b5 	.word	0x080061b5
 800620c:	0800635f 	.word	0x0800635f
 8006210:	080061b5 	.word	0x080061b5
 8006214:	08006265 	.word	0x08006265
 8006218:	080061b5 	.word	0x080061b5
 800621c:	080061b5 	.word	0x080061b5
 8006220:	080062ff 	.word	0x080062ff
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	1d1a      	adds	r2, r3, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	602a      	str	r2, [r5, #0]
 800622c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006234:	2301      	movs	r3, #1
 8006236:	e09f      	b.n	8006378 <_printf_i+0x1ec>
 8006238:	6820      	ldr	r0, [r4, #0]
 800623a:	682b      	ldr	r3, [r5, #0]
 800623c:	0607      	lsls	r7, r0, #24
 800623e:	f103 0104 	add.w	r1, r3, #4
 8006242:	6029      	str	r1, [r5, #0]
 8006244:	d501      	bpl.n	800624a <_printf_i+0xbe>
 8006246:	681e      	ldr	r6, [r3, #0]
 8006248:	e003      	b.n	8006252 <_printf_i+0xc6>
 800624a:	0646      	lsls	r6, r0, #25
 800624c:	d5fb      	bpl.n	8006246 <_printf_i+0xba>
 800624e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006252:	2e00      	cmp	r6, #0
 8006254:	da03      	bge.n	800625e <_printf_i+0xd2>
 8006256:	232d      	movs	r3, #45	; 0x2d
 8006258:	4276      	negs	r6, r6
 800625a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800625e:	485a      	ldr	r0, [pc, #360]	; (80063c8 <_printf_i+0x23c>)
 8006260:	230a      	movs	r3, #10
 8006262:	e012      	b.n	800628a <_printf_i+0xfe>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	6820      	ldr	r0, [r4, #0]
 8006268:	1d19      	adds	r1, r3, #4
 800626a:	6029      	str	r1, [r5, #0]
 800626c:	0605      	lsls	r5, r0, #24
 800626e:	d501      	bpl.n	8006274 <_printf_i+0xe8>
 8006270:	681e      	ldr	r6, [r3, #0]
 8006272:	e002      	b.n	800627a <_printf_i+0xee>
 8006274:	0641      	lsls	r1, r0, #25
 8006276:	d5fb      	bpl.n	8006270 <_printf_i+0xe4>
 8006278:	881e      	ldrh	r6, [r3, #0]
 800627a:	4853      	ldr	r0, [pc, #332]	; (80063c8 <_printf_i+0x23c>)
 800627c:	2f6f      	cmp	r7, #111	; 0x6f
 800627e:	bf0c      	ite	eq
 8006280:	2308      	moveq	r3, #8
 8006282:	230a      	movne	r3, #10
 8006284:	2100      	movs	r1, #0
 8006286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800628a:	6865      	ldr	r5, [r4, #4]
 800628c:	60a5      	str	r5, [r4, #8]
 800628e:	2d00      	cmp	r5, #0
 8006290:	bfa2      	ittt	ge
 8006292:	6821      	ldrge	r1, [r4, #0]
 8006294:	f021 0104 	bicge.w	r1, r1, #4
 8006298:	6021      	strge	r1, [r4, #0]
 800629a:	b90e      	cbnz	r6, 80062a0 <_printf_i+0x114>
 800629c:	2d00      	cmp	r5, #0
 800629e:	d04b      	beq.n	8006338 <_printf_i+0x1ac>
 80062a0:	4615      	mov	r5, r2
 80062a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80062a6:	fb03 6711 	mls	r7, r3, r1, r6
 80062aa:	5dc7      	ldrb	r7, [r0, r7]
 80062ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062b0:	4637      	mov	r7, r6
 80062b2:	42bb      	cmp	r3, r7
 80062b4:	460e      	mov	r6, r1
 80062b6:	d9f4      	bls.n	80062a2 <_printf_i+0x116>
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d10b      	bne.n	80062d4 <_printf_i+0x148>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	07de      	lsls	r6, r3, #31
 80062c0:	d508      	bpl.n	80062d4 <_printf_i+0x148>
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	6861      	ldr	r1, [r4, #4]
 80062c6:	4299      	cmp	r1, r3
 80062c8:	bfde      	ittt	le
 80062ca:	2330      	movle	r3, #48	; 0x30
 80062cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062d4:	1b52      	subs	r2, r2, r5
 80062d6:	6122      	str	r2, [r4, #16]
 80062d8:	f8cd a000 	str.w	sl, [sp]
 80062dc:	464b      	mov	r3, r9
 80062de:	aa03      	add	r2, sp, #12
 80062e0:	4621      	mov	r1, r4
 80062e2:	4640      	mov	r0, r8
 80062e4:	f7ff fee4 	bl	80060b0 <_printf_common>
 80062e8:	3001      	adds	r0, #1
 80062ea:	d14a      	bne.n	8006382 <_printf_i+0x1f6>
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062f0:	b004      	add	sp, #16
 80062f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	f043 0320 	orr.w	r3, r3, #32
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	4833      	ldr	r0, [pc, #204]	; (80063cc <_printf_i+0x240>)
 8006300:	2778      	movs	r7, #120	; 0x78
 8006302:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	6829      	ldr	r1, [r5, #0]
 800630a:	061f      	lsls	r7, r3, #24
 800630c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006310:	d402      	bmi.n	8006318 <_printf_i+0x18c>
 8006312:	065f      	lsls	r7, r3, #25
 8006314:	bf48      	it	mi
 8006316:	b2b6      	uxthmi	r6, r6
 8006318:	07df      	lsls	r7, r3, #31
 800631a:	bf48      	it	mi
 800631c:	f043 0320 	orrmi.w	r3, r3, #32
 8006320:	6029      	str	r1, [r5, #0]
 8006322:	bf48      	it	mi
 8006324:	6023      	strmi	r3, [r4, #0]
 8006326:	b91e      	cbnz	r6, 8006330 <_printf_i+0x1a4>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	f023 0320 	bic.w	r3, r3, #32
 800632e:	6023      	str	r3, [r4, #0]
 8006330:	2310      	movs	r3, #16
 8006332:	e7a7      	b.n	8006284 <_printf_i+0xf8>
 8006334:	4824      	ldr	r0, [pc, #144]	; (80063c8 <_printf_i+0x23c>)
 8006336:	e7e4      	b.n	8006302 <_printf_i+0x176>
 8006338:	4615      	mov	r5, r2
 800633a:	e7bd      	b.n	80062b8 <_printf_i+0x12c>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	6826      	ldr	r6, [r4, #0]
 8006340:	6961      	ldr	r1, [r4, #20]
 8006342:	1d18      	adds	r0, r3, #4
 8006344:	6028      	str	r0, [r5, #0]
 8006346:	0635      	lsls	r5, r6, #24
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	d501      	bpl.n	8006350 <_printf_i+0x1c4>
 800634c:	6019      	str	r1, [r3, #0]
 800634e:	e002      	b.n	8006356 <_printf_i+0x1ca>
 8006350:	0670      	lsls	r0, r6, #25
 8006352:	d5fb      	bpl.n	800634c <_printf_i+0x1c0>
 8006354:	8019      	strh	r1, [r3, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	4615      	mov	r5, r2
 800635c:	e7bc      	b.n	80062d8 <_printf_i+0x14c>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	602a      	str	r2, [r5, #0]
 8006364:	681d      	ldr	r5, [r3, #0]
 8006366:	6862      	ldr	r2, [r4, #4]
 8006368:	2100      	movs	r1, #0
 800636a:	4628      	mov	r0, r5
 800636c:	f7f9 ff50 	bl	8000210 <memchr>
 8006370:	b108      	cbz	r0, 8006376 <_printf_i+0x1ea>
 8006372:	1b40      	subs	r0, r0, r5
 8006374:	6060      	str	r0, [r4, #4]
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	6123      	str	r3, [r4, #16]
 800637a:	2300      	movs	r3, #0
 800637c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006380:	e7aa      	b.n	80062d8 <_printf_i+0x14c>
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	462a      	mov	r2, r5
 8006386:	4649      	mov	r1, r9
 8006388:	4640      	mov	r0, r8
 800638a:	47d0      	blx	sl
 800638c:	3001      	adds	r0, #1
 800638e:	d0ad      	beq.n	80062ec <_printf_i+0x160>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	079b      	lsls	r3, r3, #30
 8006394:	d413      	bmi.n	80063be <_printf_i+0x232>
 8006396:	68e0      	ldr	r0, [r4, #12]
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	4298      	cmp	r0, r3
 800639c:	bfb8      	it	lt
 800639e:	4618      	movlt	r0, r3
 80063a0:	e7a6      	b.n	80062f0 <_printf_i+0x164>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4632      	mov	r2, r6
 80063a6:	4649      	mov	r1, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	47d0      	blx	sl
 80063ac:	3001      	adds	r0, #1
 80063ae:	d09d      	beq.n	80062ec <_printf_i+0x160>
 80063b0:	3501      	adds	r5, #1
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	9903      	ldr	r1, [sp, #12]
 80063b6:	1a5b      	subs	r3, r3, r1
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	dcf2      	bgt.n	80063a2 <_printf_i+0x216>
 80063bc:	e7eb      	b.n	8006396 <_printf_i+0x20a>
 80063be:	2500      	movs	r5, #0
 80063c0:	f104 0619 	add.w	r6, r4, #25
 80063c4:	e7f5      	b.n	80063b2 <_printf_i+0x226>
 80063c6:	bf00      	nop
 80063c8:	080088c2 	.word	0x080088c2
 80063cc:	080088d3 	.word	0x080088d3

080063d0 <siprintf>:
 80063d0:	b40e      	push	{r1, r2, r3}
 80063d2:	b500      	push	{lr}
 80063d4:	b09c      	sub	sp, #112	; 0x70
 80063d6:	ab1d      	add	r3, sp, #116	; 0x74
 80063d8:	9002      	str	r0, [sp, #8]
 80063da:	9006      	str	r0, [sp, #24]
 80063dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063e0:	4809      	ldr	r0, [pc, #36]	; (8006408 <siprintf+0x38>)
 80063e2:	9107      	str	r1, [sp, #28]
 80063e4:	9104      	str	r1, [sp, #16]
 80063e6:	4909      	ldr	r1, [pc, #36]	; (800640c <siprintf+0x3c>)
 80063e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ec:	9105      	str	r1, [sp, #20]
 80063ee:	6800      	ldr	r0, [r0, #0]
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	a902      	add	r1, sp, #8
 80063f4:	f000 ffec 	bl	80073d0 <_svfiprintf_r>
 80063f8:	9b02      	ldr	r3, [sp, #8]
 80063fa:	2200      	movs	r2, #0
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	b01c      	add	sp, #112	; 0x70
 8006400:	f85d eb04 	ldr.w	lr, [sp], #4
 8006404:	b003      	add	sp, #12
 8006406:	4770      	bx	lr
 8006408:	20000090 	.word	0x20000090
 800640c:	ffff0208 	.word	0xffff0208

08006410 <std>:
 8006410:	2300      	movs	r3, #0
 8006412:	b510      	push	{r4, lr}
 8006414:	4604      	mov	r4, r0
 8006416:	e9c0 3300 	strd	r3, r3, [r0]
 800641a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800641e:	6083      	str	r3, [r0, #8]
 8006420:	8181      	strh	r1, [r0, #12]
 8006422:	6643      	str	r3, [r0, #100]	; 0x64
 8006424:	81c2      	strh	r2, [r0, #14]
 8006426:	6183      	str	r3, [r0, #24]
 8006428:	4619      	mov	r1, r3
 800642a:	2208      	movs	r2, #8
 800642c:	305c      	adds	r0, #92	; 0x5c
 800642e:	f000 f8b1 	bl	8006594 <memset>
 8006432:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <std+0x58>)
 8006434:	6263      	str	r3, [r4, #36]	; 0x24
 8006436:	4b0d      	ldr	r3, [pc, #52]	; (800646c <std+0x5c>)
 8006438:	62a3      	str	r3, [r4, #40]	; 0x28
 800643a:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <std+0x60>)
 800643c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <std+0x64>)
 8006440:	6323      	str	r3, [r4, #48]	; 0x30
 8006442:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <std+0x68>)
 8006444:	6224      	str	r4, [r4, #32]
 8006446:	429c      	cmp	r4, r3
 8006448:	d006      	beq.n	8006458 <std+0x48>
 800644a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800644e:	4294      	cmp	r4, r2
 8006450:	d002      	beq.n	8006458 <std+0x48>
 8006452:	33d0      	adds	r3, #208	; 0xd0
 8006454:	429c      	cmp	r4, r3
 8006456:	d105      	bne.n	8006464 <std+0x54>
 8006458:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800645c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006460:	f000 b8ce 	b.w	8006600 <__retarget_lock_init_recursive>
 8006464:	bd10      	pop	{r4, pc}
 8006466:	bf00      	nop
 8006468:	08007f89 	.word	0x08007f89
 800646c:	08007fab 	.word	0x08007fab
 8006470:	08007fe3 	.word	0x08007fe3
 8006474:	08008007 	.word	0x08008007
 8006478:	2000035c 	.word	0x2000035c

0800647c <stdio_exit_handler>:
 800647c:	4a02      	ldr	r2, [pc, #8]	; (8006488 <stdio_exit_handler+0xc>)
 800647e:	4903      	ldr	r1, [pc, #12]	; (800648c <stdio_exit_handler+0x10>)
 8006480:	4803      	ldr	r0, [pc, #12]	; (8006490 <stdio_exit_handler+0x14>)
 8006482:	f000 b869 	b.w	8006558 <_fwalk_sglue>
 8006486:	bf00      	nop
 8006488:	20000038 	.word	0x20000038
 800648c:	08007829 	.word	0x08007829
 8006490:	20000044 	.word	0x20000044

08006494 <cleanup_stdio>:
 8006494:	6841      	ldr	r1, [r0, #4]
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <cleanup_stdio+0x34>)
 8006498:	4299      	cmp	r1, r3
 800649a:	b510      	push	{r4, lr}
 800649c:	4604      	mov	r4, r0
 800649e:	d001      	beq.n	80064a4 <cleanup_stdio+0x10>
 80064a0:	f001 f9c2 	bl	8007828 <_fflush_r>
 80064a4:	68a1      	ldr	r1, [r4, #8]
 80064a6:	4b09      	ldr	r3, [pc, #36]	; (80064cc <cleanup_stdio+0x38>)
 80064a8:	4299      	cmp	r1, r3
 80064aa:	d002      	beq.n	80064b2 <cleanup_stdio+0x1e>
 80064ac:	4620      	mov	r0, r4
 80064ae:	f001 f9bb 	bl	8007828 <_fflush_r>
 80064b2:	68e1      	ldr	r1, [r4, #12]
 80064b4:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <cleanup_stdio+0x3c>)
 80064b6:	4299      	cmp	r1, r3
 80064b8:	d004      	beq.n	80064c4 <cleanup_stdio+0x30>
 80064ba:	4620      	mov	r0, r4
 80064bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c0:	f001 b9b2 	b.w	8007828 <_fflush_r>
 80064c4:	bd10      	pop	{r4, pc}
 80064c6:	bf00      	nop
 80064c8:	2000035c 	.word	0x2000035c
 80064cc:	200003c4 	.word	0x200003c4
 80064d0:	2000042c 	.word	0x2000042c

080064d4 <global_stdio_init.part.0>:
 80064d4:	b510      	push	{r4, lr}
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <global_stdio_init.part.0+0x30>)
 80064d8:	4c0b      	ldr	r4, [pc, #44]	; (8006508 <global_stdio_init.part.0+0x34>)
 80064da:	4a0c      	ldr	r2, [pc, #48]	; (800650c <global_stdio_init.part.0+0x38>)
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	4620      	mov	r0, r4
 80064e0:	2200      	movs	r2, #0
 80064e2:	2104      	movs	r1, #4
 80064e4:	f7ff ff94 	bl	8006410 <std>
 80064e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80064ec:	2201      	movs	r2, #1
 80064ee:	2109      	movs	r1, #9
 80064f0:	f7ff ff8e 	bl	8006410 <std>
 80064f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80064f8:	2202      	movs	r2, #2
 80064fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fe:	2112      	movs	r1, #18
 8006500:	f7ff bf86 	b.w	8006410 <std>
 8006504:	20000494 	.word	0x20000494
 8006508:	2000035c 	.word	0x2000035c
 800650c:	0800647d 	.word	0x0800647d

08006510 <__sfp_lock_acquire>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__sfp_lock_acquire+0x8>)
 8006512:	f000 b876 	b.w	8006602 <__retarget_lock_acquire_recursive>
 8006516:	bf00      	nop
 8006518:	20000499 	.word	0x20000499

0800651c <__sfp_lock_release>:
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <__sfp_lock_release+0x8>)
 800651e:	f000 b871 	b.w	8006604 <__retarget_lock_release_recursive>
 8006522:	bf00      	nop
 8006524:	20000499 	.word	0x20000499

08006528 <__sinit>:
 8006528:	b510      	push	{r4, lr}
 800652a:	4604      	mov	r4, r0
 800652c:	f7ff fff0 	bl	8006510 <__sfp_lock_acquire>
 8006530:	6a23      	ldr	r3, [r4, #32]
 8006532:	b11b      	cbz	r3, 800653c <__sinit+0x14>
 8006534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006538:	f7ff bff0 	b.w	800651c <__sfp_lock_release>
 800653c:	4b04      	ldr	r3, [pc, #16]	; (8006550 <__sinit+0x28>)
 800653e:	6223      	str	r3, [r4, #32]
 8006540:	4b04      	ldr	r3, [pc, #16]	; (8006554 <__sinit+0x2c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f5      	bne.n	8006534 <__sinit+0xc>
 8006548:	f7ff ffc4 	bl	80064d4 <global_stdio_init.part.0>
 800654c:	e7f2      	b.n	8006534 <__sinit+0xc>
 800654e:	bf00      	nop
 8006550:	08006495 	.word	0x08006495
 8006554:	20000494 	.word	0x20000494

08006558 <_fwalk_sglue>:
 8006558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800655c:	4607      	mov	r7, r0
 800655e:	4688      	mov	r8, r1
 8006560:	4614      	mov	r4, r2
 8006562:	2600      	movs	r6, #0
 8006564:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006568:	f1b9 0901 	subs.w	r9, r9, #1
 800656c:	d505      	bpl.n	800657a <_fwalk_sglue+0x22>
 800656e:	6824      	ldr	r4, [r4, #0]
 8006570:	2c00      	cmp	r4, #0
 8006572:	d1f7      	bne.n	8006564 <_fwalk_sglue+0xc>
 8006574:	4630      	mov	r0, r6
 8006576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657a:	89ab      	ldrh	r3, [r5, #12]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d907      	bls.n	8006590 <_fwalk_sglue+0x38>
 8006580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006584:	3301      	adds	r3, #1
 8006586:	d003      	beq.n	8006590 <_fwalk_sglue+0x38>
 8006588:	4629      	mov	r1, r5
 800658a:	4638      	mov	r0, r7
 800658c:	47c0      	blx	r8
 800658e:	4306      	orrs	r6, r0
 8006590:	3568      	adds	r5, #104	; 0x68
 8006592:	e7e9      	b.n	8006568 <_fwalk_sglue+0x10>

08006594 <memset>:
 8006594:	4402      	add	r2, r0
 8006596:	4603      	mov	r3, r0
 8006598:	4293      	cmp	r3, r2
 800659a:	d100      	bne.n	800659e <memset+0xa>
 800659c:	4770      	bx	lr
 800659e:	f803 1b01 	strb.w	r1, [r3], #1
 80065a2:	e7f9      	b.n	8006598 <memset+0x4>

080065a4 <_localeconv_r>:
 80065a4:	4800      	ldr	r0, [pc, #0]	; (80065a8 <_localeconv_r+0x4>)
 80065a6:	4770      	bx	lr
 80065a8:	20000184 	.word	0x20000184

080065ac <__errno>:
 80065ac:	4b01      	ldr	r3, [pc, #4]	; (80065b4 <__errno+0x8>)
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	20000090 	.word	0x20000090

080065b8 <__libc_init_array>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	4d0d      	ldr	r5, [pc, #52]	; (80065f0 <__libc_init_array+0x38>)
 80065bc:	4c0d      	ldr	r4, [pc, #52]	; (80065f4 <__libc_init_array+0x3c>)
 80065be:	1b64      	subs	r4, r4, r5
 80065c0:	10a4      	asrs	r4, r4, #2
 80065c2:	2600      	movs	r6, #0
 80065c4:	42a6      	cmp	r6, r4
 80065c6:	d109      	bne.n	80065dc <__libc_init_array+0x24>
 80065c8:	4d0b      	ldr	r5, [pc, #44]	; (80065f8 <__libc_init_array+0x40>)
 80065ca:	4c0c      	ldr	r4, [pc, #48]	; (80065fc <__libc_init_array+0x44>)
 80065cc:	f002 f920 	bl	8008810 <_init>
 80065d0:	1b64      	subs	r4, r4, r5
 80065d2:	10a4      	asrs	r4, r4, #2
 80065d4:	2600      	movs	r6, #0
 80065d6:	42a6      	cmp	r6, r4
 80065d8:	d105      	bne.n	80065e6 <__libc_init_array+0x2e>
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065e0:	4798      	blx	r3
 80065e2:	3601      	adds	r6, #1
 80065e4:	e7ee      	b.n	80065c4 <__libc_init_array+0xc>
 80065e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ea:	4798      	blx	r3
 80065ec:	3601      	adds	r6, #1
 80065ee:	e7f2      	b.n	80065d6 <__libc_init_array+0x1e>
 80065f0:	08008c2c 	.word	0x08008c2c
 80065f4:	08008c2c 	.word	0x08008c2c
 80065f8:	08008c2c 	.word	0x08008c2c
 80065fc:	08008c30 	.word	0x08008c30

08006600 <__retarget_lock_init_recursive>:
 8006600:	4770      	bx	lr

08006602 <__retarget_lock_acquire_recursive>:
 8006602:	4770      	bx	lr

08006604 <__retarget_lock_release_recursive>:
 8006604:	4770      	bx	lr

08006606 <memcpy>:
 8006606:	440a      	add	r2, r1
 8006608:	4291      	cmp	r1, r2
 800660a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800660e:	d100      	bne.n	8006612 <memcpy+0xc>
 8006610:	4770      	bx	lr
 8006612:	b510      	push	{r4, lr}
 8006614:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661c:	4291      	cmp	r1, r2
 800661e:	d1f9      	bne.n	8006614 <memcpy+0xe>
 8006620:	bd10      	pop	{r4, pc}

08006622 <quorem>:
 8006622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006626:	6903      	ldr	r3, [r0, #16]
 8006628:	690c      	ldr	r4, [r1, #16]
 800662a:	42a3      	cmp	r3, r4
 800662c:	4607      	mov	r7, r0
 800662e:	db7e      	blt.n	800672e <quorem+0x10c>
 8006630:	3c01      	subs	r4, #1
 8006632:	f101 0814 	add.w	r8, r1, #20
 8006636:	f100 0514 	add.w	r5, r0, #20
 800663a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006648:	3301      	adds	r3, #1
 800664a:	429a      	cmp	r2, r3
 800664c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006650:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006654:	fbb2 f6f3 	udiv	r6, r2, r3
 8006658:	d331      	bcc.n	80066be <quorem+0x9c>
 800665a:	f04f 0e00 	mov.w	lr, #0
 800665e:	4640      	mov	r0, r8
 8006660:	46ac      	mov	ip, r5
 8006662:	46f2      	mov	sl, lr
 8006664:	f850 2b04 	ldr.w	r2, [r0], #4
 8006668:	b293      	uxth	r3, r2
 800666a:	fb06 e303 	mla	r3, r6, r3, lr
 800666e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006672:	0c1a      	lsrs	r2, r3, #16
 8006674:	b29b      	uxth	r3, r3
 8006676:	ebaa 0303 	sub.w	r3, sl, r3
 800667a:	f8dc a000 	ldr.w	sl, [ip]
 800667e:	fa13 f38a 	uxtah	r3, r3, sl
 8006682:	fb06 220e 	mla	r2, r6, lr, r2
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	9b00      	ldr	r3, [sp, #0]
 800668a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800668e:	b292      	uxth	r2, r2
 8006690:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006698:	f8bd 3000 	ldrh.w	r3, [sp]
 800669c:	4581      	cmp	r9, r0
 800669e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066a2:	f84c 3b04 	str.w	r3, [ip], #4
 80066a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066aa:	d2db      	bcs.n	8006664 <quorem+0x42>
 80066ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80066b0:	b92b      	cbnz	r3, 80066be <quorem+0x9c>
 80066b2:	9b01      	ldr	r3, [sp, #4]
 80066b4:	3b04      	subs	r3, #4
 80066b6:	429d      	cmp	r5, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	d32c      	bcc.n	8006716 <quorem+0xf4>
 80066bc:	613c      	str	r4, [r7, #16]
 80066be:	4638      	mov	r0, r7
 80066c0:	f001 fb62 	bl	8007d88 <__mcmp>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	db22      	blt.n	800670e <quorem+0xec>
 80066c8:	3601      	adds	r6, #1
 80066ca:	4629      	mov	r1, r5
 80066cc:	2000      	movs	r0, #0
 80066ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80066d2:	f8d1 c000 	ldr.w	ip, [r1]
 80066d6:	b293      	uxth	r3, r2
 80066d8:	1ac3      	subs	r3, r0, r3
 80066da:	0c12      	lsrs	r2, r2, #16
 80066dc:	fa13 f38c 	uxtah	r3, r3, ip
 80066e0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80066e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ee:	45c1      	cmp	r9, r8
 80066f0:	f841 3b04 	str.w	r3, [r1], #4
 80066f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80066f8:	d2e9      	bcs.n	80066ce <quorem+0xac>
 80066fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006702:	b922      	cbnz	r2, 800670e <quorem+0xec>
 8006704:	3b04      	subs	r3, #4
 8006706:	429d      	cmp	r5, r3
 8006708:	461a      	mov	r2, r3
 800670a:	d30a      	bcc.n	8006722 <quorem+0x100>
 800670c:	613c      	str	r4, [r7, #16]
 800670e:	4630      	mov	r0, r6
 8006710:	b003      	add	sp, #12
 8006712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	3b04      	subs	r3, #4
 800671a:	2a00      	cmp	r2, #0
 800671c:	d1ce      	bne.n	80066bc <quorem+0x9a>
 800671e:	3c01      	subs	r4, #1
 8006720:	e7c9      	b.n	80066b6 <quorem+0x94>
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	3b04      	subs	r3, #4
 8006726:	2a00      	cmp	r2, #0
 8006728:	d1f0      	bne.n	800670c <quorem+0xea>
 800672a:	3c01      	subs	r4, #1
 800672c:	e7eb      	b.n	8006706 <quorem+0xe4>
 800672e:	2000      	movs	r0, #0
 8006730:	e7ee      	b.n	8006710 <quorem+0xee>
 8006732:	0000      	movs	r0, r0
 8006734:	0000      	movs	r0, r0
	...

08006738 <_dtoa_r>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	ed2d 8b04 	vpush	{d8-d9}
 8006740:	69c5      	ldr	r5, [r0, #28]
 8006742:	b093      	sub	sp, #76	; 0x4c
 8006744:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006748:	ec57 6b10 	vmov	r6, r7, d0
 800674c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006750:	9107      	str	r1, [sp, #28]
 8006752:	4604      	mov	r4, r0
 8006754:	920a      	str	r2, [sp, #40]	; 0x28
 8006756:	930d      	str	r3, [sp, #52]	; 0x34
 8006758:	b975      	cbnz	r5, 8006778 <_dtoa_r+0x40>
 800675a:	2010      	movs	r0, #16
 800675c:	f000 ff36 	bl	80075cc <malloc>
 8006760:	4602      	mov	r2, r0
 8006762:	61e0      	str	r0, [r4, #28]
 8006764:	b920      	cbnz	r0, 8006770 <_dtoa_r+0x38>
 8006766:	4bae      	ldr	r3, [pc, #696]	; (8006a20 <_dtoa_r+0x2e8>)
 8006768:	21ef      	movs	r1, #239	; 0xef
 800676a:	48ae      	ldr	r0, [pc, #696]	; (8006a24 <_dtoa_r+0x2ec>)
 800676c:	f001 fcee 	bl	800814c <__assert_func>
 8006770:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006774:	6005      	str	r5, [r0, #0]
 8006776:	60c5      	str	r5, [r0, #12]
 8006778:	69e3      	ldr	r3, [r4, #28]
 800677a:	6819      	ldr	r1, [r3, #0]
 800677c:	b151      	cbz	r1, 8006794 <_dtoa_r+0x5c>
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	604a      	str	r2, [r1, #4]
 8006782:	2301      	movs	r3, #1
 8006784:	4093      	lsls	r3, r2
 8006786:	608b      	str	r3, [r1, #8]
 8006788:	4620      	mov	r0, r4
 800678a:	f001 f8c1 	bl	8007910 <_Bfree>
 800678e:	69e3      	ldr	r3, [r4, #28]
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	1e3b      	subs	r3, r7, #0
 8006796:	bfbb      	ittet	lt
 8006798:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800679c:	9303      	strlt	r3, [sp, #12]
 800679e:	2300      	movge	r3, #0
 80067a0:	2201      	movlt	r2, #1
 80067a2:	bfac      	ite	ge
 80067a4:	f8c8 3000 	strge.w	r3, [r8]
 80067a8:	f8c8 2000 	strlt.w	r2, [r8]
 80067ac:	4b9e      	ldr	r3, [pc, #632]	; (8006a28 <_dtoa_r+0x2f0>)
 80067ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80067b2:	ea33 0308 	bics.w	r3, r3, r8
 80067b6:	d11b      	bne.n	80067f0 <_dtoa_r+0xb8>
 80067b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80067c4:	4333      	orrs	r3, r6
 80067c6:	f000 8593 	beq.w	80072f0 <_dtoa_r+0xbb8>
 80067ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067cc:	b963      	cbnz	r3, 80067e8 <_dtoa_r+0xb0>
 80067ce:	4b97      	ldr	r3, [pc, #604]	; (8006a2c <_dtoa_r+0x2f4>)
 80067d0:	e027      	b.n	8006822 <_dtoa_r+0xea>
 80067d2:	4b97      	ldr	r3, [pc, #604]	; (8006a30 <_dtoa_r+0x2f8>)
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	9800      	ldr	r0, [sp, #0]
 80067de:	b013      	add	sp, #76	; 0x4c
 80067e0:	ecbd 8b04 	vpop	{d8-d9}
 80067e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e8:	4b90      	ldr	r3, [pc, #576]	; (8006a2c <_dtoa_r+0x2f4>)
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	3303      	adds	r3, #3
 80067ee:	e7f3      	b.n	80067d8 <_dtoa_r+0xa0>
 80067f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067f4:	2200      	movs	r2, #0
 80067f6:	ec51 0b17 	vmov	r0, r1, d7
 80067fa:	eeb0 8a47 	vmov.f32	s16, s14
 80067fe:	eef0 8a67 	vmov.f32	s17, s15
 8006802:	2300      	movs	r3, #0
 8006804:	f7fa f980 	bl	8000b08 <__aeabi_dcmpeq>
 8006808:	4681      	mov	r9, r0
 800680a:	b160      	cbz	r0, 8006826 <_dtoa_r+0xee>
 800680c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800680e:	2301      	movs	r3, #1
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8568 	beq.w	80072ea <_dtoa_r+0xbb2>
 800681a:	4b86      	ldr	r3, [pc, #536]	; (8006a34 <_dtoa_r+0x2fc>)
 800681c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	3b01      	subs	r3, #1
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	e7da      	b.n	80067dc <_dtoa_r+0xa4>
 8006826:	aa10      	add	r2, sp, #64	; 0x40
 8006828:	a911      	add	r1, sp, #68	; 0x44
 800682a:	4620      	mov	r0, r4
 800682c:	eeb0 0a48 	vmov.f32	s0, s16
 8006830:	eef0 0a68 	vmov.f32	s1, s17
 8006834:	f001 fb4e 	bl	8007ed4 <__d2b>
 8006838:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800683c:	4682      	mov	sl, r0
 800683e:	2d00      	cmp	r5, #0
 8006840:	d07f      	beq.n	8006942 <_dtoa_r+0x20a>
 8006842:	ee18 3a90 	vmov	r3, s17
 8006846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800684a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800684e:	ec51 0b18 	vmov	r0, r1, d8
 8006852:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800685a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800685e:	4619      	mov	r1, r3
 8006860:	2200      	movs	r2, #0
 8006862:	4b75      	ldr	r3, [pc, #468]	; (8006a38 <_dtoa_r+0x300>)
 8006864:	f7f9 fd30 	bl	80002c8 <__aeabi_dsub>
 8006868:	a367      	add	r3, pc, #412	; (adr r3, 8006a08 <_dtoa_r+0x2d0>)
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f7f9 fee3 	bl	8000638 <__aeabi_dmul>
 8006872:	a367      	add	r3, pc, #412	; (adr r3, 8006a10 <_dtoa_r+0x2d8>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 fd28 	bl	80002cc <__adddf3>
 800687c:	4606      	mov	r6, r0
 800687e:	4628      	mov	r0, r5
 8006880:	460f      	mov	r7, r1
 8006882:	f7f9 fe6f 	bl	8000564 <__aeabi_i2d>
 8006886:	a364      	add	r3, pc, #400	; (adr r3, 8006a18 <_dtoa_r+0x2e0>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7f9 fed4 	bl	8000638 <__aeabi_dmul>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4630      	mov	r0, r6
 8006896:	4639      	mov	r1, r7
 8006898:	f7f9 fd18 	bl	80002cc <__adddf3>
 800689c:	4606      	mov	r6, r0
 800689e:	460f      	mov	r7, r1
 80068a0:	f7fa f97a 	bl	8000b98 <__aeabi_d2iz>
 80068a4:	2200      	movs	r2, #0
 80068a6:	4683      	mov	fp, r0
 80068a8:	2300      	movs	r3, #0
 80068aa:	4630      	mov	r0, r6
 80068ac:	4639      	mov	r1, r7
 80068ae:	f7fa f935 	bl	8000b1c <__aeabi_dcmplt>
 80068b2:	b148      	cbz	r0, 80068c8 <_dtoa_r+0x190>
 80068b4:	4658      	mov	r0, fp
 80068b6:	f7f9 fe55 	bl	8000564 <__aeabi_i2d>
 80068ba:	4632      	mov	r2, r6
 80068bc:	463b      	mov	r3, r7
 80068be:	f7fa f923 	bl	8000b08 <__aeabi_dcmpeq>
 80068c2:	b908      	cbnz	r0, 80068c8 <_dtoa_r+0x190>
 80068c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80068c8:	f1bb 0f16 	cmp.w	fp, #22
 80068cc:	d857      	bhi.n	800697e <_dtoa_r+0x246>
 80068ce:	4b5b      	ldr	r3, [pc, #364]	; (8006a3c <_dtoa_r+0x304>)
 80068d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	ec51 0b18 	vmov	r0, r1, d8
 80068dc:	f7fa f91e 	bl	8000b1c <__aeabi_dcmplt>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d04e      	beq.n	8006982 <_dtoa_r+0x24a>
 80068e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80068e8:	2300      	movs	r3, #0
 80068ea:	930c      	str	r3, [sp, #48]	; 0x30
 80068ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068ee:	1b5b      	subs	r3, r3, r5
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	bf45      	ittet	mi
 80068f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80068f8:	9305      	strmi	r3, [sp, #20]
 80068fa:	2300      	movpl	r3, #0
 80068fc:	2300      	movmi	r3, #0
 80068fe:	9206      	str	r2, [sp, #24]
 8006900:	bf54      	ite	pl
 8006902:	9305      	strpl	r3, [sp, #20]
 8006904:	9306      	strmi	r3, [sp, #24]
 8006906:	f1bb 0f00 	cmp.w	fp, #0
 800690a:	db3c      	blt.n	8006986 <_dtoa_r+0x24e>
 800690c:	9b06      	ldr	r3, [sp, #24]
 800690e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006912:	445b      	add	r3, fp
 8006914:	9306      	str	r3, [sp, #24]
 8006916:	2300      	movs	r3, #0
 8006918:	9308      	str	r3, [sp, #32]
 800691a:	9b07      	ldr	r3, [sp, #28]
 800691c:	2b09      	cmp	r3, #9
 800691e:	d868      	bhi.n	80069f2 <_dtoa_r+0x2ba>
 8006920:	2b05      	cmp	r3, #5
 8006922:	bfc4      	itt	gt
 8006924:	3b04      	subgt	r3, #4
 8006926:	9307      	strgt	r3, [sp, #28]
 8006928:	9b07      	ldr	r3, [sp, #28]
 800692a:	f1a3 0302 	sub.w	r3, r3, #2
 800692e:	bfcc      	ite	gt
 8006930:	2500      	movgt	r5, #0
 8006932:	2501      	movle	r5, #1
 8006934:	2b03      	cmp	r3, #3
 8006936:	f200 8085 	bhi.w	8006a44 <_dtoa_r+0x30c>
 800693a:	e8df f003 	tbb	[pc, r3]
 800693e:	3b2e      	.short	0x3b2e
 8006940:	5839      	.short	0x5839
 8006942:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006946:	441d      	add	r5, r3
 8006948:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800694c:	2b20      	cmp	r3, #32
 800694e:	bfc1      	itttt	gt
 8006950:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006954:	fa08 f803 	lslgt.w	r8, r8, r3
 8006958:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800695c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006960:	bfd6      	itet	le
 8006962:	f1c3 0320 	rsble	r3, r3, #32
 8006966:	ea48 0003 	orrgt.w	r0, r8, r3
 800696a:	fa06 f003 	lslle.w	r0, r6, r3
 800696e:	f7f9 fde9 	bl	8000544 <__aeabi_ui2d>
 8006972:	2201      	movs	r2, #1
 8006974:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006978:	3d01      	subs	r5, #1
 800697a:	920e      	str	r2, [sp, #56]	; 0x38
 800697c:	e76f      	b.n	800685e <_dtoa_r+0x126>
 800697e:	2301      	movs	r3, #1
 8006980:	e7b3      	b.n	80068ea <_dtoa_r+0x1b2>
 8006982:	900c      	str	r0, [sp, #48]	; 0x30
 8006984:	e7b2      	b.n	80068ec <_dtoa_r+0x1b4>
 8006986:	9b05      	ldr	r3, [sp, #20]
 8006988:	eba3 030b 	sub.w	r3, r3, fp
 800698c:	9305      	str	r3, [sp, #20]
 800698e:	f1cb 0300 	rsb	r3, fp, #0
 8006992:	9308      	str	r3, [sp, #32]
 8006994:	2300      	movs	r3, #0
 8006996:	930b      	str	r3, [sp, #44]	; 0x2c
 8006998:	e7bf      	b.n	800691a <_dtoa_r+0x1e2>
 800699a:	2300      	movs	r3, #0
 800699c:	9309      	str	r3, [sp, #36]	; 0x24
 800699e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	dc52      	bgt.n	8006a4a <_dtoa_r+0x312>
 80069a4:	2301      	movs	r3, #1
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	461a      	mov	r2, r3
 80069ac:	920a      	str	r2, [sp, #40]	; 0x28
 80069ae:	e00b      	b.n	80069c8 <_dtoa_r+0x290>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e7f3      	b.n	800699c <_dtoa_r+0x264>
 80069b4:	2300      	movs	r3, #0
 80069b6:	9309      	str	r3, [sp, #36]	; 0x24
 80069b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ba:	445b      	add	r3, fp
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	3301      	adds	r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	9304      	str	r3, [sp, #16]
 80069c4:	bfb8      	it	lt
 80069c6:	2301      	movlt	r3, #1
 80069c8:	69e0      	ldr	r0, [r4, #28]
 80069ca:	2100      	movs	r1, #0
 80069cc:	2204      	movs	r2, #4
 80069ce:	f102 0614 	add.w	r6, r2, #20
 80069d2:	429e      	cmp	r6, r3
 80069d4:	d93d      	bls.n	8006a52 <_dtoa_r+0x31a>
 80069d6:	6041      	str	r1, [r0, #4]
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 ff59 	bl	8007890 <_Balloc>
 80069de:	9000      	str	r0, [sp, #0]
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d139      	bne.n	8006a58 <_dtoa_r+0x320>
 80069e4:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <_dtoa_r+0x308>)
 80069e6:	4602      	mov	r2, r0
 80069e8:	f240 11af 	movw	r1, #431	; 0x1af
 80069ec:	e6bd      	b.n	800676a <_dtoa_r+0x32>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e7e1      	b.n	80069b6 <_dtoa_r+0x27e>
 80069f2:	2501      	movs	r5, #1
 80069f4:	2300      	movs	r3, #0
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	9509      	str	r5, [sp, #36]	; 0x24
 80069fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	9304      	str	r3, [sp, #16]
 8006a02:	2200      	movs	r2, #0
 8006a04:	2312      	movs	r3, #18
 8006a06:	e7d1      	b.n	80069ac <_dtoa_r+0x274>
 8006a08:	636f4361 	.word	0x636f4361
 8006a0c:	3fd287a7 	.word	0x3fd287a7
 8006a10:	8b60c8b3 	.word	0x8b60c8b3
 8006a14:	3fc68a28 	.word	0x3fc68a28
 8006a18:	509f79fb 	.word	0x509f79fb
 8006a1c:	3fd34413 	.word	0x3fd34413
 8006a20:	080088f1 	.word	0x080088f1
 8006a24:	08008908 	.word	0x08008908
 8006a28:	7ff00000 	.word	0x7ff00000
 8006a2c:	080088ed 	.word	0x080088ed
 8006a30:	080088e4 	.word	0x080088e4
 8006a34:	080088c1 	.word	0x080088c1
 8006a38:	3ff80000 	.word	0x3ff80000
 8006a3c:	08008a08 	.word	0x08008a08
 8006a40:	08008960 	.word	0x08008960
 8006a44:	2301      	movs	r3, #1
 8006a46:	9309      	str	r3, [sp, #36]	; 0x24
 8006a48:	e7d7      	b.n	80069fa <_dtoa_r+0x2c2>
 8006a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	9304      	str	r3, [sp, #16]
 8006a50:	e7ba      	b.n	80069c8 <_dtoa_r+0x290>
 8006a52:	3101      	adds	r1, #1
 8006a54:	0052      	lsls	r2, r2, #1
 8006a56:	e7ba      	b.n	80069ce <_dtoa_r+0x296>
 8006a58:	69e3      	ldr	r3, [r4, #28]
 8006a5a:	9a00      	ldr	r2, [sp, #0]
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	9b04      	ldr	r3, [sp, #16]
 8006a60:	2b0e      	cmp	r3, #14
 8006a62:	f200 80a8 	bhi.w	8006bb6 <_dtoa_r+0x47e>
 8006a66:	2d00      	cmp	r5, #0
 8006a68:	f000 80a5 	beq.w	8006bb6 <_dtoa_r+0x47e>
 8006a6c:	f1bb 0f00 	cmp.w	fp, #0
 8006a70:	dd38      	ble.n	8006ae4 <_dtoa_r+0x3ac>
 8006a72:	4bc0      	ldr	r3, [pc, #768]	; (8006d74 <_dtoa_r+0x63c>)
 8006a74:	f00b 020f 	and.w	r2, fp, #15
 8006a78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006a80:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a84:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006a88:	d019      	beq.n	8006abe <_dtoa_r+0x386>
 8006a8a:	4bbb      	ldr	r3, [pc, #748]	; (8006d78 <_dtoa_r+0x640>)
 8006a8c:	ec51 0b18 	vmov	r0, r1, d8
 8006a90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a94:	f7f9 fefa 	bl	800088c <__aeabi_ddiv>
 8006a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a9c:	f008 080f 	and.w	r8, r8, #15
 8006aa0:	2503      	movs	r5, #3
 8006aa2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006d78 <_dtoa_r+0x640>
 8006aa6:	f1b8 0f00 	cmp.w	r8, #0
 8006aaa:	d10a      	bne.n	8006ac2 <_dtoa_r+0x38a>
 8006aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	463b      	mov	r3, r7
 8006ab4:	f7f9 feea 	bl	800088c <__aeabi_ddiv>
 8006ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006abc:	e02b      	b.n	8006b16 <_dtoa_r+0x3de>
 8006abe:	2502      	movs	r5, #2
 8006ac0:	e7ef      	b.n	8006aa2 <_dtoa_r+0x36a>
 8006ac2:	f018 0f01 	tst.w	r8, #1
 8006ac6:	d008      	beq.n	8006ada <_dtoa_r+0x3a2>
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ad0:	f7f9 fdb2 	bl	8000638 <__aeabi_dmul>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	460f      	mov	r7, r1
 8006ada:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ade:	f109 0908 	add.w	r9, r9, #8
 8006ae2:	e7e0      	b.n	8006aa6 <_dtoa_r+0x36e>
 8006ae4:	f000 809f 	beq.w	8006c26 <_dtoa_r+0x4ee>
 8006ae8:	f1cb 0600 	rsb	r6, fp, #0
 8006aec:	4ba1      	ldr	r3, [pc, #644]	; (8006d74 <_dtoa_r+0x63c>)
 8006aee:	4fa2      	ldr	r7, [pc, #648]	; (8006d78 <_dtoa_r+0x640>)
 8006af0:	f006 020f 	and.w	r2, r6, #15
 8006af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	ec51 0b18 	vmov	r0, r1, d8
 8006b00:	f7f9 fd9a 	bl	8000638 <__aeabi_dmul>
 8006b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b08:	1136      	asrs	r6, r6, #4
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2502      	movs	r5, #2
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	d17e      	bne.n	8006c10 <_dtoa_r+0x4d8>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1d0      	bne.n	8006ab8 <_dtoa_r+0x380>
 8006b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8084 	beq.w	8006c2a <_dtoa_r+0x4f2>
 8006b22:	4b96      	ldr	r3, [pc, #600]	; (8006d7c <_dtoa_r+0x644>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	4640      	mov	r0, r8
 8006b28:	4649      	mov	r1, r9
 8006b2a:	f7f9 fff7 	bl	8000b1c <__aeabi_dcmplt>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d07b      	beq.n	8006c2a <_dtoa_r+0x4f2>
 8006b32:	9b04      	ldr	r3, [sp, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d078      	beq.n	8006c2a <_dtoa_r+0x4f2>
 8006b38:	9b01      	ldr	r3, [sp, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	dd39      	ble.n	8006bb2 <_dtoa_r+0x47a>
 8006b3e:	4b90      	ldr	r3, [pc, #576]	; (8006d80 <_dtoa_r+0x648>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	4640      	mov	r0, r8
 8006b44:	4649      	mov	r1, r9
 8006b46:	f7f9 fd77 	bl	8000638 <__aeabi_dmul>
 8006b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b4e:	9e01      	ldr	r6, [sp, #4]
 8006b50:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006b54:	3501      	adds	r5, #1
 8006b56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f7f9 fd02 	bl	8000564 <__aeabi_i2d>
 8006b60:	4642      	mov	r2, r8
 8006b62:	464b      	mov	r3, r9
 8006b64:	f7f9 fd68 	bl	8000638 <__aeabi_dmul>
 8006b68:	4b86      	ldr	r3, [pc, #536]	; (8006d84 <_dtoa_r+0x64c>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f7f9 fbae 	bl	80002cc <__adddf3>
 8006b70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b78:	9303      	str	r3, [sp, #12]
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	d158      	bne.n	8006c30 <_dtoa_r+0x4f8>
 8006b7e:	4b82      	ldr	r3, [pc, #520]	; (8006d88 <_dtoa_r+0x650>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	4640      	mov	r0, r8
 8006b84:	4649      	mov	r1, r9
 8006b86:	f7f9 fb9f 	bl	80002c8 <__aeabi_dsub>
 8006b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b8e:	4680      	mov	r8, r0
 8006b90:	4689      	mov	r9, r1
 8006b92:	f7f9 ffe1 	bl	8000b58 <__aeabi_dcmpgt>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f040 8296 	bne.w	80070c8 <_dtoa_r+0x990>
 8006b9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	f7f9 ffb8 	bl	8000b1c <__aeabi_dcmplt>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	f040 8289 	bne.w	80070c4 <_dtoa_r+0x98c>
 8006bb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f2c0 814e 	blt.w	8006e5a <_dtoa_r+0x722>
 8006bbe:	f1bb 0f0e 	cmp.w	fp, #14
 8006bc2:	f300 814a 	bgt.w	8006e5a <_dtoa_r+0x722>
 8006bc6:	4b6b      	ldr	r3, [pc, #428]	; (8006d74 <_dtoa_r+0x63c>)
 8006bc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f280 80dc 	bge.w	8006d90 <_dtoa_r+0x658>
 8006bd8:	9b04      	ldr	r3, [sp, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f300 80d8 	bgt.w	8006d90 <_dtoa_r+0x658>
 8006be0:	f040 826f 	bne.w	80070c2 <_dtoa_r+0x98a>
 8006be4:	4b68      	ldr	r3, [pc, #416]	; (8006d88 <_dtoa_r+0x650>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	4640      	mov	r0, r8
 8006bea:	4649      	mov	r1, r9
 8006bec:	f7f9 fd24 	bl	8000638 <__aeabi_dmul>
 8006bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bf4:	f7f9 ffa6 	bl	8000b44 <__aeabi_dcmpge>
 8006bf8:	9e04      	ldr	r6, [sp, #16]
 8006bfa:	4637      	mov	r7, r6
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f040 8245 	bne.w	800708c <_dtoa_r+0x954>
 8006c02:	9d00      	ldr	r5, [sp, #0]
 8006c04:	2331      	movs	r3, #49	; 0x31
 8006c06:	f805 3b01 	strb.w	r3, [r5], #1
 8006c0a:	f10b 0b01 	add.w	fp, fp, #1
 8006c0e:	e241      	b.n	8007094 <_dtoa_r+0x95c>
 8006c10:	07f2      	lsls	r2, r6, #31
 8006c12:	d505      	bpl.n	8006c20 <_dtoa_r+0x4e8>
 8006c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c18:	f7f9 fd0e 	bl	8000638 <__aeabi_dmul>
 8006c1c:	3501      	adds	r5, #1
 8006c1e:	2301      	movs	r3, #1
 8006c20:	1076      	asrs	r6, r6, #1
 8006c22:	3708      	adds	r7, #8
 8006c24:	e773      	b.n	8006b0e <_dtoa_r+0x3d6>
 8006c26:	2502      	movs	r5, #2
 8006c28:	e775      	b.n	8006b16 <_dtoa_r+0x3de>
 8006c2a:	9e04      	ldr	r6, [sp, #16]
 8006c2c:	465f      	mov	r7, fp
 8006c2e:	e792      	b.n	8006b56 <_dtoa_r+0x41e>
 8006c30:	9900      	ldr	r1, [sp, #0]
 8006c32:	4b50      	ldr	r3, [pc, #320]	; (8006d74 <_dtoa_r+0x63c>)
 8006c34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c38:	4431      	add	r1, r6
 8006c3a:	9102      	str	r1, [sp, #8]
 8006c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c3e:	eeb0 9a47 	vmov.f32	s18, s14
 8006c42:	eef0 9a67 	vmov.f32	s19, s15
 8006c46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c4e:	2900      	cmp	r1, #0
 8006c50:	d044      	beq.n	8006cdc <_dtoa_r+0x5a4>
 8006c52:	494e      	ldr	r1, [pc, #312]	; (8006d8c <_dtoa_r+0x654>)
 8006c54:	2000      	movs	r0, #0
 8006c56:	f7f9 fe19 	bl	800088c <__aeabi_ddiv>
 8006c5a:	ec53 2b19 	vmov	r2, r3, d9
 8006c5e:	f7f9 fb33 	bl	80002c8 <__aeabi_dsub>
 8006c62:	9d00      	ldr	r5, [sp, #0]
 8006c64:	ec41 0b19 	vmov	d9, r0, r1
 8006c68:	4649      	mov	r1, r9
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f7f9 ff94 	bl	8000b98 <__aeabi_d2iz>
 8006c70:	4606      	mov	r6, r0
 8006c72:	f7f9 fc77 	bl	8000564 <__aeabi_i2d>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 fb23 	bl	80002c8 <__aeabi_dsub>
 8006c82:	3630      	adds	r6, #48	; 0x30
 8006c84:	f805 6b01 	strb.w	r6, [r5], #1
 8006c88:	ec53 2b19 	vmov	r2, r3, d9
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	4689      	mov	r9, r1
 8006c90:	f7f9 ff44 	bl	8000b1c <__aeabi_dcmplt>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d164      	bne.n	8006d62 <_dtoa_r+0x62a>
 8006c98:	4642      	mov	r2, r8
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	4937      	ldr	r1, [pc, #220]	; (8006d7c <_dtoa_r+0x644>)
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f7f9 fb12 	bl	80002c8 <__aeabi_dsub>
 8006ca4:	ec53 2b19 	vmov	r2, r3, d9
 8006ca8:	f7f9 ff38 	bl	8000b1c <__aeabi_dcmplt>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f040 80b6 	bne.w	8006e1e <_dtoa_r+0x6e6>
 8006cb2:	9b02      	ldr	r3, [sp, #8]
 8006cb4:	429d      	cmp	r5, r3
 8006cb6:	f43f af7c 	beq.w	8006bb2 <_dtoa_r+0x47a>
 8006cba:	4b31      	ldr	r3, [pc, #196]	; (8006d80 <_dtoa_r+0x648>)
 8006cbc:	ec51 0b19 	vmov	r0, r1, d9
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f7f9 fcb9 	bl	8000638 <__aeabi_dmul>
 8006cc6:	4b2e      	ldr	r3, [pc, #184]	; (8006d80 <_dtoa_r+0x648>)
 8006cc8:	ec41 0b19 	vmov	d9, r0, r1
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 fcb1 	bl	8000638 <__aeabi_dmul>
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	4689      	mov	r9, r1
 8006cda:	e7c5      	b.n	8006c68 <_dtoa_r+0x530>
 8006cdc:	ec51 0b17 	vmov	r0, r1, d7
 8006ce0:	f7f9 fcaa 	bl	8000638 <__aeabi_dmul>
 8006ce4:	9b02      	ldr	r3, [sp, #8]
 8006ce6:	9d00      	ldr	r5, [sp, #0]
 8006ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cea:	ec41 0b19 	vmov	d9, r0, r1
 8006cee:	4649      	mov	r1, r9
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	f7f9 ff51 	bl	8000b98 <__aeabi_d2iz>
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	f7f9 fc34 	bl	8000564 <__aeabi_i2d>
 8006cfc:	3630      	adds	r6, #48	; 0x30
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	f7f9 fadf 	bl	80002c8 <__aeabi_dsub>
 8006d0a:	f805 6b01 	strb.w	r6, [r5], #1
 8006d0e:	9b02      	ldr	r3, [sp, #8]
 8006d10:	429d      	cmp	r5, r3
 8006d12:	4680      	mov	r8, r0
 8006d14:	4689      	mov	r9, r1
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	d124      	bne.n	8006d66 <_dtoa_r+0x62e>
 8006d1c:	4b1b      	ldr	r3, [pc, #108]	; (8006d8c <_dtoa_r+0x654>)
 8006d1e:	ec51 0b19 	vmov	r0, r1, d9
 8006d22:	f7f9 fad3 	bl	80002cc <__adddf3>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	f7f9 ff13 	bl	8000b58 <__aeabi_dcmpgt>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d173      	bne.n	8006e1e <_dtoa_r+0x6e6>
 8006d36:	ec53 2b19 	vmov	r2, r3, d9
 8006d3a:	4914      	ldr	r1, [pc, #80]	; (8006d8c <_dtoa_r+0x654>)
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f7f9 fac3 	bl	80002c8 <__aeabi_dsub>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4640      	mov	r0, r8
 8006d48:	4649      	mov	r1, r9
 8006d4a:	f7f9 fee7 	bl	8000b1c <__aeabi_dcmplt>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f43f af2f 	beq.w	8006bb2 <_dtoa_r+0x47a>
 8006d54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d56:	1e6b      	subs	r3, r5, #1
 8006d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d5e:	2b30      	cmp	r3, #48	; 0x30
 8006d60:	d0f8      	beq.n	8006d54 <_dtoa_r+0x61c>
 8006d62:	46bb      	mov	fp, r7
 8006d64:	e04a      	b.n	8006dfc <_dtoa_r+0x6c4>
 8006d66:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <_dtoa_r+0x648>)
 8006d68:	f7f9 fc66 	bl	8000638 <__aeabi_dmul>
 8006d6c:	4680      	mov	r8, r0
 8006d6e:	4689      	mov	r9, r1
 8006d70:	e7bd      	b.n	8006cee <_dtoa_r+0x5b6>
 8006d72:	bf00      	nop
 8006d74:	08008a08 	.word	0x08008a08
 8006d78:	080089e0 	.word	0x080089e0
 8006d7c:	3ff00000 	.word	0x3ff00000
 8006d80:	40240000 	.word	0x40240000
 8006d84:	401c0000 	.word	0x401c0000
 8006d88:	40140000 	.word	0x40140000
 8006d8c:	3fe00000 	.word	0x3fe00000
 8006d90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d94:	9d00      	ldr	r5, [sp, #0]
 8006d96:	4642      	mov	r2, r8
 8006d98:	464b      	mov	r3, r9
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	f7f9 fd75 	bl	800088c <__aeabi_ddiv>
 8006da2:	f7f9 fef9 	bl	8000b98 <__aeabi_d2iz>
 8006da6:	9001      	str	r0, [sp, #4]
 8006da8:	f7f9 fbdc 	bl	8000564 <__aeabi_i2d>
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	f7f9 fc42 	bl	8000638 <__aeabi_dmul>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4630      	mov	r0, r6
 8006dba:	4639      	mov	r1, r7
 8006dbc:	f7f9 fa84 	bl	80002c8 <__aeabi_dsub>
 8006dc0:	9e01      	ldr	r6, [sp, #4]
 8006dc2:	9f04      	ldr	r7, [sp, #16]
 8006dc4:	3630      	adds	r6, #48	; 0x30
 8006dc6:	f805 6b01 	strb.w	r6, [r5], #1
 8006dca:	9e00      	ldr	r6, [sp, #0]
 8006dcc:	1bae      	subs	r6, r5, r6
 8006dce:	42b7      	cmp	r7, r6
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	d134      	bne.n	8006e40 <_dtoa_r+0x708>
 8006dd6:	f7f9 fa79 	bl	80002cc <__adddf3>
 8006dda:	4642      	mov	r2, r8
 8006ddc:	464b      	mov	r3, r9
 8006dde:	4606      	mov	r6, r0
 8006de0:	460f      	mov	r7, r1
 8006de2:	f7f9 feb9 	bl	8000b58 <__aeabi_dcmpgt>
 8006de6:	b9c8      	cbnz	r0, 8006e1c <_dtoa_r+0x6e4>
 8006de8:	4642      	mov	r2, r8
 8006dea:	464b      	mov	r3, r9
 8006dec:	4630      	mov	r0, r6
 8006dee:	4639      	mov	r1, r7
 8006df0:	f7f9 fe8a 	bl	8000b08 <__aeabi_dcmpeq>
 8006df4:	b110      	cbz	r0, 8006dfc <_dtoa_r+0x6c4>
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	07db      	lsls	r3, r3, #31
 8006dfa:	d40f      	bmi.n	8006e1c <_dtoa_r+0x6e4>
 8006dfc:	4651      	mov	r1, sl
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 fd86 	bl	8007910 <_Bfree>
 8006e04:	2300      	movs	r3, #0
 8006e06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e08:	702b      	strb	r3, [r5, #0]
 8006e0a:	f10b 0301 	add.w	r3, fp, #1
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f43f ace2 	beq.w	80067dc <_dtoa_r+0xa4>
 8006e18:	601d      	str	r5, [r3, #0]
 8006e1a:	e4df      	b.n	80067dc <_dtoa_r+0xa4>
 8006e1c:	465f      	mov	r7, fp
 8006e1e:	462b      	mov	r3, r5
 8006e20:	461d      	mov	r5, r3
 8006e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e26:	2a39      	cmp	r2, #57	; 0x39
 8006e28:	d106      	bne.n	8006e38 <_dtoa_r+0x700>
 8006e2a:	9a00      	ldr	r2, [sp, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d1f7      	bne.n	8006e20 <_dtoa_r+0x6e8>
 8006e30:	9900      	ldr	r1, [sp, #0]
 8006e32:	2230      	movs	r2, #48	; 0x30
 8006e34:	3701      	adds	r7, #1
 8006e36:	700a      	strb	r2, [r1, #0]
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	3201      	adds	r2, #1
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e790      	b.n	8006d62 <_dtoa_r+0x62a>
 8006e40:	4ba3      	ldr	r3, [pc, #652]	; (80070d0 <_dtoa_r+0x998>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	f7f9 fbf8 	bl	8000638 <__aeabi_dmul>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	460f      	mov	r7, r1
 8006e50:	f7f9 fe5a 	bl	8000b08 <__aeabi_dcmpeq>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d09e      	beq.n	8006d96 <_dtoa_r+0x65e>
 8006e58:	e7d0      	b.n	8006dfc <_dtoa_r+0x6c4>
 8006e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e5c:	2a00      	cmp	r2, #0
 8006e5e:	f000 80ca 	beq.w	8006ff6 <_dtoa_r+0x8be>
 8006e62:	9a07      	ldr	r2, [sp, #28]
 8006e64:	2a01      	cmp	r2, #1
 8006e66:	f300 80ad 	bgt.w	8006fc4 <_dtoa_r+0x88c>
 8006e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	f000 80a5 	beq.w	8006fbc <_dtoa_r+0x884>
 8006e72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e76:	9e08      	ldr	r6, [sp, #32]
 8006e78:	9d05      	ldr	r5, [sp, #20]
 8006e7a:	9a05      	ldr	r2, [sp, #20]
 8006e7c:	441a      	add	r2, r3
 8006e7e:	9205      	str	r2, [sp, #20]
 8006e80:	9a06      	ldr	r2, [sp, #24]
 8006e82:	2101      	movs	r1, #1
 8006e84:	441a      	add	r2, r3
 8006e86:	4620      	mov	r0, r4
 8006e88:	9206      	str	r2, [sp, #24]
 8006e8a:	f000 fdf7 	bl	8007a7c <__i2b>
 8006e8e:	4607      	mov	r7, r0
 8006e90:	b165      	cbz	r5, 8006eac <_dtoa_r+0x774>
 8006e92:	9b06      	ldr	r3, [sp, #24]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	dd09      	ble.n	8006eac <_dtoa_r+0x774>
 8006e98:	42ab      	cmp	r3, r5
 8006e9a:	9a05      	ldr	r2, [sp, #20]
 8006e9c:	bfa8      	it	ge
 8006e9e:	462b      	movge	r3, r5
 8006ea0:	1ad2      	subs	r2, r2, r3
 8006ea2:	9205      	str	r2, [sp, #20]
 8006ea4:	9a06      	ldr	r2, [sp, #24]
 8006ea6:	1aed      	subs	r5, r5, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	9306      	str	r3, [sp, #24]
 8006eac:	9b08      	ldr	r3, [sp, #32]
 8006eae:	b1f3      	cbz	r3, 8006eee <_dtoa_r+0x7b6>
 8006eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 80a3 	beq.w	8006ffe <_dtoa_r+0x8c6>
 8006eb8:	2e00      	cmp	r6, #0
 8006eba:	dd10      	ble.n	8006ede <_dtoa_r+0x7a6>
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f000 fe9b 	bl	8007bfc <__pow5mult>
 8006ec6:	4652      	mov	r2, sl
 8006ec8:	4601      	mov	r1, r0
 8006eca:	4607      	mov	r7, r0
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 fdeb 	bl	8007aa8 <__multiply>
 8006ed2:	4651      	mov	r1, sl
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 fd1a 	bl	8007910 <_Bfree>
 8006edc:	46c2      	mov	sl, r8
 8006ede:	9b08      	ldr	r3, [sp, #32]
 8006ee0:	1b9a      	subs	r2, r3, r6
 8006ee2:	d004      	beq.n	8006eee <_dtoa_r+0x7b6>
 8006ee4:	4651      	mov	r1, sl
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 fe88 	bl	8007bfc <__pow5mult>
 8006eec:	4682      	mov	sl, r0
 8006eee:	2101      	movs	r1, #1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 fdc3 	bl	8007a7c <__i2b>
 8006ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	4606      	mov	r6, r0
 8006efc:	f340 8081 	ble.w	8007002 <_dtoa_r+0x8ca>
 8006f00:	461a      	mov	r2, r3
 8006f02:	4601      	mov	r1, r0
 8006f04:	4620      	mov	r0, r4
 8006f06:	f000 fe79 	bl	8007bfc <__pow5mult>
 8006f0a:	9b07      	ldr	r3, [sp, #28]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	4606      	mov	r6, r0
 8006f10:	dd7a      	ble.n	8007008 <_dtoa_r+0x8d0>
 8006f12:	f04f 0800 	mov.w	r8, #0
 8006f16:	6933      	ldr	r3, [r6, #16]
 8006f18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f1c:	6918      	ldr	r0, [r3, #16]
 8006f1e:	f000 fd5f 	bl	80079e0 <__hi0bits>
 8006f22:	f1c0 0020 	rsb	r0, r0, #32
 8006f26:	9b06      	ldr	r3, [sp, #24]
 8006f28:	4418      	add	r0, r3
 8006f2a:	f010 001f 	ands.w	r0, r0, #31
 8006f2e:	f000 8094 	beq.w	800705a <_dtoa_r+0x922>
 8006f32:	f1c0 0320 	rsb	r3, r0, #32
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	f340 8085 	ble.w	8007046 <_dtoa_r+0x90e>
 8006f3c:	9b05      	ldr	r3, [sp, #20]
 8006f3e:	f1c0 001c 	rsb	r0, r0, #28
 8006f42:	4403      	add	r3, r0
 8006f44:	9305      	str	r3, [sp, #20]
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	4403      	add	r3, r0
 8006f4a:	4405      	add	r5, r0
 8006f4c:	9306      	str	r3, [sp, #24]
 8006f4e:	9b05      	ldr	r3, [sp, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	dd05      	ble.n	8006f60 <_dtoa_r+0x828>
 8006f54:	4651      	mov	r1, sl
 8006f56:	461a      	mov	r2, r3
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 fea9 	bl	8007cb0 <__lshift>
 8006f5e:	4682      	mov	sl, r0
 8006f60:	9b06      	ldr	r3, [sp, #24]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dd05      	ble.n	8006f72 <_dtoa_r+0x83a>
 8006f66:	4631      	mov	r1, r6
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fea0 	bl	8007cb0 <__lshift>
 8006f70:	4606      	mov	r6, r0
 8006f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d072      	beq.n	800705e <_dtoa_r+0x926>
 8006f78:	4631      	mov	r1, r6
 8006f7a:	4650      	mov	r0, sl
 8006f7c:	f000 ff04 	bl	8007d88 <__mcmp>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	da6c      	bge.n	800705e <_dtoa_r+0x926>
 8006f84:	2300      	movs	r3, #0
 8006f86:	4651      	mov	r1, sl
 8006f88:	220a      	movs	r2, #10
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fce2 	bl	8007954 <__multadd>
 8006f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f92:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006f96:	4682      	mov	sl, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 81b0 	beq.w	80072fe <_dtoa_r+0xbc6>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	220a      	movs	r2, #10
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 fcd5 	bl	8007954 <__multadd>
 8006faa:	9b01      	ldr	r3, [sp, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	4607      	mov	r7, r0
 8006fb0:	f300 8096 	bgt.w	80070e0 <_dtoa_r+0x9a8>
 8006fb4:	9b07      	ldr	r3, [sp, #28]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	dc59      	bgt.n	800706e <_dtoa_r+0x936>
 8006fba:	e091      	b.n	80070e0 <_dtoa_r+0x9a8>
 8006fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fc2:	e758      	b.n	8006e76 <_dtoa_r+0x73e>
 8006fc4:	9b04      	ldr	r3, [sp, #16]
 8006fc6:	1e5e      	subs	r6, r3, #1
 8006fc8:	9b08      	ldr	r3, [sp, #32]
 8006fca:	42b3      	cmp	r3, r6
 8006fcc:	bfbf      	itttt	lt
 8006fce:	9b08      	ldrlt	r3, [sp, #32]
 8006fd0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006fd2:	9608      	strlt	r6, [sp, #32]
 8006fd4:	1af3      	sublt	r3, r6, r3
 8006fd6:	bfb4      	ite	lt
 8006fd8:	18d2      	addlt	r2, r2, r3
 8006fda:	1b9e      	subge	r6, r3, r6
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	bfbc      	itt	lt
 8006fe0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006fe2:	2600      	movlt	r6, #0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bfb7      	itett	lt
 8006fe8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006fec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ff0:	1a9d      	sublt	r5, r3, r2
 8006ff2:	2300      	movlt	r3, #0
 8006ff4:	e741      	b.n	8006e7a <_dtoa_r+0x742>
 8006ff6:	9e08      	ldr	r6, [sp, #32]
 8006ff8:	9d05      	ldr	r5, [sp, #20]
 8006ffa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ffc:	e748      	b.n	8006e90 <_dtoa_r+0x758>
 8006ffe:	9a08      	ldr	r2, [sp, #32]
 8007000:	e770      	b.n	8006ee4 <_dtoa_r+0x7ac>
 8007002:	9b07      	ldr	r3, [sp, #28]
 8007004:	2b01      	cmp	r3, #1
 8007006:	dc19      	bgt.n	800703c <_dtoa_r+0x904>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	b9bb      	cbnz	r3, 800703c <_dtoa_r+0x904>
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007012:	b99b      	cbnz	r3, 800703c <_dtoa_r+0x904>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800701a:	0d1b      	lsrs	r3, r3, #20
 800701c:	051b      	lsls	r3, r3, #20
 800701e:	b183      	cbz	r3, 8007042 <_dtoa_r+0x90a>
 8007020:	9b05      	ldr	r3, [sp, #20]
 8007022:	3301      	adds	r3, #1
 8007024:	9305      	str	r3, [sp, #20]
 8007026:	9b06      	ldr	r3, [sp, #24]
 8007028:	3301      	adds	r3, #1
 800702a:	9306      	str	r3, [sp, #24]
 800702c:	f04f 0801 	mov.w	r8, #1
 8007030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007032:	2b00      	cmp	r3, #0
 8007034:	f47f af6f 	bne.w	8006f16 <_dtoa_r+0x7de>
 8007038:	2001      	movs	r0, #1
 800703a:	e774      	b.n	8006f26 <_dtoa_r+0x7ee>
 800703c:	f04f 0800 	mov.w	r8, #0
 8007040:	e7f6      	b.n	8007030 <_dtoa_r+0x8f8>
 8007042:	4698      	mov	r8, r3
 8007044:	e7f4      	b.n	8007030 <_dtoa_r+0x8f8>
 8007046:	d082      	beq.n	8006f4e <_dtoa_r+0x816>
 8007048:	9a05      	ldr	r2, [sp, #20]
 800704a:	331c      	adds	r3, #28
 800704c:	441a      	add	r2, r3
 800704e:	9205      	str	r2, [sp, #20]
 8007050:	9a06      	ldr	r2, [sp, #24]
 8007052:	441a      	add	r2, r3
 8007054:	441d      	add	r5, r3
 8007056:	9206      	str	r2, [sp, #24]
 8007058:	e779      	b.n	8006f4e <_dtoa_r+0x816>
 800705a:	4603      	mov	r3, r0
 800705c:	e7f4      	b.n	8007048 <_dtoa_r+0x910>
 800705e:	9b04      	ldr	r3, [sp, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	dc37      	bgt.n	80070d4 <_dtoa_r+0x99c>
 8007064:	9b07      	ldr	r3, [sp, #28]
 8007066:	2b02      	cmp	r3, #2
 8007068:	dd34      	ble.n	80070d4 <_dtoa_r+0x99c>
 800706a:	9b04      	ldr	r3, [sp, #16]
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	b963      	cbnz	r3, 800708c <_dtoa_r+0x954>
 8007072:	4631      	mov	r1, r6
 8007074:	2205      	movs	r2, #5
 8007076:	4620      	mov	r0, r4
 8007078:	f000 fc6c 	bl	8007954 <__multadd>
 800707c:	4601      	mov	r1, r0
 800707e:	4606      	mov	r6, r0
 8007080:	4650      	mov	r0, sl
 8007082:	f000 fe81 	bl	8007d88 <__mcmp>
 8007086:	2800      	cmp	r0, #0
 8007088:	f73f adbb 	bgt.w	8006c02 <_dtoa_r+0x4ca>
 800708c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708e:	9d00      	ldr	r5, [sp, #0]
 8007090:	ea6f 0b03 	mvn.w	fp, r3
 8007094:	f04f 0800 	mov.w	r8, #0
 8007098:	4631      	mov	r1, r6
 800709a:	4620      	mov	r0, r4
 800709c:	f000 fc38 	bl	8007910 <_Bfree>
 80070a0:	2f00      	cmp	r7, #0
 80070a2:	f43f aeab 	beq.w	8006dfc <_dtoa_r+0x6c4>
 80070a6:	f1b8 0f00 	cmp.w	r8, #0
 80070aa:	d005      	beq.n	80070b8 <_dtoa_r+0x980>
 80070ac:	45b8      	cmp	r8, r7
 80070ae:	d003      	beq.n	80070b8 <_dtoa_r+0x980>
 80070b0:	4641      	mov	r1, r8
 80070b2:	4620      	mov	r0, r4
 80070b4:	f000 fc2c 	bl	8007910 <_Bfree>
 80070b8:	4639      	mov	r1, r7
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 fc28 	bl	8007910 <_Bfree>
 80070c0:	e69c      	b.n	8006dfc <_dtoa_r+0x6c4>
 80070c2:	2600      	movs	r6, #0
 80070c4:	4637      	mov	r7, r6
 80070c6:	e7e1      	b.n	800708c <_dtoa_r+0x954>
 80070c8:	46bb      	mov	fp, r7
 80070ca:	4637      	mov	r7, r6
 80070cc:	e599      	b.n	8006c02 <_dtoa_r+0x4ca>
 80070ce:	bf00      	nop
 80070d0:	40240000 	.word	0x40240000
 80070d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 80c8 	beq.w	800726c <_dtoa_r+0xb34>
 80070dc:	9b04      	ldr	r3, [sp, #16]
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	2d00      	cmp	r5, #0
 80070e2:	dd05      	ble.n	80070f0 <_dtoa_r+0x9b8>
 80070e4:	4639      	mov	r1, r7
 80070e6:	462a      	mov	r2, r5
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fde1 	bl	8007cb0 <__lshift>
 80070ee:	4607      	mov	r7, r0
 80070f0:	f1b8 0f00 	cmp.w	r8, #0
 80070f4:	d05b      	beq.n	80071ae <_dtoa_r+0xa76>
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 fbc9 	bl	8007890 <_Balloc>
 80070fe:	4605      	mov	r5, r0
 8007100:	b928      	cbnz	r0, 800710e <_dtoa_r+0x9d6>
 8007102:	4b83      	ldr	r3, [pc, #524]	; (8007310 <_dtoa_r+0xbd8>)
 8007104:	4602      	mov	r2, r0
 8007106:	f240 21ef 	movw	r1, #751	; 0x2ef
 800710a:	f7ff bb2e 	b.w	800676a <_dtoa_r+0x32>
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	3202      	adds	r2, #2
 8007112:	0092      	lsls	r2, r2, #2
 8007114:	f107 010c 	add.w	r1, r7, #12
 8007118:	300c      	adds	r0, #12
 800711a:	f7ff fa74 	bl	8006606 <memcpy>
 800711e:	2201      	movs	r2, #1
 8007120:	4629      	mov	r1, r5
 8007122:	4620      	mov	r0, r4
 8007124:	f000 fdc4 	bl	8007cb0 <__lshift>
 8007128:	9b00      	ldr	r3, [sp, #0]
 800712a:	3301      	adds	r3, #1
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007132:	4413      	add	r3, r2
 8007134:	9308      	str	r3, [sp, #32]
 8007136:	9b02      	ldr	r3, [sp, #8]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	46b8      	mov	r8, r7
 800713e:	9306      	str	r3, [sp, #24]
 8007140:	4607      	mov	r7, r0
 8007142:	9b04      	ldr	r3, [sp, #16]
 8007144:	4631      	mov	r1, r6
 8007146:	3b01      	subs	r3, #1
 8007148:	4650      	mov	r0, sl
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	f7ff fa69 	bl	8006622 <quorem>
 8007150:	4641      	mov	r1, r8
 8007152:	9002      	str	r0, [sp, #8]
 8007154:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007158:	4650      	mov	r0, sl
 800715a:	f000 fe15 	bl	8007d88 <__mcmp>
 800715e:	463a      	mov	r2, r7
 8007160:	9005      	str	r0, [sp, #20]
 8007162:	4631      	mov	r1, r6
 8007164:	4620      	mov	r0, r4
 8007166:	f000 fe2b 	bl	8007dc0 <__mdiff>
 800716a:	68c2      	ldr	r2, [r0, #12]
 800716c:	4605      	mov	r5, r0
 800716e:	bb02      	cbnz	r2, 80071b2 <_dtoa_r+0xa7a>
 8007170:	4601      	mov	r1, r0
 8007172:	4650      	mov	r0, sl
 8007174:	f000 fe08 	bl	8007d88 <__mcmp>
 8007178:	4602      	mov	r2, r0
 800717a:	4629      	mov	r1, r5
 800717c:	4620      	mov	r0, r4
 800717e:	9209      	str	r2, [sp, #36]	; 0x24
 8007180:	f000 fbc6 	bl	8007910 <_Bfree>
 8007184:	9b07      	ldr	r3, [sp, #28]
 8007186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007188:	9d04      	ldr	r5, [sp, #16]
 800718a:	ea43 0102 	orr.w	r1, r3, r2
 800718e:	9b06      	ldr	r3, [sp, #24]
 8007190:	4319      	orrs	r1, r3
 8007192:	d110      	bne.n	80071b6 <_dtoa_r+0xa7e>
 8007194:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007198:	d029      	beq.n	80071ee <_dtoa_r+0xab6>
 800719a:	9b05      	ldr	r3, [sp, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dd02      	ble.n	80071a6 <_dtoa_r+0xa6e>
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	f883 9000 	strb.w	r9, [r3]
 80071ac:	e774      	b.n	8007098 <_dtoa_r+0x960>
 80071ae:	4638      	mov	r0, r7
 80071b0:	e7ba      	b.n	8007128 <_dtoa_r+0x9f0>
 80071b2:	2201      	movs	r2, #1
 80071b4:	e7e1      	b.n	800717a <_dtoa_r+0xa42>
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	db04      	blt.n	80071c6 <_dtoa_r+0xa8e>
 80071bc:	9907      	ldr	r1, [sp, #28]
 80071be:	430b      	orrs	r3, r1
 80071c0:	9906      	ldr	r1, [sp, #24]
 80071c2:	430b      	orrs	r3, r1
 80071c4:	d120      	bne.n	8007208 <_dtoa_r+0xad0>
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	dded      	ble.n	80071a6 <_dtoa_r+0xa6e>
 80071ca:	4651      	mov	r1, sl
 80071cc:	2201      	movs	r2, #1
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 fd6e 	bl	8007cb0 <__lshift>
 80071d4:	4631      	mov	r1, r6
 80071d6:	4682      	mov	sl, r0
 80071d8:	f000 fdd6 	bl	8007d88 <__mcmp>
 80071dc:	2800      	cmp	r0, #0
 80071de:	dc03      	bgt.n	80071e8 <_dtoa_r+0xab0>
 80071e0:	d1e1      	bne.n	80071a6 <_dtoa_r+0xa6e>
 80071e2:	f019 0f01 	tst.w	r9, #1
 80071e6:	d0de      	beq.n	80071a6 <_dtoa_r+0xa6e>
 80071e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80071ec:	d1d8      	bne.n	80071a0 <_dtoa_r+0xa68>
 80071ee:	9a01      	ldr	r2, [sp, #4]
 80071f0:	2339      	movs	r3, #57	; 0x39
 80071f2:	7013      	strb	r3, [r2, #0]
 80071f4:	462b      	mov	r3, r5
 80071f6:	461d      	mov	r5, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071fe:	2a39      	cmp	r2, #57	; 0x39
 8007200:	d06c      	beq.n	80072dc <_dtoa_r+0xba4>
 8007202:	3201      	adds	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e747      	b.n	8007098 <_dtoa_r+0x960>
 8007208:	2a00      	cmp	r2, #0
 800720a:	dd07      	ble.n	800721c <_dtoa_r+0xae4>
 800720c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007210:	d0ed      	beq.n	80071ee <_dtoa_r+0xab6>
 8007212:	9a01      	ldr	r2, [sp, #4]
 8007214:	f109 0301 	add.w	r3, r9, #1
 8007218:	7013      	strb	r3, [r2, #0]
 800721a:	e73d      	b.n	8007098 <_dtoa_r+0x960>
 800721c:	9b04      	ldr	r3, [sp, #16]
 800721e:	9a08      	ldr	r2, [sp, #32]
 8007220:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007224:	4293      	cmp	r3, r2
 8007226:	d043      	beq.n	80072b0 <_dtoa_r+0xb78>
 8007228:	4651      	mov	r1, sl
 800722a:	2300      	movs	r3, #0
 800722c:	220a      	movs	r2, #10
 800722e:	4620      	mov	r0, r4
 8007230:	f000 fb90 	bl	8007954 <__multadd>
 8007234:	45b8      	cmp	r8, r7
 8007236:	4682      	mov	sl, r0
 8007238:	f04f 0300 	mov.w	r3, #0
 800723c:	f04f 020a 	mov.w	r2, #10
 8007240:	4641      	mov	r1, r8
 8007242:	4620      	mov	r0, r4
 8007244:	d107      	bne.n	8007256 <_dtoa_r+0xb1e>
 8007246:	f000 fb85 	bl	8007954 <__multadd>
 800724a:	4680      	mov	r8, r0
 800724c:	4607      	mov	r7, r0
 800724e:	9b04      	ldr	r3, [sp, #16]
 8007250:	3301      	adds	r3, #1
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	e775      	b.n	8007142 <_dtoa_r+0xa0a>
 8007256:	f000 fb7d 	bl	8007954 <__multadd>
 800725a:	4639      	mov	r1, r7
 800725c:	4680      	mov	r8, r0
 800725e:	2300      	movs	r3, #0
 8007260:	220a      	movs	r2, #10
 8007262:	4620      	mov	r0, r4
 8007264:	f000 fb76 	bl	8007954 <__multadd>
 8007268:	4607      	mov	r7, r0
 800726a:	e7f0      	b.n	800724e <_dtoa_r+0xb16>
 800726c:	9b04      	ldr	r3, [sp, #16]
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	9d00      	ldr	r5, [sp, #0]
 8007272:	4631      	mov	r1, r6
 8007274:	4650      	mov	r0, sl
 8007276:	f7ff f9d4 	bl	8006622 <quorem>
 800727a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800727e:	9b00      	ldr	r3, [sp, #0]
 8007280:	f805 9b01 	strb.w	r9, [r5], #1
 8007284:	1aea      	subs	r2, r5, r3
 8007286:	9b01      	ldr	r3, [sp, #4]
 8007288:	4293      	cmp	r3, r2
 800728a:	dd07      	ble.n	800729c <_dtoa_r+0xb64>
 800728c:	4651      	mov	r1, sl
 800728e:	2300      	movs	r3, #0
 8007290:	220a      	movs	r2, #10
 8007292:	4620      	mov	r0, r4
 8007294:	f000 fb5e 	bl	8007954 <__multadd>
 8007298:	4682      	mov	sl, r0
 800729a:	e7ea      	b.n	8007272 <_dtoa_r+0xb3a>
 800729c:	9b01      	ldr	r3, [sp, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bfc8      	it	gt
 80072a2:	461d      	movgt	r5, r3
 80072a4:	9b00      	ldr	r3, [sp, #0]
 80072a6:	bfd8      	it	le
 80072a8:	2501      	movle	r5, #1
 80072aa:	441d      	add	r5, r3
 80072ac:	f04f 0800 	mov.w	r8, #0
 80072b0:	4651      	mov	r1, sl
 80072b2:	2201      	movs	r2, #1
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fcfb 	bl	8007cb0 <__lshift>
 80072ba:	4631      	mov	r1, r6
 80072bc:	4682      	mov	sl, r0
 80072be:	f000 fd63 	bl	8007d88 <__mcmp>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	dc96      	bgt.n	80071f4 <_dtoa_r+0xabc>
 80072c6:	d102      	bne.n	80072ce <_dtoa_r+0xb96>
 80072c8:	f019 0f01 	tst.w	r9, #1
 80072cc:	d192      	bne.n	80071f4 <_dtoa_r+0xabc>
 80072ce:	462b      	mov	r3, r5
 80072d0:	461d      	mov	r5, r3
 80072d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072d6:	2a30      	cmp	r2, #48	; 0x30
 80072d8:	d0fa      	beq.n	80072d0 <_dtoa_r+0xb98>
 80072da:	e6dd      	b.n	8007098 <_dtoa_r+0x960>
 80072dc:	9a00      	ldr	r2, [sp, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d189      	bne.n	80071f6 <_dtoa_r+0xabe>
 80072e2:	f10b 0b01 	add.w	fp, fp, #1
 80072e6:	2331      	movs	r3, #49	; 0x31
 80072e8:	e796      	b.n	8007218 <_dtoa_r+0xae0>
 80072ea:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <_dtoa_r+0xbdc>)
 80072ec:	f7ff ba99 	b.w	8006822 <_dtoa_r+0xea>
 80072f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f47f aa6d 	bne.w	80067d2 <_dtoa_r+0x9a>
 80072f8:	4b07      	ldr	r3, [pc, #28]	; (8007318 <_dtoa_r+0xbe0>)
 80072fa:	f7ff ba92 	b.w	8006822 <_dtoa_r+0xea>
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dcb5      	bgt.n	8007270 <_dtoa_r+0xb38>
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	2b02      	cmp	r3, #2
 8007308:	f73f aeb1 	bgt.w	800706e <_dtoa_r+0x936>
 800730c:	e7b0      	b.n	8007270 <_dtoa_r+0xb38>
 800730e:	bf00      	nop
 8007310:	08008960 	.word	0x08008960
 8007314:	080088c0 	.word	0x080088c0
 8007318:	080088e4 	.word	0x080088e4

0800731c <__ssputs_r>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	688e      	ldr	r6, [r1, #8]
 8007322:	461f      	mov	r7, r3
 8007324:	42be      	cmp	r6, r7
 8007326:	680b      	ldr	r3, [r1, #0]
 8007328:	4682      	mov	sl, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4690      	mov	r8, r2
 800732e:	d82c      	bhi.n	800738a <__ssputs_r+0x6e>
 8007330:	898a      	ldrh	r2, [r1, #12]
 8007332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007336:	d026      	beq.n	8007386 <__ssputs_r+0x6a>
 8007338:	6965      	ldr	r5, [r4, #20]
 800733a:	6909      	ldr	r1, [r1, #16]
 800733c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007340:	eba3 0901 	sub.w	r9, r3, r1
 8007344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007348:	1c7b      	adds	r3, r7, #1
 800734a:	444b      	add	r3, r9
 800734c:	106d      	asrs	r5, r5, #1
 800734e:	429d      	cmp	r5, r3
 8007350:	bf38      	it	cc
 8007352:	461d      	movcc	r5, r3
 8007354:	0553      	lsls	r3, r2, #21
 8007356:	d527      	bpl.n	80073a8 <__ssputs_r+0x8c>
 8007358:	4629      	mov	r1, r5
 800735a:	f000 f95f 	bl	800761c <_malloc_r>
 800735e:	4606      	mov	r6, r0
 8007360:	b360      	cbz	r0, 80073bc <__ssputs_r+0xa0>
 8007362:	6921      	ldr	r1, [r4, #16]
 8007364:	464a      	mov	r2, r9
 8007366:	f7ff f94e 	bl	8006606 <memcpy>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	6126      	str	r6, [r4, #16]
 8007378:	6165      	str	r5, [r4, #20]
 800737a:	444e      	add	r6, r9
 800737c:	eba5 0509 	sub.w	r5, r5, r9
 8007380:	6026      	str	r6, [r4, #0]
 8007382:	60a5      	str	r5, [r4, #8]
 8007384:	463e      	mov	r6, r7
 8007386:	42be      	cmp	r6, r7
 8007388:	d900      	bls.n	800738c <__ssputs_r+0x70>
 800738a:	463e      	mov	r6, r7
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	4632      	mov	r2, r6
 8007390:	4641      	mov	r1, r8
 8007392:	f000 fe6b 	bl	800806c <memmove>
 8007396:	68a3      	ldr	r3, [r4, #8]
 8007398:	1b9b      	subs	r3, r3, r6
 800739a:	60a3      	str	r3, [r4, #8]
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	4433      	add	r3, r6
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	2000      	movs	r0, #0
 80073a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a8:	462a      	mov	r2, r5
 80073aa:	f000 fe30 	bl	800800e <_realloc_r>
 80073ae:	4606      	mov	r6, r0
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d1e0      	bne.n	8007376 <__ssputs_r+0x5a>
 80073b4:	6921      	ldr	r1, [r4, #16]
 80073b6:	4650      	mov	r0, sl
 80073b8:	f000 fefc 	bl	80081b4 <_free_r>
 80073bc:	230c      	movs	r3, #12
 80073be:	f8ca 3000 	str.w	r3, [sl]
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ce:	e7e9      	b.n	80073a4 <__ssputs_r+0x88>

080073d0 <_svfiprintf_r>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	4698      	mov	r8, r3
 80073d6:	898b      	ldrh	r3, [r1, #12]
 80073d8:	061b      	lsls	r3, r3, #24
 80073da:	b09d      	sub	sp, #116	; 0x74
 80073dc:	4607      	mov	r7, r0
 80073de:	460d      	mov	r5, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	d50e      	bpl.n	8007402 <_svfiprintf_r+0x32>
 80073e4:	690b      	ldr	r3, [r1, #16]
 80073e6:	b963      	cbnz	r3, 8007402 <_svfiprintf_r+0x32>
 80073e8:	2140      	movs	r1, #64	; 0x40
 80073ea:	f000 f917 	bl	800761c <_malloc_r>
 80073ee:	6028      	str	r0, [r5, #0]
 80073f0:	6128      	str	r0, [r5, #16]
 80073f2:	b920      	cbnz	r0, 80073fe <_svfiprintf_r+0x2e>
 80073f4:	230c      	movs	r3, #12
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073fc:	e0d0      	b.n	80075a0 <_svfiprintf_r+0x1d0>
 80073fe:	2340      	movs	r3, #64	; 0x40
 8007400:	616b      	str	r3, [r5, #20]
 8007402:	2300      	movs	r3, #0
 8007404:	9309      	str	r3, [sp, #36]	; 0x24
 8007406:	2320      	movs	r3, #32
 8007408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800740c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007410:	2330      	movs	r3, #48	; 0x30
 8007412:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80075b8 <_svfiprintf_r+0x1e8>
 8007416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800741a:	f04f 0901 	mov.w	r9, #1
 800741e:	4623      	mov	r3, r4
 8007420:	469a      	mov	sl, r3
 8007422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007426:	b10a      	cbz	r2, 800742c <_svfiprintf_r+0x5c>
 8007428:	2a25      	cmp	r2, #37	; 0x25
 800742a:	d1f9      	bne.n	8007420 <_svfiprintf_r+0x50>
 800742c:	ebba 0b04 	subs.w	fp, sl, r4
 8007430:	d00b      	beq.n	800744a <_svfiprintf_r+0x7a>
 8007432:	465b      	mov	r3, fp
 8007434:	4622      	mov	r2, r4
 8007436:	4629      	mov	r1, r5
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff ff6f 	bl	800731c <__ssputs_r>
 800743e:	3001      	adds	r0, #1
 8007440:	f000 80a9 	beq.w	8007596 <_svfiprintf_r+0x1c6>
 8007444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007446:	445a      	add	r2, fp
 8007448:	9209      	str	r2, [sp, #36]	; 0x24
 800744a:	f89a 3000 	ldrb.w	r3, [sl]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80a1 	beq.w	8007596 <_svfiprintf_r+0x1c6>
 8007454:	2300      	movs	r3, #0
 8007456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800745a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800745e:	f10a 0a01 	add.w	sl, sl, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	9307      	str	r3, [sp, #28]
 8007466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800746a:	931a      	str	r3, [sp, #104]	; 0x68
 800746c:	4654      	mov	r4, sl
 800746e:	2205      	movs	r2, #5
 8007470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007474:	4850      	ldr	r0, [pc, #320]	; (80075b8 <_svfiprintf_r+0x1e8>)
 8007476:	f7f8 fecb 	bl	8000210 <memchr>
 800747a:	9a04      	ldr	r2, [sp, #16]
 800747c:	b9d8      	cbnz	r0, 80074b6 <_svfiprintf_r+0xe6>
 800747e:	06d0      	lsls	r0, r2, #27
 8007480:	bf44      	itt	mi
 8007482:	2320      	movmi	r3, #32
 8007484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007488:	0711      	lsls	r1, r2, #28
 800748a:	bf44      	itt	mi
 800748c:	232b      	movmi	r3, #43	; 0x2b
 800748e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007492:	f89a 3000 	ldrb.w	r3, [sl]
 8007496:	2b2a      	cmp	r3, #42	; 0x2a
 8007498:	d015      	beq.n	80074c6 <_svfiprintf_r+0xf6>
 800749a:	9a07      	ldr	r2, [sp, #28]
 800749c:	4654      	mov	r4, sl
 800749e:	2000      	movs	r0, #0
 80074a0:	f04f 0c0a 	mov.w	ip, #10
 80074a4:	4621      	mov	r1, r4
 80074a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074aa:	3b30      	subs	r3, #48	; 0x30
 80074ac:	2b09      	cmp	r3, #9
 80074ae:	d94d      	bls.n	800754c <_svfiprintf_r+0x17c>
 80074b0:	b1b0      	cbz	r0, 80074e0 <_svfiprintf_r+0x110>
 80074b2:	9207      	str	r2, [sp, #28]
 80074b4:	e014      	b.n	80074e0 <_svfiprintf_r+0x110>
 80074b6:	eba0 0308 	sub.w	r3, r0, r8
 80074ba:	fa09 f303 	lsl.w	r3, r9, r3
 80074be:	4313      	orrs	r3, r2
 80074c0:	9304      	str	r3, [sp, #16]
 80074c2:	46a2      	mov	sl, r4
 80074c4:	e7d2      	b.n	800746c <_svfiprintf_r+0x9c>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	1d19      	adds	r1, r3, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	9103      	str	r1, [sp, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfbb      	ittet	lt
 80074d2:	425b      	neglt	r3, r3
 80074d4:	f042 0202 	orrlt.w	r2, r2, #2
 80074d8:	9307      	strge	r3, [sp, #28]
 80074da:	9307      	strlt	r3, [sp, #28]
 80074dc:	bfb8      	it	lt
 80074de:	9204      	strlt	r2, [sp, #16]
 80074e0:	7823      	ldrb	r3, [r4, #0]
 80074e2:	2b2e      	cmp	r3, #46	; 0x2e
 80074e4:	d10c      	bne.n	8007500 <_svfiprintf_r+0x130>
 80074e6:	7863      	ldrb	r3, [r4, #1]
 80074e8:	2b2a      	cmp	r3, #42	; 0x2a
 80074ea:	d134      	bne.n	8007556 <_svfiprintf_r+0x186>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9203      	str	r2, [sp, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfb8      	it	lt
 80074f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80074fc:	3402      	adds	r4, #2
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80075c8 <_svfiprintf_r+0x1f8>
 8007504:	7821      	ldrb	r1, [r4, #0]
 8007506:	2203      	movs	r2, #3
 8007508:	4650      	mov	r0, sl
 800750a:	f7f8 fe81 	bl	8000210 <memchr>
 800750e:	b138      	cbz	r0, 8007520 <_svfiprintf_r+0x150>
 8007510:	9b04      	ldr	r3, [sp, #16]
 8007512:	eba0 000a 	sub.w	r0, r0, sl
 8007516:	2240      	movs	r2, #64	; 0x40
 8007518:	4082      	lsls	r2, r0
 800751a:	4313      	orrs	r3, r2
 800751c:	3401      	adds	r4, #1
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007524:	4825      	ldr	r0, [pc, #148]	; (80075bc <_svfiprintf_r+0x1ec>)
 8007526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800752a:	2206      	movs	r2, #6
 800752c:	f7f8 fe70 	bl	8000210 <memchr>
 8007530:	2800      	cmp	r0, #0
 8007532:	d038      	beq.n	80075a6 <_svfiprintf_r+0x1d6>
 8007534:	4b22      	ldr	r3, [pc, #136]	; (80075c0 <_svfiprintf_r+0x1f0>)
 8007536:	bb1b      	cbnz	r3, 8007580 <_svfiprintf_r+0x1b0>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	3307      	adds	r3, #7
 800753c:	f023 0307 	bic.w	r3, r3, #7
 8007540:	3308      	adds	r3, #8
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007546:	4433      	add	r3, r6
 8007548:	9309      	str	r3, [sp, #36]	; 0x24
 800754a:	e768      	b.n	800741e <_svfiprintf_r+0x4e>
 800754c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007550:	460c      	mov	r4, r1
 8007552:	2001      	movs	r0, #1
 8007554:	e7a6      	b.n	80074a4 <_svfiprintf_r+0xd4>
 8007556:	2300      	movs	r3, #0
 8007558:	3401      	adds	r4, #1
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	4619      	mov	r1, r3
 800755e:	f04f 0c0a 	mov.w	ip, #10
 8007562:	4620      	mov	r0, r4
 8007564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007568:	3a30      	subs	r2, #48	; 0x30
 800756a:	2a09      	cmp	r2, #9
 800756c:	d903      	bls.n	8007576 <_svfiprintf_r+0x1a6>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0c6      	beq.n	8007500 <_svfiprintf_r+0x130>
 8007572:	9105      	str	r1, [sp, #20]
 8007574:	e7c4      	b.n	8007500 <_svfiprintf_r+0x130>
 8007576:	fb0c 2101 	mla	r1, ip, r1, r2
 800757a:	4604      	mov	r4, r0
 800757c:	2301      	movs	r3, #1
 800757e:	e7f0      	b.n	8007562 <_svfiprintf_r+0x192>
 8007580:	ab03      	add	r3, sp, #12
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	462a      	mov	r2, r5
 8007586:	4b0f      	ldr	r3, [pc, #60]	; (80075c4 <_svfiprintf_r+0x1f4>)
 8007588:	a904      	add	r1, sp, #16
 800758a:	4638      	mov	r0, r7
 800758c:	f7fe fb5a 	bl	8005c44 <_printf_float>
 8007590:	1c42      	adds	r2, r0, #1
 8007592:	4606      	mov	r6, r0
 8007594:	d1d6      	bne.n	8007544 <_svfiprintf_r+0x174>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	065b      	lsls	r3, r3, #25
 800759a:	f53f af2d 	bmi.w	80073f8 <_svfiprintf_r+0x28>
 800759e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075a0:	b01d      	add	sp, #116	; 0x74
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	ab03      	add	r3, sp, #12
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	462a      	mov	r2, r5
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <_svfiprintf_r+0x1f4>)
 80075ae:	a904      	add	r1, sp, #16
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7fe fdeb 	bl	800618c <_printf_i>
 80075b6:	e7eb      	b.n	8007590 <_svfiprintf_r+0x1c0>
 80075b8:	08008971 	.word	0x08008971
 80075bc:	0800897b 	.word	0x0800897b
 80075c0:	08005c45 	.word	0x08005c45
 80075c4:	0800731d 	.word	0x0800731d
 80075c8:	08008977 	.word	0x08008977

080075cc <malloc>:
 80075cc:	4b02      	ldr	r3, [pc, #8]	; (80075d8 <malloc+0xc>)
 80075ce:	4601      	mov	r1, r0
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f000 b823 	b.w	800761c <_malloc_r>
 80075d6:	bf00      	nop
 80075d8:	20000090 	.word	0x20000090

080075dc <sbrk_aligned>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4e0e      	ldr	r6, [pc, #56]	; (8007618 <sbrk_aligned+0x3c>)
 80075e0:	460c      	mov	r4, r1
 80075e2:	6831      	ldr	r1, [r6, #0]
 80075e4:	4605      	mov	r5, r0
 80075e6:	b911      	cbnz	r1, 80075ee <sbrk_aligned+0x12>
 80075e8:	f000 fd8e 	bl	8008108 <_sbrk_r>
 80075ec:	6030      	str	r0, [r6, #0]
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 fd89 	bl	8008108 <_sbrk_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	d00a      	beq.n	8007610 <sbrk_aligned+0x34>
 80075fa:	1cc4      	adds	r4, r0, #3
 80075fc:	f024 0403 	bic.w	r4, r4, #3
 8007600:	42a0      	cmp	r0, r4
 8007602:	d007      	beq.n	8007614 <sbrk_aligned+0x38>
 8007604:	1a21      	subs	r1, r4, r0
 8007606:	4628      	mov	r0, r5
 8007608:	f000 fd7e 	bl	8008108 <_sbrk_r>
 800760c:	3001      	adds	r0, #1
 800760e:	d101      	bne.n	8007614 <sbrk_aligned+0x38>
 8007610:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007614:	4620      	mov	r0, r4
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	200004a0 	.word	0x200004a0

0800761c <_malloc_r>:
 800761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007620:	1ccd      	adds	r5, r1, #3
 8007622:	f025 0503 	bic.w	r5, r5, #3
 8007626:	3508      	adds	r5, #8
 8007628:	2d0c      	cmp	r5, #12
 800762a:	bf38      	it	cc
 800762c:	250c      	movcc	r5, #12
 800762e:	2d00      	cmp	r5, #0
 8007630:	4607      	mov	r7, r0
 8007632:	db01      	blt.n	8007638 <_malloc_r+0x1c>
 8007634:	42a9      	cmp	r1, r5
 8007636:	d905      	bls.n	8007644 <_malloc_r+0x28>
 8007638:	230c      	movs	r3, #12
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	2600      	movs	r6, #0
 800763e:	4630      	mov	r0, r6
 8007640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007718 <_malloc_r+0xfc>
 8007648:	f000 f916 	bl	8007878 <__malloc_lock>
 800764c:	f8d8 3000 	ldr.w	r3, [r8]
 8007650:	461c      	mov	r4, r3
 8007652:	bb5c      	cbnz	r4, 80076ac <_malloc_r+0x90>
 8007654:	4629      	mov	r1, r5
 8007656:	4638      	mov	r0, r7
 8007658:	f7ff ffc0 	bl	80075dc <sbrk_aligned>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	4604      	mov	r4, r0
 8007660:	d155      	bne.n	800770e <_malloc_r+0xf2>
 8007662:	f8d8 4000 	ldr.w	r4, [r8]
 8007666:	4626      	mov	r6, r4
 8007668:	2e00      	cmp	r6, #0
 800766a:	d145      	bne.n	80076f8 <_malloc_r+0xdc>
 800766c:	2c00      	cmp	r4, #0
 800766e:	d048      	beq.n	8007702 <_malloc_r+0xe6>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	4631      	mov	r1, r6
 8007674:	4638      	mov	r0, r7
 8007676:	eb04 0903 	add.w	r9, r4, r3
 800767a:	f000 fd45 	bl	8008108 <_sbrk_r>
 800767e:	4581      	cmp	r9, r0
 8007680:	d13f      	bne.n	8007702 <_malloc_r+0xe6>
 8007682:	6821      	ldr	r1, [r4, #0]
 8007684:	1a6d      	subs	r5, r5, r1
 8007686:	4629      	mov	r1, r5
 8007688:	4638      	mov	r0, r7
 800768a:	f7ff ffa7 	bl	80075dc <sbrk_aligned>
 800768e:	3001      	adds	r0, #1
 8007690:	d037      	beq.n	8007702 <_malloc_r+0xe6>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	442b      	add	r3, r5
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	f8d8 3000 	ldr.w	r3, [r8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d038      	beq.n	8007712 <_malloc_r+0xf6>
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	42a2      	cmp	r2, r4
 80076a4:	d12b      	bne.n	80076fe <_malloc_r+0xe2>
 80076a6:	2200      	movs	r2, #0
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	e00f      	b.n	80076cc <_malloc_r+0xb0>
 80076ac:	6822      	ldr	r2, [r4, #0]
 80076ae:	1b52      	subs	r2, r2, r5
 80076b0:	d41f      	bmi.n	80076f2 <_malloc_r+0xd6>
 80076b2:	2a0b      	cmp	r2, #11
 80076b4:	d917      	bls.n	80076e6 <_malloc_r+0xca>
 80076b6:	1961      	adds	r1, r4, r5
 80076b8:	42a3      	cmp	r3, r4
 80076ba:	6025      	str	r5, [r4, #0]
 80076bc:	bf18      	it	ne
 80076be:	6059      	strne	r1, [r3, #4]
 80076c0:	6863      	ldr	r3, [r4, #4]
 80076c2:	bf08      	it	eq
 80076c4:	f8c8 1000 	streq.w	r1, [r8]
 80076c8:	5162      	str	r2, [r4, r5]
 80076ca:	604b      	str	r3, [r1, #4]
 80076cc:	4638      	mov	r0, r7
 80076ce:	f104 060b 	add.w	r6, r4, #11
 80076d2:	f000 f8d7 	bl	8007884 <__malloc_unlock>
 80076d6:	f026 0607 	bic.w	r6, r6, #7
 80076da:	1d23      	adds	r3, r4, #4
 80076dc:	1af2      	subs	r2, r6, r3
 80076de:	d0ae      	beq.n	800763e <_malloc_r+0x22>
 80076e0:	1b9b      	subs	r3, r3, r6
 80076e2:	50a3      	str	r3, [r4, r2]
 80076e4:	e7ab      	b.n	800763e <_malloc_r+0x22>
 80076e6:	42a3      	cmp	r3, r4
 80076e8:	6862      	ldr	r2, [r4, #4]
 80076ea:	d1dd      	bne.n	80076a8 <_malloc_r+0x8c>
 80076ec:	f8c8 2000 	str.w	r2, [r8]
 80076f0:	e7ec      	b.n	80076cc <_malloc_r+0xb0>
 80076f2:	4623      	mov	r3, r4
 80076f4:	6864      	ldr	r4, [r4, #4]
 80076f6:	e7ac      	b.n	8007652 <_malloc_r+0x36>
 80076f8:	4634      	mov	r4, r6
 80076fa:	6876      	ldr	r6, [r6, #4]
 80076fc:	e7b4      	b.n	8007668 <_malloc_r+0x4c>
 80076fe:	4613      	mov	r3, r2
 8007700:	e7cc      	b.n	800769c <_malloc_r+0x80>
 8007702:	230c      	movs	r3, #12
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	4638      	mov	r0, r7
 8007708:	f000 f8bc 	bl	8007884 <__malloc_unlock>
 800770c:	e797      	b.n	800763e <_malloc_r+0x22>
 800770e:	6025      	str	r5, [r4, #0]
 8007710:	e7dc      	b.n	80076cc <_malloc_r+0xb0>
 8007712:	605b      	str	r3, [r3, #4]
 8007714:	deff      	udf	#255	; 0xff
 8007716:	bf00      	nop
 8007718:	2000049c 	.word	0x2000049c

0800771c <__sflush_r>:
 800771c:	898a      	ldrh	r2, [r1, #12]
 800771e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007722:	4605      	mov	r5, r0
 8007724:	0710      	lsls	r0, r2, #28
 8007726:	460c      	mov	r4, r1
 8007728:	d458      	bmi.n	80077dc <__sflush_r+0xc0>
 800772a:	684b      	ldr	r3, [r1, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	dc05      	bgt.n	800773c <__sflush_r+0x20>
 8007730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	dc02      	bgt.n	800773c <__sflush_r+0x20>
 8007736:	2000      	movs	r0, #0
 8007738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800773c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800773e:	2e00      	cmp	r6, #0
 8007740:	d0f9      	beq.n	8007736 <__sflush_r+0x1a>
 8007742:	2300      	movs	r3, #0
 8007744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007748:	682f      	ldr	r7, [r5, #0]
 800774a:	6a21      	ldr	r1, [r4, #32]
 800774c:	602b      	str	r3, [r5, #0]
 800774e:	d032      	beq.n	80077b6 <__sflush_r+0x9a>
 8007750:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	075a      	lsls	r2, r3, #29
 8007756:	d505      	bpl.n	8007764 <__sflush_r+0x48>
 8007758:	6863      	ldr	r3, [r4, #4]
 800775a:	1ac0      	subs	r0, r0, r3
 800775c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800775e:	b10b      	cbz	r3, 8007764 <__sflush_r+0x48>
 8007760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007762:	1ac0      	subs	r0, r0, r3
 8007764:	2300      	movs	r3, #0
 8007766:	4602      	mov	r2, r0
 8007768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800776a:	6a21      	ldr	r1, [r4, #32]
 800776c:	4628      	mov	r0, r5
 800776e:	47b0      	blx	r6
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	d106      	bne.n	8007784 <__sflush_r+0x68>
 8007776:	6829      	ldr	r1, [r5, #0]
 8007778:	291d      	cmp	r1, #29
 800777a:	d82b      	bhi.n	80077d4 <__sflush_r+0xb8>
 800777c:	4a29      	ldr	r2, [pc, #164]	; (8007824 <__sflush_r+0x108>)
 800777e:	410a      	asrs	r2, r1
 8007780:	07d6      	lsls	r6, r2, #31
 8007782:	d427      	bmi.n	80077d4 <__sflush_r+0xb8>
 8007784:	2200      	movs	r2, #0
 8007786:	6062      	str	r2, [r4, #4]
 8007788:	04d9      	lsls	r1, r3, #19
 800778a:	6922      	ldr	r2, [r4, #16]
 800778c:	6022      	str	r2, [r4, #0]
 800778e:	d504      	bpl.n	800779a <__sflush_r+0x7e>
 8007790:	1c42      	adds	r2, r0, #1
 8007792:	d101      	bne.n	8007798 <__sflush_r+0x7c>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b903      	cbnz	r3, 800779a <__sflush_r+0x7e>
 8007798:	6560      	str	r0, [r4, #84]	; 0x54
 800779a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800779c:	602f      	str	r7, [r5, #0]
 800779e:	2900      	cmp	r1, #0
 80077a0:	d0c9      	beq.n	8007736 <__sflush_r+0x1a>
 80077a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077a6:	4299      	cmp	r1, r3
 80077a8:	d002      	beq.n	80077b0 <__sflush_r+0x94>
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 fd02 	bl	80081b4 <_free_r>
 80077b0:	2000      	movs	r0, #0
 80077b2:	6360      	str	r0, [r4, #52]	; 0x34
 80077b4:	e7c0      	b.n	8007738 <__sflush_r+0x1c>
 80077b6:	2301      	movs	r3, #1
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b0      	blx	r6
 80077bc:	1c41      	adds	r1, r0, #1
 80077be:	d1c8      	bne.n	8007752 <__sflush_r+0x36>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0c5      	beq.n	8007752 <__sflush_r+0x36>
 80077c6:	2b1d      	cmp	r3, #29
 80077c8:	d001      	beq.n	80077ce <__sflush_r+0xb2>
 80077ca:	2b16      	cmp	r3, #22
 80077cc:	d101      	bne.n	80077d2 <__sflush_r+0xb6>
 80077ce:	602f      	str	r7, [r5, #0]
 80077d0:	e7b1      	b.n	8007736 <__sflush_r+0x1a>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d8:	81a3      	strh	r3, [r4, #12]
 80077da:	e7ad      	b.n	8007738 <__sflush_r+0x1c>
 80077dc:	690f      	ldr	r7, [r1, #16]
 80077de:	2f00      	cmp	r7, #0
 80077e0:	d0a9      	beq.n	8007736 <__sflush_r+0x1a>
 80077e2:	0793      	lsls	r3, r2, #30
 80077e4:	680e      	ldr	r6, [r1, #0]
 80077e6:	bf08      	it	eq
 80077e8:	694b      	ldreq	r3, [r1, #20]
 80077ea:	600f      	str	r7, [r1, #0]
 80077ec:	bf18      	it	ne
 80077ee:	2300      	movne	r3, #0
 80077f0:	eba6 0807 	sub.w	r8, r6, r7
 80077f4:	608b      	str	r3, [r1, #8]
 80077f6:	f1b8 0f00 	cmp.w	r8, #0
 80077fa:	dd9c      	ble.n	8007736 <__sflush_r+0x1a>
 80077fc:	6a21      	ldr	r1, [r4, #32]
 80077fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007800:	4643      	mov	r3, r8
 8007802:	463a      	mov	r2, r7
 8007804:	4628      	mov	r0, r5
 8007806:	47b0      	blx	r6
 8007808:	2800      	cmp	r0, #0
 800780a:	dc06      	bgt.n	800781a <__sflush_r+0xfe>
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007818:	e78e      	b.n	8007738 <__sflush_r+0x1c>
 800781a:	4407      	add	r7, r0
 800781c:	eba8 0800 	sub.w	r8, r8, r0
 8007820:	e7e9      	b.n	80077f6 <__sflush_r+0xda>
 8007822:	bf00      	nop
 8007824:	dfbffffe 	.word	0xdfbffffe

08007828 <_fflush_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	690b      	ldr	r3, [r1, #16]
 800782c:	4605      	mov	r5, r0
 800782e:	460c      	mov	r4, r1
 8007830:	b913      	cbnz	r3, 8007838 <_fflush_r+0x10>
 8007832:	2500      	movs	r5, #0
 8007834:	4628      	mov	r0, r5
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	b118      	cbz	r0, 8007842 <_fflush_r+0x1a>
 800783a:	6a03      	ldr	r3, [r0, #32]
 800783c:	b90b      	cbnz	r3, 8007842 <_fflush_r+0x1a>
 800783e:	f7fe fe73 	bl	8006528 <__sinit>
 8007842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0f3      	beq.n	8007832 <_fflush_r+0xa>
 800784a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800784c:	07d0      	lsls	r0, r2, #31
 800784e:	d404      	bmi.n	800785a <_fflush_r+0x32>
 8007850:	0599      	lsls	r1, r3, #22
 8007852:	d402      	bmi.n	800785a <_fflush_r+0x32>
 8007854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007856:	f7fe fed4 	bl	8006602 <__retarget_lock_acquire_recursive>
 800785a:	4628      	mov	r0, r5
 800785c:	4621      	mov	r1, r4
 800785e:	f7ff ff5d 	bl	800771c <__sflush_r>
 8007862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007864:	07da      	lsls	r2, r3, #31
 8007866:	4605      	mov	r5, r0
 8007868:	d4e4      	bmi.n	8007834 <_fflush_r+0xc>
 800786a:	89a3      	ldrh	r3, [r4, #12]
 800786c:	059b      	lsls	r3, r3, #22
 800786e:	d4e1      	bmi.n	8007834 <_fflush_r+0xc>
 8007870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007872:	f7fe fec7 	bl	8006604 <__retarget_lock_release_recursive>
 8007876:	e7dd      	b.n	8007834 <_fflush_r+0xc>

08007878 <__malloc_lock>:
 8007878:	4801      	ldr	r0, [pc, #4]	; (8007880 <__malloc_lock+0x8>)
 800787a:	f7fe bec2 	b.w	8006602 <__retarget_lock_acquire_recursive>
 800787e:	bf00      	nop
 8007880:	20000498 	.word	0x20000498

08007884 <__malloc_unlock>:
 8007884:	4801      	ldr	r0, [pc, #4]	; (800788c <__malloc_unlock+0x8>)
 8007886:	f7fe bebd 	b.w	8006604 <__retarget_lock_release_recursive>
 800788a:	bf00      	nop
 800788c:	20000498 	.word	0x20000498

08007890 <_Balloc>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	69c6      	ldr	r6, [r0, #28]
 8007894:	4604      	mov	r4, r0
 8007896:	460d      	mov	r5, r1
 8007898:	b976      	cbnz	r6, 80078b8 <_Balloc+0x28>
 800789a:	2010      	movs	r0, #16
 800789c:	f7ff fe96 	bl	80075cc <malloc>
 80078a0:	4602      	mov	r2, r0
 80078a2:	61e0      	str	r0, [r4, #28]
 80078a4:	b920      	cbnz	r0, 80078b0 <_Balloc+0x20>
 80078a6:	4b18      	ldr	r3, [pc, #96]	; (8007908 <_Balloc+0x78>)
 80078a8:	4818      	ldr	r0, [pc, #96]	; (800790c <_Balloc+0x7c>)
 80078aa:	216b      	movs	r1, #107	; 0x6b
 80078ac:	f000 fc4e 	bl	800814c <__assert_func>
 80078b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078b4:	6006      	str	r6, [r0, #0]
 80078b6:	60c6      	str	r6, [r0, #12]
 80078b8:	69e6      	ldr	r6, [r4, #28]
 80078ba:	68f3      	ldr	r3, [r6, #12]
 80078bc:	b183      	cbz	r3, 80078e0 <_Balloc+0x50>
 80078be:	69e3      	ldr	r3, [r4, #28]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078c6:	b9b8      	cbnz	r0, 80078f8 <_Balloc+0x68>
 80078c8:	2101      	movs	r1, #1
 80078ca:	fa01 f605 	lsl.w	r6, r1, r5
 80078ce:	1d72      	adds	r2, r6, #5
 80078d0:	0092      	lsls	r2, r2, #2
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 fc58 	bl	8008188 <_calloc_r>
 80078d8:	b160      	cbz	r0, 80078f4 <_Balloc+0x64>
 80078da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078de:	e00e      	b.n	80078fe <_Balloc+0x6e>
 80078e0:	2221      	movs	r2, #33	; 0x21
 80078e2:	2104      	movs	r1, #4
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fc4f 	bl	8008188 <_calloc_r>
 80078ea:	69e3      	ldr	r3, [r4, #28]
 80078ec:	60f0      	str	r0, [r6, #12]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e4      	bne.n	80078be <_Balloc+0x2e>
 80078f4:	2000      	movs	r0, #0
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	6802      	ldr	r2, [r0, #0]
 80078fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078fe:	2300      	movs	r3, #0
 8007900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007904:	e7f7      	b.n	80078f6 <_Balloc+0x66>
 8007906:	bf00      	nop
 8007908:	080088f1 	.word	0x080088f1
 800790c:	08008982 	.word	0x08008982

08007910 <_Bfree>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	69c6      	ldr	r6, [r0, #28]
 8007914:	4605      	mov	r5, r0
 8007916:	460c      	mov	r4, r1
 8007918:	b976      	cbnz	r6, 8007938 <_Bfree+0x28>
 800791a:	2010      	movs	r0, #16
 800791c:	f7ff fe56 	bl	80075cc <malloc>
 8007920:	4602      	mov	r2, r0
 8007922:	61e8      	str	r0, [r5, #28]
 8007924:	b920      	cbnz	r0, 8007930 <_Bfree+0x20>
 8007926:	4b09      	ldr	r3, [pc, #36]	; (800794c <_Bfree+0x3c>)
 8007928:	4809      	ldr	r0, [pc, #36]	; (8007950 <_Bfree+0x40>)
 800792a:	218f      	movs	r1, #143	; 0x8f
 800792c:	f000 fc0e 	bl	800814c <__assert_func>
 8007930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007934:	6006      	str	r6, [r0, #0]
 8007936:	60c6      	str	r6, [r0, #12]
 8007938:	b13c      	cbz	r4, 800794a <_Bfree+0x3a>
 800793a:	69eb      	ldr	r3, [r5, #28]
 800793c:	6862      	ldr	r2, [r4, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007944:	6021      	str	r1, [r4, #0]
 8007946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	080088f1 	.word	0x080088f1
 8007950:	08008982 	.word	0x08008982

08007954 <__multadd>:
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	690d      	ldr	r5, [r1, #16]
 800795a:	4607      	mov	r7, r0
 800795c:	460c      	mov	r4, r1
 800795e:	461e      	mov	r6, r3
 8007960:	f101 0c14 	add.w	ip, r1, #20
 8007964:	2000      	movs	r0, #0
 8007966:	f8dc 3000 	ldr.w	r3, [ip]
 800796a:	b299      	uxth	r1, r3
 800796c:	fb02 6101 	mla	r1, r2, r1, r6
 8007970:	0c1e      	lsrs	r6, r3, #16
 8007972:	0c0b      	lsrs	r3, r1, #16
 8007974:	fb02 3306 	mla	r3, r2, r6, r3
 8007978:	b289      	uxth	r1, r1
 800797a:	3001      	adds	r0, #1
 800797c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007980:	4285      	cmp	r5, r0
 8007982:	f84c 1b04 	str.w	r1, [ip], #4
 8007986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800798a:	dcec      	bgt.n	8007966 <__multadd+0x12>
 800798c:	b30e      	cbz	r6, 80079d2 <__multadd+0x7e>
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	42ab      	cmp	r3, r5
 8007992:	dc19      	bgt.n	80079c8 <__multadd+0x74>
 8007994:	6861      	ldr	r1, [r4, #4]
 8007996:	4638      	mov	r0, r7
 8007998:	3101      	adds	r1, #1
 800799a:	f7ff ff79 	bl	8007890 <_Balloc>
 800799e:	4680      	mov	r8, r0
 80079a0:	b928      	cbnz	r0, 80079ae <__multadd+0x5a>
 80079a2:	4602      	mov	r2, r0
 80079a4:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <__multadd+0x84>)
 80079a6:	480d      	ldr	r0, [pc, #52]	; (80079dc <__multadd+0x88>)
 80079a8:	21ba      	movs	r1, #186	; 0xba
 80079aa:	f000 fbcf 	bl	800814c <__assert_func>
 80079ae:	6922      	ldr	r2, [r4, #16]
 80079b0:	3202      	adds	r2, #2
 80079b2:	f104 010c 	add.w	r1, r4, #12
 80079b6:	0092      	lsls	r2, r2, #2
 80079b8:	300c      	adds	r0, #12
 80079ba:	f7fe fe24 	bl	8006606 <memcpy>
 80079be:	4621      	mov	r1, r4
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff ffa5 	bl	8007910 <_Bfree>
 80079c6:	4644      	mov	r4, r8
 80079c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079cc:	3501      	adds	r5, #1
 80079ce:	615e      	str	r6, [r3, #20]
 80079d0:	6125      	str	r5, [r4, #16]
 80079d2:	4620      	mov	r0, r4
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d8:	08008960 	.word	0x08008960
 80079dc:	08008982 	.word	0x08008982

080079e0 <__hi0bits>:
 80079e0:	0c03      	lsrs	r3, r0, #16
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	b9d3      	cbnz	r3, 8007a1c <__hi0bits+0x3c>
 80079e6:	0400      	lsls	r0, r0, #16
 80079e8:	2310      	movs	r3, #16
 80079ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079ee:	bf04      	itt	eq
 80079f0:	0200      	lsleq	r0, r0, #8
 80079f2:	3308      	addeq	r3, #8
 80079f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079f8:	bf04      	itt	eq
 80079fa:	0100      	lsleq	r0, r0, #4
 80079fc:	3304      	addeq	r3, #4
 80079fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a02:	bf04      	itt	eq
 8007a04:	0080      	lsleq	r0, r0, #2
 8007a06:	3302      	addeq	r3, #2
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	db05      	blt.n	8007a18 <__hi0bits+0x38>
 8007a0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a10:	f103 0301 	add.w	r3, r3, #1
 8007a14:	bf08      	it	eq
 8007a16:	2320      	moveq	r3, #32
 8007a18:	4618      	mov	r0, r3
 8007a1a:	4770      	bx	lr
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e7e4      	b.n	80079ea <__hi0bits+0xa>

08007a20 <__lo0bits>:
 8007a20:	6803      	ldr	r3, [r0, #0]
 8007a22:	f013 0207 	ands.w	r2, r3, #7
 8007a26:	d00c      	beq.n	8007a42 <__lo0bits+0x22>
 8007a28:	07d9      	lsls	r1, r3, #31
 8007a2a:	d422      	bmi.n	8007a72 <__lo0bits+0x52>
 8007a2c:	079a      	lsls	r2, r3, #30
 8007a2e:	bf49      	itett	mi
 8007a30:	085b      	lsrmi	r3, r3, #1
 8007a32:	089b      	lsrpl	r3, r3, #2
 8007a34:	6003      	strmi	r3, [r0, #0]
 8007a36:	2201      	movmi	r2, #1
 8007a38:	bf5c      	itt	pl
 8007a3a:	6003      	strpl	r3, [r0, #0]
 8007a3c:	2202      	movpl	r2, #2
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4770      	bx	lr
 8007a42:	b299      	uxth	r1, r3
 8007a44:	b909      	cbnz	r1, 8007a4a <__lo0bits+0x2a>
 8007a46:	0c1b      	lsrs	r3, r3, #16
 8007a48:	2210      	movs	r2, #16
 8007a4a:	b2d9      	uxtb	r1, r3
 8007a4c:	b909      	cbnz	r1, 8007a52 <__lo0bits+0x32>
 8007a4e:	3208      	adds	r2, #8
 8007a50:	0a1b      	lsrs	r3, r3, #8
 8007a52:	0719      	lsls	r1, r3, #28
 8007a54:	bf04      	itt	eq
 8007a56:	091b      	lsreq	r3, r3, #4
 8007a58:	3204      	addeq	r2, #4
 8007a5a:	0799      	lsls	r1, r3, #30
 8007a5c:	bf04      	itt	eq
 8007a5e:	089b      	lsreq	r3, r3, #2
 8007a60:	3202      	addeq	r2, #2
 8007a62:	07d9      	lsls	r1, r3, #31
 8007a64:	d403      	bmi.n	8007a6e <__lo0bits+0x4e>
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	f102 0201 	add.w	r2, r2, #1
 8007a6c:	d003      	beq.n	8007a76 <__lo0bits+0x56>
 8007a6e:	6003      	str	r3, [r0, #0]
 8007a70:	e7e5      	b.n	8007a3e <__lo0bits+0x1e>
 8007a72:	2200      	movs	r2, #0
 8007a74:	e7e3      	b.n	8007a3e <__lo0bits+0x1e>
 8007a76:	2220      	movs	r2, #32
 8007a78:	e7e1      	b.n	8007a3e <__lo0bits+0x1e>
	...

08007a7c <__i2b>:
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	460c      	mov	r4, r1
 8007a80:	2101      	movs	r1, #1
 8007a82:	f7ff ff05 	bl	8007890 <_Balloc>
 8007a86:	4602      	mov	r2, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <__i2b+0x1a>
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <__i2b+0x24>)
 8007a8c:	4805      	ldr	r0, [pc, #20]	; (8007aa4 <__i2b+0x28>)
 8007a8e:	f240 1145 	movw	r1, #325	; 0x145
 8007a92:	f000 fb5b 	bl	800814c <__assert_func>
 8007a96:	2301      	movs	r3, #1
 8007a98:	6144      	str	r4, [r0, #20]
 8007a9a:	6103      	str	r3, [r0, #16]
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	08008960 	.word	0x08008960
 8007aa4:	08008982 	.word	0x08008982

08007aa8 <__multiply>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	4691      	mov	r9, r2
 8007aae:	690a      	ldr	r2, [r1, #16]
 8007ab0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	bfb8      	it	lt
 8007ab8:	460b      	movlt	r3, r1
 8007aba:	460c      	mov	r4, r1
 8007abc:	bfbc      	itt	lt
 8007abe:	464c      	movlt	r4, r9
 8007ac0:	4699      	movlt	r9, r3
 8007ac2:	6927      	ldr	r7, [r4, #16]
 8007ac4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ac8:	68a3      	ldr	r3, [r4, #8]
 8007aca:	6861      	ldr	r1, [r4, #4]
 8007acc:	eb07 060a 	add.w	r6, r7, sl
 8007ad0:	42b3      	cmp	r3, r6
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	bfb8      	it	lt
 8007ad6:	3101      	addlt	r1, #1
 8007ad8:	f7ff feda 	bl	8007890 <_Balloc>
 8007adc:	b930      	cbnz	r0, 8007aec <__multiply+0x44>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	4b44      	ldr	r3, [pc, #272]	; (8007bf4 <__multiply+0x14c>)
 8007ae2:	4845      	ldr	r0, [pc, #276]	; (8007bf8 <__multiply+0x150>)
 8007ae4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007ae8:	f000 fb30 	bl	800814c <__assert_func>
 8007aec:	f100 0514 	add.w	r5, r0, #20
 8007af0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007af4:	462b      	mov	r3, r5
 8007af6:	2200      	movs	r2, #0
 8007af8:	4543      	cmp	r3, r8
 8007afa:	d321      	bcc.n	8007b40 <__multiply+0x98>
 8007afc:	f104 0314 	add.w	r3, r4, #20
 8007b00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b04:	f109 0314 	add.w	r3, r9, #20
 8007b08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b0c:	9202      	str	r2, [sp, #8]
 8007b0e:	1b3a      	subs	r2, r7, r4
 8007b10:	3a15      	subs	r2, #21
 8007b12:	f022 0203 	bic.w	r2, r2, #3
 8007b16:	3204      	adds	r2, #4
 8007b18:	f104 0115 	add.w	r1, r4, #21
 8007b1c:	428f      	cmp	r7, r1
 8007b1e:	bf38      	it	cc
 8007b20:	2204      	movcc	r2, #4
 8007b22:	9201      	str	r2, [sp, #4]
 8007b24:	9a02      	ldr	r2, [sp, #8]
 8007b26:	9303      	str	r3, [sp, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d80c      	bhi.n	8007b46 <__multiply+0x9e>
 8007b2c:	2e00      	cmp	r6, #0
 8007b2e:	dd03      	ble.n	8007b38 <__multiply+0x90>
 8007b30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d05b      	beq.n	8007bf0 <__multiply+0x148>
 8007b38:	6106      	str	r6, [r0, #16]
 8007b3a:	b005      	add	sp, #20
 8007b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b40:	f843 2b04 	str.w	r2, [r3], #4
 8007b44:	e7d8      	b.n	8007af8 <__multiply+0x50>
 8007b46:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b4a:	f1ba 0f00 	cmp.w	sl, #0
 8007b4e:	d024      	beq.n	8007b9a <__multiply+0xf2>
 8007b50:	f104 0e14 	add.w	lr, r4, #20
 8007b54:	46a9      	mov	r9, r5
 8007b56:	f04f 0c00 	mov.w	ip, #0
 8007b5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b5e:	f8d9 1000 	ldr.w	r1, [r9]
 8007b62:	fa1f fb82 	uxth.w	fp, r2
 8007b66:	b289      	uxth	r1, r1
 8007b68:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b70:	f8d9 2000 	ldr.w	r2, [r9]
 8007b74:	4461      	add	r1, ip
 8007b76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b82:	b289      	uxth	r1, r1
 8007b84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b88:	4577      	cmp	r7, lr
 8007b8a:	f849 1b04 	str.w	r1, [r9], #4
 8007b8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b92:	d8e2      	bhi.n	8007b5a <__multiply+0xb2>
 8007b94:	9a01      	ldr	r2, [sp, #4]
 8007b96:	f845 c002 	str.w	ip, [r5, r2]
 8007b9a:	9a03      	ldr	r2, [sp, #12]
 8007b9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	f1b9 0f00 	cmp.w	r9, #0
 8007ba6:	d021      	beq.n	8007bec <__multiply+0x144>
 8007ba8:	6829      	ldr	r1, [r5, #0]
 8007baa:	f104 0c14 	add.w	ip, r4, #20
 8007bae:	46ae      	mov	lr, r5
 8007bb0:	f04f 0a00 	mov.w	sl, #0
 8007bb4:	f8bc b000 	ldrh.w	fp, [ip]
 8007bb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bbc:	fb09 220b 	mla	r2, r9, fp, r2
 8007bc0:	4452      	add	r2, sl
 8007bc2:	b289      	uxth	r1, r1
 8007bc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bc8:	f84e 1b04 	str.w	r1, [lr], #4
 8007bcc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007bd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bd4:	f8be 1000 	ldrh.w	r1, [lr]
 8007bd8:	fb09 110a 	mla	r1, r9, sl, r1
 8007bdc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007be0:	4567      	cmp	r7, ip
 8007be2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007be6:	d8e5      	bhi.n	8007bb4 <__multiply+0x10c>
 8007be8:	9a01      	ldr	r2, [sp, #4]
 8007bea:	50a9      	str	r1, [r5, r2]
 8007bec:	3504      	adds	r5, #4
 8007bee:	e799      	b.n	8007b24 <__multiply+0x7c>
 8007bf0:	3e01      	subs	r6, #1
 8007bf2:	e79b      	b.n	8007b2c <__multiply+0x84>
 8007bf4:	08008960 	.word	0x08008960
 8007bf8:	08008982 	.word	0x08008982

08007bfc <__pow5mult>:
 8007bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c00:	4615      	mov	r5, r2
 8007c02:	f012 0203 	ands.w	r2, r2, #3
 8007c06:	4606      	mov	r6, r0
 8007c08:	460f      	mov	r7, r1
 8007c0a:	d007      	beq.n	8007c1c <__pow5mult+0x20>
 8007c0c:	4c25      	ldr	r4, [pc, #148]	; (8007ca4 <__pow5mult+0xa8>)
 8007c0e:	3a01      	subs	r2, #1
 8007c10:	2300      	movs	r3, #0
 8007c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c16:	f7ff fe9d 	bl	8007954 <__multadd>
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	10ad      	asrs	r5, r5, #2
 8007c1e:	d03d      	beq.n	8007c9c <__pow5mult+0xa0>
 8007c20:	69f4      	ldr	r4, [r6, #28]
 8007c22:	b97c      	cbnz	r4, 8007c44 <__pow5mult+0x48>
 8007c24:	2010      	movs	r0, #16
 8007c26:	f7ff fcd1 	bl	80075cc <malloc>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	61f0      	str	r0, [r6, #28]
 8007c2e:	b928      	cbnz	r0, 8007c3c <__pow5mult+0x40>
 8007c30:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <__pow5mult+0xac>)
 8007c32:	481e      	ldr	r0, [pc, #120]	; (8007cac <__pow5mult+0xb0>)
 8007c34:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007c38:	f000 fa88 	bl	800814c <__assert_func>
 8007c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c40:	6004      	str	r4, [r0, #0]
 8007c42:	60c4      	str	r4, [r0, #12]
 8007c44:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c4c:	b94c      	cbnz	r4, 8007c62 <__pow5mult+0x66>
 8007c4e:	f240 2171 	movw	r1, #625	; 0x271
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7ff ff12 	bl	8007a7c <__i2b>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c5e:	4604      	mov	r4, r0
 8007c60:	6003      	str	r3, [r0, #0]
 8007c62:	f04f 0900 	mov.w	r9, #0
 8007c66:	07eb      	lsls	r3, r5, #31
 8007c68:	d50a      	bpl.n	8007c80 <__pow5mult+0x84>
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7ff ff1a 	bl	8007aa8 <__multiply>
 8007c74:	4639      	mov	r1, r7
 8007c76:	4680      	mov	r8, r0
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7ff fe49 	bl	8007910 <_Bfree>
 8007c7e:	4647      	mov	r7, r8
 8007c80:	106d      	asrs	r5, r5, #1
 8007c82:	d00b      	beq.n	8007c9c <__pow5mult+0xa0>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	b938      	cbnz	r0, 8007c98 <__pow5mult+0x9c>
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ff0b 	bl	8007aa8 <__multiply>
 8007c92:	6020      	str	r0, [r4, #0]
 8007c94:	f8c0 9000 	str.w	r9, [r0]
 8007c98:	4604      	mov	r4, r0
 8007c9a:	e7e4      	b.n	8007c66 <__pow5mult+0x6a>
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca2:	bf00      	nop
 8007ca4:	08008ad0 	.word	0x08008ad0
 8007ca8:	080088f1 	.word	0x080088f1
 8007cac:	08008982 	.word	0x08008982

08007cb0 <__lshift>:
 8007cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	6849      	ldr	r1, [r1, #4]
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	4691      	mov	r9, r2
 8007cc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cc8:	f108 0601 	add.w	r6, r8, #1
 8007ccc:	42b3      	cmp	r3, r6
 8007cce:	db0b      	blt.n	8007ce8 <__lshift+0x38>
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	f7ff fddd 	bl	8007890 <_Balloc>
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	b948      	cbnz	r0, 8007cee <__lshift+0x3e>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b28      	ldr	r3, [pc, #160]	; (8007d80 <__lshift+0xd0>)
 8007cde:	4829      	ldr	r0, [pc, #164]	; (8007d84 <__lshift+0xd4>)
 8007ce0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007ce4:	f000 fa32 	bl	800814c <__assert_func>
 8007ce8:	3101      	adds	r1, #1
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	e7ee      	b.n	8007ccc <__lshift+0x1c>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f100 0114 	add.w	r1, r0, #20
 8007cf4:	f100 0210 	add.w	r2, r0, #16
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	4553      	cmp	r3, sl
 8007cfc:	db33      	blt.n	8007d66 <__lshift+0xb6>
 8007cfe:	6920      	ldr	r0, [r4, #16]
 8007d00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d04:	f104 0314 	add.w	r3, r4, #20
 8007d08:	f019 091f 	ands.w	r9, r9, #31
 8007d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d14:	d02b      	beq.n	8007d6e <__lshift+0xbe>
 8007d16:	f1c9 0e20 	rsb	lr, r9, #32
 8007d1a:	468a      	mov	sl, r1
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	fa00 f009 	lsl.w	r0, r0, r9
 8007d24:	4310      	orrs	r0, r2
 8007d26:	f84a 0b04 	str.w	r0, [sl], #4
 8007d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2e:	459c      	cmp	ip, r3
 8007d30:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d34:	d8f3      	bhi.n	8007d1e <__lshift+0x6e>
 8007d36:	ebac 0304 	sub.w	r3, ip, r4
 8007d3a:	3b15      	subs	r3, #21
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	3304      	adds	r3, #4
 8007d42:	f104 0015 	add.w	r0, r4, #21
 8007d46:	4584      	cmp	ip, r0
 8007d48:	bf38      	it	cc
 8007d4a:	2304      	movcc	r3, #4
 8007d4c:	50ca      	str	r2, [r1, r3]
 8007d4e:	b10a      	cbz	r2, 8007d54 <__lshift+0xa4>
 8007d50:	f108 0602 	add.w	r6, r8, #2
 8007d54:	3e01      	subs	r6, #1
 8007d56:	4638      	mov	r0, r7
 8007d58:	612e      	str	r6, [r5, #16]
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	f7ff fdd8 	bl	8007910 <_Bfree>
 8007d60:	4628      	mov	r0, r5
 8007d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	e7c5      	b.n	8007cfa <__lshift+0x4a>
 8007d6e:	3904      	subs	r1, #4
 8007d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d74:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d78:	459c      	cmp	ip, r3
 8007d7a:	d8f9      	bhi.n	8007d70 <__lshift+0xc0>
 8007d7c:	e7ea      	b.n	8007d54 <__lshift+0xa4>
 8007d7e:	bf00      	nop
 8007d80:	08008960 	.word	0x08008960
 8007d84:	08008982 	.word	0x08008982

08007d88 <__mcmp>:
 8007d88:	b530      	push	{r4, r5, lr}
 8007d8a:	6902      	ldr	r2, [r0, #16]
 8007d8c:	690c      	ldr	r4, [r1, #16]
 8007d8e:	1b12      	subs	r2, r2, r4
 8007d90:	d10e      	bne.n	8007db0 <__mcmp+0x28>
 8007d92:	f100 0314 	add.w	r3, r0, #20
 8007d96:	3114      	adds	r1, #20
 8007d98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007da0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007da4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007da8:	42a5      	cmp	r5, r4
 8007daa:	d003      	beq.n	8007db4 <__mcmp+0x2c>
 8007dac:	d305      	bcc.n	8007dba <__mcmp+0x32>
 8007dae:	2201      	movs	r2, #1
 8007db0:	4610      	mov	r0, r2
 8007db2:	bd30      	pop	{r4, r5, pc}
 8007db4:	4283      	cmp	r3, r0
 8007db6:	d3f3      	bcc.n	8007da0 <__mcmp+0x18>
 8007db8:	e7fa      	b.n	8007db0 <__mcmp+0x28>
 8007dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dbe:	e7f7      	b.n	8007db0 <__mcmp+0x28>

08007dc0 <__mdiff>:
 8007dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4690      	mov	r8, r2
 8007dce:	f7ff ffdb 	bl	8007d88 <__mcmp>
 8007dd2:	1e05      	subs	r5, r0, #0
 8007dd4:	d110      	bne.n	8007df8 <__mdiff+0x38>
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff fd59 	bl	8007890 <_Balloc>
 8007dde:	b930      	cbnz	r0, 8007dee <__mdiff+0x2e>
 8007de0:	4b3a      	ldr	r3, [pc, #232]	; (8007ecc <__mdiff+0x10c>)
 8007de2:	4602      	mov	r2, r0
 8007de4:	f240 2137 	movw	r1, #567	; 0x237
 8007de8:	4839      	ldr	r0, [pc, #228]	; (8007ed0 <__mdiff+0x110>)
 8007dea:	f000 f9af 	bl	800814c <__assert_func>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df8:	bfa4      	itt	ge
 8007dfa:	4643      	movge	r3, r8
 8007dfc:	46a0      	movge	r8, r4
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e04:	bfa6      	itte	ge
 8007e06:	461c      	movge	r4, r3
 8007e08:	2500      	movge	r5, #0
 8007e0a:	2501      	movlt	r5, #1
 8007e0c:	f7ff fd40 	bl	8007890 <_Balloc>
 8007e10:	b920      	cbnz	r0, 8007e1c <__mdiff+0x5c>
 8007e12:	4b2e      	ldr	r3, [pc, #184]	; (8007ecc <__mdiff+0x10c>)
 8007e14:	4602      	mov	r2, r0
 8007e16:	f240 2145 	movw	r1, #581	; 0x245
 8007e1a:	e7e5      	b.n	8007de8 <__mdiff+0x28>
 8007e1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e20:	6926      	ldr	r6, [r4, #16]
 8007e22:	60c5      	str	r5, [r0, #12]
 8007e24:	f104 0914 	add.w	r9, r4, #20
 8007e28:	f108 0514 	add.w	r5, r8, #20
 8007e2c:	f100 0e14 	add.w	lr, r0, #20
 8007e30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e38:	f108 0210 	add.w	r2, r8, #16
 8007e3c:	46f2      	mov	sl, lr
 8007e3e:	2100      	movs	r1, #0
 8007e40:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e48:	fa11 f88b 	uxtah	r8, r1, fp
 8007e4c:	b299      	uxth	r1, r3
 8007e4e:	0c1b      	lsrs	r3, r3, #16
 8007e50:	eba8 0801 	sub.w	r8, r8, r1
 8007e54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e5c:	fa1f f888 	uxth.w	r8, r8
 8007e60:	1419      	asrs	r1, r3, #16
 8007e62:	454e      	cmp	r6, r9
 8007e64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e68:	f84a 3b04 	str.w	r3, [sl], #4
 8007e6c:	d8e8      	bhi.n	8007e40 <__mdiff+0x80>
 8007e6e:	1b33      	subs	r3, r6, r4
 8007e70:	3b15      	subs	r3, #21
 8007e72:	f023 0303 	bic.w	r3, r3, #3
 8007e76:	3304      	adds	r3, #4
 8007e78:	3415      	adds	r4, #21
 8007e7a:	42a6      	cmp	r6, r4
 8007e7c:	bf38      	it	cc
 8007e7e:	2304      	movcc	r3, #4
 8007e80:	441d      	add	r5, r3
 8007e82:	4473      	add	r3, lr
 8007e84:	469e      	mov	lr, r3
 8007e86:	462e      	mov	r6, r5
 8007e88:	4566      	cmp	r6, ip
 8007e8a:	d30e      	bcc.n	8007eaa <__mdiff+0xea>
 8007e8c:	f10c 0203 	add.w	r2, ip, #3
 8007e90:	1b52      	subs	r2, r2, r5
 8007e92:	f022 0203 	bic.w	r2, r2, #3
 8007e96:	3d03      	subs	r5, #3
 8007e98:	45ac      	cmp	ip, r5
 8007e9a:	bf38      	it	cc
 8007e9c:	2200      	movcc	r2, #0
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007ea4:	b17a      	cbz	r2, 8007ec6 <__mdiff+0x106>
 8007ea6:	6107      	str	r7, [r0, #16]
 8007ea8:	e7a4      	b.n	8007df4 <__mdiff+0x34>
 8007eaa:	f856 8b04 	ldr.w	r8, [r6], #4
 8007eae:	fa11 f288 	uxtah	r2, r1, r8
 8007eb2:	1414      	asrs	r4, r2, #16
 8007eb4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007eb8:	b292      	uxth	r2, r2
 8007eba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ebe:	f84e 2b04 	str.w	r2, [lr], #4
 8007ec2:	1421      	asrs	r1, r4, #16
 8007ec4:	e7e0      	b.n	8007e88 <__mdiff+0xc8>
 8007ec6:	3f01      	subs	r7, #1
 8007ec8:	e7ea      	b.n	8007ea0 <__mdiff+0xe0>
 8007eca:	bf00      	nop
 8007ecc:	08008960 	.word	0x08008960
 8007ed0:	08008982 	.word	0x08008982

08007ed4 <__d2b>:
 8007ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	460f      	mov	r7, r1
 8007eda:	2101      	movs	r1, #1
 8007edc:	ec59 8b10 	vmov	r8, r9, d0
 8007ee0:	4616      	mov	r6, r2
 8007ee2:	f7ff fcd5 	bl	8007890 <_Balloc>
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	b930      	cbnz	r0, 8007ef8 <__d2b+0x24>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4b24      	ldr	r3, [pc, #144]	; (8007f80 <__d2b+0xac>)
 8007eee:	4825      	ldr	r0, [pc, #148]	; (8007f84 <__d2b+0xb0>)
 8007ef0:	f240 310f 	movw	r1, #783	; 0x30f
 8007ef4:	f000 f92a 	bl	800814c <__assert_func>
 8007ef8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007efc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f00:	bb2d      	cbnz	r5, 8007f4e <__d2b+0x7a>
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	f1b8 0300 	subs.w	r3, r8, #0
 8007f08:	d026      	beq.n	8007f58 <__d2b+0x84>
 8007f0a:	4668      	mov	r0, sp
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	f7ff fd87 	bl	8007a20 <__lo0bits>
 8007f12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f16:	b1e8      	cbz	r0, 8007f54 <__d2b+0x80>
 8007f18:	f1c0 0320 	rsb	r3, r0, #32
 8007f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f20:	430b      	orrs	r3, r1
 8007f22:	40c2      	lsrs	r2, r0
 8007f24:	6163      	str	r3, [r4, #20]
 8007f26:	9201      	str	r2, [sp, #4]
 8007f28:	9b01      	ldr	r3, [sp, #4]
 8007f2a:	61a3      	str	r3, [r4, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bf14      	ite	ne
 8007f30:	2202      	movne	r2, #2
 8007f32:	2201      	moveq	r2, #1
 8007f34:	6122      	str	r2, [r4, #16]
 8007f36:	b1bd      	cbz	r5, 8007f68 <__d2b+0x94>
 8007f38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f3c:	4405      	add	r5, r0
 8007f3e:	603d      	str	r5, [r7, #0]
 8007f40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f44:	6030      	str	r0, [r6, #0]
 8007f46:	4620      	mov	r0, r4
 8007f48:	b003      	add	sp, #12
 8007f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f52:	e7d6      	b.n	8007f02 <__d2b+0x2e>
 8007f54:	6161      	str	r1, [r4, #20]
 8007f56:	e7e7      	b.n	8007f28 <__d2b+0x54>
 8007f58:	a801      	add	r0, sp, #4
 8007f5a:	f7ff fd61 	bl	8007a20 <__lo0bits>
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	6163      	str	r3, [r4, #20]
 8007f62:	3020      	adds	r0, #32
 8007f64:	2201      	movs	r2, #1
 8007f66:	e7e5      	b.n	8007f34 <__d2b+0x60>
 8007f68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f70:	6038      	str	r0, [r7, #0]
 8007f72:	6918      	ldr	r0, [r3, #16]
 8007f74:	f7ff fd34 	bl	80079e0 <__hi0bits>
 8007f78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f7c:	e7e2      	b.n	8007f44 <__d2b+0x70>
 8007f7e:	bf00      	nop
 8007f80:	08008960 	.word	0x08008960
 8007f84:	08008982 	.word	0x08008982

08007f88 <__sread>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f90:	f000 f8a8 	bl	80080e4 <_read_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	bfab      	itete	ge
 8007f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f9c:	181b      	addge	r3, r3, r0
 8007f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fa2:	bfac      	ite	ge
 8007fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fa6:	81a3      	strhlt	r3, [r4, #12]
 8007fa8:	bd10      	pop	{r4, pc}

08007faa <__swrite>:
 8007faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	461f      	mov	r7, r3
 8007fb0:	898b      	ldrh	r3, [r1, #12]
 8007fb2:	05db      	lsls	r3, r3, #23
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4616      	mov	r6, r2
 8007fba:	d505      	bpl.n	8007fc8 <__swrite+0x1e>
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f000 f87c 	bl	80080c0 <_lseek_r>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	4628      	mov	r0, r5
 8007fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fde:	f000 b8a3 	b.w	8008128 <_write_r>

08007fe2 <__sseek>:
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fea:	f000 f869 	bl	80080c0 <_lseek_r>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	bf15      	itete	ne
 8007ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ffe:	81a3      	strheq	r3, [r4, #12]
 8008000:	bf18      	it	ne
 8008002:	81a3      	strhne	r3, [r4, #12]
 8008004:	bd10      	pop	{r4, pc}

08008006 <__sclose>:
 8008006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800a:	f000 b849 	b.w	80080a0 <_close_r>

0800800e <_realloc_r>:
 800800e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008012:	4680      	mov	r8, r0
 8008014:	4614      	mov	r4, r2
 8008016:	460e      	mov	r6, r1
 8008018:	b921      	cbnz	r1, 8008024 <_realloc_r+0x16>
 800801a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800801e:	4611      	mov	r1, r2
 8008020:	f7ff bafc 	b.w	800761c <_malloc_r>
 8008024:	b92a      	cbnz	r2, 8008032 <_realloc_r+0x24>
 8008026:	f000 f8c5 	bl	80081b4 <_free_r>
 800802a:	4625      	mov	r5, r4
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008032:	f000 f91d 	bl	8008270 <_malloc_usable_size_r>
 8008036:	4284      	cmp	r4, r0
 8008038:	4607      	mov	r7, r0
 800803a:	d802      	bhi.n	8008042 <_realloc_r+0x34>
 800803c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008040:	d812      	bhi.n	8008068 <_realloc_r+0x5a>
 8008042:	4621      	mov	r1, r4
 8008044:	4640      	mov	r0, r8
 8008046:	f7ff fae9 	bl	800761c <_malloc_r>
 800804a:	4605      	mov	r5, r0
 800804c:	2800      	cmp	r0, #0
 800804e:	d0ed      	beq.n	800802c <_realloc_r+0x1e>
 8008050:	42bc      	cmp	r4, r7
 8008052:	4622      	mov	r2, r4
 8008054:	4631      	mov	r1, r6
 8008056:	bf28      	it	cs
 8008058:	463a      	movcs	r2, r7
 800805a:	f7fe fad4 	bl	8006606 <memcpy>
 800805e:	4631      	mov	r1, r6
 8008060:	4640      	mov	r0, r8
 8008062:	f000 f8a7 	bl	80081b4 <_free_r>
 8008066:	e7e1      	b.n	800802c <_realloc_r+0x1e>
 8008068:	4635      	mov	r5, r6
 800806a:	e7df      	b.n	800802c <_realloc_r+0x1e>

0800806c <memmove>:
 800806c:	4288      	cmp	r0, r1
 800806e:	b510      	push	{r4, lr}
 8008070:	eb01 0402 	add.w	r4, r1, r2
 8008074:	d902      	bls.n	800807c <memmove+0x10>
 8008076:	4284      	cmp	r4, r0
 8008078:	4623      	mov	r3, r4
 800807a:	d807      	bhi.n	800808c <memmove+0x20>
 800807c:	1e43      	subs	r3, r0, #1
 800807e:	42a1      	cmp	r1, r4
 8008080:	d008      	beq.n	8008094 <memmove+0x28>
 8008082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800808a:	e7f8      	b.n	800807e <memmove+0x12>
 800808c:	4402      	add	r2, r0
 800808e:	4601      	mov	r1, r0
 8008090:	428a      	cmp	r2, r1
 8008092:	d100      	bne.n	8008096 <memmove+0x2a>
 8008094:	bd10      	pop	{r4, pc}
 8008096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800809a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800809e:	e7f7      	b.n	8008090 <memmove+0x24>

080080a0 <_close_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d06      	ldr	r5, [pc, #24]	; (80080bc <_close_r+0x1c>)
 80080a4:	2300      	movs	r3, #0
 80080a6:	4604      	mov	r4, r0
 80080a8:	4608      	mov	r0, r1
 80080aa:	602b      	str	r3, [r5, #0]
 80080ac:	f7f9 ffb7 	bl	800201e <_close>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_close_r+0x1a>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_close_r+0x1a>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	200004a4 	.word	0x200004a4

080080c0 <_lseek_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d07      	ldr	r5, [pc, #28]	; (80080e0 <_lseek_r+0x20>)
 80080c4:	4604      	mov	r4, r0
 80080c6:	4608      	mov	r0, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	602a      	str	r2, [r5, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f7f9 ffcc 	bl	800206c <_lseek>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_lseek_r+0x1e>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_lseek_r+0x1e>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	200004a4 	.word	0x200004a4

080080e4 <_read_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d07      	ldr	r5, [pc, #28]	; (8008104 <_read_r+0x20>)
 80080e8:	4604      	mov	r4, r0
 80080ea:	4608      	mov	r0, r1
 80080ec:	4611      	mov	r1, r2
 80080ee:	2200      	movs	r2, #0
 80080f0:	602a      	str	r2, [r5, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	f7f9 ff5a 	bl	8001fac <_read>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_read_r+0x1e>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_read_r+0x1e>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	200004a4 	.word	0x200004a4

08008108 <_sbrk_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d06      	ldr	r5, [pc, #24]	; (8008124 <_sbrk_r+0x1c>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	602b      	str	r3, [r5, #0]
 8008114:	f7f9 ffb8 	bl	8002088 <_sbrk>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_sbrk_r+0x1a>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_sbrk_r+0x1a>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	200004a4 	.word	0x200004a4

08008128 <_write_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d07      	ldr	r5, [pc, #28]	; (8008148 <_write_r+0x20>)
 800812c:	4604      	mov	r4, r0
 800812e:	4608      	mov	r0, r1
 8008130:	4611      	mov	r1, r2
 8008132:	2200      	movs	r2, #0
 8008134:	602a      	str	r2, [r5, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	f7f9 ff55 	bl	8001fe6 <_write>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_write_r+0x1e>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_write_r+0x1e>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	200004a4 	.word	0x200004a4

0800814c <__assert_func>:
 800814c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800814e:	4614      	mov	r4, r2
 8008150:	461a      	mov	r2, r3
 8008152:	4b09      	ldr	r3, [pc, #36]	; (8008178 <__assert_func+0x2c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4605      	mov	r5, r0
 8008158:	68d8      	ldr	r0, [r3, #12]
 800815a:	b14c      	cbz	r4, 8008170 <__assert_func+0x24>
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <__assert_func+0x30>)
 800815e:	9100      	str	r1, [sp, #0]
 8008160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008164:	4906      	ldr	r1, [pc, #24]	; (8008180 <__assert_func+0x34>)
 8008166:	462b      	mov	r3, r5
 8008168:	f000 f88a 	bl	8008280 <fiprintf>
 800816c:	f000 f8a7 	bl	80082be <abort>
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <__assert_func+0x38>)
 8008172:	461c      	mov	r4, r3
 8008174:	e7f3      	b.n	800815e <__assert_func+0x12>
 8008176:	bf00      	nop
 8008178:	20000090 	.word	0x20000090
 800817c:	08008be7 	.word	0x08008be7
 8008180:	08008bf4 	.word	0x08008bf4
 8008184:	08008c22 	.word	0x08008c22

08008188 <_calloc_r>:
 8008188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800818a:	fba1 2402 	umull	r2, r4, r1, r2
 800818e:	b94c      	cbnz	r4, 80081a4 <_calloc_r+0x1c>
 8008190:	4611      	mov	r1, r2
 8008192:	9201      	str	r2, [sp, #4]
 8008194:	f7ff fa42 	bl	800761c <_malloc_r>
 8008198:	9a01      	ldr	r2, [sp, #4]
 800819a:	4605      	mov	r5, r0
 800819c:	b930      	cbnz	r0, 80081ac <_calloc_r+0x24>
 800819e:	4628      	mov	r0, r5
 80081a0:	b003      	add	sp, #12
 80081a2:	bd30      	pop	{r4, r5, pc}
 80081a4:	220c      	movs	r2, #12
 80081a6:	6002      	str	r2, [r0, #0]
 80081a8:	2500      	movs	r5, #0
 80081aa:	e7f8      	b.n	800819e <_calloc_r+0x16>
 80081ac:	4621      	mov	r1, r4
 80081ae:	f7fe f9f1 	bl	8006594 <memset>
 80081b2:	e7f4      	b.n	800819e <_calloc_r+0x16>

080081b4 <_free_r>:
 80081b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081b6:	2900      	cmp	r1, #0
 80081b8:	d044      	beq.n	8008244 <_free_r+0x90>
 80081ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081be:	9001      	str	r0, [sp, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f1a1 0404 	sub.w	r4, r1, #4
 80081c6:	bfb8      	it	lt
 80081c8:	18e4      	addlt	r4, r4, r3
 80081ca:	f7ff fb55 	bl	8007878 <__malloc_lock>
 80081ce:	4a1e      	ldr	r2, [pc, #120]	; (8008248 <_free_r+0x94>)
 80081d0:	9801      	ldr	r0, [sp, #4]
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	b933      	cbnz	r3, 80081e4 <_free_r+0x30>
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	6014      	str	r4, [r2, #0]
 80081da:	b003      	add	sp, #12
 80081dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081e0:	f7ff bb50 	b.w	8007884 <__malloc_unlock>
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d908      	bls.n	80081fa <_free_r+0x46>
 80081e8:	6825      	ldr	r5, [r4, #0]
 80081ea:	1961      	adds	r1, r4, r5
 80081ec:	428b      	cmp	r3, r1
 80081ee:	bf01      	itttt	eq
 80081f0:	6819      	ldreq	r1, [r3, #0]
 80081f2:	685b      	ldreq	r3, [r3, #4]
 80081f4:	1949      	addeq	r1, r1, r5
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	e7ed      	b.n	80081d6 <_free_r+0x22>
 80081fa:	461a      	mov	r2, r3
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b10b      	cbz	r3, 8008204 <_free_r+0x50>
 8008200:	42a3      	cmp	r3, r4
 8008202:	d9fa      	bls.n	80081fa <_free_r+0x46>
 8008204:	6811      	ldr	r1, [r2, #0]
 8008206:	1855      	adds	r5, r2, r1
 8008208:	42a5      	cmp	r5, r4
 800820a:	d10b      	bne.n	8008224 <_free_r+0x70>
 800820c:	6824      	ldr	r4, [r4, #0]
 800820e:	4421      	add	r1, r4
 8008210:	1854      	adds	r4, r2, r1
 8008212:	42a3      	cmp	r3, r4
 8008214:	6011      	str	r1, [r2, #0]
 8008216:	d1e0      	bne.n	80081da <_free_r+0x26>
 8008218:	681c      	ldr	r4, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	6053      	str	r3, [r2, #4]
 800821e:	440c      	add	r4, r1
 8008220:	6014      	str	r4, [r2, #0]
 8008222:	e7da      	b.n	80081da <_free_r+0x26>
 8008224:	d902      	bls.n	800822c <_free_r+0x78>
 8008226:	230c      	movs	r3, #12
 8008228:	6003      	str	r3, [r0, #0]
 800822a:	e7d6      	b.n	80081da <_free_r+0x26>
 800822c:	6825      	ldr	r5, [r4, #0]
 800822e:	1961      	adds	r1, r4, r5
 8008230:	428b      	cmp	r3, r1
 8008232:	bf04      	itt	eq
 8008234:	6819      	ldreq	r1, [r3, #0]
 8008236:	685b      	ldreq	r3, [r3, #4]
 8008238:	6063      	str	r3, [r4, #4]
 800823a:	bf04      	itt	eq
 800823c:	1949      	addeq	r1, r1, r5
 800823e:	6021      	streq	r1, [r4, #0]
 8008240:	6054      	str	r4, [r2, #4]
 8008242:	e7ca      	b.n	80081da <_free_r+0x26>
 8008244:	b003      	add	sp, #12
 8008246:	bd30      	pop	{r4, r5, pc}
 8008248:	2000049c 	.word	0x2000049c

0800824c <__ascii_mbtowc>:
 800824c:	b082      	sub	sp, #8
 800824e:	b901      	cbnz	r1, 8008252 <__ascii_mbtowc+0x6>
 8008250:	a901      	add	r1, sp, #4
 8008252:	b142      	cbz	r2, 8008266 <__ascii_mbtowc+0x1a>
 8008254:	b14b      	cbz	r3, 800826a <__ascii_mbtowc+0x1e>
 8008256:	7813      	ldrb	r3, [r2, #0]
 8008258:	600b      	str	r3, [r1, #0]
 800825a:	7812      	ldrb	r2, [r2, #0]
 800825c:	1e10      	subs	r0, r2, #0
 800825e:	bf18      	it	ne
 8008260:	2001      	movne	r0, #1
 8008262:	b002      	add	sp, #8
 8008264:	4770      	bx	lr
 8008266:	4610      	mov	r0, r2
 8008268:	e7fb      	b.n	8008262 <__ascii_mbtowc+0x16>
 800826a:	f06f 0001 	mvn.w	r0, #1
 800826e:	e7f8      	b.n	8008262 <__ascii_mbtowc+0x16>

08008270 <_malloc_usable_size_r>:
 8008270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008274:	1f18      	subs	r0, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	bfbc      	itt	lt
 800827a:	580b      	ldrlt	r3, [r1, r0]
 800827c:	18c0      	addlt	r0, r0, r3
 800827e:	4770      	bx	lr

08008280 <fiprintf>:
 8008280:	b40e      	push	{r1, r2, r3}
 8008282:	b503      	push	{r0, r1, lr}
 8008284:	4601      	mov	r1, r0
 8008286:	ab03      	add	r3, sp, #12
 8008288:	4805      	ldr	r0, [pc, #20]	; (80082a0 <fiprintf+0x20>)
 800828a:	f853 2b04 	ldr.w	r2, [r3], #4
 800828e:	6800      	ldr	r0, [r0, #0]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	f000 f845 	bl	8008320 <_vfiprintf_r>
 8008296:	b002      	add	sp, #8
 8008298:	f85d eb04 	ldr.w	lr, [sp], #4
 800829c:	b003      	add	sp, #12
 800829e:	4770      	bx	lr
 80082a0:	20000090 	.word	0x20000090

080082a4 <__ascii_wctomb>:
 80082a4:	b149      	cbz	r1, 80082ba <__ascii_wctomb+0x16>
 80082a6:	2aff      	cmp	r2, #255	; 0xff
 80082a8:	bf85      	ittet	hi
 80082aa:	238a      	movhi	r3, #138	; 0x8a
 80082ac:	6003      	strhi	r3, [r0, #0]
 80082ae:	700a      	strbls	r2, [r1, #0]
 80082b0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80082b4:	bf98      	it	ls
 80082b6:	2001      	movls	r0, #1
 80082b8:	4770      	bx	lr
 80082ba:	4608      	mov	r0, r1
 80082bc:	4770      	bx	lr

080082be <abort>:
 80082be:	b508      	push	{r3, lr}
 80082c0:	2006      	movs	r0, #6
 80082c2:	f000 fa89 	bl	80087d8 <raise>
 80082c6:	2001      	movs	r0, #1
 80082c8:	f7f9 fe66 	bl	8001f98 <_exit>

080082cc <__sfputc_r>:
 80082cc:	6893      	ldr	r3, [r2, #8]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	b410      	push	{r4}
 80082d4:	6093      	str	r3, [r2, #8]
 80082d6:	da08      	bge.n	80082ea <__sfputc_r+0x1e>
 80082d8:	6994      	ldr	r4, [r2, #24]
 80082da:	42a3      	cmp	r3, r4
 80082dc:	db01      	blt.n	80082e2 <__sfputc_r+0x16>
 80082de:	290a      	cmp	r1, #10
 80082e0:	d103      	bne.n	80082ea <__sfputc_r+0x1e>
 80082e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e6:	f000 b935 	b.w	8008554 <__swbuf_r>
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	1c58      	adds	r0, r3, #1
 80082ee:	6010      	str	r0, [r2, #0]
 80082f0:	7019      	strb	r1, [r3, #0]
 80082f2:	4608      	mov	r0, r1
 80082f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <__sfputs_r>:
 80082fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fc:	4606      	mov	r6, r0
 80082fe:	460f      	mov	r7, r1
 8008300:	4614      	mov	r4, r2
 8008302:	18d5      	adds	r5, r2, r3
 8008304:	42ac      	cmp	r4, r5
 8008306:	d101      	bne.n	800830c <__sfputs_r+0x12>
 8008308:	2000      	movs	r0, #0
 800830a:	e007      	b.n	800831c <__sfputs_r+0x22>
 800830c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008310:	463a      	mov	r2, r7
 8008312:	4630      	mov	r0, r6
 8008314:	f7ff ffda 	bl	80082cc <__sfputc_r>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d1f3      	bne.n	8008304 <__sfputs_r+0xa>
 800831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008320 <_vfiprintf_r>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	460d      	mov	r5, r1
 8008326:	b09d      	sub	sp, #116	; 0x74
 8008328:	4614      	mov	r4, r2
 800832a:	4698      	mov	r8, r3
 800832c:	4606      	mov	r6, r0
 800832e:	b118      	cbz	r0, 8008338 <_vfiprintf_r+0x18>
 8008330:	6a03      	ldr	r3, [r0, #32]
 8008332:	b90b      	cbnz	r3, 8008338 <_vfiprintf_r+0x18>
 8008334:	f7fe f8f8 	bl	8006528 <__sinit>
 8008338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800833a:	07d9      	lsls	r1, r3, #31
 800833c:	d405      	bmi.n	800834a <_vfiprintf_r+0x2a>
 800833e:	89ab      	ldrh	r3, [r5, #12]
 8008340:	059a      	lsls	r2, r3, #22
 8008342:	d402      	bmi.n	800834a <_vfiprintf_r+0x2a>
 8008344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008346:	f7fe f95c 	bl	8006602 <__retarget_lock_acquire_recursive>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	071b      	lsls	r3, r3, #28
 800834e:	d501      	bpl.n	8008354 <_vfiprintf_r+0x34>
 8008350:	692b      	ldr	r3, [r5, #16]
 8008352:	b99b      	cbnz	r3, 800837c <_vfiprintf_r+0x5c>
 8008354:	4629      	mov	r1, r5
 8008356:	4630      	mov	r0, r6
 8008358:	f000 f93a 	bl	80085d0 <__swsetup_r>
 800835c:	b170      	cbz	r0, 800837c <_vfiprintf_r+0x5c>
 800835e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008360:	07dc      	lsls	r4, r3, #31
 8008362:	d504      	bpl.n	800836e <_vfiprintf_r+0x4e>
 8008364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008368:	b01d      	add	sp, #116	; 0x74
 800836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836e:	89ab      	ldrh	r3, [r5, #12]
 8008370:	0598      	lsls	r0, r3, #22
 8008372:	d4f7      	bmi.n	8008364 <_vfiprintf_r+0x44>
 8008374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008376:	f7fe f945 	bl	8006604 <__retarget_lock_release_recursive>
 800837a:	e7f3      	b.n	8008364 <_vfiprintf_r+0x44>
 800837c:	2300      	movs	r3, #0
 800837e:	9309      	str	r3, [sp, #36]	; 0x24
 8008380:	2320      	movs	r3, #32
 8008382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008386:	f8cd 800c 	str.w	r8, [sp, #12]
 800838a:	2330      	movs	r3, #48	; 0x30
 800838c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008540 <_vfiprintf_r+0x220>
 8008390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008394:	f04f 0901 	mov.w	r9, #1
 8008398:	4623      	mov	r3, r4
 800839a:	469a      	mov	sl, r3
 800839c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a0:	b10a      	cbz	r2, 80083a6 <_vfiprintf_r+0x86>
 80083a2:	2a25      	cmp	r2, #37	; 0x25
 80083a4:	d1f9      	bne.n	800839a <_vfiprintf_r+0x7a>
 80083a6:	ebba 0b04 	subs.w	fp, sl, r4
 80083aa:	d00b      	beq.n	80083c4 <_vfiprintf_r+0xa4>
 80083ac:	465b      	mov	r3, fp
 80083ae:	4622      	mov	r2, r4
 80083b0:	4629      	mov	r1, r5
 80083b2:	4630      	mov	r0, r6
 80083b4:	f7ff ffa1 	bl	80082fa <__sfputs_r>
 80083b8:	3001      	adds	r0, #1
 80083ba:	f000 80a9 	beq.w	8008510 <_vfiprintf_r+0x1f0>
 80083be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c0:	445a      	add	r2, fp
 80083c2:	9209      	str	r2, [sp, #36]	; 0x24
 80083c4:	f89a 3000 	ldrb.w	r3, [sl]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 80a1 	beq.w	8008510 <_vfiprintf_r+0x1f0>
 80083ce:	2300      	movs	r3, #0
 80083d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d8:	f10a 0a01 	add.w	sl, sl, #1
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	9307      	str	r3, [sp, #28]
 80083e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083e4:	931a      	str	r3, [sp, #104]	; 0x68
 80083e6:	4654      	mov	r4, sl
 80083e8:	2205      	movs	r2, #5
 80083ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ee:	4854      	ldr	r0, [pc, #336]	; (8008540 <_vfiprintf_r+0x220>)
 80083f0:	f7f7 ff0e 	bl	8000210 <memchr>
 80083f4:	9a04      	ldr	r2, [sp, #16]
 80083f6:	b9d8      	cbnz	r0, 8008430 <_vfiprintf_r+0x110>
 80083f8:	06d1      	lsls	r1, r2, #27
 80083fa:	bf44      	itt	mi
 80083fc:	2320      	movmi	r3, #32
 80083fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008402:	0713      	lsls	r3, r2, #28
 8008404:	bf44      	itt	mi
 8008406:	232b      	movmi	r3, #43	; 0x2b
 8008408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800840c:	f89a 3000 	ldrb.w	r3, [sl]
 8008410:	2b2a      	cmp	r3, #42	; 0x2a
 8008412:	d015      	beq.n	8008440 <_vfiprintf_r+0x120>
 8008414:	9a07      	ldr	r2, [sp, #28]
 8008416:	4654      	mov	r4, sl
 8008418:	2000      	movs	r0, #0
 800841a:	f04f 0c0a 	mov.w	ip, #10
 800841e:	4621      	mov	r1, r4
 8008420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008424:	3b30      	subs	r3, #48	; 0x30
 8008426:	2b09      	cmp	r3, #9
 8008428:	d94d      	bls.n	80084c6 <_vfiprintf_r+0x1a6>
 800842a:	b1b0      	cbz	r0, 800845a <_vfiprintf_r+0x13a>
 800842c:	9207      	str	r2, [sp, #28]
 800842e:	e014      	b.n	800845a <_vfiprintf_r+0x13a>
 8008430:	eba0 0308 	sub.w	r3, r0, r8
 8008434:	fa09 f303 	lsl.w	r3, r9, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	9304      	str	r3, [sp, #16]
 800843c:	46a2      	mov	sl, r4
 800843e:	e7d2      	b.n	80083e6 <_vfiprintf_r+0xc6>
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	1d19      	adds	r1, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	9103      	str	r1, [sp, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	bfbb      	ittet	lt
 800844c:	425b      	neglt	r3, r3
 800844e:	f042 0202 	orrlt.w	r2, r2, #2
 8008452:	9307      	strge	r3, [sp, #28]
 8008454:	9307      	strlt	r3, [sp, #28]
 8008456:	bfb8      	it	lt
 8008458:	9204      	strlt	r2, [sp, #16]
 800845a:	7823      	ldrb	r3, [r4, #0]
 800845c:	2b2e      	cmp	r3, #46	; 0x2e
 800845e:	d10c      	bne.n	800847a <_vfiprintf_r+0x15a>
 8008460:	7863      	ldrb	r3, [r4, #1]
 8008462:	2b2a      	cmp	r3, #42	; 0x2a
 8008464:	d134      	bne.n	80084d0 <_vfiprintf_r+0x1b0>
 8008466:	9b03      	ldr	r3, [sp, #12]
 8008468:	1d1a      	adds	r2, r3, #4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	9203      	str	r2, [sp, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	bfb8      	it	lt
 8008472:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008476:	3402      	adds	r4, #2
 8008478:	9305      	str	r3, [sp, #20]
 800847a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008550 <_vfiprintf_r+0x230>
 800847e:	7821      	ldrb	r1, [r4, #0]
 8008480:	2203      	movs	r2, #3
 8008482:	4650      	mov	r0, sl
 8008484:	f7f7 fec4 	bl	8000210 <memchr>
 8008488:	b138      	cbz	r0, 800849a <_vfiprintf_r+0x17a>
 800848a:	9b04      	ldr	r3, [sp, #16]
 800848c:	eba0 000a 	sub.w	r0, r0, sl
 8008490:	2240      	movs	r2, #64	; 0x40
 8008492:	4082      	lsls	r2, r0
 8008494:	4313      	orrs	r3, r2
 8008496:	3401      	adds	r4, #1
 8008498:	9304      	str	r3, [sp, #16]
 800849a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849e:	4829      	ldr	r0, [pc, #164]	; (8008544 <_vfiprintf_r+0x224>)
 80084a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084a4:	2206      	movs	r2, #6
 80084a6:	f7f7 feb3 	bl	8000210 <memchr>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d03f      	beq.n	800852e <_vfiprintf_r+0x20e>
 80084ae:	4b26      	ldr	r3, [pc, #152]	; (8008548 <_vfiprintf_r+0x228>)
 80084b0:	bb1b      	cbnz	r3, 80084fa <_vfiprintf_r+0x1da>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	3307      	adds	r3, #7
 80084b6:	f023 0307 	bic.w	r3, r3, #7
 80084ba:	3308      	adds	r3, #8
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c0:	443b      	add	r3, r7
 80084c2:	9309      	str	r3, [sp, #36]	; 0x24
 80084c4:	e768      	b.n	8008398 <_vfiprintf_r+0x78>
 80084c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ca:	460c      	mov	r4, r1
 80084cc:	2001      	movs	r0, #1
 80084ce:	e7a6      	b.n	800841e <_vfiprintf_r+0xfe>
 80084d0:	2300      	movs	r3, #0
 80084d2:	3401      	adds	r4, #1
 80084d4:	9305      	str	r3, [sp, #20]
 80084d6:	4619      	mov	r1, r3
 80084d8:	f04f 0c0a 	mov.w	ip, #10
 80084dc:	4620      	mov	r0, r4
 80084de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084e2:	3a30      	subs	r2, #48	; 0x30
 80084e4:	2a09      	cmp	r2, #9
 80084e6:	d903      	bls.n	80084f0 <_vfiprintf_r+0x1d0>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0c6      	beq.n	800847a <_vfiprintf_r+0x15a>
 80084ec:	9105      	str	r1, [sp, #20]
 80084ee:	e7c4      	b.n	800847a <_vfiprintf_r+0x15a>
 80084f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084f4:	4604      	mov	r4, r0
 80084f6:	2301      	movs	r3, #1
 80084f8:	e7f0      	b.n	80084dc <_vfiprintf_r+0x1bc>
 80084fa:	ab03      	add	r3, sp, #12
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	462a      	mov	r2, r5
 8008500:	4b12      	ldr	r3, [pc, #72]	; (800854c <_vfiprintf_r+0x22c>)
 8008502:	a904      	add	r1, sp, #16
 8008504:	4630      	mov	r0, r6
 8008506:	f7fd fb9d 	bl	8005c44 <_printf_float>
 800850a:	4607      	mov	r7, r0
 800850c:	1c78      	adds	r0, r7, #1
 800850e:	d1d6      	bne.n	80084be <_vfiprintf_r+0x19e>
 8008510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008512:	07d9      	lsls	r1, r3, #31
 8008514:	d405      	bmi.n	8008522 <_vfiprintf_r+0x202>
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	059a      	lsls	r2, r3, #22
 800851a:	d402      	bmi.n	8008522 <_vfiprintf_r+0x202>
 800851c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851e:	f7fe f871 	bl	8006604 <__retarget_lock_release_recursive>
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	065b      	lsls	r3, r3, #25
 8008526:	f53f af1d 	bmi.w	8008364 <_vfiprintf_r+0x44>
 800852a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800852c:	e71c      	b.n	8008368 <_vfiprintf_r+0x48>
 800852e:	ab03      	add	r3, sp, #12
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	462a      	mov	r2, r5
 8008534:	4b05      	ldr	r3, [pc, #20]	; (800854c <_vfiprintf_r+0x22c>)
 8008536:	a904      	add	r1, sp, #16
 8008538:	4630      	mov	r0, r6
 800853a:	f7fd fe27 	bl	800618c <_printf_i>
 800853e:	e7e4      	b.n	800850a <_vfiprintf_r+0x1ea>
 8008540:	08008971 	.word	0x08008971
 8008544:	0800897b 	.word	0x0800897b
 8008548:	08005c45 	.word	0x08005c45
 800854c:	080082fb 	.word	0x080082fb
 8008550:	08008977 	.word	0x08008977

08008554 <__swbuf_r>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	460e      	mov	r6, r1
 8008558:	4614      	mov	r4, r2
 800855a:	4605      	mov	r5, r0
 800855c:	b118      	cbz	r0, 8008566 <__swbuf_r+0x12>
 800855e:	6a03      	ldr	r3, [r0, #32]
 8008560:	b90b      	cbnz	r3, 8008566 <__swbuf_r+0x12>
 8008562:	f7fd ffe1 	bl	8006528 <__sinit>
 8008566:	69a3      	ldr	r3, [r4, #24]
 8008568:	60a3      	str	r3, [r4, #8]
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	071a      	lsls	r2, r3, #28
 800856e:	d525      	bpl.n	80085bc <__swbuf_r+0x68>
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	b31b      	cbz	r3, 80085bc <__swbuf_r+0x68>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	6922      	ldr	r2, [r4, #16]
 8008578:	1a98      	subs	r0, r3, r2
 800857a:	6963      	ldr	r3, [r4, #20]
 800857c:	b2f6      	uxtb	r6, r6
 800857e:	4283      	cmp	r3, r0
 8008580:	4637      	mov	r7, r6
 8008582:	dc04      	bgt.n	800858e <__swbuf_r+0x3a>
 8008584:	4621      	mov	r1, r4
 8008586:	4628      	mov	r0, r5
 8008588:	f7ff f94e 	bl	8007828 <_fflush_r>
 800858c:	b9e0      	cbnz	r0, 80085c8 <__swbuf_r+0x74>
 800858e:	68a3      	ldr	r3, [r4, #8]
 8008590:	3b01      	subs	r3, #1
 8008592:	60a3      	str	r3, [r4, #8]
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	6022      	str	r2, [r4, #0]
 800859a:	701e      	strb	r6, [r3, #0]
 800859c:	6962      	ldr	r2, [r4, #20]
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d004      	beq.n	80085ae <__swbuf_r+0x5a>
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	07db      	lsls	r3, r3, #31
 80085a8:	d506      	bpl.n	80085b8 <__swbuf_r+0x64>
 80085aa:	2e0a      	cmp	r6, #10
 80085ac:	d104      	bne.n	80085b8 <__swbuf_r+0x64>
 80085ae:	4621      	mov	r1, r4
 80085b0:	4628      	mov	r0, r5
 80085b2:	f7ff f939 	bl	8007828 <_fflush_r>
 80085b6:	b938      	cbnz	r0, 80085c8 <__swbuf_r+0x74>
 80085b8:	4638      	mov	r0, r7
 80085ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085bc:	4621      	mov	r1, r4
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 f806 	bl	80085d0 <__swsetup_r>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d0d5      	beq.n	8008574 <__swbuf_r+0x20>
 80085c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80085cc:	e7f4      	b.n	80085b8 <__swbuf_r+0x64>
	...

080085d0 <__swsetup_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4b2a      	ldr	r3, [pc, #168]	; (800867c <__swsetup_r+0xac>)
 80085d4:	4605      	mov	r5, r0
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	460c      	mov	r4, r1
 80085da:	b118      	cbz	r0, 80085e4 <__swsetup_r+0x14>
 80085dc:	6a03      	ldr	r3, [r0, #32]
 80085de:	b90b      	cbnz	r3, 80085e4 <__swsetup_r+0x14>
 80085e0:	f7fd ffa2 	bl	8006528 <__sinit>
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085ea:	0718      	lsls	r0, r3, #28
 80085ec:	d422      	bmi.n	8008634 <__swsetup_r+0x64>
 80085ee:	06d9      	lsls	r1, r3, #27
 80085f0:	d407      	bmi.n	8008602 <__swsetup_r+0x32>
 80085f2:	2309      	movs	r3, #9
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008600:	e034      	b.n	800866c <__swsetup_r+0x9c>
 8008602:	0758      	lsls	r0, r3, #29
 8008604:	d512      	bpl.n	800862c <__swsetup_r+0x5c>
 8008606:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008608:	b141      	cbz	r1, 800861c <__swsetup_r+0x4c>
 800860a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800860e:	4299      	cmp	r1, r3
 8008610:	d002      	beq.n	8008618 <__swsetup_r+0x48>
 8008612:	4628      	mov	r0, r5
 8008614:	f7ff fdce 	bl	80081b4 <_free_r>
 8008618:	2300      	movs	r3, #0
 800861a:	6363      	str	r3, [r4, #52]	; 0x34
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008622:	81a3      	strh	r3, [r4, #12]
 8008624:	2300      	movs	r3, #0
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	f043 0308 	orr.w	r3, r3, #8
 8008632:	81a3      	strh	r3, [r4, #12]
 8008634:	6923      	ldr	r3, [r4, #16]
 8008636:	b94b      	cbnz	r3, 800864c <__swsetup_r+0x7c>
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800863e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008642:	d003      	beq.n	800864c <__swsetup_r+0x7c>
 8008644:	4621      	mov	r1, r4
 8008646:	4628      	mov	r0, r5
 8008648:	f000 f840 	bl	80086cc <__smakebuf_r>
 800864c:	89a0      	ldrh	r0, [r4, #12]
 800864e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008652:	f010 0301 	ands.w	r3, r0, #1
 8008656:	d00a      	beq.n	800866e <__swsetup_r+0x9e>
 8008658:	2300      	movs	r3, #0
 800865a:	60a3      	str	r3, [r4, #8]
 800865c:	6963      	ldr	r3, [r4, #20]
 800865e:	425b      	negs	r3, r3
 8008660:	61a3      	str	r3, [r4, #24]
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	b943      	cbnz	r3, 8008678 <__swsetup_r+0xa8>
 8008666:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800866a:	d1c4      	bne.n	80085f6 <__swsetup_r+0x26>
 800866c:	bd38      	pop	{r3, r4, r5, pc}
 800866e:	0781      	lsls	r1, r0, #30
 8008670:	bf58      	it	pl
 8008672:	6963      	ldrpl	r3, [r4, #20]
 8008674:	60a3      	str	r3, [r4, #8]
 8008676:	e7f4      	b.n	8008662 <__swsetup_r+0x92>
 8008678:	2000      	movs	r0, #0
 800867a:	e7f7      	b.n	800866c <__swsetup_r+0x9c>
 800867c:	20000090 	.word	0x20000090

08008680 <__swhatbuf_r>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	460c      	mov	r4, r1
 8008684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008688:	2900      	cmp	r1, #0
 800868a:	b096      	sub	sp, #88	; 0x58
 800868c:	4615      	mov	r5, r2
 800868e:	461e      	mov	r6, r3
 8008690:	da0d      	bge.n	80086ae <__swhatbuf_r+0x2e>
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008698:	f04f 0100 	mov.w	r1, #0
 800869c:	bf0c      	ite	eq
 800869e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80086a2:	2340      	movne	r3, #64	; 0x40
 80086a4:	2000      	movs	r0, #0
 80086a6:	6031      	str	r1, [r6, #0]
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	b016      	add	sp, #88	; 0x58
 80086ac:	bd70      	pop	{r4, r5, r6, pc}
 80086ae:	466a      	mov	r2, sp
 80086b0:	f000 f848 	bl	8008744 <_fstat_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	dbec      	blt.n	8008692 <__swhatbuf_r+0x12>
 80086b8:	9901      	ldr	r1, [sp, #4]
 80086ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80086be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80086c2:	4259      	negs	r1, r3
 80086c4:	4159      	adcs	r1, r3
 80086c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086ca:	e7eb      	b.n	80086a4 <__swhatbuf_r+0x24>

080086cc <__smakebuf_r>:
 80086cc:	898b      	ldrh	r3, [r1, #12]
 80086ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086d0:	079d      	lsls	r5, r3, #30
 80086d2:	4606      	mov	r6, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	d507      	bpl.n	80086e8 <__smakebuf_r+0x1c>
 80086d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	6123      	str	r3, [r4, #16]
 80086e0:	2301      	movs	r3, #1
 80086e2:	6163      	str	r3, [r4, #20]
 80086e4:	b002      	add	sp, #8
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	ab01      	add	r3, sp, #4
 80086ea:	466a      	mov	r2, sp
 80086ec:	f7ff ffc8 	bl	8008680 <__swhatbuf_r>
 80086f0:	9900      	ldr	r1, [sp, #0]
 80086f2:	4605      	mov	r5, r0
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7fe ff91 	bl	800761c <_malloc_r>
 80086fa:	b948      	cbnz	r0, 8008710 <__smakebuf_r+0x44>
 80086fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008700:	059a      	lsls	r2, r3, #22
 8008702:	d4ef      	bmi.n	80086e4 <__smakebuf_r+0x18>
 8008704:	f023 0303 	bic.w	r3, r3, #3
 8008708:	f043 0302 	orr.w	r3, r3, #2
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	e7e3      	b.n	80086d8 <__smakebuf_r+0xc>
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	6020      	str	r0, [r4, #0]
 8008714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	9b00      	ldr	r3, [sp, #0]
 800871c:	6163      	str	r3, [r4, #20]
 800871e:	9b01      	ldr	r3, [sp, #4]
 8008720:	6120      	str	r0, [r4, #16]
 8008722:	b15b      	cbz	r3, 800873c <__smakebuf_r+0x70>
 8008724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008728:	4630      	mov	r0, r6
 800872a:	f000 f81d 	bl	8008768 <_isatty_r>
 800872e:	b128      	cbz	r0, 800873c <__smakebuf_r+0x70>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f023 0303 	bic.w	r3, r3, #3
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	431d      	orrs	r5, r3
 8008740:	81a5      	strh	r5, [r4, #12]
 8008742:	e7cf      	b.n	80086e4 <__smakebuf_r+0x18>

08008744 <_fstat_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d07      	ldr	r5, [pc, #28]	; (8008764 <_fstat_r+0x20>)
 8008748:	2300      	movs	r3, #0
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	602b      	str	r3, [r5, #0]
 8008752:	f7f9 fc70 	bl	8002036 <_fstat>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d102      	bne.n	8008760 <_fstat_r+0x1c>
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	b103      	cbz	r3, 8008760 <_fstat_r+0x1c>
 800875e:	6023      	str	r3, [r4, #0]
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	bf00      	nop
 8008764:	200004a4 	.word	0x200004a4

08008768 <_isatty_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4d06      	ldr	r5, [pc, #24]	; (8008784 <_isatty_r+0x1c>)
 800876c:	2300      	movs	r3, #0
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	602b      	str	r3, [r5, #0]
 8008774:	f7f9 fc6f 	bl	8002056 <_isatty>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_isatty_r+0x1a>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_isatty_r+0x1a>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	200004a4 	.word	0x200004a4

08008788 <_raise_r>:
 8008788:	291f      	cmp	r1, #31
 800878a:	b538      	push	{r3, r4, r5, lr}
 800878c:	4604      	mov	r4, r0
 800878e:	460d      	mov	r5, r1
 8008790:	d904      	bls.n	800879c <_raise_r+0x14>
 8008792:	2316      	movs	r3, #22
 8008794:	6003      	str	r3, [r0, #0]
 8008796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800879e:	b112      	cbz	r2, 80087a6 <_raise_r+0x1e>
 80087a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087a4:	b94b      	cbnz	r3, 80087ba <_raise_r+0x32>
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 f830 	bl	800880c <_getpid_r>
 80087ac:	462a      	mov	r2, r5
 80087ae:	4601      	mov	r1, r0
 80087b0:	4620      	mov	r0, r4
 80087b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087b6:	f000 b817 	b.w	80087e8 <_kill_r>
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d00a      	beq.n	80087d4 <_raise_r+0x4c>
 80087be:	1c59      	adds	r1, r3, #1
 80087c0:	d103      	bne.n	80087ca <_raise_r+0x42>
 80087c2:	2316      	movs	r3, #22
 80087c4:	6003      	str	r3, [r0, #0]
 80087c6:	2001      	movs	r0, #1
 80087c8:	e7e7      	b.n	800879a <_raise_r+0x12>
 80087ca:	2400      	movs	r4, #0
 80087cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087d0:	4628      	mov	r0, r5
 80087d2:	4798      	blx	r3
 80087d4:	2000      	movs	r0, #0
 80087d6:	e7e0      	b.n	800879a <_raise_r+0x12>

080087d8 <raise>:
 80087d8:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <raise+0xc>)
 80087da:	4601      	mov	r1, r0
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	f7ff bfd3 	b.w	8008788 <_raise_r>
 80087e2:	bf00      	nop
 80087e4:	20000090 	.word	0x20000090

080087e8 <_kill_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	; (8008808 <_kill_r+0x20>)
 80087ec:	2300      	movs	r3, #0
 80087ee:	4604      	mov	r4, r0
 80087f0:	4608      	mov	r0, r1
 80087f2:	4611      	mov	r1, r2
 80087f4:	602b      	str	r3, [r5, #0]
 80087f6:	f7f9 fbbf 	bl	8001f78 <_kill>
 80087fa:	1c43      	adds	r3, r0, #1
 80087fc:	d102      	bne.n	8008804 <_kill_r+0x1c>
 80087fe:	682b      	ldr	r3, [r5, #0]
 8008800:	b103      	cbz	r3, 8008804 <_kill_r+0x1c>
 8008802:	6023      	str	r3, [r4, #0]
 8008804:	bd38      	pop	{r3, r4, r5, pc}
 8008806:	bf00      	nop
 8008808:	200004a4 	.word	0x200004a4

0800880c <_getpid_r>:
 800880c:	f7f9 bbac 	b.w	8001f68 <_getpid>

08008810 <_init>:
 8008810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008812:	bf00      	nop
 8008814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008816:	bc08      	pop	{r3}
 8008818:	469e      	mov	lr, r3
 800881a:	4770      	bx	lr

0800881c <_fini>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	bf00      	nop
 8008820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008822:	bc08      	pop	{r3}
 8008824:	469e      	mov	lr, r3
 8008826:	4770      	bx	lr
