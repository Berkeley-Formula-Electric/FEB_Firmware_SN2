
LVPDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed4  08004ed4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004edc  08004edc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee0  08004ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000088  08004f6c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004f6c  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e398  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d94  00000000  00000000  0002e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  000301e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00030d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022422  00000000  00000000  00031800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f17f  00000000  00000000  00053c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cddaa  00000000  00000000  00062da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130b4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a8  00000000  00000000  00130b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e4c 	.word	0x08004e4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08004e4c 	.word	0x08004e4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000748:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800074c:	f000 b974 	b.w	8000a38 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f806 	bl	8000768 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__udivmoddi4>:
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	9d08      	ldr	r5, [sp, #32]
 800076e:	4604      	mov	r4, r0
 8000770:	468e      	mov	lr, r1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d14d      	bne.n	8000812 <__udivmoddi4+0xaa>
 8000776:	428a      	cmp	r2, r1
 8000778:	4694      	mov	ip, r2
 800077a:	d969      	bls.n	8000850 <__udivmoddi4+0xe8>
 800077c:	fab2 f282 	clz	r2, r2
 8000780:	b152      	cbz	r2, 8000798 <__udivmoddi4+0x30>
 8000782:	fa01 f302 	lsl.w	r3, r1, r2
 8000786:	f1c2 0120 	rsb	r1, r2, #32
 800078a:	fa20 f101 	lsr.w	r1, r0, r1
 800078e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000792:	ea41 0e03 	orr.w	lr, r1, r3
 8000796:	4094      	lsls	r4, r2
 8000798:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800079c:	0c21      	lsrs	r1, r4, #16
 800079e:	fbbe f6f8 	udiv	r6, lr, r8
 80007a2:	fa1f f78c 	uxth.w	r7, ip
 80007a6:	fb08 e316 	mls	r3, r8, r6, lr
 80007aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ae:	fb06 f107 	mul.w	r1, r6, r7
 80007b2:	4299      	cmp	r1, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x64>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007be:	f080 811f 	bcs.w	8000a00 <__udivmoddi4+0x298>
 80007c2:	4299      	cmp	r1, r3
 80007c4:	f240 811c 	bls.w	8000a00 <__udivmoddi4+0x298>
 80007c8:	3e02      	subs	r6, #2
 80007ca:	4463      	add	r3, ip
 80007cc:	1a5b      	subs	r3, r3, r1
 80007ce:	b2a4      	uxth	r4, r4
 80007d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d4:	fb08 3310 	mls	r3, r8, r0, r3
 80007d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007dc:	fb00 f707 	mul.w	r7, r0, r7
 80007e0:	42a7      	cmp	r7, r4
 80007e2:	d90a      	bls.n	80007fa <__udivmoddi4+0x92>
 80007e4:	eb1c 0404 	adds.w	r4, ip, r4
 80007e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007ec:	f080 810a 	bcs.w	8000a04 <__udivmoddi4+0x29c>
 80007f0:	42a7      	cmp	r7, r4
 80007f2:	f240 8107 	bls.w	8000a04 <__udivmoddi4+0x29c>
 80007f6:	4464      	add	r4, ip
 80007f8:	3802      	subs	r0, #2
 80007fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007fe:	1be4      	subs	r4, r4, r7
 8000800:	2600      	movs	r6, #0
 8000802:	b11d      	cbz	r5, 800080c <__udivmoddi4+0xa4>
 8000804:	40d4      	lsrs	r4, r2
 8000806:	2300      	movs	r3, #0
 8000808:	e9c5 4300 	strd	r4, r3, [r5]
 800080c:	4631      	mov	r1, r6
 800080e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000812:	428b      	cmp	r3, r1
 8000814:	d909      	bls.n	800082a <__udivmoddi4+0xc2>
 8000816:	2d00      	cmp	r5, #0
 8000818:	f000 80ef 	beq.w	80009fa <__udivmoddi4+0x292>
 800081c:	2600      	movs	r6, #0
 800081e:	e9c5 0100 	strd	r0, r1, [r5]
 8000822:	4630      	mov	r0, r6
 8000824:	4631      	mov	r1, r6
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	fab3 f683 	clz	r6, r3
 800082e:	2e00      	cmp	r6, #0
 8000830:	d14a      	bne.n	80008c8 <__udivmoddi4+0x160>
 8000832:	428b      	cmp	r3, r1
 8000834:	d302      	bcc.n	800083c <__udivmoddi4+0xd4>
 8000836:	4282      	cmp	r2, r0
 8000838:	f200 80f9 	bhi.w	8000a2e <__udivmoddi4+0x2c6>
 800083c:	1a84      	subs	r4, r0, r2
 800083e:	eb61 0303 	sbc.w	r3, r1, r3
 8000842:	2001      	movs	r0, #1
 8000844:	469e      	mov	lr, r3
 8000846:	2d00      	cmp	r5, #0
 8000848:	d0e0      	beq.n	800080c <__udivmoddi4+0xa4>
 800084a:	e9c5 4e00 	strd	r4, lr, [r5]
 800084e:	e7dd      	b.n	800080c <__udivmoddi4+0xa4>
 8000850:	b902      	cbnz	r2, 8000854 <__udivmoddi4+0xec>
 8000852:	deff      	udf	#255	; 0xff
 8000854:	fab2 f282 	clz	r2, r2
 8000858:	2a00      	cmp	r2, #0
 800085a:	f040 8092 	bne.w	8000982 <__udivmoddi4+0x21a>
 800085e:	eba1 010c 	sub.w	r1, r1, ip
 8000862:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000866:	fa1f fe8c 	uxth.w	lr, ip
 800086a:	2601      	movs	r6, #1
 800086c:	0c20      	lsrs	r0, r4, #16
 800086e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000872:	fb07 1113 	mls	r1, r7, r3, r1
 8000876:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800087a:	fb0e f003 	mul.w	r0, lr, r3
 800087e:	4288      	cmp	r0, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0x12c>
 8000882:	eb1c 0101 	adds.w	r1, ip, r1
 8000886:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800088a:	d202      	bcs.n	8000892 <__udivmoddi4+0x12a>
 800088c:	4288      	cmp	r0, r1
 800088e:	f200 80cb 	bhi.w	8000a28 <__udivmoddi4+0x2c0>
 8000892:	4643      	mov	r3, r8
 8000894:	1a09      	subs	r1, r1, r0
 8000896:	b2a4      	uxth	r4, r4
 8000898:	fbb1 f0f7 	udiv	r0, r1, r7
 800089c:	fb07 1110 	mls	r1, r7, r0, r1
 80008a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008a4:	fb0e fe00 	mul.w	lr, lr, r0
 80008a8:	45a6      	cmp	lr, r4
 80008aa:	d908      	bls.n	80008be <__udivmoddi4+0x156>
 80008ac:	eb1c 0404 	adds.w	r4, ip, r4
 80008b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008b4:	d202      	bcs.n	80008bc <__udivmoddi4+0x154>
 80008b6:	45a6      	cmp	lr, r4
 80008b8:	f200 80bb 	bhi.w	8000a32 <__udivmoddi4+0x2ca>
 80008bc:	4608      	mov	r0, r1
 80008be:	eba4 040e 	sub.w	r4, r4, lr
 80008c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008c6:	e79c      	b.n	8000802 <__udivmoddi4+0x9a>
 80008c8:	f1c6 0720 	rsb	r7, r6, #32
 80008cc:	40b3      	lsls	r3, r6
 80008ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80008d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008d6:	fa20 f407 	lsr.w	r4, r0, r7
 80008da:	fa01 f306 	lsl.w	r3, r1, r6
 80008de:	431c      	orrs	r4, r3
 80008e0:	40f9      	lsrs	r1, r7
 80008e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008e6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ee:	0c20      	lsrs	r0, r4, #16
 80008f0:	fa1f fe8c 	uxth.w	lr, ip
 80008f4:	fb09 1118 	mls	r1, r9, r8, r1
 80008f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000900:	4288      	cmp	r0, r1
 8000902:	fa02 f206 	lsl.w	r2, r2, r6
 8000906:	d90b      	bls.n	8000920 <__udivmoddi4+0x1b8>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000910:	f080 8088 	bcs.w	8000a24 <__udivmoddi4+0x2bc>
 8000914:	4288      	cmp	r0, r1
 8000916:	f240 8085 	bls.w	8000a24 <__udivmoddi4+0x2bc>
 800091a:	f1a8 0802 	sub.w	r8, r8, #2
 800091e:	4461      	add	r1, ip
 8000920:	1a09      	subs	r1, r1, r0
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb1 f0f9 	udiv	r0, r1, r9
 8000928:	fb09 1110 	mls	r1, r9, r0, r1
 800092c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000930:	fb00 fe0e 	mul.w	lr, r0, lr
 8000934:	458e      	cmp	lr, r1
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x1e2>
 8000938:	eb1c 0101 	adds.w	r1, ip, r1
 800093c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000940:	d26c      	bcs.n	8000a1c <__udivmoddi4+0x2b4>
 8000942:	458e      	cmp	lr, r1
 8000944:	d96a      	bls.n	8000a1c <__udivmoddi4+0x2b4>
 8000946:	3802      	subs	r0, #2
 8000948:	4461      	add	r1, ip
 800094a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800094e:	fba0 9402 	umull	r9, r4, r0, r2
 8000952:	eba1 010e 	sub.w	r1, r1, lr
 8000956:	42a1      	cmp	r1, r4
 8000958:	46c8      	mov	r8, r9
 800095a:	46a6      	mov	lr, r4
 800095c:	d356      	bcc.n	8000a0c <__udivmoddi4+0x2a4>
 800095e:	d053      	beq.n	8000a08 <__udivmoddi4+0x2a0>
 8000960:	b15d      	cbz	r5, 800097a <__udivmoddi4+0x212>
 8000962:	ebb3 0208 	subs.w	r2, r3, r8
 8000966:	eb61 010e 	sbc.w	r1, r1, lr
 800096a:	fa01 f707 	lsl.w	r7, r1, r7
 800096e:	fa22 f306 	lsr.w	r3, r2, r6
 8000972:	40f1      	lsrs	r1, r6
 8000974:	431f      	orrs	r7, r3
 8000976:	e9c5 7100 	strd	r7, r1, [r5]
 800097a:	2600      	movs	r6, #0
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	f1c2 0320 	rsb	r3, r2, #32
 8000986:	40d8      	lsrs	r0, r3
 8000988:	fa0c fc02 	lsl.w	ip, ip, r2
 800098c:	fa21 f303 	lsr.w	r3, r1, r3
 8000990:	4091      	lsls	r1, r2
 8000992:	4301      	orrs	r1, r0
 8000994:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000998:	fa1f fe8c 	uxth.w	lr, ip
 800099c:	fbb3 f0f7 	udiv	r0, r3, r7
 80009a0:	fb07 3610 	mls	r6, r7, r0, r3
 80009a4:	0c0b      	lsrs	r3, r1, #16
 80009a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009aa:	fb00 f60e 	mul.w	r6, r0, lr
 80009ae:	429e      	cmp	r6, r3
 80009b0:	fa04 f402 	lsl.w	r4, r4, r2
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x260>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80009be:	d22f      	bcs.n	8000a20 <__udivmoddi4+0x2b8>
 80009c0:	429e      	cmp	r6, r3
 80009c2:	d92d      	bls.n	8000a20 <__udivmoddi4+0x2b8>
 80009c4:	3802      	subs	r0, #2
 80009c6:	4463      	add	r3, ip
 80009c8:	1b9b      	subs	r3, r3, r6
 80009ca:	b289      	uxth	r1, r1
 80009cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80009d0:	fb07 3316 	mls	r3, r7, r6, r3
 80009d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d8:	fb06 f30e 	mul.w	r3, r6, lr
 80009dc:	428b      	cmp	r3, r1
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x28a>
 80009e0:	eb1c 0101 	adds.w	r1, ip, r1
 80009e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009e8:	d216      	bcs.n	8000a18 <__udivmoddi4+0x2b0>
 80009ea:	428b      	cmp	r3, r1
 80009ec:	d914      	bls.n	8000a18 <__udivmoddi4+0x2b0>
 80009ee:	3e02      	subs	r6, #2
 80009f0:	4461      	add	r1, ip
 80009f2:	1ac9      	subs	r1, r1, r3
 80009f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009f8:	e738      	b.n	800086c <__udivmoddi4+0x104>
 80009fa:	462e      	mov	r6, r5
 80009fc:	4628      	mov	r0, r5
 80009fe:	e705      	b.n	800080c <__udivmoddi4+0xa4>
 8000a00:	4606      	mov	r6, r0
 8000a02:	e6e3      	b.n	80007cc <__udivmoddi4+0x64>
 8000a04:	4618      	mov	r0, r3
 8000a06:	e6f8      	b.n	80007fa <__udivmoddi4+0x92>
 8000a08:	454b      	cmp	r3, r9
 8000a0a:	d2a9      	bcs.n	8000960 <__udivmoddi4+0x1f8>
 8000a0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a14:	3801      	subs	r0, #1
 8000a16:	e7a3      	b.n	8000960 <__udivmoddi4+0x1f8>
 8000a18:	4646      	mov	r6, r8
 8000a1a:	e7ea      	b.n	80009f2 <__udivmoddi4+0x28a>
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	e794      	b.n	800094a <__udivmoddi4+0x1e2>
 8000a20:	4640      	mov	r0, r8
 8000a22:	e7d1      	b.n	80009c8 <__udivmoddi4+0x260>
 8000a24:	46d0      	mov	r8, sl
 8000a26:	e77b      	b.n	8000920 <__udivmoddi4+0x1b8>
 8000a28:	3b02      	subs	r3, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	e732      	b.n	8000894 <__udivmoddi4+0x12c>
 8000a2e:	4630      	mov	r0, r6
 8000a30:	e709      	b.n	8000846 <__udivmoddi4+0xde>
 8000a32:	4464      	add	r4, ip
 8000a34:	3802      	subs	r0, #2
 8000a36:	e742      	b.n	80008be <__udivmoddi4+0x156>

08000a38 <__aeabi_idiv0>:
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <FEB_TPS2482_SETUP>:
#include "FEB_TPS2482.h"

void FEB_TPS2482_SETUP(I2C_HandleTypeDef *hi2cp, uint8_t DEV_ADDR, uint8_t CONFIG[], uint8_t CAL_REG[], uint8_t ALERT[], uint8_t LIMIT[]) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af04      	add	r7, sp, #16
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x00, 1, CONFIG, 2, HAL_MAX_DELAY); // configure
 8000a4c:	7afb      	ldrb	r3, [r7, #11]
 8000a4e:	b299      	uxth	r1, r3
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2302      	movs	r3, #2
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2200      	movs	r2, #0
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f002 f890 	bl	8002b88 <HAL_I2C_Mem_Write>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8000a6c:	7dfb      	ldrb	r3, [r7, #23]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <FEB_TPS2482_SETUP+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a72:	b672      	cpsid	i
}
 8000a74:	bf00      	nop
			// error handler
		__disable_irq();
		while(1);
 8000a76:	e7fe      	b.n	8000a76 <FEB_TPS2482_SETUP+0x3a>
	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x05, 1, CAL_REG, 2, HAL_MAX_DELAY); // calibrate
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	b299      	uxth	r1, r3
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	2302      	movs	r3, #2
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	2205      	movs	r2, #5
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f002 f87a 	bl	8002b88 <HAL_I2C_Mem_Write>
 8000a94:	4603      	mov	r3, r0
 8000a96:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <FEB_TPS2482_SETUP+0x68>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9e:	b672      	cpsid	i
}
 8000aa0:	bf00      	nop
			// error handler
		__disable_irq();
		while(1);
 8000aa2:	e7fe      	b.n	8000aa2 <FEB_TPS2482_SETUP+0x66>
	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x06, 1, ALERT, 2, HAL_MAX_DELAY); // set alert
 8000aa4:	7afb      	ldrb	r3, [r7, #11]
 8000aa6:	b299      	uxth	r1, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	2302      	movs	r3, #2
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	2206      	movs	r2, #6
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f002 f864 	bl	8002b88 <HAL_I2C_Mem_Write>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <FEB_TPS2482_SETUP+0x94>
  __ASM volatile ("cpsid i" : : : "memory");
 8000aca:	b672      	cpsid	i
}
 8000acc:	bf00      	nop
			// error handler
		__disable_irq();
		while(1);
 8000ace:	e7fe      	b.n	8000ace <FEB_TPS2482_SETUP+0x92>
	}
	ret = HAL_I2C_Mem_Write(hi2cp, DEV_ADDR, 0x07, 1, LIMIT, 2, HAL_MAX_DELAY); // set limit
 8000ad0:	7afb      	ldrb	r3, [r7, #11]
 8000ad2:	b299      	uxth	r1, r3
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad8:	9302      	str	r3, [sp, #8]
 8000ada:	2302      	movs	r3, #2
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f002 f84e 	bl	8002b88 <HAL_I2C_Mem_Write>
 8000aec:	4603      	mov	r3, r0
 8000aee:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <FEB_TPS2482_SETUP+0xc0>
  __ASM volatile ("cpsid i" : : : "memory");
 8000af6:	b672      	cpsid	i
}
 8000af8:	bf00      	nop
		// error handler
		__disable_irq();
		while(1);
 8000afa:	e7fe      	b.n	8000afa <FEB_TPS2482_SETUP+0xbe>
	}
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Store_EMERGENCY_Msg>:
    EMERGENCY_APPS_EMERGENCY_TYPE apps_emergency;
    EMERGENCY_SW_EMERGENCY_TYPE sw_emergency;
} EMERGENCY_MESSAGE_TYPE;
EMERGENCY_MESSAGE_TYPE EMERGENCY_MESSAGE;

void Store_EMERGENCY_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <Store_EMERGENCY_Msg+0x1a>
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d006      	beq.n	8000b2a <Store_EMERGENCY_Msg+0x26>
            break;
        case EMERGENCY_SW_EMERGENCY:
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
            break;
    }
}
 8000b1c:	e00b      	b.n	8000b36 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.apps_emergency), RxData, data_length);
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	4807      	ldr	r0, [pc, #28]	; (8000b40 <Store_EMERGENCY_Msg+0x3c>)
 8000b24:	f003 fd1c 	bl	8004560 <memcpy>
            break;
 8000b28:	e005      	b.n	8000b36 <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <Store_EMERGENCY_Msg+0x40>)
 8000b30:	f003 fd16 	bl	8004560 <memcpy>
            break;
 8000b34:	bf00      	nop
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000a4 	.word	0x200000a4
 8000b44:	200000a5 	.word	0x200000a5

08000b48 <Store_BMS_Msg>:
    BMS_TEMPERATURE_TYPE temperature;
    BMS_VOLTAGE_TYPE voltage;
} BMS_MESSAGE_TYPE;
BMS_MESSAGE_TYPE BMS_MESSAGE;

void Store_BMS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b10      	cmp	r3, #16
 8000b58:	d003      	beq.n	8000b62 <Store_BMS_Msg+0x1a>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2b11      	cmp	r3, #17
 8000b5e:	d006      	beq.n	8000b6e <Store_BMS_Msg+0x26>
            break;
        case BMS_VOLTAGE:
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
            break;
    }
}
 8000b60:	e00b      	b.n	8000b7a <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.temperature), RxData, data_length);
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <Store_BMS_Msg+0x3c>)
 8000b68:	f003 fcfa 	bl	8004560 <memcpy>
            break;
 8000b6c:	e005      	b.n	8000b7a <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <Store_BMS_Msg+0x40>)
 8000b74:	f003 fcf4 	bl	8004560 <memcpy>
            break;
 8000b78:	bf00      	nop
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000a8 	.word	0x200000a8
 8000b88:	200000ac 	.word	0x200000ac

08000b8c <Store_SW_Msg>:
typedef struct SW_MESSAGE_TYPE {
    SW_COMMAND_1_TYPE command_1;
} SW_MESSAGE_TYPE;
SW_MESSAGE_TYPE SW_MESSAGE;

void Store_SW_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b20      	cmp	r3, #32
 8000b9c:	d105      	bne.n	8000baa <Store_SW_Msg+0x1e>
        case SW_COMMAND_1:
            memcpy(&(SW_MESSAGE.command_1), RxData, data_length);
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <Store_SW_Msg+0x28>)
 8000ba4:	f003 fcdc 	bl	8004560 <memcpy>
            break;
 8000ba8:	bf00      	nop
    }
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000b0 	.word	0x200000b0

08000bb8 <Store_APPS_Msg>:
    APPS_BRAKE_PEDAL_TYPE brake_pedal;
    APPS_TORQUE_TYPE torque;
} APPS_MESSAGE_TYPE;
APPS_MESSAGE_TYPE APPS_MESSAGE;

void Store_APPS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3b30      	subs	r3, #48	; 0x30
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d823      	bhi.n	8000c14 <Store_APPS_Msg+0x5c>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <Store_APPS_Msg+0x1c>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000be5 	.word	0x08000be5
 8000bd8:	08000bf1 	.word	0x08000bf1
 8000bdc:	08000bfd 	.word	0x08000bfd
 8000be0:	08000c09 	.word	0x08000c09
        case APPS_ACCELERATOR1_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator1_pedal), RxData, data_length);
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <Store_APPS_Msg+0x64>)
 8000bea:	f003 fcb9 	bl	8004560 <memcpy>
            break;
 8000bee:	e011      	b.n	8000c14 <Store_APPS_Msg+0x5c>
        case APPS_ACCELERATOR2_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator2_pedal), RxData, data_length);
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	480a      	ldr	r0, [pc, #40]	; (8000c20 <Store_APPS_Msg+0x68>)
 8000bf6:	f003 fcb3 	bl	8004560 <memcpy>
            break;
 8000bfa:	e00b      	b.n	8000c14 <Store_APPS_Msg+0x5c>
        case APPS_BRAKE_PEDAL:
            memcpy(&(APPS_MESSAGE.brake_pedal), RxData, data_length);
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <Store_APPS_Msg+0x6c>)
 8000c02:	f003 fcad 	bl	8004560 <memcpy>
            break;
 8000c06:	e005      	b.n	8000c14 <Store_APPS_Msg+0x5c>
        case APPS_TORQUE:
            memcpy(&(APPS_MESSAGE.torque), RxData, data_length);
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <Store_APPS_Msg+0x70>)
 8000c0e:	f003 fca7 	bl	8004560 <memcpy>
            break;
 8000c12:	bf00      	nop
    }
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000b4 	.word	0x200000b4
 8000c20:	200000b8 	.word	0x200000b8
 8000c24:	200000bc 	.word	0x200000bc
 8000c28:	200000c0 	.word	0x200000c0

08000c2c <assign_filter_array>:
const FilterArrayLength RMS_RX_NUM = 1;

const AddressIdType LVPDB_RX_ID[] = {SW_ID, APPS_ID};
const FilterArrayLength LVPDB_RX_NUM = 2;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d815      	bhi.n	8000c68 <assign_filter_array+0x3c>
 8000c3c:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <assign_filter_array+0x18>)
 8000c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c42:	bf00      	nop
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000c69 	.word	0x08000c69
 8000c4c:	08000c5d 	.word	0x08000c5d
 8000c50:	08000c61 	.word	0x08000c61
 8000c54:	08000c65 	.word	0x08000c65
        case BMS_ID:
            return BMS_RX_ID;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <assign_filter_array+0x4c>)
 8000c5a:	e006      	b.n	8000c6a <assign_filter_array+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <assign_filter_array+0x50>)
 8000c5e:	e004      	b.n	8000c6a <assign_filter_array+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_ID;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <assign_filter_array+0x54>)
 8000c62:	e002      	b.n	8000c6a <assign_filter_array+0x3e>
            break;
        case LVPDB_ID:
            return LVPDB_RX_ID;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <assign_filter_array+0x58>)
 8000c66:	e000      	b.n	8000c6a <assign_filter_array+0x3e>
            break;
    }
    return 0;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	08004e70 	.word	0x08004e70
 8000c7c:	08004e74 	.word	0x08004e74
 8000c80:	08004e7c 	.word	0x08004e7c
 8000c84:	08004e80 	.word	0x08004e80

08000c88 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d815      	bhi.n	8000cc4 <assign_filter_array_legnth+0x3c>
 8000c98:	a201      	add	r2, pc, #4	; (adr r2, 8000ca0 <assign_filter_array_legnth+0x18>)
 8000c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9e:	bf00      	nop
 8000ca0:	08000cb5 	.word	0x08000cb5
 8000ca4:	08000cc5 	.word	0x08000cc5
 8000ca8:	08000cb9 	.word	0x08000cb9
 8000cac:	08000cbd 	.word	0x08000cbd
 8000cb0:	08000cc1 	.word	0x08000cc1
        case BMS_ID:
            return BMS_RX_NUM;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e006      	b.n	8000cc6 <assign_filter_array_legnth+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e004      	b.n	8000cc6 <assign_filter_array_legnth+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_NUM;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e002      	b.n	8000cc6 <assign_filter_array_legnth+0x3e>
            break;
        case LVPDB_ID:
            return LVPDB_RX_NUM;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e000      	b.n	8000cc6 <assign_filter_array_legnth+0x3e>
            break;
    }
    return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <store_msg>:

void store_msg(CAN_RxHeaderTypeDef *pHeader, uint8_t RxData[]) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
    switch(pHeader->StdId >> BITS_PER_MESSAGE_TYPE) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d82f      	bhi.n	8000d48 <store_msg+0x74>
 8000ce8:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <store_msg+0x1c>)
 8000cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cee:	bf00      	nop
 8000cf0:	08000d01 	.word	0x08000d01
 8000cf4:	08000d13 	.word	0x08000d13
 8000cf8:	08000d25 	.word	0x08000d25
 8000cfc:	08000d37 	.word	0x08000d37
        case EMERGENCY_ID:
            Store_EMERGENCY_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	6839      	ldr	r1, [r7, #0]
 8000d0c:	f7ff fefa 	bl	8000b04 <Store_EMERGENCY_Msg>
            break;
 8000d10:	e01a      	b.n	8000d48 <store_msg+0x74>
        case BMS_ID:
            Store_BMS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	f7ff ff13 	bl	8000b48 <Store_BMS_Msg>
            break;
 8000d22:	e011      	b.n	8000d48 <store_msg+0x74>
        case SW_ID:
            Store_SW_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	f7ff ff2c 	bl	8000b8c <Store_SW_Msg>
            break;
 8000d34:	e008      	b.n	8000d48 <store_msg+0x74>
        case APPS_ID:
            Store_APPS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	6839      	ldr	r1, [r7, #0]
 8000d42:	f7ff ff39 	bl	8000bb8 <Store_APPS_Msg>
            break;
 8000d46:	bf00      	nop
    }
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <FEB_CAN_Filter_Config>:
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void Error_Handler(void);

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b090      	sub	sp, #64	; 0x40
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	460b      	mov	r3, r1
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	4613      	mov	r3, r2
 8000d64:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6a:	e027      	b.n	8000dbc <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8000d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8000d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	4413      	add	r3, r2
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	025b      	lsls	r3, r3, #9
 8000d84:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 8000d8a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000d8e:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 8000d9c:	231b      	movs	r3, #27
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 fe68 	bl	8001a7c <HAL_CAN_ConfigFilter>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 8000db2:	f000 fb0b 	bl	80013cc <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 8000db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db8:	3301      	adds	r3, #1
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbd3      	blt.n	8000d6c <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3740      	adds	r7, #64	; 0x40
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <FEB_CAN_Init+0x80>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d104      	bne.n	8000dee <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	e008      	b.n	8000e00 <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <FEB_CAN_Init+0x84>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d103      	bne.n	8000e00 <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <FEB_CAN_Init+0x88>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <FEB_CAN_Init+0x88>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <FEB_CAN_Init+0x88>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 8000e12:	6838      	ldr	r0, [r7, #0]
 8000e14:	f7ff ff0a 	bl	8000c2c <assign_filter_array>
 8000e18:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 8000e1a:	6838      	ldr	r0, [r7, #0]
 8000e1c:	f7ff ff34 	bl	8000c88 <assign_filter_array_legnth>
 8000e20:	4603      	mov	r3, r0
 8000e22:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	7afa      	ldrb	r2, [r7, #11]
 8000e28:	68f9      	ldr	r1, [r7, #12]
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff90 	bl	8000d50 <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 ff03 	bl	8001c3c <HAL_CAN_Start>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <FEB_CAN_Init+0x70>
	  Error_Handler();
 8000e3c:	f000 fac6 	bl	80013cc <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 8000e40:	6939      	ldr	r1, [r7, #16]
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f001 f850 	bl	8001ee8 <HAL_CAN_ActivateNotification>

}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40006400 	.word	0x40006400
 8000e54:	40006800 	.word	0x40006800
 8000e58:	200000c4 	.word	0x200000c4

08000e5c <FEB_CAN_Receive>:

void FEB_CAN_Receive(CAN_HandleTypeDef *hcan, uint32_t CAN_RX_FIFO) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <FEB_CAN_Receive+0x30>)
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <FEB_CAN_Receive+0x34>)
 8000e6a:	6839      	ldr	r1, [r7, #0]
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 ff29 	bl	8001cc4 <HAL_CAN_GetRxMessage>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <FEB_CAN_Receive+0x20>
		Error_Handler();
 8000e78:	f000 faa8 	bl	80013cc <Error_Handler>
	}
	store_msg(&RxHeader, RxData);
 8000e7c:	4903      	ldr	r1, [pc, #12]	; (8000e8c <FEB_CAN_Receive+0x30>)
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <FEB_CAN_Receive+0x34>)
 8000e80:	f7ff ff28 	bl	8000cd4 <store_msg>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000f8 	.word	0x200000f8
 8000e90:	200000dc 	.word	0x200000dc

08000e94 <HAL_CAN_RxFifo0MsgPendingCallback>:
	{
	  Error_Handler();
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO0);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffdc 	bl	8000e5c <FEB_CAN_Receive>
	CAN_Flag = 1;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000100 	.word	0x20000100

08000eb8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	FEB_CAN_Receive(hcan, CAN_RX_FIFO1);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffca 	bl	8000e5c <FEB_CAN_Receive>
	CAN_Flag = 1;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000100 	.word	0x20000100
 8000edc:	00000000 	.word	0x00000000

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0a4      	sub	sp, #144	; 0x90
 8000ee4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fc37 	bl	8001758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f8b7 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 f9af 	bl	8001250 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ef2:	f000 f983 	bl	80011fc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000ef6:	f000 f91d 	bl	8001134 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000efa:	f000 f951 	bl	80011a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	FEB_CAN_Init(&hcan1, LVPDB_ID);
 8000efe:	2105      	movs	r1, #5
 8000f00:	4845      	ldr	r0, [pc, #276]	; (8001018 <main+0x138>)
 8000f02:	f7ff ff65 	bl	8000dd0 <FEB_CAN_Init>

	hi2c1p = &hi2c1;
 8000f06:	4b45      	ldr	r3, [pc, #276]	; (800101c <main+0x13c>)
 8000f08:	4a45      	ldr	r2, [pc, #276]	; (8001020 <main+0x140>)
 8000f0a:	601a      	str	r2, [r3, #0]

	FEB_TPS2482_SETUP(hi2c1p, LV_ADDR, CONFIG, CAL, UNDERV, LV_LIMIT);
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <main+0x13c>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	4b44      	ldr	r3, [pc, #272]	; (8001024 <main+0x144>)
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	4b44      	ldr	r3, [pc, #272]	; (8001028 <main+0x148>)
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	4b44      	ldr	r3, [pc, #272]	; (800102c <main+0x14c>)
 8000f1c:	4a44      	ldr	r2, [pc, #272]	; (8001030 <main+0x150>)
 8000f1e:	f7ff fd8d 	bl	8000a3c <FEB_TPS2482_SETUP>
	FEB_TPS2482_SETUP(hi2c1p, CP_ADDR, CONFIG, CAL, OVERPWR, CP_LIMIT);
 8000f22:	4b3e      	ldr	r3, [pc, #248]	; (800101c <main+0x13c>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	2188      	movs	r1, #136	; 0x88
 8000f28:	4b42      	ldr	r3, [pc, #264]	; (8001034 <main+0x154>)
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	4b42      	ldr	r3, [pc, #264]	; (8001038 <main+0x158>)
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	4b3e      	ldr	r3, [pc, #248]	; (800102c <main+0x14c>)
 8000f32:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <main+0x150>)
 8000f34:	f7ff fd82 	bl	8000a3c <FEB_TPS2482_SETUP>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Brake Light
	  if (APPS_MESSAGE.brake_pedal > BRAKE_THRE) {
 8000f38:	4b40      	ldr	r3, [pc, #256]	; (800103c <main+0x15c>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fb1b 	bl	8000578 <__aeabi_f2d>
 8000f42:	a333      	add	r3, pc, #204	; (adr r3, 8001010 <main+0x130>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fbec 	bl	8000724 <__aeabi_dcmpgt>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <main+0x7e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);// PA1 high
 8000f52:	2201      	movs	r2, #1
 8000f54:	2102      	movs	r1, #2
 8000f56:	483a      	ldr	r0, [pc, #232]	; (8001040 <main+0x160>)
 8000f58:	f001 fcb8 	bl	80028cc <HAL_GPIO_WritePin>
 8000f5c:	e004      	b.n	8000f68 <main+0x88>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);// PA1 low
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2102      	movs	r1, #2
 8000f62:	4837      	ldr	r0, [pc, #220]	; (8001040 <main+0x160>)
 8000f64:	f001 fcb2 	bl	80028cc <HAL_GPIO_WritePin>
	  }

	  // activate peripheral devices if ready to drive
	  if (SW_MESSAGE.command_1 == 1 && !isDriving) {
 8000f68:	4b36      	ldr	r3, [pc, #216]	; (8001044 <main+0x164>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d11a      	bne.n	8000fa6 <main+0xc6>
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <main+0x168>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	f083 0301 	eor.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d013      	beq.n	8000fa6 <main+0xc6>
		  isDriving = true;
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <main+0x168>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);// pull PC11 high to enable coolant pump
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8a:	4830      	ldr	r0, [pc, #192]	; (800104c <main+0x16c>)
 8000f8c:	f001 fc9e 	bl	80028cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);// pull PB5 high to enable accumulator fans
 8000f90:	2201      	movs	r2, #1
 8000f92:	2120      	movs	r1, #32
 8000f94:	482e      	ldr	r0, [pc, #184]	; (8001050 <main+0x170>)
 8000f96:	f001 fc99 	bl	80028cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);// pull PC3 high to enable extra
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	482b      	ldr	r0, [pc, #172]	; (800104c <main+0x16c>)
 8000fa0:	f001 fc94 	bl	80028cc <HAL_GPIO_WritePin>
 8000fa4:	e01a      	b.n	8000fdc <main+0xfc>

	  // de-activate if not ready to drive
	  } else if (SW_MESSAGE.command_1 == 0 && isDriving) {
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <main+0x164>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <main+0xfc>
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <main+0x168>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d012      	beq.n	8000fdc <main+0xfc>
		  isDriving = false;
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <main+0x168>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc2:	4822      	ldr	r0, [pc, #136]	; (800104c <main+0x16c>)
 8000fc4:	f001 fc82 	bl	80028cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2120      	movs	r1, #32
 8000fcc:	4820      	ldr	r0, [pc, #128]	; (8001050 <main+0x170>)
 8000fce:	f001 fc7d 	bl	80028cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	481d      	ldr	r0, [pc, #116]	; (800104c <main+0x16c>)
 8000fd8:	f001 fc78 	bl	80028cc <HAL_GPIO_WritePin>
	  // extra hotswap
	  FEB_TPS2482_shutdownIfError(hi2c1p, EX_ADDR, GPIOC, GPIO_PIN_3, GPIOC, GPIO_PIN_1, GPIOC, GPIO_PIN_2, 22.5, 25.5, 7, 4, 150, 120);
***/


	  buf_len = sprintf((char*)buf, "ready: %d\r\n", SW_MESSAGE.command_1);
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <main+0x164>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	491b      	ldr	r1, [pc, #108]	; (8001054 <main+0x174>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 fad0 	bl	800458c <siprintf>
 8000fec:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8000ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	1d39      	adds	r1, r7, #4
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <main+0x178>)
 8000ffe:	f002 ff10 	bl	8003e22 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(SLEEP_TIME);
 8001002:	200a      	movs	r0, #10
 8001004:	f000 fc1a 	bl	800183c <HAL_Delay>
	  if (APPS_MESSAGE.brake_pedal > BRAKE_THRE) {
 8001008:	e796      	b.n	8000f38 <main+0x58>
 800100a:	bf00      	nop
 800100c:	f3af 8000 	nop.w
 8001010:	9999999a 	.word	0x9999999a
 8001014:	3fc99999 	.word	0x3fc99999
 8001018:	20000104 	.word	0x20000104
 800101c:	20000180 	.word	0x20000180
 8001020:	2000012c 	.word	0x2000012c
 8001024:	20000010 	.word	0x20000010
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004
 8001030:	20000000 	.word	0x20000000
 8001034:	20000014 	.word	0x20000014
 8001038:	2000000c 	.word	0x2000000c
 800103c:	200000b4 	.word	0x200000b4
 8001040:	40020000 	.word	0x40020000
 8001044:	200000b0 	.word	0x200000b0
 8001048:	200001c8 	.word	0x200001c8
 800104c:	40020800 	.word	0x40020800
 8001050:	40020400 	.word	0x40020400
 8001054:	08004e64 	.word	0x08004e64
 8001058:	20000184 	.word	0x20000184

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2234      	movs	r2, #52	; 0x34
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fa86 	bl	800457c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <SystemClock_Config+0xd0>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <SystemClock_Config+0xd0>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <SystemClock_Config+0xd0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <SystemClock_Config+0xd4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <SystemClock_Config+0xd4>)
 80010a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b20      	ldr	r3, [pc, #128]	; (8001130 <SystemClock_Config+0xd4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80010d0:	23a0      	movs	r3, #160	; 0xa0
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fbb1 	bl	800384c <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010f0:	f000 f96c 	bl	80013cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2302      	movs	r3, #2
 80010fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001100:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001104:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	2105      	movs	r1, #5
 8001112:	4618      	mov	r0, r3
 8001114:	f002 f850 	bl	80031b8 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800111e:	f000 f955 	bl	80013cc <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3750      	adds	r7, #80	; 0x50
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_CAN1_Init+0x64>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <MX_CAN1_Init+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_CAN1_Init+0x64>)
 8001140:	2210      	movs	r2, #16
 8001142:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_CAN1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <MX_CAN1_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_CAN1_Init+0x64>)
 8001152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001156:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_CAN1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_CAN1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_CAN1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_CAN1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_CAN1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_CAN1_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_CAN1_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_CAN1_Init+0x64>)
 8001184:	f000 fb7e 	bl	8001884 <HAL_CAN_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800118e:	f000 f91d 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000104 	.word	0x20000104
 800119c:	40006400 	.word	0x40006400

080011a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <MX_I2C1_Init+0x54>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_I2C1_Init+0x58>)
 80011ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_I2C1_Init+0x50>)
 80011de:	f001 fb8f 	bl	8002900 <HAL_I2C_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e8:	f000 f8f0 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000012c 	.word	0x2000012c
 80011f4:	40005400 	.word	0x40005400
 80011f8:	000186a0 	.word	0x000186a0

080011fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_USART2_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART2_UART_Init+0x4c>)
 8001234:	f002 fda8 	bl	8003d88 <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f000 f8c5 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000184 	.word	0x20000184
 800124c:	40004400 	.word	0x40004400

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b54      	ldr	r3, [pc, #336]	; (80013bc <MX_GPIO_Init+0x16c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a53      	ldr	r2, [pc, #332]	; (80013bc <MX_GPIO_Init+0x16c>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b51      	ldr	r3, [pc, #324]	; (80013bc <MX_GPIO_Init+0x16c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <MX_GPIO_Init+0x16c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a4c      	ldr	r2, [pc, #304]	; (80013bc <MX_GPIO_Init+0x16c>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <MX_GPIO_Init+0x16c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b46      	ldr	r3, [pc, #280]	; (80013bc <MX_GPIO_Init+0x16c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a45      	ldr	r2, [pc, #276]	; (80013bc <MX_GPIO_Init+0x16c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b43      	ldr	r3, [pc, #268]	; (80013bc <MX_GPIO_Init+0x16c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <MX_GPIO_Init+0x16c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a3e      	ldr	r2, [pc, #248]	; (80013bc <MX_GPIO_Init+0x16c>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <MX_GPIO_Init+0x16c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f640 0108 	movw	r1, #2056	; 0x808
 80012dc:	4838      	ldr	r0, [pc, #224]	; (80013c0 <MX_GPIO_Init+0x170>)
 80012de:	f001 faf5 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2122      	movs	r1, #34	; 0x22
 80012e6:	4837      	ldr	r0, [pc, #220]	; (80013c4 <MX_GPIO_Init+0x174>)
 80012e8:	f001 faf0 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2120      	movs	r1, #32
 80012f0:	4835      	ldr	r0, [pc, #212]	; (80013c8 <MX_GPIO_Init+0x178>)
 80012f2:	f001 faeb 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	482c      	ldr	r0, [pc, #176]	; (80013c0 <MX_GPIO_Init+0x170>)
 800130e:	f001 f949 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12;
 8001312:	f241 4306 	movw	r3, #5126	; 0x1406
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4826      	ldr	r0, [pc, #152]	; (80013c0 <MX_GPIO_Init+0x170>)
 8001328:	f001 f93c 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11;
 800132c:	f640 0308 	movw	r3, #2056	; 0x808
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	481e      	ldr	r0, [pc, #120]	; (80013c0 <MX_GPIO_Init+0x170>)
 8001346:	f001 f92d 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 800134a:	2322      	movs	r3, #34	; 0x22
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4818      	ldr	r0, [pc, #96]	; (80013c4 <MX_GPIO_Init+0x174>)
 8001362:	f001 f91f 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4812      	ldr	r0, [pc, #72]	; (80013c4 <MX_GPIO_Init+0x174>)
 800137c:	f001 f912 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001380:	23d0      	movs	r3, #208	; 0xd0
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <MX_GPIO_Init+0x178>)
 8001394:	f001 f906 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001398:	2320      	movs	r3, #32
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_GPIO_Init+0x178>)
 80013b0:	f001 f8f8 	bl	80025a4 <HAL_GPIO_Init>

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400

080013cc <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <Error_Handler+0x8>
	...

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_MspInit+0x4c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_MspInit+0x4c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_MspInit+0x4c>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_MspInit+0x4c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001416:	2007      	movs	r0, #7
 8001418:	f001 f882 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800

08001428 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HAL_CAN_MspInit+0xa4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d13c      	bne.n	80014c4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_CAN_MspInit+0xa8>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_CAN_MspInit+0xa8>)
 8001454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_CAN_MspInit+0xa8>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_CAN_MspInit+0xa8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <HAL_CAN_MspInit+0xa8>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_CAN_MspInit+0xa8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001482:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001494:	2309      	movs	r3, #9
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <HAL_CAN_MspInit+0xac>)
 80014a0:	f001 f880 	bl	80025a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2014      	movs	r0, #20
 80014aa:	f001 f844 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014ae:	2014      	movs	r0, #20
 80014b0:	f001 f85d 	bl	800256e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2015      	movs	r0, #21
 80014ba:	f001 f83c 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014be:	2015      	movs	r0, #21
 80014c0:	f001 f855 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40006400 	.word	0x40006400
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a19      	ldr	r2, [pc, #100]	; (800155c <HAL_I2C_MspInit+0x84>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d12c      	bne.n	8001554 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_I2C_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a17      	ldr	r2, [pc, #92]	; (8001560 <HAL_I2C_MspInit+0x88>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_I2C_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151c:	2312      	movs	r3, #18
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001528:	2304      	movs	r3, #4
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	480c      	ldr	r0, [pc, #48]	; (8001564 <HAL_I2C_MspInit+0x8c>)
 8001534:	f001 f836 	bl	80025a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_I2C_MspInit+0x88>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_I2C_MspInit+0x88>)
 8001542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_I2C_MspInit+0x88>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40005400 	.word	0x40005400
 8001560:	40023800 	.word	0x40023800
 8001564:	40020400 	.word	0x40020400

08001568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a19      	ldr	r2, [pc, #100]	; (80015ec <HAL_UART_MspInit+0x84>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d12b      	bne.n	80015e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_UART_MspInit+0x88>)
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0x88>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_UART_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_UART_MspInit+0x88>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_UART_MspInit+0x88>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c2:	230c      	movs	r3, #12
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d2:	2307      	movs	r3, #7
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_UART_MspInit+0x8c>)
 80015de:	f000 ffe1 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 f8da 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <CAN1_RX0_IRQHandler+0x10>)
 8001652:	f000 fc6f 	bl	8001f34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000104 	.word	0x20000104

08001660 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <CAN1_RX1_IRQHandler+0x10>)
 8001666:	f000 fc65 	bl	8001f34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000104 	.word	0x20000104

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a4:	f002 ff32 	bl	800450c <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	220c      	movs	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b2:	e009      	b.n	80016c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <_sbrk+0x64>)
 80016c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20020000 	.word	0x20020000
 80016d4:	00000400 	.word	0x00000400
 80016d8:	200001cc 	.word	0x200001cc
 80016dc:	200001e8 	.word	0x200001e8

080016e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800173c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800170a:	490e      	ldr	r1, [pc, #56]	; (8001744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800170c:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001720:	4c0b      	ldr	r4, [pc, #44]	; (8001750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172e:	f7ff ffd7 	bl	80016e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001732:	f002 fef1 	bl	8004518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001736:	f7ff fbd3 	bl	8000ee0 <main>
  bx  lr    
 800173a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800173c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001744:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001748:	08004ee4 	.word	0x08004ee4
  ldr r2, =_sbss
 800174c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001750:	200001e4 	.word	0x200001e4

08001754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC_IRQHandler>
	...

08001758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <HAL_Init+0x40>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_Init+0x40>)
 800176e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_Init+0x40>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 fecd 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f808 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fe24 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x54>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_InitTick+0x58>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fee5 	bl	800258a <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00e      	b.n	80017e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d8:	f000 fead 	bl	8002536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <HAL_InitTick+0x5c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000018 	.word	0x20000018
 80017f4:	20000020 	.word	0x20000020
 80017f8:	2000001c 	.word	0x2000001c

080017fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x20>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x24>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_IncTick+0x24>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000020 	.word	0x20000020
 8001820:	200001d0 	.word	0x200001d0

08001824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_GetTick+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200001d0 	.word	0x200001d0

0800183c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff ffee 	bl	8001824 <HAL_GetTick>
 8001848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001854:	d005      	beq.n	8001862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_Delay+0x44>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001862:	bf00      	nop
 8001864:	f7ff ffde 	bl	8001824 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8f7      	bhi.n	8001864 <HAL_Delay+0x28>
  {
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000020 	.word	0x20000020

08001884 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0ed      	b.n	8001a72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fdc0 	bl	8001428 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b8:	f7ff ffb4 	bl	8001824 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018be:	e012      	b.n	80018e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018c0:	f7ff ffb0 	bl	8001824 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	d90b      	bls.n	80018e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2205      	movs	r2, #5
 80018de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0c5      	b.n	8001a72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0e5      	beq.n	80018c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0202 	bic.w	r2, r2, #2
 8001902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001904:	f7ff ff8e 	bl	8001824 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800190a:	e012      	b.n	8001932 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800190c:	f7ff ff8a 	bl	8001824 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d90b      	bls.n	8001932 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2205      	movs	r2, #5
 800192a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e09f      	b.n	8001a72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e5      	bne.n	800190c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7e1b      	ldrb	r3, [r3, #24]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d108      	bne.n	800195a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e007      	b.n	800196a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7e5b      	ldrb	r3, [r3, #25]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d108      	bne.n	8001984 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e007      	b.n	8001994 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001992:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e9b      	ldrb	r3, [r3, #26]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d108      	bne.n	80019ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0220 	orr.w	r2, r2, #32
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e007      	b.n	80019be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0220 	bic.w	r2, r2, #32
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7edb      	ldrb	r3, [r3, #27]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0210 	bic.w	r2, r2, #16
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0210 	orr.w	r2, r2, #16
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7f1b      	ldrb	r3, [r3, #28]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0208 	orr.w	r2, r2, #8
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e007      	b.n	8001a12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0208 	bic.w	r2, r2, #8
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7f5b      	ldrb	r3, [r3, #29]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0204 	orr.w	r2, r2, #4
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0204 	bic.w	r2, r2, #4
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	ea42 0103 	orr.w	r1, r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a94:	7cfb      	ldrb	r3, [r7, #19]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d003      	beq.n	8001aa2 <HAL_CAN_ConfigFilter+0x26>
 8001a9a:	7cfb      	ldrb	r3, [r7, #19]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	f040 80be 	bne.w	8001c1e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_CAN_ConfigFilter+0x1bc>)
 8001aa4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001abc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	401a      	ands	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d123      	bne.n	8001b4c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3248      	adds	r2, #72	; 0x48
 8001b2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b42:	6979      	ldr	r1, [r7, #20]
 8001b44:	3348      	adds	r3, #72	; 0x48
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d122      	bne.n	8001b9a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3248      	adds	r2, #72	; 0x48
 8001b7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b90:	6979      	ldr	r1, [r7, #20]
 8001b92:	3348      	adds	r3, #72	; 0x48
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	401a      	ands	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bb4:	e007      	b.n	8001bc6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	401a      	ands	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001be0:	e007      	b.n	8001bf2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c10:	f023 0201 	bic.w	r2, r3, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e006      	b.n	8001c2c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
  }
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40006400 	.word	0x40006400

08001c3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d12e      	bne.n	8001cae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c68:	f7ff fddc 	bl	8001824 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c6e:	e012      	b.n	8001c96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c70:	f7ff fdd8 	bl	8001824 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b0a      	cmp	r3, #10
 8001c7c:	d90b      	bls.n	8001c96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2205      	movs	r2, #5
 8001c8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e012      	b.n	8001cbc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e5      	bne.n	8001c70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e006      	b.n	8001cbc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
  }
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d003      	beq.n	8001ce8 <HAL_CAN_GetRxMessage+0x24>
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	f040 80f3 	bne.w	8001ece <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10e      	bne.n	8001d0c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d116      	bne.n	8001d2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0e7      	b.n	8001edc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0d8      	b.n	8001edc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	331b      	adds	r3, #27
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0204 	and.w	r2, r3, #4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10c      	bne.n	8001d62 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	331b      	adds	r3, #27
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	4413      	add	r3, r2
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0d5b      	lsrs	r3, r3, #21
 8001d58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e00b      	b.n	8001d7a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	331b      	adds	r3, #27
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	331b      	adds	r3, #27
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	4413      	add	r3, r2
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0202 	and.w	r2, r3, #2
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	331b      	adds	r3, #27
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	331b      	adds	r3, #27
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	331b      	adds	r3, #27
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	4413      	add	r3, r2
 8001dcc:	3304      	adds	r3, #4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	0a1a      	lsrs	r2, r3, #8
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0c1a      	lsrs	r2, r3, #16
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	0e1a      	lsrs	r2, r3, #24
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3303      	adds	r3, #3
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	0a1a      	lsrs	r2, r3, #8
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	3305      	adds	r3, #5
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	0c1a      	lsrs	r2, r3, #16
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	3306      	adds	r3, #6
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e1a      	lsrs	r2, r3, #24
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3307      	adds	r3, #7
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d108      	bne.n	8001eba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0220 	orr.w	r2, r2, #32
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	e007      	b.n	8001eca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e006      	b.n	8001edc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
  }
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d002      	beq.n	8001f06 <HAL_CAN_ActivateNotification+0x1e>
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d109      	bne.n	8001f1a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6959      	ldr	r1, [r3, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e006      	b.n	8001f28 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
  }
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d07c      	beq.n	8002074 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d023      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f983 	bl	80022a2 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f9c:	e016      	b.n	8001fcc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	e00c      	b.n	8001fcc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc4:	e002      	b.n	8001fcc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f989 	bl	80022de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d024      	beq.n	8002020 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f963 	bl	80022b6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ff0:	e016      	b.n	8002020 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	e00c      	b.n	8002020 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
 8002018:	e002      	b.n	8002020 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f969 	bl	80022f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d024      	beq.n	8002074 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002032:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f943 	bl	80022ca <HAL_CAN_TxMailbox2CompleteCallback>
 8002044:	e016      	b.n	8002074 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e00c      	b.n	8002074 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
 800206c:	e002      	b.n	8002074 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f949 	bl	8002306 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2210      	movs	r2, #16
 8002096:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2208      	movs	r2, #8
 80020b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f930 	bl	800231a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d009      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fede 	bl	8000e94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2210      	movs	r2, #16
 80020fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2208      	movs	r2, #8
 8002116:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f908 	bl	800232e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d009      	beq.n	800213c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe febe 	bl	8000eb8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2210      	movs	r2, #16
 8002156:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f8f2 	bl	8002342 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2208      	movs	r2, #8
 8002178:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8eb 	bl	8002356 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d07b      	beq.n	8002282 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d072      	beq.n	800227a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d043      	beq.n	800227a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d03e      	beq.n	800227a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002202:	2b60      	cmp	r3, #96	; 0x60
 8002204:	d02b      	beq.n	800225e <HAL_CAN_IRQHandler+0x32a>
 8002206:	2b60      	cmp	r3, #96	; 0x60
 8002208:	d82e      	bhi.n	8002268 <HAL_CAN_IRQHandler+0x334>
 800220a:	2b50      	cmp	r3, #80	; 0x50
 800220c:	d022      	beq.n	8002254 <HAL_CAN_IRQHandler+0x320>
 800220e:	2b50      	cmp	r3, #80	; 0x50
 8002210:	d82a      	bhi.n	8002268 <HAL_CAN_IRQHandler+0x334>
 8002212:	2b40      	cmp	r3, #64	; 0x40
 8002214:	d019      	beq.n	800224a <HAL_CAN_IRQHandler+0x316>
 8002216:	2b40      	cmp	r3, #64	; 0x40
 8002218:	d826      	bhi.n	8002268 <HAL_CAN_IRQHandler+0x334>
 800221a:	2b30      	cmp	r3, #48	; 0x30
 800221c:	d010      	beq.n	8002240 <HAL_CAN_IRQHandler+0x30c>
 800221e:	2b30      	cmp	r3, #48	; 0x30
 8002220:	d822      	bhi.n	8002268 <HAL_CAN_IRQHandler+0x334>
 8002222:	2b10      	cmp	r3, #16
 8002224:	d002      	beq.n	800222c <HAL_CAN_IRQHandler+0x2f8>
 8002226:	2b20      	cmp	r3, #32
 8002228:	d005      	beq.n	8002236 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800222a:	e01d      	b.n	8002268 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002234:	e019      	b.n	800226a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f043 0310 	orr.w	r3, r3, #16
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800223e:	e014      	b.n	800226a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	f043 0320 	orr.w	r3, r3, #32
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002248:	e00f      	b.n	800226a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002252:	e00a      	b.n	800226a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800225c:	e005      	b.n	800226a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002266:	e000      	b.n	800226a <HAL_CAN_IRQHandler+0x336>
            break;
 8002268:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002278:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2204      	movs	r2, #4
 8002280:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f868 	bl	800236a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	; 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0b      	blt.n	800240e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	; (800241c <__NVIC_EnableIRQ+0x38>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002500:	f7ff ff8e 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff29 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff3e 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff8e 	bl	8002474 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5d 	bl	8002420 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff31 	bl	80023e4 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa2 	bl	80024dc <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	e165      	b.n	800288c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f040 8154 	bne.w	8002886 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d005      	beq.n	80025f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d130      	bne.n	8002658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 0201 	and.w	r2, r3, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b03      	cmp	r3, #3
 8002662:	d017      	beq.n	8002694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d123      	bne.n	80026e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	08da      	lsrs	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3208      	adds	r2, #8
 80026a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	220f      	movs	r2, #15
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	08da      	lsrs	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0203 	and.w	r2, r3, #3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80ae 	beq.w	8002886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_GPIO_Init+0x300>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <HAL_GPIO_Init+0x300>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <HAL_GPIO_Init+0x300>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002746:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <HAL_GPIO_Init+0x304>)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4f      	ldr	r2, [pc, #316]	; (80028ac <HAL_GPIO_Init+0x308>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d025      	beq.n	80027be <HAL_GPIO_Init+0x21a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4e      	ldr	r2, [pc, #312]	; (80028b0 <HAL_GPIO_Init+0x30c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <HAL_GPIO_Init+0x216>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a4d      	ldr	r2, [pc, #308]	; (80028b4 <HAL_GPIO_Init+0x310>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x212>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_GPIO_Init+0x314>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x20e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4b      	ldr	r2, [pc, #300]	; (80028bc <HAL_GPIO_Init+0x318>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x20a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4a      	ldr	r2, [pc, #296]	; (80028c0 <HAL_GPIO_Init+0x31c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x206>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a49      	ldr	r2, [pc, #292]	; (80028c4 <HAL_GPIO_Init+0x320>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x202>
 80027a2:	2306      	movs	r3, #6
 80027a4:	e00c      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e00a      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e008      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027ae:	2304      	movs	r3, #4
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027b2:	2303      	movs	r3, #3
 80027b4:	e004      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x21c>
 80027be:	2300      	movs	r3, #0
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f002 0203 	and.w	r2, r2, #3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	4093      	lsls	r3, r2
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d0:	4935      	ldr	r1, [pc, #212]	; (80028a8 <HAL_GPIO_Init+0x304>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027de:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_GPIO_Init+0x324>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002802:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800282c:	4a26      	ldr	r2, [pc, #152]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002832:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <HAL_GPIO_Init+0x324>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	f67f ae96 	bls.w	80025c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40013800 	.word	0x40013800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40021400 	.word	0x40021400
 80028c4:	40021800 	.word	0x40021800
 80028c8:	40013c00 	.word	0x40013c00

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	619a      	str	r2, [r3, #24]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e12b      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fdd6 	bl	80014d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002964:	f000 fd1a 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a81      	ldr	r2, [pc, #516]	; (8002b74 <HAL_I2C_Init+0x274>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d807      	bhi.n	8002984 <HAL_I2C_Init+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a80      	ldr	r2, [pc, #512]	; (8002b78 <HAL_I2C_Init+0x278>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e006      	b.n	8002992 <HAL_I2C_Init+0x92>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a7d      	ldr	r2, [pc, #500]	; (8002b7c <HAL_I2C_Init+0x27c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0e7      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a78      	ldr	r2, [pc, #480]	; (8002b80 <HAL_I2C_Init+0x280>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a6a      	ldr	r2, [pc, #424]	; (8002b74 <HAL_I2C_Init+0x274>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d802      	bhi.n	80029d4 <HAL_I2C_Init+0xd4>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3301      	adds	r3, #1
 80029d2:	e009      	b.n	80029e8 <HAL_I2C_Init+0xe8>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4a69      	ldr	r2, [pc, #420]	; (8002b84 <HAL_I2C_Init+0x284>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	495c      	ldr	r1, [pc, #368]	; (8002b74 <HAL_I2C_Init+0x274>)
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d819      	bhi.n	8002a3c <HAL_I2C_Init+0x13c>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e59      	subs	r1, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a16:	1c59      	adds	r1, r3, #1
 8002a18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_I2C_Init+0x138>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1e59      	subs	r1, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a36:	e051      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	e04f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <HAL_I2C_Init+0x168>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e012      	b.n	8002a8e <HAL_I2C_Init+0x18e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Init+0x196>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e022      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10e      	bne.n	8002abc <HAL_I2C_Init+0x1bc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e58      	subs	r0, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	440b      	add	r3, r1
 8002aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aba:	e00f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	0099      	lsls	r1, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	6809      	ldr	r1, [r1, #0]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6911      	ldr	r1, [r2, #16]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68d2      	ldr	r2, [r2, #12]
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	000186a0 	.word	0x000186a0
 8002b78:	001e847f 	.word	0x001e847f
 8002b7c:	003d08ff 	.word	0x003d08ff
 8002b80:	431bde83 	.word	0x431bde83
 8002b84:	10624dd3 	.word	0x10624dd3

08002b88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	4608      	mov	r0, r1
 8002b92:	4611      	mov	r1, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	817b      	strh	r3, [r7, #10]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	813b      	strh	r3, [r7, #8]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ba2:	f7fe fe3f 	bl	8001824 <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	f040 80d9 	bne.w	8002d68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2319      	movs	r3, #25
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	496d      	ldr	r1, [pc, #436]	; (8002d74 <HAL_I2C_Mem_Write+0x1ec>)
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f971 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0cc      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_I2C_Mem_Write+0x56>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e0c5      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d007      	beq.n	8002c04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2221      	movs	r2, #33	; 0x21
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2240      	movs	r2, #64	; 0x40
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a4d      	ldr	r2, [pc, #308]	; (8002d78 <HAL_I2C_Mem_Write+0x1f0>)
 8002c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c46:	88f8      	ldrh	r0, [r7, #6]
 8002c48:	893a      	ldrh	r2, [r7, #8]
 8002c4a:	8979      	ldrh	r1, [r7, #10]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4603      	mov	r3, r0
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f890 	bl	8002d7c <I2C_RequestMemoryWrite>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d052      	beq.n	8002d08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e081      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f9f2 	bl	8003054 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d107      	bne.n	8002c8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06b      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d11b      	bne.n	8002d08 <HAL_I2C_Mem_Write+0x180>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d017      	beq.n	8002d08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1aa      	bne.n	8002c66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f9de 	bl	80030d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d107      	bne.n	8002d38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e016      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e000      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	00100002 	.word	0x00100002
 8002d78:	ffff0000 	.word	0xffff0000

08002d7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	817b      	strh	r3, [r7, #10]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	813b      	strh	r3, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f878 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dcc:	d103      	bne.n	8002dd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e05f      	b.n	8002e9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dda:	897b      	ldrh	r3, [r7, #10]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002de8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	6a3a      	ldr	r2, [r7, #32]
 8002dee:	492d      	ldr	r1, [pc, #180]	; (8002ea4 <I2C_RequestMemoryWrite+0x128>)
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f8b0 	bl	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e04c      	b.n	8002e9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	6a39      	ldr	r1, [r7, #32]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f91a 	bl	8003054 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d107      	bne.n	8002e3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e02b      	b.n	8002e9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d105      	bne.n	8002e54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e48:	893b      	ldrh	r3, [r7, #8]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	611a      	str	r2, [r3, #16]
 8002e52:	e021      	b.n	8002e98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e54:	893b      	ldrh	r3, [r7, #8]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f8f4 	bl	8003054 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d107      	bne.n	8002e8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e005      	b.n	8002e9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e8e:	893b      	ldrh	r3, [r7, #8]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	00010002 	.word	0x00010002

08002ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb8:	e025      	b.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec0:	d021      	beq.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec2:	f7fe fcaf 	bl	8001824 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f043 0220 	orr.w	r2, r3, #32
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e023      	b.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10d      	bne.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	e00c      	b.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4013      	ands	r3, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d0b6      	beq.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f64:	e051      	b.n	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f74:	d123      	bne.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f043 0204 	orr.w	r2, r3, #4
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e046      	b.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc4:	d021      	beq.n	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe fc2d 	bl	8001824 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d116      	bne.n	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e020      	b.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10c      	bne.n	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e00b      	b.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d18d      	bne.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003060:	e02d      	b.n	80030be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f878 	bl	8003158 <I2C_IsAcknowledgeFailed>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e02d      	b.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003078:	d021      	beq.n	80030be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7fe fbd3 	bl	8001824 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d116      	bne.n	80030be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e007      	b.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d1ca      	bne.n	8003062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e2:	e02d      	b.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f837 	bl	8003158 <I2C_IsAcknowledgeFailed>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e02d      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030fa:	d021      	beq.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fc:	f7fe fb92 	bl	8001824 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	429a      	cmp	r2, r3
 800310a:	d302      	bcc.n	8003112 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d116      	bne.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e007      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d1ca      	bne.n	80030e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316e:	d11b      	bne.n	80031a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003178:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0cc      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031cc:	4b68      	ldr	r3, [pc, #416]	; (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d90c      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b65      	ldr	r3, [pc, #404]	; (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b63      	ldr	r3, [pc, #396]	; (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b8      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d020      	beq.n	8003242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800320c:	4b59      	ldr	r3, [pc, #356]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a58      	ldr	r2, [pc, #352]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003224:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4a52      	ldr	r2, [pc, #328]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800322e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b50      	ldr	r3, [pc, #320]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	494d      	ldr	r1, [pc, #308]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d044      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d119      	bne.n	8003296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e07f      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d003      	beq.n	8003276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003272:	2b03      	cmp	r3, #3
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003276:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06f      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003286:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e067      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003296:	4b37      	ldr	r3, [pc, #220]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f023 0203 	bic.w	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4934      	ldr	r1, [pc, #208]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a8:	f7fe fabc 	bl	8001824 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b0:	f7fe fab8 	bl	8001824 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e04f      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 020c 	and.w	r2, r3, #12
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d1eb      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d8:	4b25      	ldr	r3, [pc, #148]	; (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d20c      	bcs.n	8003300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b22      	ldr	r3, [pc, #136]	; (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e032      	b.n	8003366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4916      	ldr	r1, [pc, #88]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800332a:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	490e      	ldr	r1, [pc, #56]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800333e:	f000 f855 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8003342:	4602      	mov	r2, r0
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	490a      	ldr	r1, [pc, #40]	; (8003378 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	5ccb      	ldrb	r3, [r1, r3]
 8003352:	fa22 f303 	lsr.w	r3, r2, r3
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fa1c 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023c00 	.word	0x40023c00
 8003374:	40023800 	.word	0x40023800
 8003378:	08004e88 	.word	0x08004e88
 800337c:	20000018 	.word	0x20000018
 8003380:	2000001c 	.word	0x2000001c

08003384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_RCC_GetHCLKFreq+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000018 	.word	0x20000018

0800339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033a0:	f7ff fff0 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4903      	ldr	r1, [pc, #12]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	08004e98 	.word	0x08004e98

080033c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033c8:	f7ff ffdc 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0b5b      	lsrs	r3, r3, #13
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40023800 	.word	0x40023800
 80033e8:	08004e98 	.word	0x08004e98

080033ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f0:	b0ae      	sub	sp, #184	; 0xb8
 80033f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003412:	4bcb      	ldr	r3, [pc, #812]	; (8003740 <HAL_RCC_GetSysClockFreq+0x354>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b0c      	cmp	r3, #12
 800341c:	f200 8206 	bhi.w	800382c <HAL_RCC_GetSysClockFreq+0x440>
 8003420:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800345d 	.word	0x0800345d
 800342c:	0800382d 	.word	0x0800382d
 8003430:	0800382d 	.word	0x0800382d
 8003434:	0800382d 	.word	0x0800382d
 8003438:	08003465 	.word	0x08003465
 800343c:	0800382d 	.word	0x0800382d
 8003440:	0800382d 	.word	0x0800382d
 8003444:	0800382d 	.word	0x0800382d
 8003448:	0800346d 	.word	0x0800346d
 800344c:	0800382d 	.word	0x0800382d
 8003450:	0800382d 	.word	0x0800382d
 8003454:	0800382d 	.word	0x0800382d
 8003458:	0800365d 	.word	0x0800365d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4bb9      	ldr	r3, [pc, #740]	; (8003744 <HAL_RCC_GetSysClockFreq+0x358>)
 800345e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003462:	e1e7      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003464:	4bb8      	ldr	r3, [pc, #736]	; (8003748 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800346a:	e1e3      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4bb4      	ldr	r3, [pc, #720]	; (8003740 <HAL_RCC_GetSysClockFreq+0x354>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003478:	4bb1      	ldr	r3, [pc, #708]	; (8003740 <HAL_RCC_GetSysClockFreq+0x354>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d071      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003484:	4bae      	ldr	r3, [pc, #696]	; (8003740 <HAL_RCC_GetSysClockFreq+0x354>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	2200      	movs	r2, #0
 800348c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003490:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034aa:	4622      	mov	r2, r4
 80034ac:	462b      	mov	r3, r5
 80034ae:	f04f 0000 	mov.w	r0, #0
 80034b2:	f04f 0100 	mov.w	r1, #0
 80034b6:	0159      	lsls	r1, r3, #5
 80034b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034bc:	0150      	lsls	r0, r2, #5
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4621      	mov	r1, r4
 80034c4:	1a51      	subs	r1, r2, r1
 80034c6:	6439      	str	r1, [r7, #64]	; 0x40
 80034c8:	4629      	mov	r1, r5
 80034ca:	eb63 0301 	sbc.w	r3, r3, r1
 80034ce:	647b      	str	r3, [r7, #68]	; 0x44
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80034dc:	4649      	mov	r1, r9
 80034de:	018b      	lsls	r3, r1, #6
 80034e0:	4641      	mov	r1, r8
 80034e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034e6:	4641      	mov	r1, r8
 80034e8:	018a      	lsls	r2, r1, #6
 80034ea:	4641      	mov	r1, r8
 80034ec:	1a51      	subs	r1, r2, r1
 80034ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80034f0:	4649      	mov	r1, r9
 80034f2:	eb63 0301 	sbc.w	r3, r3, r1
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003504:	4649      	mov	r1, r9
 8003506:	00cb      	lsls	r3, r1, #3
 8003508:	4641      	mov	r1, r8
 800350a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350e:	4641      	mov	r1, r8
 8003510:	00ca      	lsls	r2, r1, #3
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	4603      	mov	r3, r0
 8003518:	4622      	mov	r2, r4
 800351a:	189b      	adds	r3, r3, r2
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
 800351e:	462b      	mov	r3, r5
 8003520:	460a      	mov	r2, r1
 8003522:	eb42 0303 	adc.w	r3, r2, r3
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003534:	4629      	mov	r1, r5
 8003536:	024b      	lsls	r3, r1, #9
 8003538:	4621      	mov	r1, r4
 800353a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800353e:	4621      	mov	r1, r4
 8003540:	024a      	lsls	r2, r1, #9
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800354a:	2200      	movs	r2, #0
 800354c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003550:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003554:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003558:	f7fd f8ee 	bl	8000738 <__aeabi_uldivmod>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4613      	mov	r3, r2
 8003562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003566:	e067      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003568:	4b75      	ldr	r3, [pc, #468]	; (8003740 <HAL_RCC_GetSysClockFreq+0x354>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	2200      	movs	r2, #0
 8003570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003574:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800357c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003580:	67bb      	str	r3, [r7, #120]	; 0x78
 8003582:	2300      	movs	r3, #0
 8003584:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003586:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800358a:	4622      	mov	r2, r4
 800358c:	462b      	mov	r3, r5
 800358e:	f04f 0000 	mov.w	r0, #0
 8003592:	f04f 0100 	mov.w	r1, #0
 8003596:	0159      	lsls	r1, r3, #5
 8003598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800359c:	0150      	lsls	r0, r2, #5
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4621      	mov	r1, r4
 80035a4:	1a51      	subs	r1, r2, r1
 80035a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80035a8:	4629      	mov	r1, r5
 80035aa:	eb63 0301 	sbc.w	r3, r3, r1
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80035bc:	4649      	mov	r1, r9
 80035be:	018b      	lsls	r3, r1, #6
 80035c0:	4641      	mov	r1, r8
 80035c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035c6:	4641      	mov	r1, r8
 80035c8:	018a      	lsls	r2, r1, #6
 80035ca:	4641      	mov	r1, r8
 80035cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80035d0:	4649      	mov	r1, r9
 80035d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035ea:	4692      	mov	sl, r2
 80035ec:	469b      	mov	fp, r3
 80035ee:	4623      	mov	r3, r4
 80035f0:	eb1a 0303 	adds.w	r3, sl, r3
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	462b      	mov	r3, r5
 80035f8:	eb4b 0303 	adc.w	r3, fp, r3
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800360a:	4629      	mov	r1, r5
 800360c:	028b      	lsls	r3, r1, #10
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003614:	4621      	mov	r1, r4
 8003616:	028a      	lsls	r2, r1, #10
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003620:	2200      	movs	r2, #0
 8003622:	673b      	str	r3, [r7, #112]	; 0x70
 8003624:	677a      	str	r2, [r7, #116]	; 0x74
 8003626:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800362a:	f7fd f885 	bl	8000738 <__aeabi_uldivmod>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4613      	mov	r3, r2
 8003634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003638:	4b41      	ldr	r3, [pc, #260]	; (8003740 <HAL_RCC_GetSysClockFreq+0x354>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	3301      	adds	r3, #1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800364a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800364e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800365a:	e0eb      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800365c:	4b38      	ldr	r3, [pc, #224]	; (8003740 <HAL_RCC_GetSysClockFreq+0x354>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003668:	4b35      	ldr	r3, [pc, #212]	; (8003740 <HAL_RCC_GetSysClockFreq+0x354>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d06b      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003674:	4b32      	ldr	r3, [pc, #200]	; (8003740 <HAL_RCC_GetSysClockFreq+0x354>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	2200      	movs	r2, #0
 800367c:	66bb      	str	r3, [r7, #104]	; 0x68
 800367e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	663b      	str	r3, [r7, #96]	; 0x60
 8003688:	2300      	movs	r3, #0
 800368a:	667b      	str	r3, [r7, #100]	; 0x64
 800368c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003690:	4622      	mov	r2, r4
 8003692:	462b      	mov	r3, r5
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	0159      	lsls	r1, r3, #5
 800369e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a2:	0150      	lsls	r0, r2, #5
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4621      	mov	r1, r4
 80036aa:	1a51      	subs	r1, r2, r1
 80036ac:	61b9      	str	r1, [r7, #24]
 80036ae:	4629      	mov	r1, r5
 80036b0:	eb63 0301 	sbc.w	r3, r3, r1
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036c2:	4659      	mov	r1, fp
 80036c4:	018b      	lsls	r3, r1, #6
 80036c6:	4651      	mov	r1, sl
 80036c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036cc:	4651      	mov	r1, sl
 80036ce:	018a      	lsls	r2, r1, #6
 80036d0:	4651      	mov	r1, sl
 80036d2:	ebb2 0801 	subs.w	r8, r2, r1
 80036d6:	4659      	mov	r1, fp
 80036d8:	eb63 0901 	sbc.w	r9, r3, r1
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036f0:	4690      	mov	r8, r2
 80036f2:	4699      	mov	r9, r3
 80036f4:	4623      	mov	r3, r4
 80036f6:	eb18 0303 	adds.w	r3, r8, r3
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	462b      	mov	r3, r5
 80036fe:	eb49 0303 	adc.w	r3, r9, r3
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003710:	4629      	mov	r1, r5
 8003712:	024b      	lsls	r3, r1, #9
 8003714:	4621      	mov	r1, r4
 8003716:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800371a:	4621      	mov	r1, r4
 800371c:	024a      	lsls	r2, r1, #9
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003726:	2200      	movs	r2, #0
 8003728:	65bb      	str	r3, [r7, #88]	; 0x58
 800372a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800372c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003730:	f7fd f802 	bl	8000738 <__aeabi_uldivmod>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4613      	mov	r3, r2
 800373a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800373e:	e065      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x420>
 8003740:	40023800 	.word	0x40023800
 8003744:	00f42400 	.word	0x00f42400
 8003748:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800374c:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <HAL_RCC_GetSysClockFreq+0x458>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	2200      	movs	r2, #0
 8003754:	4618      	mov	r0, r3
 8003756:	4611      	mov	r1, r2
 8003758:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800375c:	653b      	str	r3, [r7, #80]	; 0x50
 800375e:	2300      	movs	r3, #0
 8003760:	657b      	str	r3, [r7, #84]	; 0x54
 8003762:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003766:	4642      	mov	r2, r8
 8003768:	464b      	mov	r3, r9
 800376a:	f04f 0000 	mov.w	r0, #0
 800376e:	f04f 0100 	mov.w	r1, #0
 8003772:	0159      	lsls	r1, r3, #5
 8003774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003778:	0150      	lsls	r0, r2, #5
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4641      	mov	r1, r8
 8003780:	1a51      	subs	r1, r2, r1
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	4649      	mov	r1, r9
 8003786:	eb63 0301 	sbc.w	r3, r3, r1
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003798:	4659      	mov	r1, fp
 800379a:	018b      	lsls	r3, r1, #6
 800379c:	4651      	mov	r1, sl
 800379e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037a2:	4651      	mov	r1, sl
 80037a4:	018a      	lsls	r2, r1, #6
 80037a6:	4651      	mov	r1, sl
 80037a8:	1a54      	subs	r4, r2, r1
 80037aa:	4659      	mov	r1, fp
 80037ac:	eb63 0501 	sbc.w	r5, r3, r1
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	00eb      	lsls	r3, r5, #3
 80037ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037be:	00e2      	lsls	r2, r4, #3
 80037c0:	4614      	mov	r4, r2
 80037c2:	461d      	mov	r5, r3
 80037c4:	4643      	mov	r3, r8
 80037c6:	18e3      	adds	r3, r4, r3
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	464b      	mov	r3, r9
 80037cc:	eb45 0303 	adc.w	r3, r5, r3
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037de:	4629      	mov	r1, r5
 80037e0:	028b      	lsls	r3, r1, #10
 80037e2:	4621      	mov	r1, r4
 80037e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037e8:	4621      	mov	r1, r4
 80037ea:	028a      	lsls	r2, r1, #10
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037f4:	2200      	movs	r2, #0
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80037fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037fe:	f7fc ff9b 	bl	8000738 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4613      	mov	r3, r2
 8003808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_GetSysClockFreq+0x458>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	0f1b      	lsrs	r3, r3, #28
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800381a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800381e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800382a:	e003      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCC_GetSysClockFreq+0x45c>)
 800382e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003832:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003838:	4618      	mov	r0, r3
 800383a:	37b8      	adds	r7, #184	; 0xb8
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400

0800384c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e28d      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8083 	beq.w	8003972 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800386c:	4b94      	ldr	r3, [pc, #592]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b04      	cmp	r3, #4
 8003876:	d019      	beq.n	80038ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003878:	4b91      	ldr	r3, [pc, #580]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003880:	2b08      	cmp	r3, #8
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003884:	4b8e      	ldr	r3, [pc, #568]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003890:	d00c      	beq.n	80038ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003892:	4b8b      	ldr	r3, [pc, #556]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d112      	bne.n	80038c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4b88      	ldr	r3, [pc, #544]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	4b84      	ldr	r3, [pc, #528]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05b      	beq.n	8003970 <HAL_RCC_OscConfig+0x124>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d157      	bne.n	8003970 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e25a      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x90>
 80038ce:	4b7c      	ldr	r3, [pc, #496]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a7b      	ldr	r2, [pc, #492]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e01d      	b.n	8003918 <HAL_RCC_OscConfig+0xcc>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0xb4>
 80038e6:	4b76      	ldr	r3, [pc, #472]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a75      	ldr	r2, [pc, #468]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b73      	ldr	r3, [pc, #460]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a72      	ldr	r2, [pc, #456]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0xcc>
 8003900:	4b6f      	ldr	r3, [pc, #444]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6e      	ldr	r2, [pc, #440]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b6c      	ldr	r3, [pc, #432]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6b      	ldr	r2, [pc, #428]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd ff80 	bl	8001824 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7fd ff7c 	bl	8001824 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e21f      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b61      	ldr	r3, [pc, #388]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0xdc>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd ff6c 	bl	8001824 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003950:	f7fd ff68 	bl	8001824 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e20b      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003962:	4b57      	ldr	r3, [pc, #348]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x104>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d06f      	beq.n	8003a5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800397e:	4b50      	ldr	r3, [pc, #320]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b00      	cmp	r3, #0
 8003988:	d017      	beq.n	80039ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800398a:	4b4d      	ldr	r3, [pc, #308]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003992:	2b08      	cmp	r3, #8
 8003994:	d105      	bne.n	80039a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003996:	4b4a      	ldr	r3, [pc, #296]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a2:	4b47      	ldr	r3, [pc, #284]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	d11c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ae:	4b44      	ldr	r3, [pc, #272]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d116      	bne.n	80039e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	4b41      	ldr	r3, [pc, #260]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_RCC_OscConfig+0x186>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d001      	beq.n	80039d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e1d3      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d2:	4b3b      	ldr	r3, [pc, #236]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4937      	ldr	r1, [pc, #220]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e6:	e03a      	b.n	8003a5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_RCC_OscConfig+0x278>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd ff15 	bl	8001824 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039fe:	f7fd ff11 	bl	8001824 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e1b4      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a10:	4b2b      	ldr	r3, [pc, #172]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4925      	ldr	r1, [pc, #148]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]
 8003a30:	e015      	b.n	8003a5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCC_OscConfig+0x278>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd fef4 	bl	8001824 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a40:	f7fd fef0 	bl	8001824 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e193      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a52:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d036      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d016      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <HAL_RCC_OscConfig+0x27c>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a78:	f7fd fed4 	bl	8001824 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a80:	f7fd fed0 	bl	8001824 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e173      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <HAL_RCC_OscConfig+0x274>)
 8003a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x234>
 8003a9e:	e01b      	b.n	8003ad8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa6:	f7fd febd 	bl	8001824 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aac:	e00e      	b.n	8003acc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aae:	f7fd feb9 	bl	8001824 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d907      	bls.n	8003acc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e15c      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	42470000 	.word	0x42470000
 8003ac8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003acc:	4b8a      	ldr	r3, [pc, #552]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ea      	bne.n	8003aae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8097 	beq.w	8003c14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aea:	4b83      	ldr	r3, [pc, #524]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	4b7f      	ldr	r3, [pc, #508]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a7e      	ldr	r2, [pc, #504]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
 8003b06:	4b7c      	ldr	r3, [pc, #496]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b79      	ldr	r3, [pc, #484]	; (8003cfc <HAL_RCC_OscConfig+0x4b0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d118      	bne.n	8003b54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b22:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x4b0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a75      	ldr	r2, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x4b0>)
 8003b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fe79 	bl	8001824 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b36:	f7fd fe75 	bl	8001824 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e118      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	4b6c      	ldr	r3, [pc, #432]	; (8003cfc <HAL_RCC_OscConfig+0x4b0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x31e>
 8003b5c:	4b66      	ldr	r3, [pc, #408]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	4a65      	ldr	r2, [pc, #404]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6713      	str	r3, [r2, #112]	; 0x70
 8003b68:	e01c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x358>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x340>
 8003b72:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	4a60      	ldr	r2, [pc, #384]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7e:	4b5e      	ldr	r3, [pc, #376]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x358>
 8003b8c:	4b5a      	ldr	r3, [pc, #360]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a59      	ldr	r2, [pc, #356]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
 8003b98:	4b57      	ldr	r3, [pc, #348]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a56      	ldr	r2, [pc, #344]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003b9e:	f023 0304 	bic.w	r3, r3, #4
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d015      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fd fe3a 	bl	8001824 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb4:	f7fd fe36 	bl	8001824 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e0d7      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bca:	4b4b      	ldr	r3, [pc, #300]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0ee      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x368>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fd fe24 	bl	8001824 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7fd fe20 	bl	8001824 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e0c1      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf6:	4b40      	ldr	r3, [pc, #256]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1ee      	bne.n	8003be0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d105      	bne.n	8003c14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c08:	4b3b      	ldr	r3, [pc, #236]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	4a3a      	ldr	r2, [pc, #232]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80ad 	beq.w	8003d78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c1e:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d060      	beq.n	8003cec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d145      	bne.n	8003cbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b33      	ldr	r3, [pc, #204]	; (8003d00 <HAL_RCC_OscConfig+0x4b4>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd fdf4 	bl	8001824 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fd fdf0 	bl	8001824 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e093      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	4b29      	ldr	r3, [pc, #164]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	3b01      	subs	r3, #1
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	061b      	lsls	r3, r3, #24
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	071b      	lsls	r3, r3, #28
 8003c8a:	491b      	ldr	r1, [pc, #108]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x4b4>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fd fdc5 	bl	8001824 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7fd fdc1 	bl	8001824 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e064      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x452>
 8003cbc:	e05c      	b.n	8003d78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <HAL_RCC_OscConfig+0x4b4>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fd fdae 	bl	8001824 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd fdaa 	bl	8001824 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e04d      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCC_OscConfig+0x4ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x480>
 8003cea:	e045      	b.n	8003d78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e040      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <HAL_RCC_OscConfig+0x538>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d030      	beq.n	8003d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d129      	bne.n	8003d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d122      	bne.n	8003d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d119      	bne.n	8003d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d10f      	bne.n	8003d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800

08003d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e03f      	b.n	8003e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fbda 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f929 	bl	8004024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b08a      	sub	sp, #40	; 0x28
 8003e26:	af02      	add	r7, sp, #8
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d17c      	bne.n	8003f3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_UART_Transmit+0x2c>
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e075      	b.n	8003f3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_UART_Transmit+0x3e>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e06e      	b.n	8003f3e <HAL_UART_Transmit+0x11c>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2221      	movs	r2, #33	; 0x21
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e76:	f7fd fcd5 	bl	8001824 <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	88fa      	ldrh	r2, [r7, #6]
 8003e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e90:	d108      	bne.n	8003ea4 <HAL_UART_Transmit+0x82>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e003      	b.n	8003eac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003eb4:	e02a      	b.n	8003f0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2180      	movs	r1, #128	; 0x80
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f840 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e036      	b.n	8003f3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10b      	bne.n	8003eee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	3302      	adds	r3, #2
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e007      	b.n	8003efe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1cf      	bne.n	8003eb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2140      	movs	r1, #64	; 0x40
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f810 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e006      	b.n	8003f3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b090      	sub	sp, #64	; 0x40
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f56:	e050      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5e:	d04c      	beq.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f66:	f7fd fc5d 	bl	8001824 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d241      	bcs.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f96:	637a      	str	r2, [r7, #52]	; 0x34
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e5      	bne.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3314      	adds	r3, #20
 8003fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fca:	623a      	str	r2, [r7, #32]
 8003fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	69f9      	ldr	r1, [r7, #28]
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e00f      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d09f      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3740      	adds	r7, #64	; 0x40
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004028:	b0c0      	sub	sp, #256	; 0x100
 800402a:	af00      	add	r7, sp, #0
 800402c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	68d9      	ldr	r1, [r3, #12]
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	ea40 0301 	orr.w	r3, r0, r1
 800404c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	431a      	orrs	r2, r3
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	431a      	orrs	r2, r3
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800407c:	f021 010c 	bic.w	r1, r1, #12
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800408a:	430b      	orrs	r3, r1
 800408c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409e:	6999      	ldr	r1, [r3, #24]
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	ea40 0301 	orr.w	r3, r0, r1
 80040aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b8f      	ldr	r3, [pc, #572]	; (80042f0 <UART_SetConfig+0x2cc>)
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d005      	beq.n	80040c4 <UART_SetConfig+0xa0>
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b8d      	ldr	r3, [pc, #564]	; (80042f4 <UART_SetConfig+0x2d0>)
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d104      	bne.n	80040ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040c4:	f7ff f97e 	bl	80033c4 <HAL_RCC_GetPCLK2Freq>
 80040c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040cc:	e003      	b.n	80040d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ce:	f7ff f965 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 80040d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e0:	f040 810c 	bne.w	80042fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040f6:	4622      	mov	r2, r4
 80040f8:	462b      	mov	r3, r5
 80040fa:	1891      	adds	r1, r2, r2
 80040fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80040fe:	415b      	adcs	r3, r3
 8004100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004102:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004106:	4621      	mov	r1, r4
 8004108:	eb12 0801 	adds.w	r8, r2, r1
 800410c:	4629      	mov	r1, r5
 800410e:	eb43 0901 	adc.w	r9, r3, r1
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800411e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004126:	4690      	mov	r8, r2
 8004128:	4699      	mov	r9, r3
 800412a:	4623      	mov	r3, r4
 800412c:	eb18 0303 	adds.w	r3, r8, r3
 8004130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004134:	462b      	mov	r3, r5
 8004136:	eb49 0303 	adc.w	r3, r9, r3
 800413a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800414a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800414e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004152:	460b      	mov	r3, r1
 8004154:	18db      	adds	r3, r3, r3
 8004156:	653b      	str	r3, [r7, #80]	; 0x50
 8004158:	4613      	mov	r3, r2
 800415a:	eb42 0303 	adc.w	r3, r2, r3
 800415e:	657b      	str	r3, [r7, #84]	; 0x54
 8004160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004164:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004168:	f7fc fae6 	bl	8000738 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <UART_SetConfig+0x2d4>)
 8004172:	fba3 2302 	umull	r2, r3, r3, r2
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	011c      	lsls	r4, r3, #4
 800417a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800417e:	2200      	movs	r2, #0
 8004180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004184:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004188:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	1891      	adds	r1, r2, r2
 8004192:	64b9      	str	r1, [r7, #72]	; 0x48
 8004194:	415b      	adcs	r3, r3
 8004196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800419c:	4641      	mov	r1, r8
 800419e:	eb12 0a01 	adds.w	sl, r2, r1
 80041a2:	4649      	mov	r1, r9
 80041a4:	eb43 0b01 	adc.w	fp, r3, r1
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041bc:	4692      	mov	sl, r2
 80041be:	469b      	mov	fp, r3
 80041c0:	4643      	mov	r3, r8
 80041c2:	eb1a 0303 	adds.w	r3, sl, r3
 80041c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ca:	464b      	mov	r3, r9
 80041cc:	eb4b 0303 	adc.w	r3, fp, r3
 80041d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041e8:	460b      	mov	r3, r1
 80041ea:	18db      	adds	r3, r3, r3
 80041ec:	643b      	str	r3, [r7, #64]	; 0x40
 80041ee:	4613      	mov	r3, r2
 80041f0:	eb42 0303 	adc.w	r3, r2, r3
 80041f4:	647b      	str	r3, [r7, #68]	; 0x44
 80041f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041fe:	f7fc fa9b 	bl	8000738 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4611      	mov	r1, r2
 8004208:	4b3b      	ldr	r3, [pc, #236]	; (80042f8 <UART_SetConfig+0x2d4>)
 800420a:	fba3 2301 	umull	r2, r3, r3, r1
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2264      	movs	r2, #100	; 0x64
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	1acb      	subs	r3, r1, r3
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <UART_SetConfig+0x2d4>)
 8004220:	fba3 2302 	umull	r2, r3, r3, r2
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800422c:	441c      	add	r4, r3
 800422e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004232:	2200      	movs	r2, #0
 8004234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004238:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800423c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	1891      	adds	r1, r2, r2
 8004246:	63b9      	str	r1, [r7, #56]	; 0x38
 8004248:	415b      	adcs	r3, r3
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800424c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004250:	4641      	mov	r1, r8
 8004252:	1851      	adds	r1, r2, r1
 8004254:	6339      	str	r1, [r7, #48]	; 0x30
 8004256:	4649      	mov	r1, r9
 8004258:	414b      	adcs	r3, r1
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004268:	4659      	mov	r1, fp
 800426a:	00cb      	lsls	r3, r1, #3
 800426c:	4651      	mov	r1, sl
 800426e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004272:	4651      	mov	r1, sl
 8004274:	00ca      	lsls	r2, r1, #3
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	4603      	mov	r3, r0
 800427c:	4642      	mov	r2, r8
 800427e:	189b      	adds	r3, r3, r2
 8004280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004284:	464b      	mov	r3, r9
 8004286:	460a      	mov	r2, r1
 8004288:	eb42 0303 	adc.w	r3, r2, r3
 800428c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800429c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042a4:	460b      	mov	r3, r1
 80042a6:	18db      	adds	r3, r3, r3
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042aa:	4613      	mov	r3, r2
 80042ac:	eb42 0303 	adc.w	r3, r2, r3
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042ba:	f7fc fa3d 	bl	8000738 <__aeabi_uldivmod>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <UART_SetConfig+0x2d4>)
 80042c4:	fba3 1302 	umull	r1, r3, r3, r2
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	2164      	movs	r1, #100	; 0x64
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	3332      	adds	r3, #50	; 0x32
 80042d6:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <UART_SetConfig+0x2d4>)
 80042d8:	fba2 2303 	umull	r2, r3, r2, r3
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	f003 0207 	and.w	r2, r3, #7
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4422      	add	r2, r4
 80042ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042ec:	e105      	b.n	80044fa <UART_SetConfig+0x4d6>
 80042ee:	bf00      	nop
 80042f0:	40011000 	.word	0x40011000
 80042f4:	40011400 	.word	0x40011400
 80042f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004300:	2200      	movs	r2, #0
 8004302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004306:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800430a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800430e:	4642      	mov	r2, r8
 8004310:	464b      	mov	r3, r9
 8004312:	1891      	adds	r1, r2, r2
 8004314:	6239      	str	r1, [r7, #32]
 8004316:	415b      	adcs	r3, r3
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
 800431a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800431e:	4641      	mov	r1, r8
 8004320:	1854      	adds	r4, r2, r1
 8004322:	4649      	mov	r1, r9
 8004324:	eb43 0501 	adc.w	r5, r3, r1
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	00eb      	lsls	r3, r5, #3
 8004332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004336:	00e2      	lsls	r2, r4, #3
 8004338:	4614      	mov	r4, r2
 800433a:	461d      	mov	r5, r3
 800433c:	4643      	mov	r3, r8
 800433e:	18e3      	adds	r3, r4, r3
 8004340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004344:	464b      	mov	r3, r9
 8004346:	eb45 0303 	adc.w	r3, r5, r3
 800434a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800435a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800436a:	4629      	mov	r1, r5
 800436c:	008b      	lsls	r3, r1, #2
 800436e:	4621      	mov	r1, r4
 8004370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004374:	4621      	mov	r1, r4
 8004376:	008a      	lsls	r2, r1, #2
 8004378:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800437c:	f7fc f9dc 	bl	8000738 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4b60      	ldr	r3, [pc, #384]	; (8004508 <UART_SetConfig+0x4e4>)
 8004386:	fba3 2302 	umull	r2, r3, r3, r2
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	011c      	lsls	r4, r3, #4
 800438e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004398:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800439c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043a0:	4642      	mov	r2, r8
 80043a2:	464b      	mov	r3, r9
 80043a4:	1891      	adds	r1, r2, r2
 80043a6:	61b9      	str	r1, [r7, #24]
 80043a8:	415b      	adcs	r3, r3
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b0:	4641      	mov	r1, r8
 80043b2:	1851      	adds	r1, r2, r1
 80043b4:	6139      	str	r1, [r7, #16]
 80043b6:	4649      	mov	r1, r9
 80043b8:	414b      	adcs	r3, r1
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043c8:	4659      	mov	r1, fp
 80043ca:	00cb      	lsls	r3, r1, #3
 80043cc:	4651      	mov	r1, sl
 80043ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043d2:	4651      	mov	r1, sl
 80043d4:	00ca      	lsls	r2, r1, #3
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	4603      	mov	r3, r0
 80043dc:	4642      	mov	r2, r8
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043e4:	464b      	mov	r3, r9
 80043e6:	460a      	mov	r2, r1
 80043e8:	eb42 0303 	adc.w	r3, r2, r3
 80043ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80043fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004408:	4649      	mov	r1, r9
 800440a:	008b      	lsls	r3, r1, #2
 800440c:	4641      	mov	r1, r8
 800440e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004412:	4641      	mov	r1, r8
 8004414:	008a      	lsls	r2, r1, #2
 8004416:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800441a:	f7fc f98d 	bl	8000738 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4b39      	ldr	r3, [pc, #228]	; (8004508 <UART_SetConfig+0x4e4>)
 8004424:	fba3 1302 	umull	r1, r3, r3, r2
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	2164      	movs	r1, #100	; 0x64
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	3332      	adds	r3, #50	; 0x32
 8004436:	4a34      	ldr	r2, [pc, #208]	; (8004508 <UART_SetConfig+0x4e4>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004442:	441c      	add	r4, r3
 8004444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004448:	2200      	movs	r2, #0
 800444a:	673b      	str	r3, [r7, #112]	; 0x70
 800444c:	677a      	str	r2, [r7, #116]	; 0x74
 800444e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	1891      	adds	r1, r2, r2
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	415b      	adcs	r3, r3
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004462:	4641      	mov	r1, r8
 8004464:	1851      	adds	r1, r2, r1
 8004466:	6039      	str	r1, [r7, #0]
 8004468:	4649      	mov	r1, r9
 800446a:	414b      	adcs	r3, r1
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800447a:	4659      	mov	r1, fp
 800447c:	00cb      	lsls	r3, r1, #3
 800447e:	4651      	mov	r1, sl
 8004480:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004484:	4651      	mov	r1, sl
 8004486:	00ca      	lsls	r2, r1, #3
 8004488:	4610      	mov	r0, r2
 800448a:	4619      	mov	r1, r3
 800448c:	4603      	mov	r3, r0
 800448e:	4642      	mov	r2, r8
 8004490:	189b      	adds	r3, r3, r2
 8004492:	66bb      	str	r3, [r7, #104]	; 0x68
 8004494:	464b      	mov	r3, r9
 8004496:	460a      	mov	r2, r1
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	663b      	str	r3, [r7, #96]	; 0x60
 80044a8:	667a      	str	r2, [r7, #100]	; 0x64
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044b6:	4649      	mov	r1, r9
 80044b8:	008b      	lsls	r3, r1, #2
 80044ba:	4641      	mov	r1, r8
 80044bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c0:	4641      	mov	r1, r8
 80044c2:	008a      	lsls	r2, r1, #2
 80044c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044c8:	f7fc f936 	bl	8000738 <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <UART_SetConfig+0x4e4>)
 80044d2:	fba3 1302 	umull	r1, r3, r3, r2
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	2164      	movs	r1, #100	; 0x64
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	3332      	adds	r3, #50	; 0x32
 80044e4:	4a08      	ldr	r2, [pc, #32]	; (8004508 <UART_SetConfig+0x4e4>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	f003 020f 	and.w	r2, r3, #15
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4422      	add	r2, r4
 80044f8:	609a      	str	r2, [r3, #8]
}
 80044fa:	bf00      	nop
 80044fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004500:	46bd      	mov	sp, r7
 8004502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004506:	bf00      	nop
 8004508:	51eb851f 	.word	0x51eb851f

0800450c <__errno>:
 800450c:	4b01      	ldr	r3, [pc, #4]	; (8004514 <__errno+0x8>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000024 	.word	0x20000024

08004518 <__libc_init_array>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	4d0d      	ldr	r5, [pc, #52]	; (8004550 <__libc_init_array+0x38>)
 800451c:	4c0d      	ldr	r4, [pc, #52]	; (8004554 <__libc_init_array+0x3c>)
 800451e:	1b64      	subs	r4, r4, r5
 8004520:	10a4      	asrs	r4, r4, #2
 8004522:	2600      	movs	r6, #0
 8004524:	42a6      	cmp	r6, r4
 8004526:	d109      	bne.n	800453c <__libc_init_array+0x24>
 8004528:	4d0b      	ldr	r5, [pc, #44]	; (8004558 <__libc_init_array+0x40>)
 800452a:	4c0c      	ldr	r4, [pc, #48]	; (800455c <__libc_init_array+0x44>)
 800452c:	f000 fc8e 	bl	8004e4c <_init>
 8004530:	1b64      	subs	r4, r4, r5
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	2600      	movs	r6, #0
 8004536:	42a6      	cmp	r6, r4
 8004538:	d105      	bne.n	8004546 <__libc_init_array+0x2e>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004540:	4798      	blx	r3
 8004542:	3601      	adds	r6, #1
 8004544:	e7ee      	b.n	8004524 <__libc_init_array+0xc>
 8004546:	f855 3b04 	ldr.w	r3, [r5], #4
 800454a:	4798      	blx	r3
 800454c:	3601      	adds	r6, #1
 800454e:	e7f2      	b.n	8004536 <__libc_init_array+0x1e>
 8004550:	08004edc 	.word	0x08004edc
 8004554:	08004edc 	.word	0x08004edc
 8004558:	08004edc 	.word	0x08004edc
 800455c:	08004ee0 	.word	0x08004ee0

08004560 <memcpy>:
 8004560:	440a      	add	r2, r1
 8004562:	4291      	cmp	r1, r2
 8004564:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004568:	d100      	bne.n	800456c <memcpy+0xc>
 800456a:	4770      	bx	lr
 800456c:	b510      	push	{r4, lr}
 800456e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004576:	4291      	cmp	r1, r2
 8004578:	d1f9      	bne.n	800456e <memcpy+0xe>
 800457a:	bd10      	pop	{r4, pc}

0800457c <memset>:
 800457c:	4402      	add	r2, r0
 800457e:	4603      	mov	r3, r0
 8004580:	4293      	cmp	r3, r2
 8004582:	d100      	bne.n	8004586 <memset+0xa>
 8004584:	4770      	bx	lr
 8004586:	f803 1b01 	strb.w	r1, [r3], #1
 800458a:	e7f9      	b.n	8004580 <memset+0x4>

0800458c <siprintf>:
 800458c:	b40e      	push	{r1, r2, r3}
 800458e:	b500      	push	{lr}
 8004590:	b09c      	sub	sp, #112	; 0x70
 8004592:	ab1d      	add	r3, sp, #116	; 0x74
 8004594:	9002      	str	r0, [sp, #8]
 8004596:	9006      	str	r0, [sp, #24]
 8004598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800459c:	4809      	ldr	r0, [pc, #36]	; (80045c4 <siprintf+0x38>)
 800459e:	9107      	str	r1, [sp, #28]
 80045a0:	9104      	str	r1, [sp, #16]
 80045a2:	4909      	ldr	r1, [pc, #36]	; (80045c8 <siprintf+0x3c>)
 80045a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a8:	9105      	str	r1, [sp, #20]
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	a902      	add	r1, sp, #8
 80045b0:	f000 f868 	bl	8004684 <_svfiprintf_r>
 80045b4:	9b02      	ldr	r3, [sp, #8]
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	b01c      	add	sp, #112	; 0x70
 80045bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80045c0:	b003      	add	sp, #12
 80045c2:	4770      	bx	lr
 80045c4:	20000024 	.word	0x20000024
 80045c8:	ffff0208 	.word	0xffff0208

080045cc <__ssputs_r>:
 80045cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d0:	688e      	ldr	r6, [r1, #8]
 80045d2:	429e      	cmp	r6, r3
 80045d4:	4682      	mov	sl, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	4690      	mov	r8, r2
 80045da:	461f      	mov	r7, r3
 80045dc:	d838      	bhi.n	8004650 <__ssputs_r+0x84>
 80045de:	898a      	ldrh	r2, [r1, #12]
 80045e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045e4:	d032      	beq.n	800464c <__ssputs_r+0x80>
 80045e6:	6825      	ldr	r5, [r4, #0]
 80045e8:	6909      	ldr	r1, [r1, #16]
 80045ea:	eba5 0901 	sub.w	r9, r5, r1
 80045ee:	6965      	ldr	r5, [r4, #20]
 80045f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045f8:	3301      	adds	r3, #1
 80045fa:	444b      	add	r3, r9
 80045fc:	106d      	asrs	r5, r5, #1
 80045fe:	429d      	cmp	r5, r3
 8004600:	bf38      	it	cc
 8004602:	461d      	movcc	r5, r3
 8004604:	0553      	lsls	r3, r2, #21
 8004606:	d531      	bpl.n	800466c <__ssputs_r+0xa0>
 8004608:	4629      	mov	r1, r5
 800460a:	f000 fb55 	bl	8004cb8 <_malloc_r>
 800460e:	4606      	mov	r6, r0
 8004610:	b950      	cbnz	r0, 8004628 <__ssputs_r+0x5c>
 8004612:	230c      	movs	r3, #12
 8004614:	f8ca 3000 	str.w	r3, [sl]
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461e:	81a3      	strh	r3, [r4, #12]
 8004620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004628:	6921      	ldr	r1, [r4, #16]
 800462a:	464a      	mov	r2, r9
 800462c:	f7ff ff98 	bl	8004560 <memcpy>
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463a:	81a3      	strh	r3, [r4, #12]
 800463c:	6126      	str	r6, [r4, #16]
 800463e:	6165      	str	r5, [r4, #20]
 8004640:	444e      	add	r6, r9
 8004642:	eba5 0509 	sub.w	r5, r5, r9
 8004646:	6026      	str	r6, [r4, #0]
 8004648:	60a5      	str	r5, [r4, #8]
 800464a:	463e      	mov	r6, r7
 800464c:	42be      	cmp	r6, r7
 800464e:	d900      	bls.n	8004652 <__ssputs_r+0x86>
 8004650:	463e      	mov	r6, r7
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	4632      	mov	r2, r6
 8004656:	4641      	mov	r1, r8
 8004658:	f000 faa8 	bl	8004bac <memmove>
 800465c:	68a3      	ldr	r3, [r4, #8]
 800465e:	1b9b      	subs	r3, r3, r6
 8004660:	60a3      	str	r3, [r4, #8]
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	4433      	add	r3, r6
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	2000      	movs	r0, #0
 800466a:	e7db      	b.n	8004624 <__ssputs_r+0x58>
 800466c:	462a      	mov	r2, r5
 800466e:	f000 fb97 	bl	8004da0 <_realloc_r>
 8004672:	4606      	mov	r6, r0
 8004674:	2800      	cmp	r0, #0
 8004676:	d1e1      	bne.n	800463c <__ssputs_r+0x70>
 8004678:	6921      	ldr	r1, [r4, #16]
 800467a:	4650      	mov	r0, sl
 800467c:	f000 fab0 	bl	8004be0 <_free_r>
 8004680:	e7c7      	b.n	8004612 <__ssputs_r+0x46>
	...

08004684 <_svfiprintf_r>:
 8004684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004688:	4698      	mov	r8, r3
 800468a:	898b      	ldrh	r3, [r1, #12]
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	b09d      	sub	sp, #116	; 0x74
 8004690:	4607      	mov	r7, r0
 8004692:	460d      	mov	r5, r1
 8004694:	4614      	mov	r4, r2
 8004696:	d50e      	bpl.n	80046b6 <_svfiprintf_r+0x32>
 8004698:	690b      	ldr	r3, [r1, #16]
 800469a:	b963      	cbnz	r3, 80046b6 <_svfiprintf_r+0x32>
 800469c:	2140      	movs	r1, #64	; 0x40
 800469e:	f000 fb0b 	bl	8004cb8 <_malloc_r>
 80046a2:	6028      	str	r0, [r5, #0]
 80046a4:	6128      	str	r0, [r5, #16]
 80046a6:	b920      	cbnz	r0, 80046b2 <_svfiprintf_r+0x2e>
 80046a8:	230c      	movs	r3, #12
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b0:	e0d1      	b.n	8004856 <_svfiprintf_r+0x1d2>
 80046b2:	2340      	movs	r3, #64	; 0x40
 80046b4:	616b      	str	r3, [r5, #20]
 80046b6:	2300      	movs	r3, #0
 80046b8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ba:	2320      	movs	r3, #32
 80046bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046c4:	2330      	movs	r3, #48	; 0x30
 80046c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004870 <_svfiprintf_r+0x1ec>
 80046ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046ce:	f04f 0901 	mov.w	r9, #1
 80046d2:	4623      	mov	r3, r4
 80046d4:	469a      	mov	sl, r3
 80046d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046da:	b10a      	cbz	r2, 80046e0 <_svfiprintf_r+0x5c>
 80046dc:	2a25      	cmp	r2, #37	; 0x25
 80046de:	d1f9      	bne.n	80046d4 <_svfiprintf_r+0x50>
 80046e0:	ebba 0b04 	subs.w	fp, sl, r4
 80046e4:	d00b      	beq.n	80046fe <_svfiprintf_r+0x7a>
 80046e6:	465b      	mov	r3, fp
 80046e8:	4622      	mov	r2, r4
 80046ea:	4629      	mov	r1, r5
 80046ec:	4638      	mov	r0, r7
 80046ee:	f7ff ff6d 	bl	80045cc <__ssputs_r>
 80046f2:	3001      	adds	r0, #1
 80046f4:	f000 80aa 	beq.w	800484c <_svfiprintf_r+0x1c8>
 80046f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046fa:	445a      	add	r2, fp
 80046fc:	9209      	str	r2, [sp, #36]	; 0x24
 80046fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 80a2 	beq.w	800484c <_svfiprintf_r+0x1c8>
 8004708:	2300      	movs	r3, #0
 800470a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800470e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004712:	f10a 0a01 	add.w	sl, sl, #1
 8004716:	9304      	str	r3, [sp, #16]
 8004718:	9307      	str	r3, [sp, #28]
 800471a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800471e:	931a      	str	r3, [sp, #104]	; 0x68
 8004720:	4654      	mov	r4, sl
 8004722:	2205      	movs	r2, #5
 8004724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004728:	4851      	ldr	r0, [pc, #324]	; (8004870 <_svfiprintf_r+0x1ec>)
 800472a:	f7fb fd71 	bl	8000210 <memchr>
 800472e:	9a04      	ldr	r2, [sp, #16]
 8004730:	b9d8      	cbnz	r0, 800476a <_svfiprintf_r+0xe6>
 8004732:	06d0      	lsls	r0, r2, #27
 8004734:	bf44      	itt	mi
 8004736:	2320      	movmi	r3, #32
 8004738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800473c:	0711      	lsls	r1, r2, #28
 800473e:	bf44      	itt	mi
 8004740:	232b      	movmi	r3, #43	; 0x2b
 8004742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004746:	f89a 3000 	ldrb.w	r3, [sl]
 800474a:	2b2a      	cmp	r3, #42	; 0x2a
 800474c:	d015      	beq.n	800477a <_svfiprintf_r+0xf6>
 800474e:	9a07      	ldr	r2, [sp, #28]
 8004750:	4654      	mov	r4, sl
 8004752:	2000      	movs	r0, #0
 8004754:	f04f 0c0a 	mov.w	ip, #10
 8004758:	4621      	mov	r1, r4
 800475a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800475e:	3b30      	subs	r3, #48	; 0x30
 8004760:	2b09      	cmp	r3, #9
 8004762:	d94e      	bls.n	8004802 <_svfiprintf_r+0x17e>
 8004764:	b1b0      	cbz	r0, 8004794 <_svfiprintf_r+0x110>
 8004766:	9207      	str	r2, [sp, #28]
 8004768:	e014      	b.n	8004794 <_svfiprintf_r+0x110>
 800476a:	eba0 0308 	sub.w	r3, r0, r8
 800476e:	fa09 f303 	lsl.w	r3, r9, r3
 8004772:	4313      	orrs	r3, r2
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	46a2      	mov	sl, r4
 8004778:	e7d2      	b.n	8004720 <_svfiprintf_r+0x9c>
 800477a:	9b03      	ldr	r3, [sp, #12]
 800477c:	1d19      	adds	r1, r3, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	9103      	str	r1, [sp, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	bfbb      	ittet	lt
 8004786:	425b      	neglt	r3, r3
 8004788:	f042 0202 	orrlt.w	r2, r2, #2
 800478c:	9307      	strge	r3, [sp, #28]
 800478e:	9307      	strlt	r3, [sp, #28]
 8004790:	bfb8      	it	lt
 8004792:	9204      	strlt	r2, [sp, #16]
 8004794:	7823      	ldrb	r3, [r4, #0]
 8004796:	2b2e      	cmp	r3, #46	; 0x2e
 8004798:	d10c      	bne.n	80047b4 <_svfiprintf_r+0x130>
 800479a:	7863      	ldrb	r3, [r4, #1]
 800479c:	2b2a      	cmp	r3, #42	; 0x2a
 800479e:	d135      	bne.n	800480c <_svfiprintf_r+0x188>
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	1d1a      	adds	r2, r3, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	9203      	str	r2, [sp, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bfb8      	it	lt
 80047ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047b0:	3402      	adds	r4, #2
 80047b2:	9305      	str	r3, [sp, #20]
 80047b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004880 <_svfiprintf_r+0x1fc>
 80047b8:	7821      	ldrb	r1, [r4, #0]
 80047ba:	2203      	movs	r2, #3
 80047bc:	4650      	mov	r0, sl
 80047be:	f7fb fd27 	bl	8000210 <memchr>
 80047c2:	b140      	cbz	r0, 80047d6 <_svfiprintf_r+0x152>
 80047c4:	2340      	movs	r3, #64	; 0x40
 80047c6:	eba0 000a 	sub.w	r0, r0, sl
 80047ca:	fa03 f000 	lsl.w	r0, r3, r0
 80047ce:	9b04      	ldr	r3, [sp, #16]
 80047d0:	4303      	orrs	r3, r0
 80047d2:	3401      	adds	r4, #1
 80047d4:	9304      	str	r3, [sp, #16]
 80047d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047da:	4826      	ldr	r0, [pc, #152]	; (8004874 <_svfiprintf_r+0x1f0>)
 80047dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047e0:	2206      	movs	r2, #6
 80047e2:	f7fb fd15 	bl	8000210 <memchr>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d038      	beq.n	800485c <_svfiprintf_r+0x1d8>
 80047ea:	4b23      	ldr	r3, [pc, #140]	; (8004878 <_svfiprintf_r+0x1f4>)
 80047ec:	bb1b      	cbnz	r3, 8004836 <_svfiprintf_r+0x1b2>
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	3307      	adds	r3, #7
 80047f2:	f023 0307 	bic.w	r3, r3, #7
 80047f6:	3308      	adds	r3, #8
 80047f8:	9303      	str	r3, [sp, #12]
 80047fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fc:	4433      	add	r3, r6
 80047fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004800:	e767      	b.n	80046d2 <_svfiprintf_r+0x4e>
 8004802:	fb0c 3202 	mla	r2, ip, r2, r3
 8004806:	460c      	mov	r4, r1
 8004808:	2001      	movs	r0, #1
 800480a:	e7a5      	b.n	8004758 <_svfiprintf_r+0xd4>
 800480c:	2300      	movs	r3, #0
 800480e:	3401      	adds	r4, #1
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	4619      	mov	r1, r3
 8004814:	f04f 0c0a 	mov.w	ip, #10
 8004818:	4620      	mov	r0, r4
 800481a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800481e:	3a30      	subs	r2, #48	; 0x30
 8004820:	2a09      	cmp	r2, #9
 8004822:	d903      	bls.n	800482c <_svfiprintf_r+0x1a8>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0c5      	beq.n	80047b4 <_svfiprintf_r+0x130>
 8004828:	9105      	str	r1, [sp, #20]
 800482a:	e7c3      	b.n	80047b4 <_svfiprintf_r+0x130>
 800482c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004830:	4604      	mov	r4, r0
 8004832:	2301      	movs	r3, #1
 8004834:	e7f0      	b.n	8004818 <_svfiprintf_r+0x194>
 8004836:	ab03      	add	r3, sp, #12
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	462a      	mov	r2, r5
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <_svfiprintf_r+0x1f8>)
 800483e:	a904      	add	r1, sp, #16
 8004840:	4638      	mov	r0, r7
 8004842:	f3af 8000 	nop.w
 8004846:	1c42      	adds	r2, r0, #1
 8004848:	4606      	mov	r6, r0
 800484a:	d1d6      	bne.n	80047fa <_svfiprintf_r+0x176>
 800484c:	89ab      	ldrh	r3, [r5, #12]
 800484e:	065b      	lsls	r3, r3, #25
 8004850:	f53f af2c 	bmi.w	80046ac <_svfiprintf_r+0x28>
 8004854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004856:	b01d      	add	sp, #116	; 0x74
 8004858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	462a      	mov	r2, r5
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <_svfiprintf_r+0x1f8>)
 8004864:	a904      	add	r1, sp, #16
 8004866:	4638      	mov	r0, r7
 8004868:	f000 f87a 	bl	8004960 <_printf_i>
 800486c:	e7eb      	b.n	8004846 <_svfiprintf_r+0x1c2>
 800486e:	bf00      	nop
 8004870:	08004ea0 	.word	0x08004ea0
 8004874:	08004eaa 	.word	0x08004eaa
 8004878:	00000000 	.word	0x00000000
 800487c:	080045cd 	.word	0x080045cd
 8004880:	08004ea6 	.word	0x08004ea6

08004884 <_printf_common>:
 8004884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004888:	4616      	mov	r6, r2
 800488a:	4699      	mov	r9, r3
 800488c:	688a      	ldr	r2, [r1, #8]
 800488e:	690b      	ldr	r3, [r1, #16]
 8004890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004894:	4293      	cmp	r3, r2
 8004896:	bfb8      	it	lt
 8004898:	4613      	movlt	r3, r2
 800489a:	6033      	str	r3, [r6, #0]
 800489c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048a0:	4607      	mov	r7, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	b10a      	cbz	r2, 80048aa <_printf_common+0x26>
 80048a6:	3301      	adds	r3, #1
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	0699      	lsls	r1, r3, #26
 80048ae:	bf42      	ittt	mi
 80048b0:	6833      	ldrmi	r3, [r6, #0]
 80048b2:	3302      	addmi	r3, #2
 80048b4:	6033      	strmi	r3, [r6, #0]
 80048b6:	6825      	ldr	r5, [r4, #0]
 80048b8:	f015 0506 	ands.w	r5, r5, #6
 80048bc:	d106      	bne.n	80048cc <_printf_common+0x48>
 80048be:	f104 0a19 	add.w	sl, r4, #25
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	6832      	ldr	r2, [r6, #0]
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	42ab      	cmp	r3, r5
 80048ca:	dc26      	bgt.n	800491a <_printf_common+0x96>
 80048cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048d0:	1e13      	subs	r3, r2, #0
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	bf18      	it	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	0692      	lsls	r2, r2, #26
 80048da:	d42b      	bmi.n	8004934 <_printf_common+0xb0>
 80048dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e0:	4649      	mov	r1, r9
 80048e2:	4638      	mov	r0, r7
 80048e4:	47c0      	blx	r8
 80048e6:	3001      	adds	r0, #1
 80048e8:	d01e      	beq.n	8004928 <_printf_common+0xa4>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	68e5      	ldr	r5, [r4, #12]
 80048ee:	6832      	ldr	r2, [r6, #0]
 80048f0:	f003 0306 	and.w	r3, r3, #6
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	bf08      	it	eq
 80048f8:	1aad      	subeq	r5, r5, r2
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	6922      	ldr	r2, [r4, #16]
 80048fe:	bf0c      	ite	eq
 8004900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004904:	2500      	movne	r5, #0
 8004906:	4293      	cmp	r3, r2
 8004908:	bfc4      	itt	gt
 800490a:	1a9b      	subgt	r3, r3, r2
 800490c:	18ed      	addgt	r5, r5, r3
 800490e:	2600      	movs	r6, #0
 8004910:	341a      	adds	r4, #26
 8004912:	42b5      	cmp	r5, r6
 8004914:	d11a      	bne.n	800494c <_printf_common+0xc8>
 8004916:	2000      	movs	r0, #0
 8004918:	e008      	b.n	800492c <_printf_common+0xa8>
 800491a:	2301      	movs	r3, #1
 800491c:	4652      	mov	r2, sl
 800491e:	4649      	mov	r1, r9
 8004920:	4638      	mov	r0, r7
 8004922:	47c0      	blx	r8
 8004924:	3001      	adds	r0, #1
 8004926:	d103      	bne.n	8004930 <_printf_common+0xac>
 8004928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004930:	3501      	adds	r5, #1
 8004932:	e7c6      	b.n	80048c2 <_printf_common+0x3e>
 8004934:	18e1      	adds	r1, r4, r3
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	2030      	movs	r0, #48	; 0x30
 800493a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800493e:	4422      	add	r2, r4
 8004940:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004948:	3302      	adds	r3, #2
 800494a:	e7c7      	b.n	80048dc <_printf_common+0x58>
 800494c:	2301      	movs	r3, #1
 800494e:	4622      	mov	r2, r4
 8004950:	4649      	mov	r1, r9
 8004952:	4638      	mov	r0, r7
 8004954:	47c0      	blx	r8
 8004956:	3001      	adds	r0, #1
 8004958:	d0e6      	beq.n	8004928 <_printf_common+0xa4>
 800495a:	3601      	adds	r6, #1
 800495c:	e7d9      	b.n	8004912 <_printf_common+0x8e>
	...

08004960 <_printf_i>:
 8004960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	7e0f      	ldrb	r7, [r1, #24]
 8004966:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004968:	2f78      	cmp	r7, #120	; 0x78
 800496a:	4691      	mov	r9, r2
 800496c:	4680      	mov	r8, r0
 800496e:	460c      	mov	r4, r1
 8004970:	469a      	mov	sl, r3
 8004972:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004976:	d807      	bhi.n	8004988 <_printf_i+0x28>
 8004978:	2f62      	cmp	r7, #98	; 0x62
 800497a:	d80a      	bhi.n	8004992 <_printf_i+0x32>
 800497c:	2f00      	cmp	r7, #0
 800497e:	f000 80d8 	beq.w	8004b32 <_printf_i+0x1d2>
 8004982:	2f58      	cmp	r7, #88	; 0x58
 8004984:	f000 80a3 	beq.w	8004ace <_printf_i+0x16e>
 8004988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800498c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004990:	e03a      	b.n	8004a08 <_printf_i+0xa8>
 8004992:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004996:	2b15      	cmp	r3, #21
 8004998:	d8f6      	bhi.n	8004988 <_printf_i+0x28>
 800499a:	a101      	add	r1, pc, #4	; (adr r1, 80049a0 <_printf_i+0x40>)
 800499c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049a0:	080049f9 	.word	0x080049f9
 80049a4:	08004a0d 	.word	0x08004a0d
 80049a8:	08004989 	.word	0x08004989
 80049ac:	08004989 	.word	0x08004989
 80049b0:	08004989 	.word	0x08004989
 80049b4:	08004989 	.word	0x08004989
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004989 	.word	0x08004989
 80049c0:	08004989 	.word	0x08004989
 80049c4:	08004989 	.word	0x08004989
 80049c8:	08004989 	.word	0x08004989
 80049cc:	08004b19 	.word	0x08004b19
 80049d0:	08004a3d 	.word	0x08004a3d
 80049d4:	08004afb 	.word	0x08004afb
 80049d8:	08004989 	.word	0x08004989
 80049dc:	08004989 	.word	0x08004989
 80049e0:	08004b3b 	.word	0x08004b3b
 80049e4:	08004989 	.word	0x08004989
 80049e8:	08004a3d 	.word	0x08004a3d
 80049ec:	08004989 	.word	0x08004989
 80049f0:	08004989 	.word	0x08004989
 80049f4:	08004b03 	.word	0x08004b03
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	1d1a      	adds	r2, r3, #4
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	602a      	str	r2, [r5, #0]
 8004a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0a3      	b.n	8004b54 <_printf_i+0x1f4>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	6829      	ldr	r1, [r5, #0]
 8004a10:	0606      	lsls	r6, r0, #24
 8004a12:	f101 0304 	add.w	r3, r1, #4
 8004a16:	d50a      	bpl.n	8004a2e <_printf_i+0xce>
 8004a18:	680e      	ldr	r6, [r1, #0]
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	2e00      	cmp	r6, #0
 8004a1e:	da03      	bge.n	8004a28 <_printf_i+0xc8>
 8004a20:	232d      	movs	r3, #45	; 0x2d
 8004a22:	4276      	negs	r6, r6
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a28:	485e      	ldr	r0, [pc, #376]	; (8004ba4 <_printf_i+0x244>)
 8004a2a:	230a      	movs	r3, #10
 8004a2c:	e019      	b.n	8004a62 <_printf_i+0x102>
 8004a2e:	680e      	ldr	r6, [r1, #0]
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a36:	bf18      	it	ne
 8004a38:	b236      	sxthne	r6, r6
 8004a3a:	e7ef      	b.n	8004a1c <_printf_i+0xbc>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	6820      	ldr	r0, [r4, #0]
 8004a40:	1d19      	adds	r1, r3, #4
 8004a42:	6029      	str	r1, [r5, #0]
 8004a44:	0601      	lsls	r1, r0, #24
 8004a46:	d501      	bpl.n	8004a4c <_printf_i+0xec>
 8004a48:	681e      	ldr	r6, [r3, #0]
 8004a4a:	e002      	b.n	8004a52 <_printf_i+0xf2>
 8004a4c:	0646      	lsls	r6, r0, #25
 8004a4e:	d5fb      	bpl.n	8004a48 <_printf_i+0xe8>
 8004a50:	881e      	ldrh	r6, [r3, #0]
 8004a52:	4854      	ldr	r0, [pc, #336]	; (8004ba4 <_printf_i+0x244>)
 8004a54:	2f6f      	cmp	r7, #111	; 0x6f
 8004a56:	bf0c      	ite	eq
 8004a58:	2308      	moveq	r3, #8
 8004a5a:	230a      	movne	r3, #10
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a62:	6865      	ldr	r5, [r4, #4]
 8004a64:	60a5      	str	r5, [r4, #8]
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	bfa2      	ittt	ge
 8004a6a:	6821      	ldrge	r1, [r4, #0]
 8004a6c:	f021 0104 	bicge.w	r1, r1, #4
 8004a70:	6021      	strge	r1, [r4, #0]
 8004a72:	b90e      	cbnz	r6, 8004a78 <_printf_i+0x118>
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	d04d      	beq.n	8004b14 <_printf_i+0x1b4>
 8004a78:	4615      	mov	r5, r2
 8004a7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004a82:	5dc7      	ldrb	r7, [r0, r7]
 8004a84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a88:	4637      	mov	r7, r6
 8004a8a:	42bb      	cmp	r3, r7
 8004a8c:	460e      	mov	r6, r1
 8004a8e:	d9f4      	bls.n	8004a7a <_printf_i+0x11a>
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d10b      	bne.n	8004aac <_printf_i+0x14c>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	07de      	lsls	r6, r3, #31
 8004a98:	d508      	bpl.n	8004aac <_printf_i+0x14c>
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	6861      	ldr	r1, [r4, #4]
 8004a9e:	4299      	cmp	r1, r3
 8004aa0:	bfde      	ittt	le
 8004aa2:	2330      	movle	r3, #48	; 0x30
 8004aa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aa8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004aac:	1b52      	subs	r2, r2, r5
 8004aae:	6122      	str	r2, [r4, #16]
 8004ab0:	f8cd a000 	str.w	sl, [sp]
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	aa03      	add	r2, sp, #12
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4640      	mov	r0, r8
 8004abc:	f7ff fee2 	bl	8004884 <_printf_common>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d14c      	bne.n	8004b5e <_printf_i+0x1fe>
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac8:	b004      	add	sp, #16
 8004aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ace:	4835      	ldr	r0, [pc, #212]	; (8004ba4 <_printf_i+0x244>)
 8004ad0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ad4:	6829      	ldr	r1, [r5, #0]
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004adc:	6029      	str	r1, [r5, #0]
 8004ade:	061d      	lsls	r5, r3, #24
 8004ae0:	d514      	bpl.n	8004b0c <_printf_i+0x1ac>
 8004ae2:	07df      	lsls	r7, r3, #31
 8004ae4:	bf44      	itt	mi
 8004ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8004aea:	6023      	strmi	r3, [r4, #0]
 8004aec:	b91e      	cbnz	r6, 8004af6 <_printf_i+0x196>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	f023 0320 	bic.w	r3, r3, #32
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	2310      	movs	r3, #16
 8004af8:	e7b0      	b.n	8004a5c <_printf_i+0xfc>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f043 0320 	orr.w	r3, r3, #32
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	2378      	movs	r3, #120	; 0x78
 8004b04:	4828      	ldr	r0, [pc, #160]	; (8004ba8 <_printf_i+0x248>)
 8004b06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b0a:	e7e3      	b.n	8004ad4 <_printf_i+0x174>
 8004b0c:	0659      	lsls	r1, r3, #25
 8004b0e:	bf48      	it	mi
 8004b10:	b2b6      	uxthmi	r6, r6
 8004b12:	e7e6      	b.n	8004ae2 <_printf_i+0x182>
 8004b14:	4615      	mov	r5, r2
 8004b16:	e7bb      	b.n	8004a90 <_printf_i+0x130>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	6826      	ldr	r6, [r4, #0]
 8004b1c:	6961      	ldr	r1, [r4, #20]
 8004b1e:	1d18      	adds	r0, r3, #4
 8004b20:	6028      	str	r0, [r5, #0]
 8004b22:	0635      	lsls	r5, r6, #24
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	d501      	bpl.n	8004b2c <_printf_i+0x1cc>
 8004b28:	6019      	str	r1, [r3, #0]
 8004b2a:	e002      	b.n	8004b32 <_printf_i+0x1d2>
 8004b2c:	0670      	lsls	r0, r6, #25
 8004b2e:	d5fb      	bpl.n	8004b28 <_printf_i+0x1c8>
 8004b30:	8019      	strh	r1, [r3, #0]
 8004b32:	2300      	movs	r3, #0
 8004b34:	6123      	str	r3, [r4, #16]
 8004b36:	4615      	mov	r5, r2
 8004b38:	e7ba      	b.n	8004ab0 <_printf_i+0x150>
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	1d1a      	adds	r2, r3, #4
 8004b3e:	602a      	str	r2, [r5, #0]
 8004b40:	681d      	ldr	r5, [r3, #0]
 8004b42:	6862      	ldr	r2, [r4, #4]
 8004b44:	2100      	movs	r1, #0
 8004b46:	4628      	mov	r0, r5
 8004b48:	f7fb fb62 	bl	8000210 <memchr>
 8004b4c:	b108      	cbz	r0, 8004b52 <_printf_i+0x1f2>
 8004b4e:	1b40      	subs	r0, r0, r5
 8004b50:	6060      	str	r0, [r4, #4]
 8004b52:	6863      	ldr	r3, [r4, #4]
 8004b54:	6123      	str	r3, [r4, #16]
 8004b56:	2300      	movs	r3, #0
 8004b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b5c:	e7a8      	b.n	8004ab0 <_printf_i+0x150>
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	462a      	mov	r2, r5
 8004b62:	4649      	mov	r1, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	47d0      	blx	sl
 8004b68:	3001      	adds	r0, #1
 8004b6a:	d0ab      	beq.n	8004ac4 <_printf_i+0x164>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	079b      	lsls	r3, r3, #30
 8004b70:	d413      	bmi.n	8004b9a <_printf_i+0x23a>
 8004b72:	68e0      	ldr	r0, [r4, #12]
 8004b74:	9b03      	ldr	r3, [sp, #12]
 8004b76:	4298      	cmp	r0, r3
 8004b78:	bfb8      	it	lt
 8004b7a:	4618      	movlt	r0, r3
 8004b7c:	e7a4      	b.n	8004ac8 <_printf_i+0x168>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4632      	mov	r2, r6
 8004b82:	4649      	mov	r1, r9
 8004b84:	4640      	mov	r0, r8
 8004b86:	47d0      	blx	sl
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d09b      	beq.n	8004ac4 <_printf_i+0x164>
 8004b8c:	3501      	adds	r5, #1
 8004b8e:	68e3      	ldr	r3, [r4, #12]
 8004b90:	9903      	ldr	r1, [sp, #12]
 8004b92:	1a5b      	subs	r3, r3, r1
 8004b94:	42ab      	cmp	r3, r5
 8004b96:	dcf2      	bgt.n	8004b7e <_printf_i+0x21e>
 8004b98:	e7eb      	b.n	8004b72 <_printf_i+0x212>
 8004b9a:	2500      	movs	r5, #0
 8004b9c:	f104 0619 	add.w	r6, r4, #25
 8004ba0:	e7f5      	b.n	8004b8e <_printf_i+0x22e>
 8004ba2:	bf00      	nop
 8004ba4:	08004eb1 	.word	0x08004eb1
 8004ba8:	08004ec2 	.word	0x08004ec2

08004bac <memmove>:
 8004bac:	4288      	cmp	r0, r1
 8004bae:	b510      	push	{r4, lr}
 8004bb0:	eb01 0402 	add.w	r4, r1, r2
 8004bb4:	d902      	bls.n	8004bbc <memmove+0x10>
 8004bb6:	4284      	cmp	r4, r0
 8004bb8:	4623      	mov	r3, r4
 8004bba:	d807      	bhi.n	8004bcc <memmove+0x20>
 8004bbc:	1e43      	subs	r3, r0, #1
 8004bbe:	42a1      	cmp	r1, r4
 8004bc0:	d008      	beq.n	8004bd4 <memmove+0x28>
 8004bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bca:	e7f8      	b.n	8004bbe <memmove+0x12>
 8004bcc:	4402      	add	r2, r0
 8004bce:	4601      	mov	r1, r0
 8004bd0:	428a      	cmp	r2, r1
 8004bd2:	d100      	bne.n	8004bd6 <memmove+0x2a>
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bde:	e7f7      	b.n	8004bd0 <memmove+0x24>

08004be0 <_free_r>:
 8004be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004be2:	2900      	cmp	r1, #0
 8004be4:	d044      	beq.n	8004c70 <_free_r+0x90>
 8004be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bea:	9001      	str	r0, [sp, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f1a1 0404 	sub.w	r4, r1, #4
 8004bf2:	bfb8      	it	lt
 8004bf4:	18e4      	addlt	r4, r4, r3
 8004bf6:	f000 f913 	bl	8004e20 <__malloc_lock>
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <_free_r+0x94>)
 8004bfc:	9801      	ldr	r0, [sp, #4]
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	b933      	cbnz	r3, 8004c10 <_free_r+0x30>
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	6014      	str	r4, [r2, #0]
 8004c06:	b003      	add	sp, #12
 8004c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c0c:	f000 b90e 	b.w	8004e2c <__malloc_unlock>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d908      	bls.n	8004c26 <_free_r+0x46>
 8004c14:	6825      	ldr	r5, [r4, #0]
 8004c16:	1961      	adds	r1, r4, r5
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	bf01      	itttt	eq
 8004c1c:	6819      	ldreq	r1, [r3, #0]
 8004c1e:	685b      	ldreq	r3, [r3, #4]
 8004c20:	1949      	addeq	r1, r1, r5
 8004c22:	6021      	streq	r1, [r4, #0]
 8004c24:	e7ed      	b.n	8004c02 <_free_r+0x22>
 8004c26:	461a      	mov	r2, r3
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	b10b      	cbz	r3, 8004c30 <_free_r+0x50>
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	d9fa      	bls.n	8004c26 <_free_r+0x46>
 8004c30:	6811      	ldr	r1, [r2, #0]
 8004c32:	1855      	adds	r5, r2, r1
 8004c34:	42a5      	cmp	r5, r4
 8004c36:	d10b      	bne.n	8004c50 <_free_r+0x70>
 8004c38:	6824      	ldr	r4, [r4, #0]
 8004c3a:	4421      	add	r1, r4
 8004c3c:	1854      	adds	r4, r2, r1
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	d1e0      	bne.n	8004c06 <_free_r+0x26>
 8004c44:	681c      	ldr	r4, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	6053      	str	r3, [r2, #4]
 8004c4a:	4421      	add	r1, r4
 8004c4c:	6011      	str	r1, [r2, #0]
 8004c4e:	e7da      	b.n	8004c06 <_free_r+0x26>
 8004c50:	d902      	bls.n	8004c58 <_free_r+0x78>
 8004c52:	230c      	movs	r3, #12
 8004c54:	6003      	str	r3, [r0, #0]
 8004c56:	e7d6      	b.n	8004c06 <_free_r+0x26>
 8004c58:	6825      	ldr	r5, [r4, #0]
 8004c5a:	1961      	adds	r1, r4, r5
 8004c5c:	428b      	cmp	r3, r1
 8004c5e:	bf04      	itt	eq
 8004c60:	6819      	ldreq	r1, [r3, #0]
 8004c62:	685b      	ldreq	r3, [r3, #4]
 8004c64:	6063      	str	r3, [r4, #4]
 8004c66:	bf04      	itt	eq
 8004c68:	1949      	addeq	r1, r1, r5
 8004c6a:	6021      	streq	r1, [r4, #0]
 8004c6c:	6054      	str	r4, [r2, #4]
 8004c6e:	e7ca      	b.n	8004c06 <_free_r+0x26>
 8004c70:	b003      	add	sp, #12
 8004c72:	bd30      	pop	{r4, r5, pc}
 8004c74:	200001d4 	.word	0x200001d4

08004c78 <sbrk_aligned>:
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	4e0e      	ldr	r6, [pc, #56]	; (8004cb4 <sbrk_aligned+0x3c>)
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	6831      	ldr	r1, [r6, #0]
 8004c80:	4605      	mov	r5, r0
 8004c82:	b911      	cbnz	r1, 8004c8a <sbrk_aligned+0x12>
 8004c84:	f000 f8bc 	bl	8004e00 <_sbrk_r>
 8004c88:	6030      	str	r0, [r6, #0]
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 f8b7 	bl	8004e00 <_sbrk_r>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	d00a      	beq.n	8004cac <sbrk_aligned+0x34>
 8004c96:	1cc4      	adds	r4, r0, #3
 8004c98:	f024 0403 	bic.w	r4, r4, #3
 8004c9c:	42a0      	cmp	r0, r4
 8004c9e:	d007      	beq.n	8004cb0 <sbrk_aligned+0x38>
 8004ca0:	1a21      	subs	r1, r4, r0
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f000 f8ac 	bl	8004e00 <_sbrk_r>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d101      	bne.n	8004cb0 <sbrk_aligned+0x38>
 8004cac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	200001d8 	.word	0x200001d8

08004cb8 <_malloc_r>:
 8004cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbc:	1ccd      	adds	r5, r1, #3
 8004cbe:	f025 0503 	bic.w	r5, r5, #3
 8004cc2:	3508      	adds	r5, #8
 8004cc4:	2d0c      	cmp	r5, #12
 8004cc6:	bf38      	it	cc
 8004cc8:	250c      	movcc	r5, #12
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	4607      	mov	r7, r0
 8004cce:	db01      	blt.n	8004cd4 <_malloc_r+0x1c>
 8004cd0:	42a9      	cmp	r1, r5
 8004cd2:	d905      	bls.n	8004ce0 <_malloc_r+0x28>
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	2600      	movs	r6, #0
 8004cda:	4630      	mov	r0, r6
 8004cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce0:	4e2e      	ldr	r6, [pc, #184]	; (8004d9c <_malloc_r+0xe4>)
 8004ce2:	f000 f89d 	bl	8004e20 <__malloc_lock>
 8004ce6:	6833      	ldr	r3, [r6, #0]
 8004ce8:	461c      	mov	r4, r3
 8004cea:	bb34      	cbnz	r4, 8004d3a <_malloc_r+0x82>
 8004cec:	4629      	mov	r1, r5
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f7ff ffc2 	bl	8004c78 <sbrk_aligned>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	d14d      	bne.n	8004d96 <_malloc_r+0xde>
 8004cfa:	6834      	ldr	r4, [r6, #0]
 8004cfc:	4626      	mov	r6, r4
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	d140      	bne.n	8004d84 <_malloc_r+0xcc>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	4631      	mov	r1, r6
 8004d06:	4638      	mov	r0, r7
 8004d08:	eb04 0803 	add.w	r8, r4, r3
 8004d0c:	f000 f878 	bl	8004e00 <_sbrk_r>
 8004d10:	4580      	cmp	r8, r0
 8004d12:	d13a      	bne.n	8004d8a <_malloc_r+0xd2>
 8004d14:	6821      	ldr	r1, [r4, #0]
 8004d16:	3503      	adds	r5, #3
 8004d18:	1a6d      	subs	r5, r5, r1
 8004d1a:	f025 0503 	bic.w	r5, r5, #3
 8004d1e:	3508      	adds	r5, #8
 8004d20:	2d0c      	cmp	r5, #12
 8004d22:	bf38      	it	cc
 8004d24:	250c      	movcc	r5, #12
 8004d26:	4629      	mov	r1, r5
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f7ff ffa5 	bl	8004c78 <sbrk_aligned>
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d02b      	beq.n	8004d8a <_malloc_r+0xd2>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	442b      	add	r3, r5
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	e00e      	b.n	8004d58 <_malloc_r+0xa0>
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	1b52      	subs	r2, r2, r5
 8004d3e:	d41e      	bmi.n	8004d7e <_malloc_r+0xc6>
 8004d40:	2a0b      	cmp	r2, #11
 8004d42:	d916      	bls.n	8004d72 <_malloc_r+0xba>
 8004d44:	1961      	adds	r1, r4, r5
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	6025      	str	r5, [r4, #0]
 8004d4a:	bf18      	it	ne
 8004d4c:	6059      	strne	r1, [r3, #4]
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	bf08      	it	eq
 8004d52:	6031      	streq	r1, [r6, #0]
 8004d54:	5162      	str	r2, [r4, r5]
 8004d56:	604b      	str	r3, [r1, #4]
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f104 060b 	add.w	r6, r4, #11
 8004d5e:	f000 f865 	bl	8004e2c <__malloc_unlock>
 8004d62:	f026 0607 	bic.w	r6, r6, #7
 8004d66:	1d23      	adds	r3, r4, #4
 8004d68:	1af2      	subs	r2, r6, r3
 8004d6a:	d0b6      	beq.n	8004cda <_malloc_r+0x22>
 8004d6c:	1b9b      	subs	r3, r3, r6
 8004d6e:	50a3      	str	r3, [r4, r2]
 8004d70:	e7b3      	b.n	8004cda <_malloc_r+0x22>
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	bf0c      	ite	eq
 8004d78:	6032      	streq	r2, [r6, #0]
 8004d7a:	605a      	strne	r2, [r3, #4]
 8004d7c:	e7ec      	b.n	8004d58 <_malloc_r+0xa0>
 8004d7e:	4623      	mov	r3, r4
 8004d80:	6864      	ldr	r4, [r4, #4]
 8004d82:	e7b2      	b.n	8004cea <_malloc_r+0x32>
 8004d84:	4634      	mov	r4, r6
 8004d86:	6876      	ldr	r6, [r6, #4]
 8004d88:	e7b9      	b.n	8004cfe <_malloc_r+0x46>
 8004d8a:	230c      	movs	r3, #12
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f000 f84c 	bl	8004e2c <__malloc_unlock>
 8004d94:	e7a1      	b.n	8004cda <_malloc_r+0x22>
 8004d96:	6025      	str	r5, [r4, #0]
 8004d98:	e7de      	b.n	8004d58 <_malloc_r+0xa0>
 8004d9a:	bf00      	nop
 8004d9c:	200001d4 	.word	0x200001d4

08004da0 <_realloc_r>:
 8004da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da4:	4680      	mov	r8, r0
 8004da6:	4614      	mov	r4, r2
 8004da8:	460e      	mov	r6, r1
 8004daa:	b921      	cbnz	r1, 8004db6 <_realloc_r+0x16>
 8004dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004db0:	4611      	mov	r1, r2
 8004db2:	f7ff bf81 	b.w	8004cb8 <_malloc_r>
 8004db6:	b92a      	cbnz	r2, 8004dc4 <_realloc_r+0x24>
 8004db8:	f7ff ff12 	bl	8004be0 <_free_r>
 8004dbc:	4625      	mov	r5, r4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc4:	f000 f838 	bl	8004e38 <_malloc_usable_size_r>
 8004dc8:	4284      	cmp	r4, r0
 8004dca:	4607      	mov	r7, r0
 8004dcc:	d802      	bhi.n	8004dd4 <_realloc_r+0x34>
 8004dce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004dd2:	d812      	bhi.n	8004dfa <_realloc_r+0x5a>
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	f7ff ff6e 	bl	8004cb8 <_malloc_r>
 8004ddc:	4605      	mov	r5, r0
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d0ed      	beq.n	8004dbe <_realloc_r+0x1e>
 8004de2:	42bc      	cmp	r4, r7
 8004de4:	4622      	mov	r2, r4
 8004de6:	4631      	mov	r1, r6
 8004de8:	bf28      	it	cs
 8004dea:	463a      	movcs	r2, r7
 8004dec:	f7ff fbb8 	bl	8004560 <memcpy>
 8004df0:	4631      	mov	r1, r6
 8004df2:	4640      	mov	r0, r8
 8004df4:	f7ff fef4 	bl	8004be0 <_free_r>
 8004df8:	e7e1      	b.n	8004dbe <_realloc_r+0x1e>
 8004dfa:	4635      	mov	r5, r6
 8004dfc:	e7df      	b.n	8004dbe <_realloc_r+0x1e>
	...

08004e00 <_sbrk_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d06      	ldr	r5, [pc, #24]	; (8004e1c <_sbrk_r+0x1c>)
 8004e04:	2300      	movs	r3, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	f7fc fc32 	bl	8001674 <_sbrk>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_sbrk_r+0x1a>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_sbrk_r+0x1a>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	200001dc 	.word	0x200001dc

08004e20 <__malloc_lock>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__malloc_lock+0x8>)
 8004e22:	f000 b811 	b.w	8004e48 <__retarget_lock_acquire_recursive>
 8004e26:	bf00      	nop
 8004e28:	200001e0 	.word	0x200001e0

08004e2c <__malloc_unlock>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	; (8004e34 <__malloc_unlock+0x8>)
 8004e2e:	f000 b80c 	b.w	8004e4a <__retarget_lock_release_recursive>
 8004e32:	bf00      	nop
 8004e34:	200001e0 	.word	0x200001e0

08004e38 <_malloc_usable_size_r>:
 8004e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e3c:	1f18      	subs	r0, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bfbc      	itt	lt
 8004e42:	580b      	ldrlt	r3, [r1, r0]
 8004e44:	18c0      	addlt	r0, r0, r3
 8004e46:	4770      	bx	lr

08004e48 <__retarget_lock_acquire_recursive>:
 8004e48:	4770      	bx	lr

08004e4a <__retarget_lock_release_recursive>:
 8004e4a:	4770      	bx	lr

08004e4c <_init>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr

08004e58 <_fini>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr
