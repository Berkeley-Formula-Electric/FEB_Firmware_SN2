
STEERING_WHEEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000566c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b8  080058b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c0  080058c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08005938  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005938  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012662  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c9  00000000  00000000  00032702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  000347d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00035860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bf9  00000000  00000000  00036840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138b0  00000000  00000000  00059439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d633d  00000000  00000000  0006cce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143026  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  00143078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005824 	.word	0x08005824

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005824 	.word	0x08005824

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <assign_filter_array>:
const FilterArrayLength APPS_RX_NUM = 1;

const AddressIdType RMS_RX_ID[] = {SW_ID};
const FilterArrayLength RMS_RX_NUM = 1;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3b01      	subs	r3, #1
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d813      	bhi.n	80005ec <assign_filter_array+0x38>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <assign_filter_array+0x18>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	080005e1 	.word	0x080005e1
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	080005e9 	.word	0x080005e9
        case BMS_ID:
            return BMS_RX_ID;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <assign_filter_array+0x48>)
 80005de:	e006      	b.n	80005ee <assign_filter_array+0x3a>
            break;
        case SW_ID:
            return SW_RX_ID;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <assign_filter_array+0x4c>)
 80005e2:	e004      	b.n	80005ee <assign_filter_array+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <assign_filter_array+0x50>)
 80005e6:	e002      	b.n	80005ee <assign_filter_array+0x3a>
            break;
        case RMS_ID:
            return RMS_RX_ID;
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <assign_filter_array+0x54>)
 80005ea:	e000      	b.n	80005ee <assign_filter_array+0x3a>
            break;
    }
    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	08005858 	.word	0x08005858
 8000600:	0800585c 	.word	0x0800585c
 8000604:	08005864 	.word	0x08005864
 8000608:	08005868 	.word	0x08005868

0800060c <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b01      	subs	r3, #1
 8000618:	2b03      	cmp	r3, #3
 800061a:	d813      	bhi.n	8000644 <assign_filter_array_legnth+0x38>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <assign_filter_array_legnth+0x18>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000635 	.word	0x08000635
 8000628:	08000639 	.word	0x08000639
 800062c:	0800063d 	.word	0x0800063d
 8000630:	08000641 	.word	0x08000641
        case BMS_ID:
            return BMS_RX_NUM;
 8000634:	2301      	movs	r3, #1
 8000636:	e006      	b.n	8000646 <assign_filter_array_legnth+0x3a>
            break;
        case SW_ID:
            return SW_RX_NUM;
 8000638:	2302      	movs	r3, #2
 800063a:	e004      	b.n	8000646 <assign_filter_array_legnth+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 800063c:	2301      	movs	r3, #1
 800063e:	e002      	b.n	8000646 <assign_filter_array_legnth+0x3a>
            break;
        case RMS_ID:
            return RMS_RX_NUM;
 8000640:	2301      	movs	r3, #1
 8000642:	e000      	b.n	8000646 <assign_filter_array_legnth+0x3a>
            break;
    }
    return 0;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <FEB_CAN_Filter_Config>:
uint8_t TxData[8];
uint8_t RxData[8];
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b090      	sub	sp, #64	; 0x40
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	460b      	mov	r3, r1
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	4613      	mov	r3, r2
 8000668:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 800066a:	2300      	movs	r3, #0
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800066e:	e027      	b.n	80006c0 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000670:	2301      	movs	r3, #1
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8000674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	4413      	add	r3, r2
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	025b      	lsls	r3, r3, #9
 8000688:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 800068e:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000692:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000698:	2300      	movs	r3, #0
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800069c:	2301      	movs	r3, #1
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 80006a0:	231b      	movs	r3, #27
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f000 ff88 	bl	80015c0 <HAL_CAN_ConfigFilter>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 80006b6:	f000 fba9 	bl	8000e0c <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 80006ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006bc:	3301      	adds	r3, #1
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006c4:	429a      	cmp	r2, r3
 80006c6:	dbd3      	blt.n	8000670 <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3740      	adds	r7, #64	; 0x40
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <FEB_CAN_Init+0x80>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d104      	bne.n	80006f2 <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	e008      	b.n	8000704 <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <FEB_CAN_Init+0x84>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d103      	bne.n	8000704 <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8000700:	2310      	movs	r3, #16
 8000702:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <FEB_CAN_Init+0x88>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <FEB_CAN_Init+0x88>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <FEB_CAN_Init+0x88>)
 8000712:	2200      	movs	r2, #0
 8000714:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 8000716:	6838      	ldr	r0, [r7, #0]
 8000718:	f7ff ff4c 	bl	80005b4 <assign_filter_array>
 800071c:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 800071e:	6838      	ldr	r0, [r7, #0]
 8000720:	f7ff ff74 	bl	800060c <assign_filter_array_legnth>
 8000724:	4603      	mov	r3, r0
 8000726:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	7afa      	ldrb	r2, [r7, #11]
 800072c:	68f9      	ldr	r1, [r7, #12]
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff90 	bl	8000654 <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f001 f823 	bl	8001780 <HAL_CAN_Start>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <FEB_CAN_Init+0x70>
	  Error_Handler();
 8000740:	f000 fb64 	bl	8000e0c <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 8000744:	6939      	ldr	r1, [r7, #16]
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f001 f96e 	bl	8001a28 <HAL_CAN_ActivateNotification>

}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40006400 	.word	0x40006400
 8000758:	40006800 	.word	0x40006800
 800075c:	2000008c 	.word	0x2000008c

08000760 <FEB_CAN_Transmit>:
		Error_Handler();
	}
	store_msg(&RxHeader, RxData);
}

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	461a      	mov	r2, r3
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	480f      	ldr	r0, [pc, #60]	; (80007b4 <FEB_CAN_Transmit+0x54>)
 8000776:	f004 fbdf 	bl	8004f38 <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <FEB_CAN_Transmit+0x58>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <FEB_CAN_Transmit+0x58>)
 8000784:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 8000786:	bf00      	nop
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f001 f918 	bl	80019be <HAL_CAN_GetTxMailboxesFreeLevel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f9      	beq.n	8000788 <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <FEB_CAN_Transmit+0x5c>)
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <FEB_CAN_Transmit+0x54>)
 8000798:	4907      	ldr	r1, [pc, #28]	; (80007b8 <FEB_CAN_Transmit+0x58>)
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f001 f834 	bl	8001808 <HAL_CAN_AddTxMessage>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 80007a6:	f000 fb31 	bl	8000e0c <Error_Handler>
	}
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000a4 	.word	0x200000a4
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	200000ac 	.word	0x200000ac

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0a6      	sub	sp, #152	; 0x98
 80007c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fd69 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f8d1 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 fa85 	bl	8000cdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 fa59 	bl	8000c88 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007d6:	f000 f96d 	bl	8000ab4 <MX_I2C1_Init>
  MX_TIM14_Init();
 80007da:	f000 fa31 	bl	8000c40 <MX_TIM14_Init>
  MX_TIM2_Init();
 80007de:	f000 f997 	bl	8000b10 <MX_TIM2_Init>
  MX_CAN1_Init();
 80007e2:	f000 f931 	bl	8000a48 <MX_CAN1_Init>
  MX_TIM13_Init();
 80007e6:	f000 fa07 	bl	8000bf8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  bool ready_to_drive = false;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  bool last_button_state = false;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  bool lock = false;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  int buf_len;
  //uint8_t data1;
  uint8_t data2;
  HAL_StatusTypeDef ret;

  HAL_TIM_Base_Start_IT(&htim13);
 80007fc:	4852      	ldr	r0, [pc, #328]	; (8000948 <main+0x188>)
 80007fe:	f002 ff95 	bl	800372c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim13);
 8000802:	4851      	ldr	r0, [pc, #324]	; (8000948 <main+0x188>)
 8000804:	f003 f802 	bl	800380c <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000808:	4850      	ldr	r0, [pc, #320]	; (800094c <main+0x18c>)
 800080a:	f002 ff8f 	bl	800372c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim14);
 800080e:	484f      	ldr	r0, [pc, #316]	; (800094c <main+0x18c>)
 8000810:	f002 fffc 	bl	800380c <HAL_TIM_Base_Stop_IT>
  Button_Checking = false;
 8000814:	4b4e      	ldr	r3, [pc, #312]	; (8000950 <main+0x190>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
  Button_Timer_Flag = false;
 800081a:	4b4e      	ldr	r3, [pc, #312]	; (8000954 <main+0x194>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
  // 0% PWM cycle to turnoff buzzer
  htim2.Instance->CCR2 = 0;
 8000820:	4b4d      	ldr	r3, [pc, #308]	; (8000958 <main+0x198>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2200      	movs	r2, #0
 8000826:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000828:	2104      	movs	r1, #4
 800082a:	484b      	ldr	r0, [pc, #300]	; (8000958 <main+0x198>)
 800082c:	f003 f876 	bl	800391c <HAL_TIM_PWM_Start>


  FEB_CAN_Init(&hcan1, SW_ID);
 8000830:	2102      	movs	r1, #2
 8000832:	484a      	ldr	r0, [pc, #296]	; (800095c <main+0x19c>)
 8000834:	f7ff ff4e 	bl	80006d4 <FEB_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(50);
 8000838:	2032      	movs	r0, #50	; 0x32
 800083a:	f000 fda1 	bl	8001380 <HAL_Delay>
	  // read both IOexpanders
//	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP1_ADDR, &data1, 1, HAL_MAX_DELAY);
//	  if ( ret != HAL_OK ) {
//		  buf_len = sprintf((char*)buf, "IO_1 Error\r\n");
//	  }
	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP2_ADDR, &data2, 1, HAL_MAX_DELAY);
 800083e:	2342      	movs	r3, #66	; 0x42
 8000840:	b299      	uxth	r1, r3
 8000842:	1cfa      	adds	r2, r7, #3
 8000844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	4844      	ldr	r0, [pc, #272]	; (8000960 <main+0x1a0>)
 800084e:	f001 fd15 	bl	800227c <HAL_I2C_Master_Receive>
 8000852:	4603      	mov	r3, r0
 8000854:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	  if ( ret != HAL_OK ) {
 8000858:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800085c:	2b00      	cmp	r3, #0
 800085e:	d006      	beq.n	800086e <main+0xae>
		  buf_len = sprintf((char*)buf, "IO_2 Error\r\n");
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4940      	ldr	r1, [pc, #256]	; (8000964 <main+0x1a4>)
 8000864:	4618      	mov	r0, r3
 8000866:	f004 fb7d 	bl	8004f64 <siprintf>
 800086a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  if (!(data2 & (1<<3))) { // BUT_6 -> IO2 P3
		  buf_len = sprintf((char*)buf, "BUT_6\r\n");
	  }
	  ***/

	  if (!(data2 & (1<<0))) { // BUT_3 -> IO2 P0
 800086e:	78fb      	ldrb	r3, [r7, #3]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d145      	bne.n	8000904 <main+0x144>
//		  buf_len = sprintf((char*)buf, "BUT_3\r\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);

		  // if the system is not checking a button, start the timer to check the timer
		  if (!Button_Checking && (last_button_state == false) && !lock) {
 8000878:	4b35      	ldr	r3, [pc, #212]	; (8000950 <main+0x190>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d013      	beq.n	80008ae <main+0xee>
 8000886:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800088a:	f083 0301 	eor.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00c      	beq.n	80008ae <main+0xee>
 8000894:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000898:	f083 0301 	eor.w	r3, r3, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d005      	beq.n	80008ae <main+0xee>
			  // Start timer to count 1 sec hold time
			  HAL_TIM_Base_Start_IT(&htim13);
 80008a2:	4829      	ldr	r0, [pc, #164]	; (8000948 <main+0x188>)
 80008a4:	f002 ff42 	bl	800372c <HAL_TIM_Base_Start_IT>
			  Button_Checking = true;
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <main+0x190>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "starting timer 13\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }
		  // if 1 sec has elapsed, and this button is still pressed, it is a valid action
		  // turn on buzzer and send CAN msg, reset states
		  if (Button_Timer_Flag) {
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <main+0x194>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d022      	beq.n	80008fc <main+0x13c>
			  ready_to_drive = !ready_to_drive;
 80008b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bf14      	ite	ne
 80008be:	2301      	movne	r3, #1
 80008c0:	2300      	moveq	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	f083 0301 	eor.w	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			  // when the ready_to_drive state is just changed, lock from changing again
			  lock = true;
 80008d4:	2301      	movs	r3, #1
 80008d6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

			  // start timer for buzzer
			  HAL_TIM_Base_Start_IT(&htim14);
 80008da:	481c      	ldr	r0, [pc, #112]	; (800094c <main+0x18c>)
 80008dc:	f002 ff26 	bl	800372c <HAL_TIM_Base_Start_IT>
			  // turn on buzzer at VOLUME
			  htim2.Instance->CCR2 = VOLUME;
 80008e0:	2202      	movs	r2, #2
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <main+0x198>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	639a      	str	r2, [r3, #56]	; 0x38

			  FEB_CAN_Transmit(&hcan1, SW_COMMAND_1, (uint8_t *) &ready_to_drive, 1);
 80008e8:	f107 0287 	add.w	r2, r7, #135	; 0x87
 80008ec:	2301      	movs	r3, #1
 80008ee:	2120      	movs	r1, #32
 80008f0:	481a      	ldr	r0, [pc, #104]	; (800095c <main+0x19c>)
 80008f2:	f7ff ff35 	bl	8000760 <FEB_CAN_Transmit>

			  Button_Timer_Flag = false;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <main+0x194>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "staring timer 14\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }

		  //record button state
		  last_button_state = true;
 80008fc:	2301      	movs	r3, #1
 80008fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000902:	e00c      	b.n	800091e <main+0x15e>

	  } else {
		  Button_Timer_Flag = false;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <main+0x194>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]

		  // allow ready_to_drive to change when button is released.
		  if (last_button_state) {
 800090a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800090e:	2b00      	cmp	r3, #0
 8000910:	d005      	beq.n	800091e <main+0x15e>
			  last_button_state = false;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			  lock = false;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		  }
	  }
//	  buf_len = sprintf((char*)buf, "check:%d flag:%d\r\n", Button_Checking, Button_Timer_Flag);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	  buf_len = sprintf((char*)buf, "ready: %d\r\n", ready_to_drive);
 800091e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000922:	461a      	mov	r2, r3
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	4910      	ldr	r1, [pc, #64]	; (8000968 <main+0x1a8>)
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fb1b 	bl	8004f64 <siprintf>
 800092e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8000932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000936:	b29a      	uxth	r2, r3
 8000938:	1d39      	adds	r1, r7, #4
 800093a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <main+0x1ac>)
 8000940:	f003 ff5b 	bl	80047fa <HAL_UART_Transmit>
	  HAL_Delay(50);
 8000944:	e778      	b.n	8000838 <main+0x78>
 8000946:	bf00      	nop
 8000948:	20000174 	.word	0x20000174
 800094c:	200001bc 	.word	0x200001bc
 8000950:	20000248 	.word	0x20000248
 8000954:	20000249 	.word	0x20000249
 8000958:	2000012c 	.word	0x2000012c
 800095c:	200000b0 	.word	0x200000b0
 8000960:	200000d8 	.word	0x200000d8
 8000964:	0800583c 	.word	0x0800583c
 8000968:	0800584c 	.word	0x0800584c
 800096c:	20000204 	.word	0x20000204

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2234      	movs	r2, #52	; 0x34
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f004 fae8 	bl	8004f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <SystemClock_Config+0xd0>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <SystemClock_Config+0xd0>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <SystemClock_Config+0xd0>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <SystemClock_Config+0xd4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <SystemClock_Config+0xd4>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <SystemClock_Config+0xd4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80009e4:	23a0      	movs	r3, #160	; 0xa0
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fba9 	bl	8003150 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a04:	f000 fa02 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	2105      	movs	r1, #5
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 f848 	bl	8002abc <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a32:	f000 f9eb 	bl	8000e0c <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3750      	adds	r7, #80	; 0x50
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <MX_CAN1_Init+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a54:	2210      	movs	r2, #16
 8000a56:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a6a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_CAN1_Init+0x64>)
 8000a98:	f000 fc96 	bl	80013c8 <HAL_CAN_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000aa2:	f000 f9b3 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000b0 	.word	0x200000b0
 8000ab0:	40006400 	.word	0x40006400

08000ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_I2C1_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_I2C1_Init+0x58>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000af2:	f001 fa7f 	bl	8001ff4 <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 f986 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000d8 	.word	0x200000d8
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	f107 0320 	add.w	r3, r7, #32
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
 8000b3c:	615a      	str	r2, [r3, #20]
 8000b3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b40:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000b42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000b48:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000b4a:	229f      	movs	r2, #159	; 0x9f
 8000b4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000b56:	2263      	movs	r2, #99	; 0x63
 8000b58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b66:	4823      	ldr	r0, [pc, #140]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000b68:	f002 fd90 	bl	800368c <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b72:	f000 f94b 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b80:	4619      	mov	r1, r3
 8000b82:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000b84:	f003 f95c 	bl	8003e40 <HAL_TIM_ConfigClockSource>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b8e:	f000 f93d 	bl	8000e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000b94:	f002 fe69 	bl	800386a <HAL_TIM_PWM_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b9e:	f000 f935 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000bb2:	f003 fd45 	bl	8004640 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000bbc:	f000 f926 	bl	8000e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc0:	2360      	movs	r3, #96	; 0x60
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000bc4:	2364      	movs	r3, #100	; 0x64
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000bd8:	f003 f870 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000be2:	f000 f913 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <MX_TIM2_Init+0xe4>)
 8000be8:	f000 fa28 	bl	800103c <HAL_TIM_MspPostInit>

}
 8000bec:	bf00      	nop
 8000bee:	3738      	adds	r7, #56	; 0x38
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000012c 	.word	0x2000012c

08000bf8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_TIM13_Init+0x40>)
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <MX_TIM13_Init+0x44>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16000-1;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_TIM13_Init+0x40>)
 8000c04:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000c08:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_TIM13_Init+0x40>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_TIM13_Init+0x40>)
 8000c12:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c16:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_TIM13_Init+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_TIM13_Init+0x40>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_TIM13_Init+0x40>)
 8000c26:	f002 fd31 	bl	800368c <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000c30:	f000 f8ec 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000174 	.word	0x20000174
 8000c3c:	40001c00 	.word	0x40001c00

08000c40 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_TIM14_Init+0x40>)
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <MX_TIM14_Init+0x44>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <MX_TIM14_Init+0x40>)
 8000c4c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000c50:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_TIM14_Init+0x40>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_TIM14_Init+0x40>)
 8000c5a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c5e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MX_TIM14_Init+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_TIM14_Init+0x40>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_TIM14_Init+0x40>)
 8000c6e:	f002 fd0d 	bl	800368c <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000c78:	f000 f8c8 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200001bc 	.word	0x200001bc
 8000c84:	40002000 	.word	0x40002000

08000c88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <MX_USART2_UART_Init+0x50>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	f003 fd4e 	bl	8004760 <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cca:	f000 f89f 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000204 	.word	0x20000204
 8000cd8:	40004400 	.word	0x40004400

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a2c      	ldr	r2, [pc, #176]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_GPIO_Init+0xd0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2120      	movs	r1, #32
 8000d66:	4812      	ldr	r0, [pc, #72]	; (8000db0 <MX_GPIO_Init+0xd4>)
 8000d68:	f001 f92a 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_GPIO_Init+0xd8>)
 8000d84:	f000 ff88 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_GPIO_Init+0xd4>)
 8000da0:	f000 ff7a 	bl	8001c98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020800 	.word	0x40020800

08000db8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
//	char buf[10];
//	int buf_len;

	// timer for button
	// if 1 sec has passed since the first detection of button pressed, go back to not checking state
	if (htim == &htim13) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d108      	bne.n	8000dda <HAL_TIM_PeriodElapsedCallback+0x22>
	  Button_Checking = false;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
	  Button_Timer_Flag = true;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim13);
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000dd6:	f002 fd19 	bl	800380c <HAL_TIM_Base_Stop_IT>
//	  buf_len = sprintf((char*)buf, "Timer13\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}

	// timer for buzzer
	if (htim == &htim14)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d106      	bne.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
	  // turn off buzzer
	  htim2.Instance->CCR2 = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
	  // Stop timer
	  HAL_TIM_Base_Stop_IT(&htim14);
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dec:	f002 fd0e 	bl	800380c <HAL_TIM_Base_Stop_IT>

//	  buf_len = sprintf((char*)buf, "Timer14\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000174 	.word	0x20000174
 8000dfc:	20000248 	.word	0x20000248
 8000e00:	20000249 	.word	0x20000249
 8000e04:	200001bc 	.word	0x200001bc
 8000e08:	2000012c 	.word	0x2000012c

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e56:	2007      	movs	r0, #7
 8000e58:	f000 fedc 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_CAN_MspInit+0x84>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12c      	bne.n	8000ee4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_CAN_MspInit+0x88>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_CAN_MspInit+0x88>)
 8000e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_CAN_MspInit+0x88>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_CAN_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_CAN_MspInit+0x88>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_CAN_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ec2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ed4:	2309      	movs	r3, #9
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_CAN_MspInit+0x8c>)
 8000ee0:	f000 feda 	bl	8001c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40006400 	.word	0x40006400
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a19      	ldr	r2, [pc, #100]	; (8000f7c <HAL_I2C_MspInit+0x84>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12c      	bne.n	8000f74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3c:	2312      	movs	r3, #18
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	480c      	ldr	r0, [pc, #48]	; (8000f84 <HAL_I2C_MspInit+0x8c>)
 8000f54:	f000 fea0 	bl	8001c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_I2C_MspInit+0x88>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400

08000f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f98:	d10e      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_TIM_Base_MspInit+0xa8>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a23      	ldr	r2, [pc, #140]	; (8001030 <HAL_TIM_Base_MspInit+0xa8>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_TIM_Base_MspInit+0xa8>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000fb6:	e036      	b.n	8001026 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_TIM_Base_MspInit+0xac>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d116      	bne.n	8000ff0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_TIM_Base_MspInit+0xa8>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a19      	ldr	r2, [pc, #100]	; (8001030 <HAL_TIM_Base_MspInit+0xa8>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_TIM_Base_MspInit+0xa8>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	202c      	movs	r0, #44	; 0x2c
 8000fe4:	f000 fe21 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000fe8:	202c      	movs	r0, #44	; 0x2c
 8000fea:	f000 fe3a 	bl	8001c62 <HAL_NVIC_EnableIRQ>
}
 8000fee:	e01a      	b.n	8001026 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_TIM_Base_MspInit+0xb0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d115      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_TIM_Base_MspInit+0xa8>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <HAL_TIM_Base_MspInit+0xa8>)
 8001004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_TIM_Base_MspInit+0xa8>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	202d      	movs	r0, #45	; 0x2d
 800101c:	f000 fe05 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001020:	202d      	movs	r0, #45	; 0x2d
 8001022:	f000 fe1e 	bl	8001c62 <HAL_NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40001c00 	.word	0x40001c00
 8001038:	40002000 	.word	0x40002000

0800103c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d11d      	bne.n	800109a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_TIM_MspPostInit+0x68>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800107a:	2302      	movs	r3, #2
 800107c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800108a:	2301      	movs	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4619      	mov	r1, r3
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <HAL_TIM_MspPostInit+0x6c>)
 8001096:	f000 fdff 	bl	8001c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000

080010ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_UART_MspInit+0x84>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12b      	bne.n	8001126 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001106:	230c      	movs	r3, #12
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001116:	2307      	movs	r3, #7
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_UART_MspInit+0x8c>)
 8001122:	f000 fdb9 	bl	8001c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40004400 	.word	0x40004400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f8da 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001196:	f002 fc89 	bl	8003aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000174 	.word	0x20000174

080011a4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80011aa:	f002 fc7f 	bl	8003aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200001bc 	.word	0x200001bc

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f003 fe7c 	bl	8004ee4 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20020000 	.word	0x20020000
 8001218:	00000400 	.word	0x00000400
 800121c:	2000024c 	.word	0x2000024c
 8001220:	20000268 	.word	0x20000268

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124e:	490e      	ldr	r1, [pc, #56]	; (8001288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001264:	4c0b      	ldr	r4, [pc, #44]	; (8001294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001272:	f7ff ffd7 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f003 fe3b 	bl	8004ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff faa1 	bl	80007c0 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800128c:	080058c8 	.word	0x080058c8
  ldr r2, =_sbss
 8001290:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001294:	20000264 	.word	0x20000264

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_Init+0x40>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_Init+0x40>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_Init+0x40>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 fca5 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fda2 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fcbd 	bl	8001c7e <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800131c:	f000 fc85 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	20000250 	.word	0x20000250

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000250 	.word	0x20000250

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0ed      	b.n	80015b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fd3e 	bl	8000e68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013fc:	f7ff ffb4 	bl	8001368 <HAL_GetTick>
 8001400:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001402:	e012      	b.n	800142a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001404:	f7ff ffb0 	bl	8001368 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b0a      	cmp	r3, #10
 8001410:	d90b      	bls.n	800142a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2205      	movs	r2, #5
 8001422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0c5      	b.n	80015b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0e5      	beq.n	8001404 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0202 	bic.w	r2, r2, #2
 8001446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001448:	f7ff ff8e 	bl	8001368 <HAL_GetTick>
 800144c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800144e:	e012      	b.n	8001476 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001450:	f7ff ff8a 	bl	8001368 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b0a      	cmp	r3, #10
 800145c:	d90b      	bls.n	8001476 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2205      	movs	r2, #5
 800146e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e09f      	b.n	80015b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1e5      	bne.n	8001450 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7e1b      	ldrb	r3, [r3, #24]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d108      	bne.n	800149e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e007      	b.n	80014ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7e5b      	ldrb	r3, [r3, #25]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d108      	bne.n	80014c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e007      	b.n	80014d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7e9b      	ldrb	r3, [r3, #26]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d108      	bne.n	80014f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0220 	orr.w	r2, r2, #32
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e007      	b.n	8001502 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0220 	bic.w	r2, r2, #32
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7edb      	ldrb	r3, [r3, #27]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d108      	bne.n	800151c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0210 	bic.w	r2, r2, #16
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e007      	b.n	800152c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0210 	orr.w	r2, r2, #16
 800152a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7f1b      	ldrb	r3, [r3, #28]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0208 	orr.w	r2, r2, #8
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e007      	b.n	8001556 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0208 	bic.w	r2, r2, #8
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7f5b      	ldrb	r3, [r3, #29]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d108      	bne.n	8001570 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0204 	orr.w	r2, r2, #4
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e007      	b.n	8001580 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0204 	bic.w	r2, r2, #4
 800157e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	ea42 0103 	orr.w	r1, r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015d8:	7cfb      	ldrb	r3, [r7, #19]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d003      	beq.n	80015e6 <HAL_CAN_ConfigFilter+0x26>
 80015de:	7cfb      	ldrb	r3, [r7, #19]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	f040 80be 	bne.w	8001762 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80015e6:	4b65      	ldr	r3, [pc, #404]	; (800177c <HAL_CAN_ConfigFilter+0x1bc>)
 80015e8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001600:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	431a      	orrs	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	2201      	movs	r2, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	401a      	ands	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d123      	bne.n	8001690 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800166a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3248      	adds	r2, #72	; 0x48
 8001670:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001684:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001686:	6979      	ldr	r1, [r7, #20]
 8001688:	3348      	adds	r3, #72	; 0x48
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d122      	bne.n	80016de <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3248      	adds	r2, #72	; 0x48
 80016be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016d4:	6979      	ldr	r1, [r7, #20]
 80016d6:	3348      	adds	r3, #72	; 0x48
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	401a      	ands	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016f8:	e007      	b.n	800170a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	431a      	orrs	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	401a      	ands	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001724:	e007      	b.n	8001736 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	431a      	orrs	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d107      	bne.n	800174e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	431a      	orrs	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001754:	f023 0201 	bic.w	r2, r3, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e006      	b.n	8001770 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
  }
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40006400 	.word	0x40006400

08001780 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d12e      	bne.n	80017f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017ac:	f7ff fddc 	bl	8001368 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017b2:	e012      	b.n	80017da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017b4:	f7ff fdd8 	bl	8001368 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b0a      	cmp	r3, #10
 80017c0:	d90b      	bls.n	80017da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2205      	movs	r2, #5
 80017d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e012      	b.n	8001800 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1e5      	bne.n	80017b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e006      	b.n	8001800 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
  }
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d003      	beq.n	8001834 <HAL_CAN_AddTxMessage+0x2c>
 800182c:	7ffb      	ldrb	r3, [r7, #31]
 800182e:	2b02      	cmp	r3, #2
 8001830:	f040 80b8 	bne.w	80019a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10a      	bne.n	8001854 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80a0 	beq.w	8001994 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	0e1b      	lsrs	r3, r3, #24
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d907      	bls.n	8001874 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e09e      	b.n	80019b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001874:	2201      	movs	r2, #1
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	409a      	lsls	r2, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10d      	bne.n	80018a2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001890:	68f9      	ldr	r1, [r7, #12]
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3318      	adds	r3, #24
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	440b      	add	r3, r1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e00f      	b.n	80018c2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018b2:	68f9      	ldr	r1, [r7, #12]
 80018b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80018b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3318      	adds	r3, #24
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	440b      	add	r3, r1
 80018c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3318      	adds	r3, #24
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	440b      	add	r3, r1
 80018d2:	3304      	adds	r3, #4
 80018d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	7d1b      	ldrb	r3, [r3, #20]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d111      	bne.n	8001902 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3318      	adds	r3, #24
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	3304      	adds	r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	6811      	ldr	r1, [r2, #0]
 80018f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3318      	adds	r3, #24
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	440b      	add	r3, r1
 80018fe:	3304      	adds	r3, #4
 8001900:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3307      	adds	r3, #7
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	061a      	lsls	r2, r3, #24
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3306      	adds	r3, #6
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3305      	adds	r3, #5
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	4313      	orrs	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	3204      	adds	r2, #4
 8001922:	7812      	ldrb	r2, [r2, #0]
 8001924:	4610      	mov	r0, r2
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	6811      	ldr	r1, [r2, #0]
 800192a:	ea43 0200 	orr.w	r2, r3, r0
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	440b      	add	r3, r1
 8001934:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001938:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3303      	adds	r3, #3
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	061a      	lsls	r2, r3, #24
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3302      	adds	r3, #2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	041b      	lsls	r3, r3, #16
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3301      	adds	r3, #1
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	4313      	orrs	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	4610      	mov	r0, r2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	6811      	ldr	r1, [r2, #0]
 8001960:	ea43 0200 	orr.w	r2, r3, r0
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	440b      	add	r3, r1
 800196a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800196e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3318      	adds	r3, #24
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	6811      	ldr	r1, [r2, #0]
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3318      	adds	r3, #24
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	440b      	add	r3, r1
 800198e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	e00e      	b.n	80019b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e006      	b.n	80019b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
  }
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80019be:	b480      	push	{r7}
 80019c0:	b085      	sub	sp, #20
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d002      	beq.n	80019de <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80019d8:	7afb      	ldrb	r3, [r7, #11]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d11d      	bne.n	8001a1a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a38:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d002      	beq.n	8001a46 <HAL_CAN_ActivateNotification+0x1e>
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d109      	bne.n	8001a5a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6959      	ldr	r1, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e006      	b.n	8001a68 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <__NVIC_EnableIRQ+0x38>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff29 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff3e 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff31 	bl	8001ad8 <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa2 	bl	8001bd0 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e165      	b.n	8001f80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 8154 	bne.w	8001f7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d005      	beq.n	8001cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d130      	bne.n	8001d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 0201 	and.w	r2, r3, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d017      	beq.n	8001d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d123      	bne.n	8001ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	69b9      	ldr	r1, [r7, #24]
 8001dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0203 	and.w	r2, r3, #3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80ae 	beq.w	8001f7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a5c      	ldr	r2, [pc, #368]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <HAL_GPIO_Init+0x300>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3a:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4f      	ldr	r2, [pc, #316]	; (8001fa0 <HAL_GPIO_Init+0x308>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d025      	beq.n	8001eb2 <HAL_GPIO_Init+0x21a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4e      	ldr	r2, [pc, #312]	; (8001fa4 <HAL_GPIO_Init+0x30c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01f      	beq.n	8001eae <HAL_GPIO_Init+0x216>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4d      	ldr	r2, [pc, #308]	; (8001fa8 <HAL_GPIO_Init+0x310>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x212>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4c      	ldr	r2, [pc, #304]	; (8001fac <HAL_GPIO_Init+0x314>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x20e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <HAL_GPIO_Init+0x318>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x20a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4a      	ldr	r2, [pc, #296]	; (8001fb4 <HAL_GPIO_Init+0x31c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x206>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a49      	ldr	r2, [pc, #292]	; (8001fb8 <HAL_GPIO_Init+0x320>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x202>
 8001e96:	2306      	movs	r3, #6
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x21c>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x21c>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x21c>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x21c>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x21c>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x21c>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x21c>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	; (8001f9c <HAL_GPIO_Init+0x304>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a31      	ldr	r2, [pc, #196]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f26:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae96 	bls.w	8001cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e12b      	b.n	800225e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe ff6c 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002058:	f000 fe22 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 800205c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a81      	ldr	r2, [pc, #516]	; (8002268 <HAL_I2C_Init+0x274>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d807      	bhi.n	8002078 <HAL_I2C_Init+0x84>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a80      	ldr	r2, [pc, #512]	; (800226c <HAL_I2C_Init+0x278>)
 800206c:	4293      	cmp	r3, r2
 800206e:	bf94      	ite	ls
 8002070:	2301      	movls	r3, #1
 8002072:	2300      	movhi	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e006      	b.n	8002086 <HAL_I2C_Init+0x92>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a7d      	ldr	r2, [pc, #500]	; (8002270 <HAL_I2C_Init+0x27c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	bf94      	ite	ls
 8002080:	2301      	movls	r3, #1
 8002082:	2300      	movhi	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0e7      	b.n	800225e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4a78      	ldr	r2, [pc, #480]	; (8002274 <HAL_I2C_Init+0x280>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9b      	lsrs	r3, r3, #18
 8002098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a6a      	ldr	r2, [pc, #424]	; (8002268 <HAL_I2C_Init+0x274>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d802      	bhi.n	80020c8 <HAL_I2C_Init+0xd4>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	e009      	b.n	80020dc <HAL_I2C_Init+0xe8>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	4a69      	ldr	r2, [pc, #420]	; (8002278 <HAL_I2C_Init+0x284>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	3301      	adds	r3, #1
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	495c      	ldr	r1, [pc, #368]	; (8002268 <HAL_I2C_Init+0x274>)
 80020f8:	428b      	cmp	r3, r1
 80020fa:	d819      	bhi.n	8002130 <HAL_I2C_Init+0x13c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e59      	subs	r1, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fbb1 f3f3 	udiv	r3, r1, r3
 800210a:	1c59      	adds	r1, r3, #1
 800210c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002110:	400b      	ands	r3, r1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_I2C_Init+0x138>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e59      	subs	r1, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fbb1 f3f3 	udiv	r3, r1, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212a:	e051      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 800212c:	2304      	movs	r3, #4
 800212e:	e04f      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d111      	bne.n	800215c <HAL_I2C_Init+0x168>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	440b      	add	r3, r1
 8002146:	fbb0 f3f3 	udiv	r3, r0, r3
 800214a:	3301      	adds	r3, #1
 800214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e012      	b.n	8002182 <HAL_I2C_Init+0x18e>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1e58      	subs	r0, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	0099      	lsls	r1, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Init+0x196>
 8002186:	2301      	movs	r3, #1
 8002188:	e022      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10e      	bne.n	80021b0 <HAL_I2C_Init+0x1bc>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1e58      	subs	r0, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	440b      	add	r3, r1
 80021a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ae:	e00f      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	0099      	lsls	r1, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	6809      	ldr	r1, [r1, #0]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6911      	ldr	r1, [r2, #16]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68d2      	ldr	r2, [r2, #12]
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	430b      	orrs	r3, r1
 8002212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	000186a0 	.word	0x000186a0
 800226c:	001e847f 	.word	0x001e847f
 8002270:	003d08ff 	.word	0x003d08ff
 8002274:	431bde83 	.word	0x431bde83
 8002278:	10624dd3 	.word	0x10624dd3

0800227c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	460b      	mov	r3, r1
 800228a:	817b      	strh	r3, [r7, #10]
 800228c:	4613      	mov	r3, r2
 800228e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff f86a 	bl	8001368 <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b20      	cmp	r3, #32
 80022a0:	f040 820b 	bne.w	80026ba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2319      	movs	r3, #25
 80022aa:	2201      	movs	r2, #1
 80022ac:	497c      	ldr	r1, [pc, #496]	; (80024a0 <HAL_I2C_Master_Receive+0x224>)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fad8 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
 80022bc:	e1fe      	b.n	80026bc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_I2C_Master_Receive+0x50>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e1f7      	b.n	80026bc <HAL_I2C_Master_Receive+0x440>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d007      	beq.n	80022f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002300:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2222      	movs	r2, #34	; 0x22
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2210      	movs	r2, #16
 800230e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	893a      	ldrh	r2, [r7, #8]
 8002322:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4a5c      	ldr	r2, [pc, #368]	; (80024a4 <HAL_I2C_Master_Receive+0x228>)
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002334:	8979      	ldrh	r1, [r7, #10]
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f9c4 	bl	80026c8 <I2C_MasterRequestRead>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e1b8      	b.n	80026bc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	d113      	bne.n	800237a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e18c      	b.n	8002694 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	2b01      	cmp	r3, #1
 8002380:	d11b      	bne.n	80023ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e16c      	b.n	8002694 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d11b      	bne.n	80023fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	e14c      	b.n	8002694 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002420:	e138      	b.n	8002694 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	2b03      	cmp	r3, #3
 8002428:	f200 80f1 	bhi.w	800260e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b01      	cmp	r3, #1
 8002432:	d123      	bne.n	800247c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fae9 	bl	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e139      	b.n	80026bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a
 800247a:	e10b      	b.n	8002694 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	2b02      	cmp	r3, #2
 8002482:	d14e      	bne.n	8002522 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	2200      	movs	r2, #0
 800248c:	4906      	ldr	r1, [pc, #24]	; (80024a8 <HAL_I2C_Master_Receive+0x22c>)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f9e8 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e10e      	b.n	80026bc <HAL_I2C_Master_Receive+0x440>
 800249e:	bf00      	nop
 80024a0:	00100002 	.word	0x00100002
 80024a4:	ffff0000 	.word	0xffff0000
 80024a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002520:	e0b8      	b.n	8002694 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	2200      	movs	r2, #0
 800252a:	4966      	ldr	r1, [pc, #408]	; (80026c4 <HAL_I2C_Master_Receive+0x448>)
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f999 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0bf      	b.n	80026bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	2200      	movs	r2, #0
 8002586:	494f      	ldr	r1, [pc, #316]	; (80026c4 <HAL_I2C_Master_Receive+0x448>)
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f96b 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e091      	b.n	80026bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800260c:	e042      	b.n	8002694 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f9fc 	bl	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e04c      	b.n	80026bc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b04      	cmp	r3, #4
 8002660:	d118      	bne.n	8002694 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f aec2 	bne.w	8002422 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	00010004 	.word	0x00010004

080026c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	460b      	mov	r3, r1
 80026d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d006      	beq.n	8002702 <I2C_MasterRequestRead+0x3a>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d003      	beq.n	8002702 <I2C_MasterRequestRead+0x3a>
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002700:	d108      	bne.n	8002714 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e00b      	b.n	800272c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	2b11      	cmp	r3, #17
 800271a:	d107      	bne.n	800272c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f893 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002752:	d103      	bne.n	800275c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e079      	b.n	8002854 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002768:	d108      	bne.n	800277c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800276a:	897b      	ldrh	r3, [r7, #10]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	e05f      	b.n	800283c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800277c:	897b      	ldrh	r3, [r7, #10]
 800277e:	11db      	asrs	r3, r3, #7
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f003 0306 	and.w	r3, r3, #6
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f063 030f 	orn	r3, r3, #15
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4930      	ldr	r1, [pc, #192]	; (800285c <I2C_MasterRequestRead+0x194>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f8b9 	bl	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e054      	b.n	8002854 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027aa:	897b      	ldrh	r3, [r7, #10]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4929      	ldr	r1, [pc, #164]	; (8002860 <I2C_MasterRequestRead+0x198>)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f8a9 	bl	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e044      	b.n	8002854 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f831 	bl	8002864 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002816:	d103      	bne.n	8002820 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e017      	b.n	8002854 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002824:	897b      	ldrh	r3, [r7, #10]
 8002826:	11db      	asrs	r3, r3, #7
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f003 0306 	and.w	r3, r3, #6
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f063 030e 	orn	r3, r3, #14
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4907      	ldr	r1, [pc, #28]	; (8002860 <I2C_MasterRequestRead+0x198>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f865 	bl	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	00010008 	.word	0x00010008
 8002860:	00010002 	.word	0x00010002

08002864 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002874:	e025      	b.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800287c:	d021      	beq.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800287e:	f7fe fd73 	bl	8001368 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d302      	bcc.n	8002894 <I2C_WaitOnFlagUntilTimeout+0x30>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d116      	bne.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e023      	b.n	800290a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10d      	bne.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	e00c      	b.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4013      	ands	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	429a      	cmp	r2, r3
 8002906:	d0b6      	beq.n	8002876 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002920:	e051      	b.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002930:	d123      	bne.n	800297a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800294a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f043 0204 	orr.w	r2, r3, #4
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e046      	b.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002980:	d021      	beq.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7fe fcf1 	bl	8001368 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d116      	bne.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f043 0220 	orr.w	r2, r3, #32
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e020      	b.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d10c      	bne.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e00b      	b.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	43da      	mvns	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4013      	ands	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d18d      	bne.n	8002922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a1c:	e042      	b.n	8002aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d119      	bne.n	8002a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0210 	mvn.w	r2, #16
 8002a34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e029      	b.n	8002ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a60:	f7fe fc82 	bl	8001368 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d302      	bcc.n	8002a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d116      	bne.n	8002aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f043 0220 	orr.w	r2, r3, #32
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e007      	b.n	8002ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d1b5      	bne.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0cc      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d90c      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b65      	ldr	r3, [pc, #404]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b63      	ldr	r3, [pc, #396]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b8      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a58      	ldr	r2, [pc, #352]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b28:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	494d      	ldr	r1, [pc, #308]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d044      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d119      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e067      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4934      	ldr	r1, [pc, #208]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fe fbdc 	bl	8001368 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe fbd8 	bl	8001368 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e04f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d20c      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e032      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4916      	ldr	r1, [pc, #88]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	490e      	ldr	r1, [pc, #56]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c42:	f000 f855 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	490a      	ldr	r1, [pc, #40]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	5ccb      	ldrb	r3, [r1, r3]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fb3c 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023c00 	.word	0x40023c00
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	0800586c 	.word	0x0800586c
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000004 	.word	0x20000004

08002c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000000 	.word	0x20000000

08002ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ca4:	f7ff fff0 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0a9b      	lsrs	r3, r3, #10
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4903      	ldr	r1, [pc, #12]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	0800587c 	.word	0x0800587c

08002cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ccc:	f7ff ffdc 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	0b5b      	lsrs	r3, r3, #13
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4903      	ldr	r1, [pc, #12]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	0800587c 	.word	0x0800587c

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf4:	b0ae      	sub	sp, #184	; 0xb8
 8002cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d16:	4bcb      	ldr	r3, [pc, #812]	; (8003044 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	f200 8206 	bhi.w	8003130 <HAL_RCC_GetSysClockFreq+0x440>
 8002d24:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d61 	.word	0x08002d61
 8002d30:	08003131 	.word	0x08003131
 8002d34:	08003131 	.word	0x08003131
 8002d38:	08003131 	.word	0x08003131
 8002d3c:	08002d69 	.word	0x08002d69
 8002d40:	08003131 	.word	0x08003131
 8002d44:	08003131 	.word	0x08003131
 8002d48:	08003131 	.word	0x08003131
 8002d4c:	08002d71 	.word	0x08002d71
 8002d50:	08003131 	.word	0x08003131
 8002d54:	08003131 	.word	0x08003131
 8002d58:	08003131 	.word	0x08003131
 8002d5c:	08002f61 	.word	0x08002f61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4bb9      	ldr	r3, [pc, #740]	; (8003048 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d66:	e1e7      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d68:	4bb8      	ldr	r3, [pc, #736]	; (800304c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d6e:	e1e3      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d70:	4bb4      	ldr	r3, [pc, #720]	; (8003044 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7c:	4bb1      	ldr	r3, [pc, #708]	; (8003044 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d071      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d88:	4bae      	ldr	r3, [pc, #696]	; (8003044 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dae:	4622      	mov	r2, r4
 8002db0:	462b      	mov	r3, r5
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	0159      	lsls	r1, r3, #5
 8002dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc0:	0150      	lsls	r0, r2, #5
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	1a51      	subs	r1, r2, r1
 8002dca:	6439      	str	r1, [r7, #64]	; 0x40
 8002dcc:	4629      	mov	r1, r5
 8002dce:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002de0:	4649      	mov	r1, r9
 8002de2:	018b      	lsls	r3, r1, #6
 8002de4:	4641      	mov	r1, r8
 8002de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dea:	4641      	mov	r1, r8
 8002dec:	018a      	lsls	r2, r1, #6
 8002dee:	4641      	mov	r1, r8
 8002df0:	1a51      	subs	r1, r2, r1
 8002df2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002df4:	4649      	mov	r1, r9
 8002df6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e08:	4649      	mov	r1, r9
 8002e0a:	00cb      	lsls	r3, r1, #3
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e12:	4641      	mov	r1, r8
 8002e14:	00ca      	lsls	r2, r1, #3
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	189b      	adds	r3, r3, r2
 8002e20:	633b      	str	r3, [r7, #48]	; 0x30
 8002e22:	462b      	mov	r3, r5
 8002e24:	460a      	mov	r2, r1
 8002e26:	eb42 0303 	adc.w	r3, r2, r3
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e38:	4629      	mov	r1, r5
 8002e3a:	024b      	lsls	r3, r1, #9
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e42:	4621      	mov	r1, r4
 8002e44:	024a      	lsls	r2, r1, #9
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e5c:	f7fd fa28 	bl	80002b0 <__aeabi_uldivmod>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4613      	mov	r3, r2
 8002e66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e6a:	e067      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6c:	4b75      	ldr	r3, [pc, #468]	; (8003044 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e84:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e86:	2300      	movs	r3, #0
 8002e88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e8e:	4622      	mov	r2, r4
 8002e90:	462b      	mov	r3, r5
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f04f 0100 	mov.w	r1, #0
 8002e9a:	0159      	lsls	r1, r3, #5
 8002e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea0:	0150      	lsls	r0, r2, #5
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	1a51      	subs	r1, r2, r1
 8002eaa:	62b9      	str	r1, [r7, #40]	; 0x28
 8002eac:	4629      	mov	r1, r5
 8002eae:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ec0:	4649      	mov	r1, r9
 8002ec2:	018b      	lsls	r3, r1, #6
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eca:	4641      	mov	r1, r8
 8002ecc:	018a      	lsls	r2, r1, #6
 8002ece:	4641      	mov	r1, r8
 8002ed0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ee6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eee:	4692      	mov	sl, r2
 8002ef0:	469b      	mov	fp, r3
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	eb1a 0303 	adds.w	r3, sl, r3
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	462b      	mov	r3, r5
 8002efc:	eb4b 0303 	adc.w	r3, fp, r3
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f0e:	4629      	mov	r1, r5
 8002f10:	028b      	lsls	r3, r1, #10
 8002f12:	4621      	mov	r1, r4
 8002f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f18:	4621      	mov	r1, r4
 8002f1a:	028a      	lsls	r2, r1, #10
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f24:	2200      	movs	r2, #0
 8002f26:	673b      	str	r3, [r7, #112]	; 0x70
 8002f28:	677a      	str	r2, [r7, #116]	; 0x74
 8002f2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f2e:	f7fd f9bf 	bl	80002b0 <__aeabi_uldivmod>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4613      	mov	r3, r2
 8002f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f3c:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	3301      	adds	r3, #1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f5e:	e0eb      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f60:	4b38      	ldr	r3, [pc, #224]	; (8003044 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6c:	4b35      	ldr	r3, [pc, #212]	; (8003044 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d06b      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	2200      	movs	r2, #0
 8002f80:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f94:	4622      	mov	r2, r4
 8002f96:	462b      	mov	r3, r5
 8002f98:	f04f 0000 	mov.w	r0, #0
 8002f9c:	f04f 0100 	mov.w	r1, #0
 8002fa0:	0159      	lsls	r1, r3, #5
 8002fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa6:	0150      	lsls	r0, r2, #5
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4621      	mov	r1, r4
 8002fae:	1a51      	subs	r1, r2, r1
 8002fb0:	61b9      	str	r1, [r7, #24]
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fc6:	4659      	mov	r1, fp
 8002fc8:	018b      	lsls	r3, r1, #6
 8002fca:	4651      	mov	r1, sl
 8002fcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd0:	4651      	mov	r1, sl
 8002fd2:	018a      	lsls	r2, r1, #6
 8002fd4:	4651      	mov	r1, sl
 8002fd6:	ebb2 0801 	subs.w	r8, r2, r1
 8002fda:	4659      	mov	r1, fp
 8002fdc:	eb63 0901 	sbc.w	r9, r3, r1
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ff0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff4:	4690      	mov	r8, r2
 8002ff6:	4699      	mov	r9, r3
 8002ff8:	4623      	mov	r3, r4
 8002ffa:	eb18 0303 	adds.w	r3, r8, r3
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	462b      	mov	r3, r5
 8003002:	eb49 0303 	adc.w	r3, r9, r3
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003014:	4629      	mov	r1, r5
 8003016:	024b      	lsls	r3, r1, #9
 8003018:	4621      	mov	r1, r4
 800301a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800301e:	4621      	mov	r1, r4
 8003020:	024a      	lsls	r2, r1, #9
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800302a:	2200      	movs	r2, #0
 800302c:	65bb      	str	r3, [r7, #88]	; 0x58
 800302e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003030:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003034:	f7fd f93c 	bl	80002b0 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003042:	e065      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x420>
 8003044:	40023800 	.word	0x40023800
 8003048:	00f42400 	.word	0x00f42400
 800304c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003050:	4b3d      	ldr	r3, [pc, #244]	; (8003148 <HAL_RCC_GetSysClockFreq+0x458>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	099b      	lsrs	r3, r3, #6
 8003056:	2200      	movs	r2, #0
 8003058:	4618      	mov	r0, r3
 800305a:	4611      	mov	r1, r2
 800305c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003060:	653b      	str	r3, [r7, #80]	; 0x50
 8003062:	2300      	movs	r3, #0
 8003064:	657b      	str	r3, [r7, #84]	; 0x54
 8003066:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800306a:	4642      	mov	r2, r8
 800306c:	464b      	mov	r3, r9
 800306e:	f04f 0000 	mov.w	r0, #0
 8003072:	f04f 0100 	mov.w	r1, #0
 8003076:	0159      	lsls	r1, r3, #5
 8003078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307c:	0150      	lsls	r0, r2, #5
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4641      	mov	r1, r8
 8003084:	1a51      	subs	r1, r2, r1
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	4649      	mov	r1, r9
 800308a:	eb63 0301 	sbc.w	r3, r3, r1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800309c:	4659      	mov	r1, fp
 800309e:	018b      	lsls	r3, r1, #6
 80030a0:	4651      	mov	r1, sl
 80030a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030a6:	4651      	mov	r1, sl
 80030a8:	018a      	lsls	r2, r1, #6
 80030aa:	4651      	mov	r1, sl
 80030ac:	1a54      	subs	r4, r2, r1
 80030ae:	4659      	mov	r1, fp
 80030b0:	eb63 0501 	sbc.w	r5, r3, r1
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	00eb      	lsls	r3, r5, #3
 80030be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030c2:	00e2      	lsls	r2, r4, #3
 80030c4:	4614      	mov	r4, r2
 80030c6:	461d      	mov	r5, r3
 80030c8:	4643      	mov	r3, r8
 80030ca:	18e3      	adds	r3, r4, r3
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	464b      	mov	r3, r9
 80030d0:	eb45 0303 	adc.w	r3, r5, r3
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030e2:	4629      	mov	r1, r5
 80030e4:	028b      	lsls	r3, r1, #10
 80030e6:	4621      	mov	r1, r4
 80030e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030ec:	4621      	mov	r1, r4
 80030ee:	028a      	lsls	r2, r1, #10
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030f8:	2200      	movs	r2, #0
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80030fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003102:	f7fd f8d5 	bl	80002b0 <__aeabi_uldivmod>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4613      	mov	r3, r2
 800310c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_RCC_GetSysClockFreq+0x458>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	0f1b      	lsrs	r3, r3, #28
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800311e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800312e:	e003      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003136:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003138:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800313c:	4618      	mov	r0, r3
 800313e:	37b8      	adds	r7, #184	; 0xb8
 8003140:	46bd      	mov	sp, r7
 8003142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	00f42400 	.word	0x00f42400

08003150 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e28d      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8083 	beq.w	8003276 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003170:	4b94      	ldr	r3, [pc, #592]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b04      	cmp	r3, #4
 800317a:	d019      	beq.n	80031b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800317c:	4b91      	ldr	r3, [pc, #580]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003184:	2b08      	cmp	r3, #8
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003188:	4b8e      	ldr	r3, [pc, #568]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003194:	d00c      	beq.n	80031b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b8b      	ldr	r3, [pc, #556]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d112      	bne.n	80031c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a2:	4b88      	ldr	r3, [pc, #544]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	4b84      	ldr	r3, [pc, #528]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05b      	beq.n	8003274 <HAL_RCC_OscConfig+0x124>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d157      	bne.n	8003274 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e25a      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d0:	d106      	bne.n	80031e0 <HAL_RCC_OscConfig+0x90>
 80031d2:	4b7c      	ldr	r3, [pc, #496]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a7b      	ldr	r2, [pc, #492]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e01d      	b.n	800321c <HAL_RCC_OscConfig+0xcc>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0xb4>
 80031ea:	4b76      	ldr	r3, [pc, #472]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a75      	ldr	r2, [pc, #468]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80031f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b73      	ldr	r3, [pc, #460]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a72      	ldr	r2, [pc, #456]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0xcc>
 8003204:	4b6f      	ldr	r3, [pc, #444]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6e      	ldr	r2, [pc, #440]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 800320a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b6c      	ldr	r3, [pc, #432]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a6b      	ldr	r2, [pc, #428]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe f8a0 	bl	8001368 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe f89c 	bl	8001368 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e21f      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0xdc>
 800324a:	e014      	b.n	8003276 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe f88c 	bl	8001368 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003254:	f7fe f888 	bl	8001368 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e20b      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003266:	4b57      	ldr	r3, [pc, #348]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x104>
 8003272:	e000      	b.n	8003276 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d06f      	beq.n	8003362 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003282:	4b50      	ldr	r3, [pc, #320]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b00      	cmp	r3, #0
 800328c:	d017      	beq.n	80032be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328e:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003296:	2b08      	cmp	r3, #8
 8003298:	d105      	bne.n	80032a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800329a:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a6:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d11c      	bne.n	80032ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b2:	4b44      	ldr	r3, [pc, #272]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d116      	bne.n	80032ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_RCC_OscConfig+0x186>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e1d3      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d6:	4b3b      	ldr	r3, [pc, #236]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4937      	ldr	r1, [pc, #220]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	e03a      	b.n	8003362 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f4:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <HAL_RCC_OscConfig+0x278>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fe f835 	bl	8001368 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003302:	f7fe f831 	bl	8001368 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e1b4      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003314:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4925      	ldr	r1, [pc, #148]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
 8003334:	e015      	b.n	8003362 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003336:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0x278>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe f814 	bl	8001368 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003344:	f7fe f810 	bl	8001368 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e193      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d036      	beq.n	80033dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d016      	beq.n	80033a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fd fff4 	bl	8001368 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003384:	f7fd fff0 	bl	8001368 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e173      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_OscConfig+0x274>)
 8003398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x234>
 80033a2:	e01b      	b.n	80033dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_RCC_OscConfig+0x27c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fd ffdd 	bl	8001368 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b0:	e00e      	b.n	80033d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b2:	f7fd ffd9 	bl	8001368 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d907      	bls.n	80033d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e15c      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
 80033c4:	40023800 	.word	0x40023800
 80033c8:	42470000 	.word	0x42470000
 80033cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d0:	4b8a      	ldr	r3, [pc, #552]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 80033d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1ea      	bne.n	80033b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8097 	beq.w	8003518 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ea:	2300      	movs	r3, #0
 80033ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ee:	4b83      	ldr	r3, [pc, #524]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10f      	bne.n	800341a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a7e      	ldr	r2, [pc, #504]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	4b79      	ldr	r3, [pc, #484]	; (8003600 <HAL_RCC_OscConfig+0x4b0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d118      	bne.n	8003458 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003426:	4b76      	ldr	r3, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x4b0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a75      	ldr	r2, [pc, #468]	; (8003600 <HAL_RCC_OscConfig+0x4b0>)
 800342c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003432:	f7fd ff99 	bl	8001368 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343a:	f7fd ff95 	bl	8001368 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e118      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344c:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <HAL_RCC_OscConfig+0x4b0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d106      	bne.n	800346e <HAL_RCC_OscConfig+0x31e>
 8003460:	4b66      	ldr	r3, [pc, #408]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a65      	ldr	r2, [pc, #404]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
 800346c:	e01c      	b.n	80034a8 <HAL_RCC_OscConfig+0x358>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b05      	cmp	r3, #5
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x340>
 8003476:	4b61      	ldr	r3, [pc, #388]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a60      	ldr	r2, [pc, #384]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
 8003482:	4b5e      	ldr	r3, [pc, #376]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	4a5d      	ldr	r2, [pc, #372]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6713      	str	r3, [r2, #112]	; 0x70
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0x358>
 8003490:	4b5a      	ldr	r3, [pc, #360]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a59      	ldr	r2, [pc, #356]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
 800349c:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	4a56      	ldr	r2, [pc, #344]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 80034a2:	f023 0304 	bic.w	r3, r3, #4
 80034a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d015      	beq.n	80034dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fd ff5a 	bl	8001368 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fd ff56 	bl	8001368 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e0d7      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ce:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0ee      	beq.n	80034b8 <HAL_RCC_OscConfig+0x368>
 80034da:	e014      	b.n	8003506 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fd ff44 	bl	8001368 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fd ff40 	bl	8001368 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0c1      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fa:	4b40      	ldr	r3, [pc, #256]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ee      	bne.n	80034e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350c:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	4a3a      	ldr	r2, [pc, #232]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80ad 	beq.w	800367c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003522:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b08      	cmp	r3, #8
 800352c:	d060      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d145      	bne.n	80035c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCC_OscConfig+0x4b4>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd ff14 	bl	8001368 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003544:	f7fd ff10 	bl	8001368 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e093      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	019b      	lsls	r3, r3, #6
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	3b01      	subs	r3, #1
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	071b      	lsls	r3, r3, #28
 800358e:	491b      	ldr	r1, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x4b4>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fd fee5 	bl	8001368 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fd fee1 	bl	8001368 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e064      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x452>
 80035c0:	e05c      	b.n	800367c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_RCC_OscConfig+0x4b4>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fd fece 	bl	8001368 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fd feca 	bl	8001368 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e04d      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x480>
 80035ee:	e045      	b.n	800367c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e040      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000
 8003604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003608:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_RCC_OscConfig+0x538>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d030      	beq.n	8003678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d129      	bne.n	8003678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d122      	bne.n	8003678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003640:	4293      	cmp	r3, r2
 8003642:	d119      	bne.n	8003678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	3b01      	subs	r3, #1
 8003652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d10f      	bne.n	8003678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800

0800368c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e041      	b.n	8003722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fc68 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 fca8 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d001      	beq.n	8003744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e04e      	b.n	80037e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a23      	ldr	r2, [pc, #140]	; (80037f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d022      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d01d      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d018      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d013      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_TIM_Base_Start_IT+0xd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00e      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <HAL_TIM_Base_Start_IT+0xd4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a19      	ldr	r2, [pc, #100]	; (8003804 <HAL_TIM_Base_Start_IT+0xd8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_TIM_Base_Start_IT+0xdc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d111      	bne.n	80037d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d010      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ce:	e007      	b.n	80037e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800
 80037fc:	40000c00 	.word	0x40000c00
 8003800:	40010400 	.word	0x40010400
 8003804:	40014000 	.word	0x40014000
 8003808:	40001800 	.word	0x40001800

0800380c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6a1a      	ldr	r2, [r3, #32]
 800382a:	f241 1311 	movw	r3, #4369	; 0x1111
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <HAL_TIM_Base_Stop_IT+0x48>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a1a      	ldr	r2, [r3, #32]
 800383a:	f240 4344 	movw	r3, #1092	; 0x444
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d107      	bne.n	8003854 <HAL_TIM_Base_Stop_IT+0x48>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e041      	b.n	8003900 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f839 	bl	8003908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f000 fbb9 	bl	8004020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_TIM_PWM_Start+0x24>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e022      	b.n	8003986 <HAL_TIM_PWM_Start+0x6a>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d109      	bne.n	800395a <HAL_TIM_PWM_Start+0x3e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	bf14      	ite	ne
 8003952:	2301      	movne	r3, #1
 8003954:	2300      	moveq	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e015      	b.n	8003986 <HAL_TIM_PWM_Start+0x6a>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d109      	bne.n	8003974 <HAL_TIM_PWM_Start+0x58>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e008      	b.n	8003986 <HAL_TIM_PWM_Start+0x6a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e07c      	b.n	8003a88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <HAL_TIM_PWM_Start+0x82>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800399c:	e013      	b.n	80039c6 <HAL_TIM_PWM_Start+0xaa>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start+0x92>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ac:	e00b      	b.n	80039c6 <HAL_TIM_PWM_Start+0xaa>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Start+0xa2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	e003      	b.n	80039c6 <HAL_TIM_PWM_Start+0xaa>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2201      	movs	r2, #1
 80039cc:	6839      	ldr	r1, [r7, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fe10 	bl	80045f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2d      	ldr	r2, [pc, #180]	; (8003a90 <HAL_TIM_PWM_Start+0x174>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_TIM_PWM_Start+0xcc>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <HAL_TIM_PWM_Start+0x178>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_TIM_PWM_Start+0xd0>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_TIM_PWM_Start+0xd2>
 80039ec:	2300      	movs	r3, #0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_TIM_PWM_Start+0x174>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x136>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a14:	d01d      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x136>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_TIM_PWM_Start+0x17c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x136>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <HAL_TIM_PWM_Start+0x180>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x136>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_TIM_PWM_Start+0x184>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x136>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_TIM_PWM_Start+0x178>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x136>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_TIM_PWM_Start+0x188>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x136>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_TIM_PWM_Start+0x18c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d111      	bne.n	8003a76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b06      	cmp	r3, #6
 8003a62:	d010      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	e007      	b.n	8003a86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40010400 	.word	0x40010400
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40001800 	.word	0x40001800

08003aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0202 	mvn.w	r2, #2
 8003ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa77 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa69 	bl	8003fce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa7a 	bl	8003ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0204 	mvn.w	r2, #4
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa4d 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa3f 	bl	8003fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fa50 	bl	8003ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa23 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa15 	bl	8003fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa26 	bl	8003ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0210 	mvn.w	r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9f9 	bl	8003fe2 <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9eb 	bl	8003fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9fc 	bl	8003ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0201 	mvn.w	r2, #1
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd f8c4 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fd78 	bl	800474c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9c1 	bl	800400a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0220 	mvn.w	r2, #32
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fd42 	bl	8004738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e0ae      	b.n	8003e38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	f200 809f 	bhi.w	8003e28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003e29 	.word	0x08003e29
 8003cf8:	08003e29 	.word	0x08003e29
 8003cfc:	08003e29 	.word	0x08003e29
 8003d00:	08003d65 	.word	0x08003d65
 8003d04:	08003e29 	.word	0x08003e29
 8003d08:	08003e29 	.word	0x08003e29
 8003d0c:	08003e29 	.word	0x08003e29
 8003d10:	08003da7 	.word	0x08003da7
 8003d14:	08003e29 	.word	0x08003e29
 8003d18:	08003e29 	.word	0x08003e29
 8003d1c:	08003e29 	.word	0x08003e29
 8003d20:	08003de7 	.word	0x08003de7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fa18 	bl	8004160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0208 	orr.w	r2, r2, #8
 8003d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6999      	ldr	r1, [r3, #24]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	619a      	str	r2, [r3, #24]
      break;
 8003d62:	e064      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fa68 	bl	8004240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6999      	ldr	r1, [r3, #24]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	021a      	lsls	r2, r3, #8
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	619a      	str	r2, [r3, #24]
      break;
 8003da4:	e043      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fabd 	bl	800432c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0208 	orr.w	r2, r2, #8
 8003dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0204 	bic.w	r2, r2, #4
 8003dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69d9      	ldr	r1, [r3, #28]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	61da      	str	r2, [r3, #28]
      break;
 8003de4:	e023      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fb11 	bl	8004414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69d9      	ldr	r1, [r3, #28]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	021a      	lsls	r2, r3, #8
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	61da      	str	r2, [r3, #28]
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_ConfigClockSource+0x1c>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0b4      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x186>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d03e      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0xd4>
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9a:	f200 8087 	bhi.w	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	f000 8086 	beq.w	8003fb2 <HAL_TIM_ConfigClockSource+0x172>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eaa:	d87f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b70      	cmp	r3, #112	; 0x70
 8003eae:	d01a      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xa6>
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d87b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b60      	cmp	r3, #96	; 0x60
 8003eb6:	d050      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x11a>
 8003eb8:	2b60      	cmp	r3, #96	; 0x60
 8003eba:	d877      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b50      	cmp	r3, #80	; 0x50
 8003ebe:	d03c      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xfa>
 8003ec0:	2b50      	cmp	r3, #80	; 0x50
 8003ec2:	d873      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d058      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x13a>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d86f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ecc:	2b30      	cmp	r3, #48	; 0x30
 8003ece:	d064      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d86b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d060      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d867      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d05a      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	e062      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f000 fb5d 	bl	80045b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	609a      	str	r2, [r3, #8]
      break;
 8003f12:	e04f      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6899      	ldr	r1, [r3, #8]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f000 fb46 	bl	80045b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f36:	609a      	str	r2, [r3, #8]
      break;
 8003f38:	e03c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 faba 	bl	80044c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2150      	movs	r1, #80	; 0x50
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fb13 	bl	800457e <TIM_ITRx_SetConfig>
      break;
 8003f58:	e02c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 fad9 	bl	800451e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2160      	movs	r1, #96	; 0x60
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fb03 	bl	800457e <TIM_ITRx_SetConfig>
      break;
 8003f78:	e01c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f000 fa9a 	bl	80044c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2140      	movs	r1, #64	; 0x40
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 faf3 	bl	800457e <TIM_ITRx_SetConfig>
      break;
 8003f98:	e00c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f000 faea 	bl	800457e <TIM_ITRx_SetConfig>
      break;
 8003faa:	e003      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a40      	ldr	r2, [pc, #256]	; (8004134 <TIM_Base_SetConfig+0x114>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d00f      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3d      	ldr	r2, [pc, #244]	; (8004138 <TIM_Base_SetConfig+0x118>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3c      	ldr	r2, [pc, #240]	; (800413c <TIM_Base_SetConfig+0x11c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3b      	ldr	r2, [pc, #236]	; (8004140 <TIM_Base_SetConfig+0x120>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3a      	ldr	r2, [pc, #232]	; (8004144 <TIM_Base_SetConfig+0x124>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d108      	bne.n	8004072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2f      	ldr	r2, [pc, #188]	; (8004134 <TIM_Base_SetConfig+0x114>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d02b      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004080:	d027      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2c      	ldr	r2, [pc, #176]	; (8004138 <TIM_Base_SetConfig+0x118>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d023      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2b      	ldr	r2, [pc, #172]	; (800413c <TIM_Base_SetConfig+0x11c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01f      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a2a      	ldr	r2, [pc, #168]	; (8004140 <TIM_Base_SetConfig+0x120>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01b      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a29      	ldr	r2, [pc, #164]	; (8004144 <TIM_Base_SetConfig+0x124>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d017      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a28      	ldr	r2, [pc, #160]	; (8004148 <TIM_Base_SetConfig+0x128>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a27      	ldr	r2, [pc, #156]	; (800414c <TIM_Base_SetConfig+0x12c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00f      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a26      	ldr	r2, [pc, #152]	; (8004150 <TIM_Base_SetConfig+0x130>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00b      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a25      	ldr	r2, [pc, #148]	; (8004154 <TIM_Base_SetConfig+0x134>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d007      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a24      	ldr	r2, [pc, #144]	; (8004158 <TIM_Base_SetConfig+0x138>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a23      	ldr	r2, [pc, #140]	; (800415c <TIM_Base_SetConfig+0x13c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d108      	bne.n	80040e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <TIM_Base_SetConfig+0x114>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_Base_SetConfig+0xf8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <TIM_Base_SetConfig+0x124>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d103      	bne.n	8004120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	615a      	str	r2, [r3, #20]
}
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40010000 	.word	0x40010000
 8004138:	40000400 	.word	0x40000400
 800413c:	40000800 	.word	0x40000800
 8004140:	40000c00 	.word	0x40000c00
 8004144:	40010400 	.word	0x40010400
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800
 8004154:	40001800 	.word	0x40001800
 8004158:	40001c00 	.word	0x40001c00
 800415c:	40002000 	.word	0x40002000

08004160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0201 	bic.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 0302 	bic.w	r3, r3, #2
 80041a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a20      	ldr	r2, [pc, #128]	; (8004238 <TIM_OC1_SetConfig+0xd8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_OC1_SetConfig+0x64>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <TIM_OC1_SetConfig+0xdc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10c      	bne.n	80041de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0308 	bic.w	r3, r3, #8
 80041ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <TIM_OC1_SetConfig+0xd8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_OC1_SetConfig+0x8e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a14      	ldr	r2, [pc, #80]	; (800423c <TIM_OC1_SetConfig+0xdc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d111      	bne.n	8004212 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	621a      	str	r2, [r3, #32]
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40010000 	.word	0x40010000
 800423c:	40010400 	.word	0x40010400

08004240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f023 0210 	bic.w	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0320 	bic.w	r3, r3, #32
 800428a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a22      	ldr	r2, [pc, #136]	; (8004324 <TIM_OC2_SetConfig+0xe4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC2_SetConfig+0x68>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <TIM_OC2_SetConfig+0xe8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d10d      	bne.n	80042c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a17      	ldr	r2, [pc, #92]	; (8004324 <TIM_OC2_SetConfig+0xe4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_OC2_SetConfig+0x94>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a16      	ldr	r2, [pc, #88]	; (8004328 <TIM_OC2_SetConfig+0xe8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d113      	bne.n	80042fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40010400 	.word	0x40010400

0800432c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a21      	ldr	r2, [pc, #132]	; (800440c <TIM_OC3_SetConfig+0xe0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC3_SetConfig+0x66>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a20      	ldr	r2, [pc, #128]	; (8004410 <TIM_OC3_SetConfig+0xe4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d10d      	bne.n	80043ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a16      	ldr	r2, [pc, #88]	; (800440c <TIM_OC3_SetConfig+0xe0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_OC3_SetConfig+0x92>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a15      	ldr	r2, [pc, #84]	; (8004410 <TIM_OC3_SetConfig+0xe4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d113      	bne.n	80043e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	621a      	str	r2, [r3, #32]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40010000 	.word	0x40010000
 8004410:	40010400 	.word	0x40010400

08004414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800445e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	031b      	lsls	r3, r3, #12
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <TIM_OC4_SetConfig+0xa4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_OC4_SetConfig+0x68>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a11      	ldr	r2, [pc, #68]	; (80044bc <TIM_OC4_SetConfig+0xa8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d109      	bne.n	8004490 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	019b      	lsls	r3, r3, #6
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40010400 	.word	0x40010400

080044c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0201 	bic.w	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 030a 	bic.w	r3, r3, #10
 80044fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451e:	b480      	push	{r7}
 8004520:	b087      	sub	sp, #28
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 0210 	bic.w	r2, r3, #16
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800455a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	f043 0307 	orr.w	r3, r3, #7
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	609a      	str	r2, [r3, #8]
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	2201      	movs	r2, #1
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1a      	ldr	r2, [r3, #32]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	43db      	mvns	r3, r3
 8004616:	401a      	ands	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	431a      	orrs	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004654:	2302      	movs	r3, #2
 8004656:	e05a      	b.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a21      	ldr	r2, [pc, #132]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a4:	d01d      	beq.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1a      	ldr	r2, [pc, #104]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a18      	ldr	r2, [pc, #96]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a17      	ldr	r2, [pc, #92]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a15      	ldr	r2, [pc, #84]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10c      	bne.n	80046fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40010400 	.word	0x40010400
 8004730:	40014000 	.word	0x40014000
 8004734:	40001800 	.word	0x40001800

08004738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e03f      	b.n	80047f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fc fc90 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	; 0x24
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f929 	bl	80049fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b08a      	sub	sp, #40	; 0x28
 80047fe:	af02      	add	r7, sp, #8
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b20      	cmp	r3, #32
 8004818:	d17c      	bne.n	8004914 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_UART_Transmit+0x2c>
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e075      	b.n	8004916 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_UART_Transmit+0x3e>
 8004834:	2302      	movs	r3, #2
 8004836:	e06e      	b.n	8004916 <HAL_UART_Transmit+0x11c>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2221      	movs	r2, #33	; 0x21
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800484e:	f7fc fd8b 	bl	8001368 <HAL_GetTick>
 8004852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	88fa      	ldrh	r2, [r7, #6]
 800485e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004868:	d108      	bne.n	800487c <HAL_UART_Transmit+0x82>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d104      	bne.n	800487c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	e003      	b.n	8004884 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004880:	2300      	movs	r3, #0
 8004882:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800488c:	e02a      	b.n	80048e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2200      	movs	r2, #0
 8004896:	2180      	movs	r1, #128	; 0x80
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f840 	bl	800491e <UART_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e036      	b.n	8004916 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	3302      	adds	r3, #2
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	e007      	b.n	80048d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	781a      	ldrb	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	3301      	adds	r3, #1
 80048d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1cf      	bne.n	800488e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2140      	movs	r1, #64	; 0x40
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f810 	bl	800491e <UART_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e006      	b.n	8004916 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	e000      	b.n	8004916 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
  }
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b090      	sub	sp, #64	; 0x40
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	603b      	str	r3, [r7, #0]
 800492a:	4613      	mov	r3, r2
 800492c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492e:	e050      	b.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004936:	d04c      	beq.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <UART_WaitOnFlagUntilTimeout+0x30>
 800493e:	f7fc fd13 	bl	8001368 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494a:	429a      	cmp	r2, r3
 800494c:	d241      	bcs.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800496e:	637a      	str	r2, [r7, #52]	; 0x34
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e5      	bne.n	800494e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3314      	adds	r3, #20
 8004988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	613b      	str	r3, [r7, #16]
   return(result);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3314      	adds	r3, #20
 80049a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a2:	623a      	str	r2, [r7, #32]
 80049a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	69f9      	ldr	r1, [r7, #28]
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e5      	bne.n	8004982 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e00f      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4013      	ands	r3, r2
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	bf0c      	ite	eq
 80049e2:	2301      	moveq	r3, #1
 80049e4:	2300      	movne	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	461a      	mov	r2, r3
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d09f      	beq.n	8004930 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3740      	adds	r7, #64	; 0x40
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a00:	b0c0      	sub	sp, #256	; 0x100
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	68d9      	ldr	r1, [r3, #12]
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	ea40 0301 	orr.w	r3, r0, r1
 8004a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a54:	f021 010c 	bic.w	r1, r1, #12
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a62:	430b      	orrs	r3, r1
 8004a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a76:	6999      	ldr	r1, [r3, #24]
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	ea40 0301 	orr.w	r3, r0, r1
 8004a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b8f      	ldr	r3, [pc, #572]	; (8004cc8 <UART_SetConfig+0x2cc>)
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d005      	beq.n	8004a9c <UART_SetConfig+0xa0>
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b8d      	ldr	r3, [pc, #564]	; (8004ccc <UART_SetConfig+0x2d0>)
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d104      	bne.n	8004aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a9c:	f7fe f914 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 8004aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004aa4:	e003      	b.n	8004aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aa6:	f7fe f8fb 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8004aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab8:	f040 810c 	bne.w	8004cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ace:	4622      	mov	r2, r4
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	1891      	adds	r1, r2, r2
 8004ad4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ad6:	415b      	adcs	r3, r3
 8004ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ade:	4621      	mov	r1, r4
 8004ae0:	eb12 0801 	adds.w	r8, r2, r1
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	eb43 0901 	adc.w	r9, r3, r1
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004afe:	4690      	mov	r8, r2
 8004b00:	4699      	mov	r9, r3
 8004b02:	4623      	mov	r3, r4
 8004b04:	eb18 0303 	adds.w	r3, r8, r3
 8004b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	eb49 0303 	adc.w	r3, r9, r3
 8004b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	18db      	adds	r3, r3, r3
 8004b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b30:	4613      	mov	r3, r2
 8004b32:	eb42 0303 	adc.w	r3, r2, r3
 8004b36:	657b      	str	r3, [r7, #84]	; 0x54
 8004b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b40:	f7fb fbb6 	bl	80002b0 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4b61      	ldr	r3, [pc, #388]	; (8004cd0 <UART_SetConfig+0x2d4>)
 8004b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	011c      	lsls	r4, r3, #4
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b74:	4641      	mov	r1, r8
 8004b76:	eb12 0a01 	adds.w	sl, r2, r1
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b94:	4692      	mov	sl, r2
 8004b96:	469b      	mov	fp, r3
 8004b98:	4643      	mov	r3, r8
 8004b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	18db      	adds	r3, r3, r3
 8004bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	eb42 0303 	adc.w	r3, r2, r3
 8004bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bd6:	f7fb fb6b 	bl	80002b0 <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	4b3b      	ldr	r3, [pc, #236]	; (8004cd0 <UART_SetConfig+0x2d4>)
 8004be2:	fba3 2301 	umull	r2, r3, r3, r1
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	2264      	movs	r2, #100	; 0x64
 8004bea:	fb02 f303 	mul.w	r3, r2, r3
 8004bee:	1acb      	subs	r3, r1, r3
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bf6:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <UART_SetConfig+0x2d4>)
 8004bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c04:	441c      	add	r4, r3
 8004c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	1891      	adds	r1, r2, r2
 8004c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c20:	415b      	adcs	r3, r3
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c28:	4641      	mov	r1, r8
 8004c2a:	1851      	adds	r1, r2, r1
 8004c2c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c2e:	4649      	mov	r1, r9
 8004c30:	414b      	adcs	r3, r1
 8004c32:	637b      	str	r3, [r7, #52]	; 0x34
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c40:	4659      	mov	r1, fp
 8004c42:	00cb      	lsls	r3, r1, #3
 8004c44:	4651      	mov	r1, sl
 8004c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	00ca      	lsls	r2, r1, #3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	4642      	mov	r2, r8
 8004c56:	189b      	adds	r3, r3, r2
 8004c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	460a      	mov	r2, r1
 8004c60:	eb42 0303 	adc.w	r3, r2, r3
 8004c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	18db      	adds	r3, r3, r3
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c82:	4613      	mov	r3, r2
 8004c84:	eb42 0303 	adc.w	r3, r2, r3
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c92:	f7fb fb0d 	bl	80002b0 <__aeabi_uldivmod>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <UART_SetConfig+0x2d4>)
 8004c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	2164      	movs	r1, #100	; 0x64
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	3332      	adds	r3, #50	; 0x32
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <UART_SetConfig+0x2d4>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	f003 0207 	and.w	r2, r3, #7
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4422      	add	r2, r4
 8004cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cc4:	e105      	b.n	8004ed2 <UART_SetConfig+0x4d6>
 8004cc6:	bf00      	nop
 8004cc8:	40011000 	.word	0x40011000
 8004ccc:	40011400 	.word	0x40011400
 8004cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	464b      	mov	r3, r9
 8004cea:	1891      	adds	r1, r2, r2
 8004cec:	6239      	str	r1, [r7, #32]
 8004cee:	415b      	adcs	r3, r3
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	1854      	adds	r4, r2, r1
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	eb43 0501 	adc.w	r5, r3, r1
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	00eb      	lsls	r3, r5, #3
 8004d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0e:	00e2      	lsls	r2, r4, #3
 8004d10:	4614      	mov	r4, r2
 8004d12:	461d      	mov	r5, r3
 8004d14:	4643      	mov	r3, r8
 8004d16:	18e3      	adds	r3, r4, r3
 8004d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	eb45 0303 	adc.w	r3, r5, r3
 8004d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d42:	4629      	mov	r1, r5
 8004d44:	008b      	lsls	r3, r1, #2
 8004d46:	4621      	mov	r1, r4
 8004d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	008a      	lsls	r2, r1, #2
 8004d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d54:	f7fb faac 	bl	80002b0 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4b60      	ldr	r3, [pc, #384]	; (8004ee0 <UART_SetConfig+0x4e4>)
 8004d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	011c      	lsls	r4, r3, #4
 8004d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	1891      	adds	r1, r2, r2
 8004d7e:	61b9      	str	r1, [r7, #24]
 8004d80:	415b      	adcs	r3, r3
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d88:	4641      	mov	r1, r8
 8004d8a:	1851      	adds	r1, r2, r1
 8004d8c:	6139      	str	r1, [r7, #16]
 8004d8e:	4649      	mov	r1, r9
 8004d90:	414b      	adcs	r3, r1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da0:	4659      	mov	r1, fp
 8004da2:	00cb      	lsls	r3, r1, #3
 8004da4:	4651      	mov	r1, sl
 8004da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004daa:	4651      	mov	r1, sl
 8004dac:	00ca      	lsls	r2, r1, #3
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	4603      	mov	r3, r0
 8004db4:	4642      	mov	r2, r8
 8004db6:	189b      	adds	r3, r3, r2
 8004db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	460a      	mov	r2, r1
 8004dc0:	eb42 0303 	adc.w	r3, r2, r3
 8004dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004de0:	4649      	mov	r1, r9
 8004de2:	008b      	lsls	r3, r1, #2
 8004de4:	4641      	mov	r1, r8
 8004de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dea:	4641      	mov	r1, r8
 8004dec:	008a      	lsls	r2, r1, #2
 8004dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004df2:	f7fb fa5d 	bl	80002b0 <__aeabi_uldivmod>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <UART_SetConfig+0x4e4>)
 8004dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	2164      	movs	r1, #100	; 0x64
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	3332      	adds	r3, #50	; 0x32
 8004e0e:	4a34      	ldr	r2, [pc, #208]	; (8004ee0 <UART_SetConfig+0x4e4>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e1a:	441c      	add	r4, r3
 8004e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e20:	2200      	movs	r2, #0
 8004e22:	673b      	str	r3, [r7, #112]	; 0x70
 8004e24:	677a      	str	r2, [r7, #116]	; 0x74
 8004e26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	1891      	adds	r1, r2, r2
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	415b      	adcs	r3, r3
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	1851      	adds	r1, r2, r1
 8004e3e:	6039      	str	r1, [r7, #0]
 8004e40:	4649      	mov	r1, r9
 8004e42:	414b      	adcs	r3, r1
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e52:	4659      	mov	r1, fp
 8004e54:	00cb      	lsls	r3, r1, #3
 8004e56:	4651      	mov	r1, sl
 8004e58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5c:	4651      	mov	r1, sl
 8004e5e:	00ca      	lsls	r2, r1, #3
 8004e60:	4610      	mov	r0, r2
 8004e62:	4619      	mov	r1, r3
 8004e64:	4603      	mov	r3, r0
 8004e66:	4642      	mov	r2, r8
 8004e68:	189b      	adds	r3, r3, r2
 8004e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	460a      	mov	r2, r1
 8004e70:	eb42 0303 	adc.w	r3, r2, r3
 8004e74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e80:	667a      	str	r2, [r7, #100]	; 0x64
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e8e:	4649      	mov	r1, r9
 8004e90:	008b      	lsls	r3, r1, #2
 8004e92:	4641      	mov	r1, r8
 8004e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e98:	4641      	mov	r1, r8
 8004e9a:	008a      	lsls	r2, r1, #2
 8004e9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ea0:	f7fb fa06 	bl	80002b0 <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <UART_SetConfig+0x4e4>)
 8004eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2164      	movs	r1, #100	; 0x64
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	3332      	adds	r3, #50	; 0x32
 8004ebc:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <UART_SetConfig+0x4e4>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	f003 020f 	and.w	r2, r3, #15
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4422      	add	r2, r4
 8004ed0:	609a      	str	r2, [r3, #8]
}
 8004ed2:	bf00      	nop
 8004ed4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ede:	bf00      	nop
 8004ee0:	51eb851f 	.word	0x51eb851f

08004ee4 <__errno>:
 8004ee4:	4b01      	ldr	r3, [pc, #4]	; (8004eec <__errno+0x8>)
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	2000000c 	.word	0x2000000c

08004ef0 <__libc_init_array>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	4d0d      	ldr	r5, [pc, #52]	; (8004f28 <__libc_init_array+0x38>)
 8004ef4:	4c0d      	ldr	r4, [pc, #52]	; (8004f2c <__libc_init_array+0x3c>)
 8004ef6:	1b64      	subs	r4, r4, r5
 8004ef8:	10a4      	asrs	r4, r4, #2
 8004efa:	2600      	movs	r6, #0
 8004efc:	42a6      	cmp	r6, r4
 8004efe:	d109      	bne.n	8004f14 <__libc_init_array+0x24>
 8004f00:	4d0b      	ldr	r5, [pc, #44]	; (8004f30 <__libc_init_array+0x40>)
 8004f02:	4c0c      	ldr	r4, [pc, #48]	; (8004f34 <__libc_init_array+0x44>)
 8004f04:	f000 fc8e 	bl	8005824 <_init>
 8004f08:	1b64      	subs	r4, r4, r5
 8004f0a:	10a4      	asrs	r4, r4, #2
 8004f0c:	2600      	movs	r6, #0
 8004f0e:	42a6      	cmp	r6, r4
 8004f10:	d105      	bne.n	8004f1e <__libc_init_array+0x2e>
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
 8004f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f18:	4798      	blx	r3
 8004f1a:	3601      	adds	r6, #1
 8004f1c:	e7ee      	b.n	8004efc <__libc_init_array+0xc>
 8004f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f22:	4798      	blx	r3
 8004f24:	3601      	adds	r6, #1
 8004f26:	e7f2      	b.n	8004f0e <__libc_init_array+0x1e>
 8004f28:	080058c0 	.word	0x080058c0
 8004f2c:	080058c0 	.word	0x080058c0
 8004f30:	080058c0 	.word	0x080058c0
 8004f34:	080058c4 	.word	0x080058c4

08004f38 <memcpy>:
 8004f38:	440a      	add	r2, r1
 8004f3a:	4291      	cmp	r1, r2
 8004f3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f40:	d100      	bne.n	8004f44 <memcpy+0xc>
 8004f42:	4770      	bx	lr
 8004f44:	b510      	push	{r4, lr}
 8004f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f4e:	4291      	cmp	r1, r2
 8004f50:	d1f9      	bne.n	8004f46 <memcpy+0xe>
 8004f52:	bd10      	pop	{r4, pc}

08004f54 <memset>:
 8004f54:	4402      	add	r2, r0
 8004f56:	4603      	mov	r3, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memset+0xa>
 8004f5c:	4770      	bx	lr
 8004f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f62:	e7f9      	b.n	8004f58 <memset+0x4>

08004f64 <siprintf>:
 8004f64:	b40e      	push	{r1, r2, r3}
 8004f66:	b500      	push	{lr}
 8004f68:	b09c      	sub	sp, #112	; 0x70
 8004f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f6c:	9002      	str	r0, [sp, #8]
 8004f6e:	9006      	str	r0, [sp, #24]
 8004f70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f74:	4809      	ldr	r0, [pc, #36]	; (8004f9c <siprintf+0x38>)
 8004f76:	9107      	str	r1, [sp, #28]
 8004f78:	9104      	str	r1, [sp, #16]
 8004f7a:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <siprintf+0x3c>)
 8004f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f80:	9105      	str	r1, [sp, #20]
 8004f82:	6800      	ldr	r0, [r0, #0]
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	a902      	add	r1, sp, #8
 8004f88:	f000 f868 	bl	800505c <_svfiprintf_r>
 8004f8c:	9b02      	ldr	r3, [sp, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	b01c      	add	sp, #112	; 0x70
 8004f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f98:	b003      	add	sp, #12
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	ffff0208 	.word	0xffff0208

08004fa4 <__ssputs_r>:
 8004fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa8:	688e      	ldr	r6, [r1, #8]
 8004faa:	429e      	cmp	r6, r3
 8004fac:	4682      	mov	sl, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4690      	mov	r8, r2
 8004fb2:	461f      	mov	r7, r3
 8004fb4:	d838      	bhi.n	8005028 <__ssputs_r+0x84>
 8004fb6:	898a      	ldrh	r2, [r1, #12]
 8004fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fbc:	d032      	beq.n	8005024 <__ssputs_r+0x80>
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	6909      	ldr	r1, [r1, #16]
 8004fc2:	eba5 0901 	sub.w	r9, r5, r1
 8004fc6:	6965      	ldr	r5, [r4, #20]
 8004fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	444b      	add	r3, r9
 8004fd4:	106d      	asrs	r5, r5, #1
 8004fd6:	429d      	cmp	r5, r3
 8004fd8:	bf38      	it	cc
 8004fda:	461d      	movcc	r5, r3
 8004fdc:	0553      	lsls	r3, r2, #21
 8004fde:	d531      	bpl.n	8005044 <__ssputs_r+0xa0>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	f000 fb55 	bl	8005690 <_malloc_r>
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	b950      	cbnz	r0, 8005000 <__ssputs_r+0x5c>
 8004fea:	230c      	movs	r3, #12
 8004fec:	f8ca 3000 	str.w	r3, [sl]
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff6:	81a3      	strh	r3, [r4, #12]
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005000:	6921      	ldr	r1, [r4, #16]
 8005002:	464a      	mov	r2, r9
 8005004:	f7ff ff98 	bl	8004f38 <memcpy>
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800500e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005012:	81a3      	strh	r3, [r4, #12]
 8005014:	6126      	str	r6, [r4, #16]
 8005016:	6165      	str	r5, [r4, #20]
 8005018:	444e      	add	r6, r9
 800501a:	eba5 0509 	sub.w	r5, r5, r9
 800501e:	6026      	str	r6, [r4, #0]
 8005020:	60a5      	str	r5, [r4, #8]
 8005022:	463e      	mov	r6, r7
 8005024:	42be      	cmp	r6, r7
 8005026:	d900      	bls.n	800502a <__ssputs_r+0x86>
 8005028:	463e      	mov	r6, r7
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	4632      	mov	r2, r6
 800502e:	4641      	mov	r1, r8
 8005030:	f000 faa8 	bl	8005584 <memmove>
 8005034:	68a3      	ldr	r3, [r4, #8]
 8005036:	1b9b      	subs	r3, r3, r6
 8005038:	60a3      	str	r3, [r4, #8]
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	4433      	add	r3, r6
 800503e:	6023      	str	r3, [r4, #0]
 8005040:	2000      	movs	r0, #0
 8005042:	e7db      	b.n	8004ffc <__ssputs_r+0x58>
 8005044:	462a      	mov	r2, r5
 8005046:	f000 fb97 	bl	8005778 <_realloc_r>
 800504a:	4606      	mov	r6, r0
 800504c:	2800      	cmp	r0, #0
 800504e:	d1e1      	bne.n	8005014 <__ssputs_r+0x70>
 8005050:	6921      	ldr	r1, [r4, #16]
 8005052:	4650      	mov	r0, sl
 8005054:	f000 fab0 	bl	80055b8 <_free_r>
 8005058:	e7c7      	b.n	8004fea <__ssputs_r+0x46>
	...

0800505c <_svfiprintf_r>:
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	4698      	mov	r8, r3
 8005062:	898b      	ldrh	r3, [r1, #12]
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	b09d      	sub	sp, #116	; 0x74
 8005068:	4607      	mov	r7, r0
 800506a:	460d      	mov	r5, r1
 800506c:	4614      	mov	r4, r2
 800506e:	d50e      	bpl.n	800508e <_svfiprintf_r+0x32>
 8005070:	690b      	ldr	r3, [r1, #16]
 8005072:	b963      	cbnz	r3, 800508e <_svfiprintf_r+0x32>
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	f000 fb0b 	bl	8005690 <_malloc_r>
 800507a:	6028      	str	r0, [r5, #0]
 800507c:	6128      	str	r0, [r5, #16]
 800507e:	b920      	cbnz	r0, 800508a <_svfiprintf_r+0x2e>
 8005080:	230c      	movs	r3, #12
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005088:	e0d1      	b.n	800522e <_svfiprintf_r+0x1d2>
 800508a:	2340      	movs	r3, #64	; 0x40
 800508c:	616b      	str	r3, [r5, #20]
 800508e:	2300      	movs	r3, #0
 8005090:	9309      	str	r3, [sp, #36]	; 0x24
 8005092:	2320      	movs	r3, #32
 8005094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005098:	f8cd 800c 	str.w	r8, [sp, #12]
 800509c:	2330      	movs	r3, #48	; 0x30
 800509e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005248 <_svfiprintf_r+0x1ec>
 80050a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050a6:	f04f 0901 	mov.w	r9, #1
 80050aa:	4623      	mov	r3, r4
 80050ac:	469a      	mov	sl, r3
 80050ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050b2:	b10a      	cbz	r2, 80050b8 <_svfiprintf_r+0x5c>
 80050b4:	2a25      	cmp	r2, #37	; 0x25
 80050b6:	d1f9      	bne.n	80050ac <_svfiprintf_r+0x50>
 80050b8:	ebba 0b04 	subs.w	fp, sl, r4
 80050bc:	d00b      	beq.n	80050d6 <_svfiprintf_r+0x7a>
 80050be:	465b      	mov	r3, fp
 80050c0:	4622      	mov	r2, r4
 80050c2:	4629      	mov	r1, r5
 80050c4:	4638      	mov	r0, r7
 80050c6:	f7ff ff6d 	bl	8004fa4 <__ssputs_r>
 80050ca:	3001      	adds	r0, #1
 80050cc:	f000 80aa 	beq.w	8005224 <_svfiprintf_r+0x1c8>
 80050d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050d2:	445a      	add	r2, fp
 80050d4:	9209      	str	r2, [sp, #36]	; 0x24
 80050d6:	f89a 3000 	ldrb.w	r3, [sl]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 80a2 	beq.w	8005224 <_svfiprintf_r+0x1c8>
 80050e0:	2300      	movs	r3, #0
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ea:	f10a 0a01 	add.w	sl, sl, #1
 80050ee:	9304      	str	r3, [sp, #16]
 80050f0:	9307      	str	r3, [sp, #28]
 80050f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050f6:	931a      	str	r3, [sp, #104]	; 0x68
 80050f8:	4654      	mov	r4, sl
 80050fa:	2205      	movs	r2, #5
 80050fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005100:	4851      	ldr	r0, [pc, #324]	; (8005248 <_svfiprintf_r+0x1ec>)
 8005102:	f7fb f885 	bl	8000210 <memchr>
 8005106:	9a04      	ldr	r2, [sp, #16]
 8005108:	b9d8      	cbnz	r0, 8005142 <_svfiprintf_r+0xe6>
 800510a:	06d0      	lsls	r0, r2, #27
 800510c:	bf44      	itt	mi
 800510e:	2320      	movmi	r3, #32
 8005110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005114:	0711      	lsls	r1, r2, #28
 8005116:	bf44      	itt	mi
 8005118:	232b      	movmi	r3, #43	; 0x2b
 800511a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800511e:	f89a 3000 	ldrb.w	r3, [sl]
 8005122:	2b2a      	cmp	r3, #42	; 0x2a
 8005124:	d015      	beq.n	8005152 <_svfiprintf_r+0xf6>
 8005126:	9a07      	ldr	r2, [sp, #28]
 8005128:	4654      	mov	r4, sl
 800512a:	2000      	movs	r0, #0
 800512c:	f04f 0c0a 	mov.w	ip, #10
 8005130:	4621      	mov	r1, r4
 8005132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005136:	3b30      	subs	r3, #48	; 0x30
 8005138:	2b09      	cmp	r3, #9
 800513a:	d94e      	bls.n	80051da <_svfiprintf_r+0x17e>
 800513c:	b1b0      	cbz	r0, 800516c <_svfiprintf_r+0x110>
 800513e:	9207      	str	r2, [sp, #28]
 8005140:	e014      	b.n	800516c <_svfiprintf_r+0x110>
 8005142:	eba0 0308 	sub.w	r3, r0, r8
 8005146:	fa09 f303 	lsl.w	r3, r9, r3
 800514a:	4313      	orrs	r3, r2
 800514c:	9304      	str	r3, [sp, #16]
 800514e:	46a2      	mov	sl, r4
 8005150:	e7d2      	b.n	80050f8 <_svfiprintf_r+0x9c>
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	1d19      	adds	r1, r3, #4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	9103      	str	r1, [sp, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfbb      	ittet	lt
 800515e:	425b      	neglt	r3, r3
 8005160:	f042 0202 	orrlt.w	r2, r2, #2
 8005164:	9307      	strge	r3, [sp, #28]
 8005166:	9307      	strlt	r3, [sp, #28]
 8005168:	bfb8      	it	lt
 800516a:	9204      	strlt	r2, [sp, #16]
 800516c:	7823      	ldrb	r3, [r4, #0]
 800516e:	2b2e      	cmp	r3, #46	; 0x2e
 8005170:	d10c      	bne.n	800518c <_svfiprintf_r+0x130>
 8005172:	7863      	ldrb	r3, [r4, #1]
 8005174:	2b2a      	cmp	r3, #42	; 0x2a
 8005176:	d135      	bne.n	80051e4 <_svfiprintf_r+0x188>
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	9203      	str	r2, [sp, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	bfb8      	it	lt
 8005184:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005188:	3402      	adds	r4, #2
 800518a:	9305      	str	r3, [sp, #20]
 800518c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005258 <_svfiprintf_r+0x1fc>
 8005190:	7821      	ldrb	r1, [r4, #0]
 8005192:	2203      	movs	r2, #3
 8005194:	4650      	mov	r0, sl
 8005196:	f7fb f83b 	bl	8000210 <memchr>
 800519a:	b140      	cbz	r0, 80051ae <_svfiprintf_r+0x152>
 800519c:	2340      	movs	r3, #64	; 0x40
 800519e:	eba0 000a 	sub.w	r0, r0, sl
 80051a2:	fa03 f000 	lsl.w	r0, r3, r0
 80051a6:	9b04      	ldr	r3, [sp, #16]
 80051a8:	4303      	orrs	r3, r0
 80051aa:	3401      	adds	r4, #1
 80051ac:	9304      	str	r3, [sp, #16]
 80051ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b2:	4826      	ldr	r0, [pc, #152]	; (800524c <_svfiprintf_r+0x1f0>)
 80051b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051b8:	2206      	movs	r2, #6
 80051ba:	f7fb f829 	bl	8000210 <memchr>
 80051be:	2800      	cmp	r0, #0
 80051c0:	d038      	beq.n	8005234 <_svfiprintf_r+0x1d8>
 80051c2:	4b23      	ldr	r3, [pc, #140]	; (8005250 <_svfiprintf_r+0x1f4>)
 80051c4:	bb1b      	cbnz	r3, 800520e <_svfiprintf_r+0x1b2>
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	3307      	adds	r3, #7
 80051ca:	f023 0307 	bic.w	r3, r3, #7
 80051ce:	3308      	adds	r3, #8
 80051d0:	9303      	str	r3, [sp, #12]
 80051d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d4:	4433      	add	r3, r6
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
 80051d8:	e767      	b.n	80050aa <_svfiprintf_r+0x4e>
 80051da:	fb0c 3202 	mla	r2, ip, r2, r3
 80051de:	460c      	mov	r4, r1
 80051e0:	2001      	movs	r0, #1
 80051e2:	e7a5      	b.n	8005130 <_svfiprintf_r+0xd4>
 80051e4:	2300      	movs	r3, #0
 80051e6:	3401      	adds	r4, #1
 80051e8:	9305      	str	r3, [sp, #20]
 80051ea:	4619      	mov	r1, r3
 80051ec:	f04f 0c0a 	mov.w	ip, #10
 80051f0:	4620      	mov	r0, r4
 80051f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f6:	3a30      	subs	r2, #48	; 0x30
 80051f8:	2a09      	cmp	r2, #9
 80051fa:	d903      	bls.n	8005204 <_svfiprintf_r+0x1a8>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0c5      	beq.n	800518c <_svfiprintf_r+0x130>
 8005200:	9105      	str	r1, [sp, #20]
 8005202:	e7c3      	b.n	800518c <_svfiprintf_r+0x130>
 8005204:	fb0c 2101 	mla	r1, ip, r1, r2
 8005208:	4604      	mov	r4, r0
 800520a:	2301      	movs	r3, #1
 800520c:	e7f0      	b.n	80051f0 <_svfiprintf_r+0x194>
 800520e:	ab03      	add	r3, sp, #12
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	462a      	mov	r2, r5
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <_svfiprintf_r+0x1f8>)
 8005216:	a904      	add	r1, sp, #16
 8005218:	4638      	mov	r0, r7
 800521a:	f3af 8000 	nop.w
 800521e:	1c42      	adds	r2, r0, #1
 8005220:	4606      	mov	r6, r0
 8005222:	d1d6      	bne.n	80051d2 <_svfiprintf_r+0x176>
 8005224:	89ab      	ldrh	r3, [r5, #12]
 8005226:	065b      	lsls	r3, r3, #25
 8005228:	f53f af2c 	bmi.w	8005084 <_svfiprintf_r+0x28>
 800522c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800522e:	b01d      	add	sp, #116	; 0x74
 8005230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005234:	ab03      	add	r3, sp, #12
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	462a      	mov	r2, r5
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <_svfiprintf_r+0x1f8>)
 800523c:	a904      	add	r1, sp, #16
 800523e:	4638      	mov	r0, r7
 8005240:	f000 f87a 	bl	8005338 <_printf_i>
 8005244:	e7eb      	b.n	800521e <_svfiprintf_r+0x1c2>
 8005246:	bf00      	nop
 8005248:	08005884 	.word	0x08005884
 800524c:	0800588e 	.word	0x0800588e
 8005250:	00000000 	.word	0x00000000
 8005254:	08004fa5 	.word	0x08004fa5
 8005258:	0800588a 	.word	0x0800588a

0800525c <_printf_common>:
 800525c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	4616      	mov	r6, r2
 8005262:	4699      	mov	r9, r3
 8005264:	688a      	ldr	r2, [r1, #8]
 8005266:	690b      	ldr	r3, [r1, #16]
 8005268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800526c:	4293      	cmp	r3, r2
 800526e:	bfb8      	it	lt
 8005270:	4613      	movlt	r3, r2
 8005272:	6033      	str	r3, [r6, #0]
 8005274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005278:	4607      	mov	r7, r0
 800527a:	460c      	mov	r4, r1
 800527c:	b10a      	cbz	r2, 8005282 <_printf_common+0x26>
 800527e:	3301      	adds	r3, #1
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	0699      	lsls	r1, r3, #26
 8005286:	bf42      	ittt	mi
 8005288:	6833      	ldrmi	r3, [r6, #0]
 800528a:	3302      	addmi	r3, #2
 800528c:	6033      	strmi	r3, [r6, #0]
 800528e:	6825      	ldr	r5, [r4, #0]
 8005290:	f015 0506 	ands.w	r5, r5, #6
 8005294:	d106      	bne.n	80052a4 <_printf_common+0x48>
 8005296:	f104 0a19 	add.w	sl, r4, #25
 800529a:	68e3      	ldr	r3, [r4, #12]
 800529c:	6832      	ldr	r2, [r6, #0]
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	42ab      	cmp	r3, r5
 80052a2:	dc26      	bgt.n	80052f2 <_printf_common+0x96>
 80052a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052a8:	1e13      	subs	r3, r2, #0
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	bf18      	it	ne
 80052ae:	2301      	movne	r3, #1
 80052b0:	0692      	lsls	r2, r2, #26
 80052b2:	d42b      	bmi.n	800530c <_printf_common+0xb0>
 80052b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052b8:	4649      	mov	r1, r9
 80052ba:	4638      	mov	r0, r7
 80052bc:	47c0      	blx	r8
 80052be:	3001      	adds	r0, #1
 80052c0:	d01e      	beq.n	8005300 <_printf_common+0xa4>
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	68e5      	ldr	r5, [r4, #12]
 80052c6:	6832      	ldr	r2, [r6, #0]
 80052c8:	f003 0306 	and.w	r3, r3, #6
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	bf08      	it	eq
 80052d0:	1aad      	subeq	r5, r5, r2
 80052d2:	68a3      	ldr	r3, [r4, #8]
 80052d4:	6922      	ldr	r2, [r4, #16]
 80052d6:	bf0c      	ite	eq
 80052d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052dc:	2500      	movne	r5, #0
 80052de:	4293      	cmp	r3, r2
 80052e0:	bfc4      	itt	gt
 80052e2:	1a9b      	subgt	r3, r3, r2
 80052e4:	18ed      	addgt	r5, r5, r3
 80052e6:	2600      	movs	r6, #0
 80052e8:	341a      	adds	r4, #26
 80052ea:	42b5      	cmp	r5, r6
 80052ec:	d11a      	bne.n	8005324 <_printf_common+0xc8>
 80052ee:	2000      	movs	r0, #0
 80052f0:	e008      	b.n	8005304 <_printf_common+0xa8>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4652      	mov	r2, sl
 80052f6:	4649      	mov	r1, r9
 80052f8:	4638      	mov	r0, r7
 80052fa:	47c0      	blx	r8
 80052fc:	3001      	adds	r0, #1
 80052fe:	d103      	bne.n	8005308 <_printf_common+0xac>
 8005300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005308:	3501      	adds	r5, #1
 800530a:	e7c6      	b.n	800529a <_printf_common+0x3e>
 800530c:	18e1      	adds	r1, r4, r3
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	2030      	movs	r0, #48	; 0x30
 8005312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005316:	4422      	add	r2, r4
 8005318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800531c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005320:	3302      	adds	r3, #2
 8005322:	e7c7      	b.n	80052b4 <_printf_common+0x58>
 8005324:	2301      	movs	r3, #1
 8005326:	4622      	mov	r2, r4
 8005328:	4649      	mov	r1, r9
 800532a:	4638      	mov	r0, r7
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d0e6      	beq.n	8005300 <_printf_common+0xa4>
 8005332:	3601      	adds	r6, #1
 8005334:	e7d9      	b.n	80052ea <_printf_common+0x8e>
	...

08005338 <_printf_i>:
 8005338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800533c:	7e0f      	ldrb	r7, [r1, #24]
 800533e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005340:	2f78      	cmp	r7, #120	; 0x78
 8005342:	4691      	mov	r9, r2
 8005344:	4680      	mov	r8, r0
 8005346:	460c      	mov	r4, r1
 8005348:	469a      	mov	sl, r3
 800534a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800534e:	d807      	bhi.n	8005360 <_printf_i+0x28>
 8005350:	2f62      	cmp	r7, #98	; 0x62
 8005352:	d80a      	bhi.n	800536a <_printf_i+0x32>
 8005354:	2f00      	cmp	r7, #0
 8005356:	f000 80d8 	beq.w	800550a <_printf_i+0x1d2>
 800535a:	2f58      	cmp	r7, #88	; 0x58
 800535c:	f000 80a3 	beq.w	80054a6 <_printf_i+0x16e>
 8005360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005368:	e03a      	b.n	80053e0 <_printf_i+0xa8>
 800536a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800536e:	2b15      	cmp	r3, #21
 8005370:	d8f6      	bhi.n	8005360 <_printf_i+0x28>
 8005372:	a101      	add	r1, pc, #4	; (adr r1, 8005378 <_printf_i+0x40>)
 8005374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005378:	080053d1 	.word	0x080053d1
 800537c:	080053e5 	.word	0x080053e5
 8005380:	08005361 	.word	0x08005361
 8005384:	08005361 	.word	0x08005361
 8005388:	08005361 	.word	0x08005361
 800538c:	08005361 	.word	0x08005361
 8005390:	080053e5 	.word	0x080053e5
 8005394:	08005361 	.word	0x08005361
 8005398:	08005361 	.word	0x08005361
 800539c:	08005361 	.word	0x08005361
 80053a0:	08005361 	.word	0x08005361
 80053a4:	080054f1 	.word	0x080054f1
 80053a8:	08005415 	.word	0x08005415
 80053ac:	080054d3 	.word	0x080054d3
 80053b0:	08005361 	.word	0x08005361
 80053b4:	08005361 	.word	0x08005361
 80053b8:	08005513 	.word	0x08005513
 80053bc:	08005361 	.word	0x08005361
 80053c0:	08005415 	.word	0x08005415
 80053c4:	08005361 	.word	0x08005361
 80053c8:	08005361 	.word	0x08005361
 80053cc:	080054db 	.word	0x080054db
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	1d1a      	adds	r2, r3, #4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	602a      	str	r2, [r5, #0]
 80053d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0a3      	b.n	800552c <_printf_i+0x1f4>
 80053e4:	6820      	ldr	r0, [r4, #0]
 80053e6:	6829      	ldr	r1, [r5, #0]
 80053e8:	0606      	lsls	r6, r0, #24
 80053ea:	f101 0304 	add.w	r3, r1, #4
 80053ee:	d50a      	bpl.n	8005406 <_printf_i+0xce>
 80053f0:	680e      	ldr	r6, [r1, #0]
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	2e00      	cmp	r6, #0
 80053f6:	da03      	bge.n	8005400 <_printf_i+0xc8>
 80053f8:	232d      	movs	r3, #45	; 0x2d
 80053fa:	4276      	negs	r6, r6
 80053fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005400:	485e      	ldr	r0, [pc, #376]	; (800557c <_printf_i+0x244>)
 8005402:	230a      	movs	r3, #10
 8005404:	e019      	b.n	800543a <_printf_i+0x102>
 8005406:	680e      	ldr	r6, [r1, #0]
 8005408:	602b      	str	r3, [r5, #0]
 800540a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800540e:	bf18      	it	ne
 8005410:	b236      	sxthne	r6, r6
 8005412:	e7ef      	b.n	80053f4 <_printf_i+0xbc>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	6820      	ldr	r0, [r4, #0]
 8005418:	1d19      	adds	r1, r3, #4
 800541a:	6029      	str	r1, [r5, #0]
 800541c:	0601      	lsls	r1, r0, #24
 800541e:	d501      	bpl.n	8005424 <_printf_i+0xec>
 8005420:	681e      	ldr	r6, [r3, #0]
 8005422:	e002      	b.n	800542a <_printf_i+0xf2>
 8005424:	0646      	lsls	r6, r0, #25
 8005426:	d5fb      	bpl.n	8005420 <_printf_i+0xe8>
 8005428:	881e      	ldrh	r6, [r3, #0]
 800542a:	4854      	ldr	r0, [pc, #336]	; (800557c <_printf_i+0x244>)
 800542c:	2f6f      	cmp	r7, #111	; 0x6f
 800542e:	bf0c      	ite	eq
 8005430:	2308      	moveq	r3, #8
 8005432:	230a      	movne	r3, #10
 8005434:	2100      	movs	r1, #0
 8005436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800543a:	6865      	ldr	r5, [r4, #4]
 800543c:	60a5      	str	r5, [r4, #8]
 800543e:	2d00      	cmp	r5, #0
 8005440:	bfa2      	ittt	ge
 8005442:	6821      	ldrge	r1, [r4, #0]
 8005444:	f021 0104 	bicge.w	r1, r1, #4
 8005448:	6021      	strge	r1, [r4, #0]
 800544a:	b90e      	cbnz	r6, 8005450 <_printf_i+0x118>
 800544c:	2d00      	cmp	r5, #0
 800544e:	d04d      	beq.n	80054ec <_printf_i+0x1b4>
 8005450:	4615      	mov	r5, r2
 8005452:	fbb6 f1f3 	udiv	r1, r6, r3
 8005456:	fb03 6711 	mls	r7, r3, r1, r6
 800545a:	5dc7      	ldrb	r7, [r0, r7]
 800545c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005460:	4637      	mov	r7, r6
 8005462:	42bb      	cmp	r3, r7
 8005464:	460e      	mov	r6, r1
 8005466:	d9f4      	bls.n	8005452 <_printf_i+0x11a>
 8005468:	2b08      	cmp	r3, #8
 800546a:	d10b      	bne.n	8005484 <_printf_i+0x14c>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	07de      	lsls	r6, r3, #31
 8005470:	d508      	bpl.n	8005484 <_printf_i+0x14c>
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	6861      	ldr	r1, [r4, #4]
 8005476:	4299      	cmp	r1, r3
 8005478:	bfde      	ittt	le
 800547a:	2330      	movle	r3, #48	; 0x30
 800547c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005480:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005484:	1b52      	subs	r2, r2, r5
 8005486:	6122      	str	r2, [r4, #16]
 8005488:	f8cd a000 	str.w	sl, [sp]
 800548c:	464b      	mov	r3, r9
 800548e:	aa03      	add	r2, sp, #12
 8005490:	4621      	mov	r1, r4
 8005492:	4640      	mov	r0, r8
 8005494:	f7ff fee2 	bl	800525c <_printf_common>
 8005498:	3001      	adds	r0, #1
 800549a:	d14c      	bne.n	8005536 <_printf_i+0x1fe>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a0:	b004      	add	sp, #16
 80054a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a6:	4835      	ldr	r0, [pc, #212]	; (800557c <_printf_i+0x244>)
 80054a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054ac:	6829      	ldr	r1, [r5, #0]
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80054b4:	6029      	str	r1, [r5, #0]
 80054b6:	061d      	lsls	r5, r3, #24
 80054b8:	d514      	bpl.n	80054e4 <_printf_i+0x1ac>
 80054ba:	07df      	lsls	r7, r3, #31
 80054bc:	bf44      	itt	mi
 80054be:	f043 0320 	orrmi.w	r3, r3, #32
 80054c2:	6023      	strmi	r3, [r4, #0]
 80054c4:	b91e      	cbnz	r6, 80054ce <_printf_i+0x196>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	f023 0320 	bic.w	r3, r3, #32
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	2310      	movs	r3, #16
 80054d0:	e7b0      	b.n	8005434 <_printf_i+0xfc>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	f043 0320 	orr.w	r3, r3, #32
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	2378      	movs	r3, #120	; 0x78
 80054dc:	4828      	ldr	r0, [pc, #160]	; (8005580 <_printf_i+0x248>)
 80054de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054e2:	e7e3      	b.n	80054ac <_printf_i+0x174>
 80054e4:	0659      	lsls	r1, r3, #25
 80054e6:	bf48      	it	mi
 80054e8:	b2b6      	uxthmi	r6, r6
 80054ea:	e7e6      	b.n	80054ba <_printf_i+0x182>
 80054ec:	4615      	mov	r5, r2
 80054ee:	e7bb      	b.n	8005468 <_printf_i+0x130>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	6826      	ldr	r6, [r4, #0]
 80054f4:	6961      	ldr	r1, [r4, #20]
 80054f6:	1d18      	adds	r0, r3, #4
 80054f8:	6028      	str	r0, [r5, #0]
 80054fa:	0635      	lsls	r5, r6, #24
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	d501      	bpl.n	8005504 <_printf_i+0x1cc>
 8005500:	6019      	str	r1, [r3, #0]
 8005502:	e002      	b.n	800550a <_printf_i+0x1d2>
 8005504:	0670      	lsls	r0, r6, #25
 8005506:	d5fb      	bpl.n	8005500 <_printf_i+0x1c8>
 8005508:	8019      	strh	r1, [r3, #0]
 800550a:	2300      	movs	r3, #0
 800550c:	6123      	str	r3, [r4, #16]
 800550e:	4615      	mov	r5, r2
 8005510:	e7ba      	b.n	8005488 <_printf_i+0x150>
 8005512:	682b      	ldr	r3, [r5, #0]
 8005514:	1d1a      	adds	r2, r3, #4
 8005516:	602a      	str	r2, [r5, #0]
 8005518:	681d      	ldr	r5, [r3, #0]
 800551a:	6862      	ldr	r2, [r4, #4]
 800551c:	2100      	movs	r1, #0
 800551e:	4628      	mov	r0, r5
 8005520:	f7fa fe76 	bl	8000210 <memchr>
 8005524:	b108      	cbz	r0, 800552a <_printf_i+0x1f2>
 8005526:	1b40      	subs	r0, r0, r5
 8005528:	6060      	str	r0, [r4, #4]
 800552a:	6863      	ldr	r3, [r4, #4]
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	2300      	movs	r3, #0
 8005530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005534:	e7a8      	b.n	8005488 <_printf_i+0x150>
 8005536:	6923      	ldr	r3, [r4, #16]
 8005538:	462a      	mov	r2, r5
 800553a:	4649      	mov	r1, r9
 800553c:	4640      	mov	r0, r8
 800553e:	47d0      	blx	sl
 8005540:	3001      	adds	r0, #1
 8005542:	d0ab      	beq.n	800549c <_printf_i+0x164>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	079b      	lsls	r3, r3, #30
 8005548:	d413      	bmi.n	8005572 <_printf_i+0x23a>
 800554a:	68e0      	ldr	r0, [r4, #12]
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	4298      	cmp	r0, r3
 8005550:	bfb8      	it	lt
 8005552:	4618      	movlt	r0, r3
 8005554:	e7a4      	b.n	80054a0 <_printf_i+0x168>
 8005556:	2301      	movs	r3, #1
 8005558:	4632      	mov	r2, r6
 800555a:	4649      	mov	r1, r9
 800555c:	4640      	mov	r0, r8
 800555e:	47d0      	blx	sl
 8005560:	3001      	adds	r0, #1
 8005562:	d09b      	beq.n	800549c <_printf_i+0x164>
 8005564:	3501      	adds	r5, #1
 8005566:	68e3      	ldr	r3, [r4, #12]
 8005568:	9903      	ldr	r1, [sp, #12]
 800556a:	1a5b      	subs	r3, r3, r1
 800556c:	42ab      	cmp	r3, r5
 800556e:	dcf2      	bgt.n	8005556 <_printf_i+0x21e>
 8005570:	e7eb      	b.n	800554a <_printf_i+0x212>
 8005572:	2500      	movs	r5, #0
 8005574:	f104 0619 	add.w	r6, r4, #25
 8005578:	e7f5      	b.n	8005566 <_printf_i+0x22e>
 800557a:	bf00      	nop
 800557c:	08005895 	.word	0x08005895
 8005580:	080058a6 	.word	0x080058a6

08005584 <memmove>:
 8005584:	4288      	cmp	r0, r1
 8005586:	b510      	push	{r4, lr}
 8005588:	eb01 0402 	add.w	r4, r1, r2
 800558c:	d902      	bls.n	8005594 <memmove+0x10>
 800558e:	4284      	cmp	r4, r0
 8005590:	4623      	mov	r3, r4
 8005592:	d807      	bhi.n	80055a4 <memmove+0x20>
 8005594:	1e43      	subs	r3, r0, #1
 8005596:	42a1      	cmp	r1, r4
 8005598:	d008      	beq.n	80055ac <memmove+0x28>
 800559a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800559e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055a2:	e7f8      	b.n	8005596 <memmove+0x12>
 80055a4:	4402      	add	r2, r0
 80055a6:	4601      	mov	r1, r0
 80055a8:	428a      	cmp	r2, r1
 80055aa:	d100      	bne.n	80055ae <memmove+0x2a>
 80055ac:	bd10      	pop	{r4, pc}
 80055ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055b6:	e7f7      	b.n	80055a8 <memmove+0x24>

080055b8 <_free_r>:
 80055b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ba:	2900      	cmp	r1, #0
 80055bc:	d044      	beq.n	8005648 <_free_r+0x90>
 80055be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055c2:	9001      	str	r0, [sp, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f1a1 0404 	sub.w	r4, r1, #4
 80055ca:	bfb8      	it	lt
 80055cc:	18e4      	addlt	r4, r4, r3
 80055ce:	f000 f913 	bl	80057f8 <__malloc_lock>
 80055d2:	4a1e      	ldr	r2, [pc, #120]	; (800564c <_free_r+0x94>)
 80055d4:	9801      	ldr	r0, [sp, #4]
 80055d6:	6813      	ldr	r3, [r2, #0]
 80055d8:	b933      	cbnz	r3, 80055e8 <_free_r+0x30>
 80055da:	6063      	str	r3, [r4, #4]
 80055dc:	6014      	str	r4, [r2, #0]
 80055de:	b003      	add	sp, #12
 80055e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055e4:	f000 b90e 	b.w	8005804 <__malloc_unlock>
 80055e8:	42a3      	cmp	r3, r4
 80055ea:	d908      	bls.n	80055fe <_free_r+0x46>
 80055ec:	6825      	ldr	r5, [r4, #0]
 80055ee:	1961      	adds	r1, r4, r5
 80055f0:	428b      	cmp	r3, r1
 80055f2:	bf01      	itttt	eq
 80055f4:	6819      	ldreq	r1, [r3, #0]
 80055f6:	685b      	ldreq	r3, [r3, #4]
 80055f8:	1949      	addeq	r1, r1, r5
 80055fa:	6021      	streq	r1, [r4, #0]
 80055fc:	e7ed      	b.n	80055da <_free_r+0x22>
 80055fe:	461a      	mov	r2, r3
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	b10b      	cbz	r3, 8005608 <_free_r+0x50>
 8005604:	42a3      	cmp	r3, r4
 8005606:	d9fa      	bls.n	80055fe <_free_r+0x46>
 8005608:	6811      	ldr	r1, [r2, #0]
 800560a:	1855      	adds	r5, r2, r1
 800560c:	42a5      	cmp	r5, r4
 800560e:	d10b      	bne.n	8005628 <_free_r+0x70>
 8005610:	6824      	ldr	r4, [r4, #0]
 8005612:	4421      	add	r1, r4
 8005614:	1854      	adds	r4, r2, r1
 8005616:	42a3      	cmp	r3, r4
 8005618:	6011      	str	r1, [r2, #0]
 800561a:	d1e0      	bne.n	80055de <_free_r+0x26>
 800561c:	681c      	ldr	r4, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	6053      	str	r3, [r2, #4]
 8005622:	4421      	add	r1, r4
 8005624:	6011      	str	r1, [r2, #0]
 8005626:	e7da      	b.n	80055de <_free_r+0x26>
 8005628:	d902      	bls.n	8005630 <_free_r+0x78>
 800562a:	230c      	movs	r3, #12
 800562c:	6003      	str	r3, [r0, #0]
 800562e:	e7d6      	b.n	80055de <_free_r+0x26>
 8005630:	6825      	ldr	r5, [r4, #0]
 8005632:	1961      	adds	r1, r4, r5
 8005634:	428b      	cmp	r3, r1
 8005636:	bf04      	itt	eq
 8005638:	6819      	ldreq	r1, [r3, #0]
 800563a:	685b      	ldreq	r3, [r3, #4]
 800563c:	6063      	str	r3, [r4, #4]
 800563e:	bf04      	itt	eq
 8005640:	1949      	addeq	r1, r1, r5
 8005642:	6021      	streq	r1, [r4, #0]
 8005644:	6054      	str	r4, [r2, #4]
 8005646:	e7ca      	b.n	80055de <_free_r+0x26>
 8005648:	b003      	add	sp, #12
 800564a:	bd30      	pop	{r4, r5, pc}
 800564c:	20000254 	.word	0x20000254

08005650 <sbrk_aligned>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	4e0e      	ldr	r6, [pc, #56]	; (800568c <sbrk_aligned+0x3c>)
 8005654:	460c      	mov	r4, r1
 8005656:	6831      	ldr	r1, [r6, #0]
 8005658:	4605      	mov	r5, r0
 800565a:	b911      	cbnz	r1, 8005662 <sbrk_aligned+0x12>
 800565c:	f000 f8bc 	bl	80057d8 <_sbrk_r>
 8005660:	6030      	str	r0, [r6, #0]
 8005662:	4621      	mov	r1, r4
 8005664:	4628      	mov	r0, r5
 8005666:	f000 f8b7 	bl	80057d8 <_sbrk_r>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d00a      	beq.n	8005684 <sbrk_aligned+0x34>
 800566e:	1cc4      	adds	r4, r0, #3
 8005670:	f024 0403 	bic.w	r4, r4, #3
 8005674:	42a0      	cmp	r0, r4
 8005676:	d007      	beq.n	8005688 <sbrk_aligned+0x38>
 8005678:	1a21      	subs	r1, r4, r0
 800567a:	4628      	mov	r0, r5
 800567c:	f000 f8ac 	bl	80057d8 <_sbrk_r>
 8005680:	3001      	adds	r0, #1
 8005682:	d101      	bne.n	8005688 <sbrk_aligned+0x38>
 8005684:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005688:	4620      	mov	r0, r4
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	20000258 	.word	0x20000258

08005690 <_malloc_r>:
 8005690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005694:	1ccd      	adds	r5, r1, #3
 8005696:	f025 0503 	bic.w	r5, r5, #3
 800569a:	3508      	adds	r5, #8
 800569c:	2d0c      	cmp	r5, #12
 800569e:	bf38      	it	cc
 80056a0:	250c      	movcc	r5, #12
 80056a2:	2d00      	cmp	r5, #0
 80056a4:	4607      	mov	r7, r0
 80056a6:	db01      	blt.n	80056ac <_malloc_r+0x1c>
 80056a8:	42a9      	cmp	r1, r5
 80056aa:	d905      	bls.n	80056b8 <_malloc_r+0x28>
 80056ac:	230c      	movs	r3, #12
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	2600      	movs	r6, #0
 80056b2:	4630      	mov	r0, r6
 80056b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b8:	4e2e      	ldr	r6, [pc, #184]	; (8005774 <_malloc_r+0xe4>)
 80056ba:	f000 f89d 	bl	80057f8 <__malloc_lock>
 80056be:	6833      	ldr	r3, [r6, #0]
 80056c0:	461c      	mov	r4, r3
 80056c2:	bb34      	cbnz	r4, 8005712 <_malloc_r+0x82>
 80056c4:	4629      	mov	r1, r5
 80056c6:	4638      	mov	r0, r7
 80056c8:	f7ff ffc2 	bl	8005650 <sbrk_aligned>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	4604      	mov	r4, r0
 80056d0:	d14d      	bne.n	800576e <_malloc_r+0xde>
 80056d2:	6834      	ldr	r4, [r6, #0]
 80056d4:	4626      	mov	r6, r4
 80056d6:	2e00      	cmp	r6, #0
 80056d8:	d140      	bne.n	800575c <_malloc_r+0xcc>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	4631      	mov	r1, r6
 80056de:	4638      	mov	r0, r7
 80056e0:	eb04 0803 	add.w	r8, r4, r3
 80056e4:	f000 f878 	bl	80057d8 <_sbrk_r>
 80056e8:	4580      	cmp	r8, r0
 80056ea:	d13a      	bne.n	8005762 <_malloc_r+0xd2>
 80056ec:	6821      	ldr	r1, [r4, #0]
 80056ee:	3503      	adds	r5, #3
 80056f0:	1a6d      	subs	r5, r5, r1
 80056f2:	f025 0503 	bic.w	r5, r5, #3
 80056f6:	3508      	adds	r5, #8
 80056f8:	2d0c      	cmp	r5, #12
 80056fa:	bf38      	it	cc
 80056fc:	250c      	movcc	r5, #12
 80056fe:	4629      	mov	r1, r5
 8005700:	4638      	mov	r0, r7
 8005702:	f7ff ffa5 	bl	8005650 <sbrk_aligned>
 8005706:	3001      	adds	r0, #1
 8005708:	d02b      	beq.n	8005762 <_malloc_r+0xd2>
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	442b      	add	r3, r5
 800570e:	6023      	str	r3, [r4, #0]
 8005710:	e00e      	b.n	8005730 <_malloc_r+0xa0>
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	1b52      	subs	r2, r2, r5
 8005716:	d41e      	bmi.n	8005756 <_malloc_r+0xc6>
 8005718:	2a0b      	cmp	r2, #11
 800571a:	d916      	bls.n	800574a <_malloc_r+0xba>
 800571c:	1961      	adds	r1, r4, r5
 800571e:	42a3      	cmp	r3, r4
 8005720:	6025      	str	r5, [r4, #0]
 8005722:	bf18      	it	ne
 8005724:	6059      	strne	r1, [r3, #4]
 8005726:	6863      	ldr	r3, [r4, #4]
 8005728:	bf08      	it	eq
 800572a:	6031      	streq	r1, [r6, #0]
 800572c:	5162      	str	r2, [r4, r5]
 800572e:	604b      	str	r3, [r1, #4]
 8005730:	4638      	mov	r0, r7
 8005732:	f104 060b 	add.w	r6, r4, #11
 8005736:	f000 f865 	bl	8005804 <__malloc_unlock>
 800573a:	f026 0607 	bic.w	r6, r6, #7
 800573e:	1d23      	adds	r3, r4, #4
 8005740:	1af2      	subs	r2, r6, r3
 8005742:	d0b6      	beq.n	80056b2 <_malloc_r+0x22>
 8005744:	1b9b      	subs	r3, r3, r6
 8005746:	50a3      	str	r3, [r4, r2]
 8005748:	e7b3      	b.n	80056b2 <_malloc_r+0x22>
 800574a:	6862      	ldr	r2, [r4, #4]
 800574c:	42a3      	cmp	r3, r4
 800574e:	bf0c      	ite	eq
 8005750:	6032      	streq	r2, [r6, #0]
 8005752:	605a      	strne	r2, [r3, #4]
 8005754:	e7ec      	b.n	8005730 <_malloc_r+0xa0>
 8005756:	4623      	mov	r3, r4
 8005758:	6864      	ldr	r4, [r4, #4]
 800575a:	e7b2      	b.n	80056c2 <_malloc_r+0x32>
 800575c:	4634      	mov	r4, r6
 800575e:	6876      	ldr	r6, [r6, #4]
 8005760:	e7b9      	b.n	80056d6 <_malloc_r+0x46>
 8005762:	230c      	movs	r3, #12
 8005764:	603b      	str	r3, [r7, #0]
 8005766:	4638      	mov	r0, r7
 8005768:	f000 f84c 	bl	8005804 <__malloc_unlock>
 800576c:	e7a1      	b.n	80056b2 <_malloc_r+0x22>
 800576e:	6025      	str	r5, [r4, #0]
 8005770:	e7de      	b.n	8005730 <_malloc_r+0xa0>
 8005772:	bf00      	nop
 8005774:	20000254 	.word	0x20000254

08005778 <_realloc_r>:
 8005778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577c:	4680      	mov	r8, r0
 800577e:	4614      	mov	r4, r2
 8005780:	460e      	mov	r6, r1
 8005782:	b921      	cbnz	r1, 800578e <_realloc_r+0x16>
 8005784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005788:	4611      	mov	r1, r2
 800578a:	f7ff bf81 	b.w	8005690 <_malloc_r>
 800578e:	b92a      	cbnz	r2, 800579c <_realloc_r+0x24>
 8005790:	f7ff ff12 	bl	80055b8 <_free_r>
 8005794:	4625      	mov	r5, r4
 8005796:	4628      	mov	r0, r5
 8005798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579c:	f000 f838 	bl	8005810 <_malloc_usable_size_r>
 80057a0:	4284      	cmp	r4, r0
 80057a2:	4607      	mov	r7, r0
 80057a4:	d802      	bhi.n	80057ac <_realloc_r+0x34>
 80057a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057aa:	d812      	bhi.n	80057d2 <_realloc_r+0x5a>
 80057ac:	4621      	mov	r1, r4
 80057ae:	4640      	mov	r0, r8
 80057b0:	f7ff ff6e 	bl	8005690 <_malloc_r>
 80057b4:	4605      	mov	r5, r0
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d0ed      	beq.n	8005796 <_realloc_r+0x1e>
 80057ba:	42bc      	cmp	r4, r7
 80057bc:	4622      	mov	r2, r4
 80057be:	4631      	mov	r1, r6
 80057c0:	bf28      	it	cs
 80057c2:	463a      	movcs	r2, r7
 80057c4:	f7ff fbb8 	bl	8004f38 <memcpy>
 80057c8:	4631      	mov	r1, r6
 80057ca:	4640      	mov	r0, r8
 80057cc:	f7ff fef4 	bl	80055b8 <_free_r>
 80057d0:	e7e1      	b.n	8005796 <_realloc_r+0x1e>
 80057d2:	4635      	mov	r5, r6
 80057d4:	e7df      	b.n	8005796 <_realloc_r+0x1e>
	...

080057d8 <_sbrk_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4d06      	ldr	r5, [pc, #24]	; (80057f4 <_sbrk_r+0x1c>)
 80057dc:	2300      	movs	r3, #0
 80057de:	4604      	mov	r4, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	602b      	str	r3, [r5, #0]
 80057e4:	f7fb fce8 	bl	80011b8 <_sbrk>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_sbrk_r+0x1a>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_sbrk_r+0x1a>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	2000025c 	.word	0x2000025c

080057f8 <__malloc_lock>:
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <__malloc_lock+0x8>)
 80057fa:	f000 b811 	b.w	8005820 <__retarget_lock_acquire_recursive>
 80057fe:	bf00      	nop
 8005800:	20000260 	.word	0x20000260

08005804 <__malloc_unlock>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__malloc_unlock+0x8>)
 8005806:	f000 b80c 	b.w	8005822 <__retarget_lock_release_recursive>
 800580a:	bf00      	nop
 800580c:	20000260 	.word	0x20000260

08005810 <_malloc_usable_size_r>:
 8005810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005814:	1f18      	subs	r0, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	bfbc      	itt	lt
 800581a:	580b      	ldrlt	r3, [r1, r0]
 800581c:	18c0      	addlt	r0, r0, r3
 800581e:	4770      	bx	lr

08005820 <__retarget_lock_acquire_recursive>:
 8005820:	4770      	bx	lr

08005822 <__retarget_lock_release_recursive>:
 8005822:	4770      	bx	lr

08005824 <_init>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr

08005830 <_fini>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr
