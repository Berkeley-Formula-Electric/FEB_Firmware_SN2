
STEERING_WHEEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080093c8  080093c8  000193c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800982c  0800982c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009834  08009834  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800983c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001dc  08009a18  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08009a18  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a64  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002500  00000000  00000000  00033c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00036170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00037340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023868  00000000  00000000  00038440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015185  00000000  00000000  0005bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d79f1  00000000  00000000  00070e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014881e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e7c  00000000  00000000  00148870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080093ac 	.word	0x080093ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080093ac 	.word	0x080093ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <assign_filter_array>:
const FilterArrayLength APPS_RX_NUM = 2;

const AddressIdType LVPDB_RX_ID[] = {SW_ID, APPS_ID};
const FilterArrayLength LVPDB_RX_NUM = 2;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d813      	bhi.n	8000f24 <assign_filter_array+0x38>
 8000efc:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <assign_filter_array+0x18>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	08000f15 	.word	0x08000f15
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f21 	.word	0x08000f21
        case BMS_ID:
            return BMS_RX_ID;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <assign_filter_array+0x48>)
 8000f16:	e006      	b.n	8000f26 <assign_filter_array+0x3a>
            break;
        case SW_ID:
            return SW_RX_ID;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <assign_filter_array+0x4c>)
 8000f1a:	e004      	b.n	8000f26 <assign_filter_array+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <assign_filter_array+0x50>)
 8000f1e:	e002      	b.n	8000f26 <assign_filter_array+0x3a>
            break;
        case LVPDB_ID:
            return LVPDB_RX_ID;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <assign_filter_array+0x54>)
 8000f22:	e000      	b.n	8000f26 <assign_filter_array+0x3a>
            break;
    }
    return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	08009424 	.word	0x08009424
 8000f38:	08009428 	.word	0x08009428
 8000f3c:	0800942c 	.word	0x0800942c
 8000f40:	08009434 	.word	0x08009434

08000f44 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d813      	bhi.n	8000f7c <assign_filter_array_legnth+0x38>
 8000f54:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <assign_filter_array_legnth+0x18>)
 8000f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5a:	bf00      	nop
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000f75 	.word	0x08000f75
 8000f68:	08000f79 	.word	0x08000f79
        case BMS_ID:
            return BMS_RX_NUM;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e006      	b.n	8000f7e <assign_filter_array_legnth+0x3a>
            break;
        case SW_ID:
            return SW_RX_NUM;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e004      	b.n	8000f7e <assign_filter_array_legnth+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <assign_filter_array_legnth+0x3a>
            break;
        case LVPDB_ID:
            return LVPDB_RX_NUM;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e000      	b.n	8000f7e <assign_filter_array_legnth+0x3a>
            break;
    }
    return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <FEB_CAN_Filter_Config>:
uint8_t RxData[8];
uint32_t TxMailbox;
float HV_Voltage = 0.0;
extern UART_HandleTypeDef huart2;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09a      	sub	sp, #104	; 0x68
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8000fa6:	e027      	b.n	8000ff8 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8000fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8000fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	4413      	add	r3, r2
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 8000fc6:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000fca:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 8000fd8:	231b      	movs	r3, #27
 8000fda:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f001 f956 	bl	8002294 <HAL_CAN_ConfigFilter>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 8000fee:	f000 fcd5 	bl	800199c <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 8000ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	667b      	str	r3, [r7, #100]	; 0x64
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbd3      	blt.n	8000fa8 <FEB_CAN_Filter_Config+0x1c>
		}
	}

	CAN_FilterTypeDef filter_config;

	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001000:	2301      	movs	r3, #1
 8001002:	65fb      	str	r3, [r7, #92]	; 0x5c
	filter_config.FilterBank = filter_array_len;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
	filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
	filter_config.FilterIdHigh = 0xA7 << 5;
 800100c:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
	filter_config.FilterIdLow = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
	filter_config.FilterMaskIdHigh = 0x7FF << 5;
 8001016:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
	filter_config.FilterMaskIdLow = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001020:	2300      	movs	r3, #0
 8001022:	657b      	str	r3, [r7, #84]	; 0x54
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001024:	2301      	movs	r3, #1
 8001026:	65bb      	str	r3, [r7, #88]	; 0x58
	filter_config.SlaveStartFilterBank = 27;
 8001028:	231b      	movs	r3, #27
 800102a:	663b      	str	r3, [r7, #96]	; 0x60

	if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 800102c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001030:	4619      	mov	r1, r3
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f001 f92e 	bl	8002294 <HAL_CAN_ConfigFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <FEB_CAN_Filter_Config+0xb6>
	{
	  Error_Handler();
 800103e:	f000 fcad 	bl	800199c <Error_Handler>
	}
}
 8001042:	bf00      	nop
 8001044:	3768      	adds	r7, #104	; 0x68
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <FEB_CAN_Init+0x80>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d104      	bne.n	800106a <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 8001060:	2300      	movs	r3, #0
 8001062:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e008      	b.n	800107c <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <FEB_CAN_Init+0x84>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d103      	bne.n	800107c <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 8001074:	2301      	movs	r3, #1
 8001076:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8001078:	2310      	movs	r3, #16
 800107a:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <FEB_CAN_Init+0x88>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <FEB_CAN_Init+0x88>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <FEB_CAN_Init+0x88>)
 800108a:	2200      	movs	r2, #0
 800108c:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f7ff ff2c 	bl	8000eec <assign_filter_array>
 8001094:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f7ff ff54 	bl	8000f44 <assign_filter_array_legnth>
 800109c:	4603      	mov	r3, r0
 800109e:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	7afa      	ldrb	r2, [r7, #11]
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff70 	bl	8000f8c <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f001 f9d1 	bl	8002454 <HAL_CAN_Start>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <FEB_CAN_Init+0x70>
	  Error_Handler();
 80010b8:	f000 fc70 	bl	800199c <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 80010bc:	6939      	ldr	r1, [r7, #16]
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f001 fb1c 	bl	80026fc <HAL_CAN_ActivateNotification>

}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40006400 	.word	0x40006400
 80010d0:	40006800 	.word	0x40006800
 80010d4:	20000208 	.word	0x20000208

080010d8 <FEB_CAN_Transmit>:
	} else {
		store_msg(&RxHeader, RxData);
	}
}

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	461a      	mov	r2, r3
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <FEB_CAN_Transmit+0x54>)
 80010ee:	f005 fa71 	bl	80065d4 <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <FEB_CAN_Transmit+0x58>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <FEB_CAN_Transmit+0x58>)
 80010fc:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 80010fe:	bf00      	nop
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f001 fac6 	bl	8002692 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f9      	beq.n	8001100 <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <FEB_CAN_Transmit+0x5c>)
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <FEB_CAN_Transmit+0x54>)
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <FEB_CAN_Transmit+0x58>)
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f001 f9e2 	bl	80024dc <HAL_CAN_AddTxMessage>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 800111e:	f000 fc3d 	bl	800199c <Error_Handler>
	}
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000220 	.word	0x20000220
 8001130:	20000208 	.word	0x20000208
 8001134:	20000228 	.word	0x20000228

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b0ab      	sub	sp, #172	; 0xac
 800113c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f000 ff17 	bl	8001f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f9dd 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 fb91 	bl	800186c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800114a:	f000 fb65 	bl	8001818 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800114e:	f000 fa79 	bl	8001644 <MX_I2C1_Init>
  MX_TIM14_Init();
 8001152:	f000 fb3d 	bl	80017d0 <MX_TIM14_Init>
  MX_TIM2_Init();
 8001156:	f000 faa3 	bl	80016a0 <MX_TIM2_Init>
  MX_CAN1_Init();
 800115a:	f000 fa3d 	bl	80015d8 <MX_CAN1_Init>
  MX_TIM13_Init();
 800115e:	f000 fb13 	bl	8001788 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  bool ready_to_drive = false;
 8001162:	2300      	movs	r3, #0
 8001164:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  bool last_button_state = false;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool lock = false;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

  bool lastButton_4 = 0; // coolant pump
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
  bool lastButton_5 = 0; // acumulator fans
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  bool lastButton_6 = 0; // extra
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  bool lock_4 = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  bool lock_5 = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  bool lock_6 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  bool coolant_pump = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  bool accumulator_fans = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  bool extra = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  int buf_len;
  //uint8_t data1;
  uint8_t data2;
  HAL_StatusTypeDef ret;

  HAL_TIM_Base_Start_IT(&htim13);
 80011aa:	489d      	ldr	r0, [pc, #628]	; (8001420 <main+0x2e8>)
 80011ac:	f003 f9ba 	bl	8004524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim13);
 80011b0:	489b      	ldr	r0, [pc, #620]	; (8001420 <main+0x2e8>)
 80011b2:	f003 fa27 	bl	8004604 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80011b6:	489b      	ldr	r0, [pc, #620]	; (8001424 <main+0x2ec>)
 80011b8:	f003 f9b4 	bl	8004524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim14);
 80011bc:	4899      	ldr	r0, [pc, #612]	; (8001424 <main+0x2ec>)
 80011be:	f003 fa21 	bl	8004604 <HAL_TIM_Base_Stop_IT>
  Button_Checking = false;
 80011c2:	4b99      	ldr	r3, [pc, #612]	; (8001428 <main+0x2f0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
  Button_Timer_Flag = false;
 80011c8:	4b98      	ldr	r3, [pc, #608]	; (800142c <main+0x2f4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
  // 0% PWM cycle to turnoff buzzer
  htim2.Instance->CCR2 = 0;
 80011ce:	4b98      	ldr	r3, [pc, #608]	; (8001430 <main+0x2f8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011d6:	2104      	movs	r1, #4
 80011d8:	4895      	ldr	r0, [pc, #596]	; (8001430 <main+0x2f8>)
 80011da:	f003 fa9b 	bl	8004714 <HAL_TIM_PWM_Start>


  FEB_CAN_Init(&hcan1, SW_ID);
 80011de:	2102      	movs	r1, #2
 80011e0:	4894      	ldr	r0, [pc, #592]	; (8001434 <main+0x2fc>)
 80011e2:	f7ff ff33 	bl	800104c <FEB_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f000 ff34 	bl	8002054 <HAL_Delay>
	  // read both IOexpanders
//	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP1_ADDR, &data1, 1, HAL_MAX_DELAY);
//	  if ( ret != HAL_OK ) {
//		  buf_len = sprintf((char*)buf, "IO_1 Error\r\n");
//	  }
	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP2_ADDR, &data2, 1, HAL_MAX_DELAY);
 80011ec:	2342      	movs	r3, #66	; 0x42
 80011ee:	b299      	uxth	r1, r3
 80011f0:	1cfa      	adds	r2, r7, #3
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	488f      	ldr	r0, [pc, #572]	; (8001438 <main+0x300>)
 80011fc:	f001 ff3a 	bl	8003074 <HAL_I2C_Master_Receive>
 8001200:	4603      	mov	r3, r0
 8001202:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  if ( ret != HAL_OK ) {
 8001206:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <main+0xe4>
		  buf_len = sprintf((char*)buf, "IO_2 Error\r\n");
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	498a      	ldr	r1, [pc, #552]	; (800143c <main+0x304>)
 8001212:	4618      	mov	r0, r3
 8001214:	f005 fe5e 	bl	8006ed4 <siprintf>
 8001218:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
//		  HAL_TIM_Base_Start_IT(&htim14);
//		  // turn on buzzer with 30% PWM cycle
//		  htim2.Instance->CCR2 = VOLUME;
//	  }

	  if (!(data2 & (1<<1))) { // BUT_4 -> IO2 P1, coolant pump
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d123      	bne.n	800126e <main+0x136>
		  if (!lastButton_4) {
 8001226:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800122a:	f083 0301 	eor.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d018      	beq.n	8001266 <main+0x12e>
			  lock_4 = true;
 8001234:	2301      	movs	r3, #1
 8001236:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  coolant_pump = !coolant_pump;
 800123a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f083 0301 	eor.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			  FEB_CAN_Transmit(&hcan1, SW_COOLANT_PUMP, (uint8_t *) &coolant_pump, 1);
 8001258:	f107 0286 	add.w	r2, r7, #134	; 0x86
 800125c:	2301      	movs	r3, #1
 800125e:	2121      	movs	r1, #33	; 0x21
 8001260:	4874      	ldr	r0, [pc, #464]	; (8001434 <main+0x2fc>)
 8001262:	f7ff ff39 	bl	80010d8 <FEB_CAN_Transmit>
		  }
		  lastButton_4 = true;
 8001266:	2301      	movs	r3, #1
 8001268:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800126c:	e009      	b.n	8001282 <main+0x14a>
	  } else {
		  if (lastButton_4) {
 800126e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <main+0x144>
			  lock_4 = false;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		  }
		  lastButton_4 = false;
 800127c:	2300      	movs	r3, #0
 800127e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	  }

	  if (!(data2 & (1<<2))) { // BUT_5 -> IO2 P2, accumulator fans
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d123      	bne.n	80012d4 <main+0x19c>
		  if (!lastButton_5) {
 800128c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001290:	f083 0301 	eor.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d018      	beq.n	80012cc <main+0x194>
			  lock_5 = true;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  accumulator_fans = !accumulator_fans;
 80012a0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf14      	ite	ne
 80012a8:	2301      	movne	r3, #1
 80012aa:	2300      	moveq	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f083 0301 	eor.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			  FEB_CAN_Transmit(&hcan1, SW_ACUMULATOR_FANS, (uint8_t *) &accumulator_fans, 1);
 80012be:	f107 0285 	add.w	r2, r7, #133	; 0x85
 80012c2:	2301      	movs	r3, #1
 80012c4:	2122      	movs	r1, #34	; 0x22
 80012c6:	485b      	ldr	r0, [pc, #364]	; (8001434 <main+0x2fc>)
 80012c8:	f7ff ff06 	bl	80010d8 <FEB_CAN_Transmit>
		  }
		  lastButton_5 = true;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 80012d2:	e009      	b.n	80012e8 <main+0x1b0>
	  } else {
		  if (lastButton_5) {
 80012d4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <main+0x1aa>
			  lock_5 = false;
 80012dc:	2300      	movs	r3, #0
 80012de:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		  }
		  lastButton_5 = false;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	  }

	  if (!(data2 & (1<<3))) { // BUT_6 -> IO2 P3, extra
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d123      	bne.n	800133a <main+0x202>
		  if (!lastButton_6) {
 80012f2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d018      	beq.n	8001332 <main+0x1fa>
			  lock_6 = true;
 8001300:	2301      	movs	r3, #1
 8001302:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  extra = !extra;
 8001306:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			  FEB_CAN_Transmit(&hcan1, SW_EXTRA, (uint8_t *) &extra, 1);
 8001324:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001328:	2301      	movs	r3, #1
 800132a:	2123      	movs	r1, #35	; 0x23
 800132c:	4841      	ldr	r0, [pc, #260]	; (8001434 <main+0x2fc>)
 800132e:	f7ff fed3 	bl	80010d8 <FEB_CAN_Transmit>
		  }
		  lastButton_6 = true;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8001338:	e009      	b.n	800134e <main+0x216>
	  } else {
		  if (lastButton_6) {
 800133a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <main+0x210>
			  lock_6 = false;
 8001342:	2300      	movs	r3, #0
 8001344:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
		  }
		  lastButton_6 = false;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  }

	  if (!(data2 & (1<<0))) { // BUT_3 -> IO2 P0, ready to drive
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d179      	bne.n	800144c <main+0x314>
//		  buf_len = sprintf((char*)buf, "BUT_3\r\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);

		  // if the system is not checking a button, start the timer to check the timer
		  // also check if brake is pressed and Tractive System is on
		  if (!Button_Checking && (last_button_state == false) && !lock && APPS_MESSAGE.brake_pedal > 0.2 && HV_Voltage > 60.0) {
 8001358:	4b33      	ldr	r3, [pc, #204]	; (8001428 <main+0x2f0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f083 0301 	eor.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d02a      	beq.n	80013bc <main+0x284>
 8001366:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d023      	beq.n	80013bc <main+0x284>
 8001374:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001378:	f083 0301 	eor.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01c      	beq.n	80013bc <main+0x284>
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <main+0x308>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8fe 	bl	8000588 <__aeabi_f2d>
 800138c:	a322      	add	r3, pc, #136	; (adr r3, 8001418 <main+0x2e0>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff fbe1 	bl	8000b58 <__aeabi_dcmpgt>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00f      	beq.n	80013bc <main+0x284>
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <main+0x30c>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001448 <main+0x310>
 80013a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	dd05      	ble.n	80013bc <main+0x284>
			  // Start timer to count 1 sec hold time
			  HAL_TIM_Base_Start_IT(&htim13);
 80013b0:	481b      	ldr	r0, [pc, #108]	; (8001420 <main+0x2e8>)
 80013b2:	f003 f8b7 	bl	8004524 <HAL_TIM_Base_Start_IT>
			  Button_Checking = true;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <main+0x2f0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "starting timer 13\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }
		  // if 1 sec has elapsed, and this button is still pressed, it is a valid action
		  // turn on buzzer and send CAN msg, reset states
		  if (Button_Timer_Flag) {
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <main+0x2f4>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d022      	beq.n	800140a <main+0x2d2>
			  ready_to_drive = !ready_to_drive;
 80013c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f083 0301 	eor.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			  // when the ready_to_drive state is just changed, lock from changing again
			  lock = true;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

			  // start timer for buzzer
			  HAL_TIM_Base_Start_IT(&htim14);
 80013e8:	480e      	ldr	r0, [pc, #56]	; (8001424 <main+0x2ec>)
 80013ea:	f003 f89b 	bl	8004524 <HAL_TIM_Base_Start_IT>
			  // turn on buzzer at VOLUME
			  htim2.Instance->CCR2 = VOLUME;
 80013ee:	2264      	movs	r2, #100	; 0x64
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <main+0x2f8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38

			  FEB_CAN_Transmit(&hcan1, SW_READY_TO_DRIVE, (uint8_t *) &ready_to_drive, 1);
 80013f6:	f107 0287 	add.w	r2, r7, #135	; 0x87
 80013fa:	2301      	movs	r3, #1
 80013fc:	2120      	movs	r1, #32
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <main+0x2fc>)
 8001400:	f7ff fe6a 	bl	80010d8 <FEB_CAN_Transmit>

			  Button_Timer_Flag = false;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <main+0x2f4>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "staring timer 14\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }

		  //record button state
		  last_button_state = true;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001410:	e029      	b.n	8001466 <main+0x32e>
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	9999999a 	.word	0x9999999a
 800141c:	3fc99999 	.word	0x3fc99999
 8001420:	200002f4 	.word	0x200002f4
 8001424:	2000033c 	.word	0x2000033c
 8001428:	200003c8 	.word	0x200003c8
 800142c:	200003c9 	.word	0x200003c9
 8001430:	200002ac 	.word	0x200002ac
 8001434:	20000230 	.word	0x20000230
 8001438:	20000258 	.word	0x20000258
 800143c:	080093f0 	.word	0x080093f0
 8001440:	200001f8 	.word	0x200001f8
 8001444:	2000022c 	.word	0x2000022c
 8001448:	42700000 	.word	0x42700000

	  } else {
		  Button_Timer_Flag = false;
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <main+0x3ac>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]

		  // allow ready_to_drive to change when button is released.
		  if (last_button_state) {
 8001452:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <main+0x32e>
			  last_button_state = false;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  lock = false;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		  }
	  }

	  // if at sometime Tractive System falls below 60V (not enough battery or E-Stop), disable ready_to_drive
	  if (HV_Voltage < 60.0 && ready_to_drive) {
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <main+0x3b0>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80014ec <main+0x3b4>
 8001470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001478:	d50d      	bpl.n	8001496 <main+0x35e>
 800147a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <main+0x35e>
		  ready_to_drive = false;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  FEB_CAN_Transmit(&hcan1, SW_READY_TO_DRIVE, (uint8_t *) &ready_to_drive, 1);
 8001488:	f107 0287 	add.w	r2, r7, #135	; 0x87
 800148c:	2301      	movs	r3, #1
 800148e:	2120      	movs	r1, #32
 8001490:	4817      	ldr	r0, [pc, #92]	; (80014f0 <main+0x3b8>)
 8001492:	f7ff fe21 	bl	80010d8 <FEB_CAN_Transmit>
	  }

//	  buf_len = sprintf((char*)buf, "check:%d flag:%d\r\n", Button_Checking, Button_Timer_Flag);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	  buf_len = sprintf((char*)buf, "ready:%d voltage:%.1f brake:%.1f\r\n", ready_to_drive, HV_Voltage, APPS_MESSAGE.brake_pedal);
 8001496:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800149a:	461e      	mov	r6, r3
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <main+0x3b0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f871 	bl	8000588 <__aeabi_f2d>
 80014a6:	4604      	mov	r4, r0
 80014a8:	460d      	mov	r5, r1
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <main+0x3bc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f86a 	bl	8000588 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	1d38      	adds	r0, r7, #4
 80014ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014be:	e9cd 4500 	strd	r4, r5, [sp]
 80014c2:	4632      	mov	r2, r6
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <main+0x3c0>)
 80014c6:	f005 fd05 	bl	8006ed4 <siprintf>
 80014ca:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 1000);
 80014ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	1d39      	adds	r1, r7, #4
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	4808      	ldr	r0, [pc, #32]	; (80014fc <main+0x3c4>)
 80014dc:	f004 f889 	bl	80055f2 <HAL_UART_Transmit>
	  HAL_Delay(10);
 80014e0:	e681      	b.n	80011e6 <main+0xae>
 80014e2:	bf00      	nop
 80014e4:	200003c9 	.word	0x200003c9
 80014e8:	2000022c 	.word	0x2000022c
 80014ec:	42700000 	.word	0x42700000
 80014f0:	20000230 	.word	0x20000230
 80014f4:	200001f8 	.word	0x200001f8
 80014f8:	08009400 	.word	0x08009400
 80014fc:	20000384 	.word	0x20000384

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	; 0x50
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	2234      	movs	r2, #52	; 0x34
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f005 f86e 	bl	80065f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <SystemClock_Config+0xd0>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <SystemClock_Config+0xd0>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <SystemClock_Config+0xd0>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <SystemClock_Config+0xd4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <SystemClock_Config+0xd4>)
 800154a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <SystemClock_Config+0xd4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001570:	2304      	movs	r3, #4
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001574:	23a0      	movs	r3, #160	; 0xa0
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001580:	2302      	movs	r3, #2
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fcdd 	bl	8003f48 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001594:	f000 fa02 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	2105      	movs	r1, #5
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 f97c 	bl	80038b4 <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015c2:	f000 f9eb 	bl	800199c <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3750      	adds	r7, #80	; 0x50
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_CAN1_Init+0x64>)
 80015de:	4a18      	ldr	r2, [pc, #96]	; (8001640 <MX_CAN1_Init+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_CAN1_Init+0x64>)
 80015e4:	2210      	movs	r2, #16
 80015e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_CAN1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_CAN1_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_CAN1_Init+0x64>)
 80015f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_CAN1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_CAN1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_CAN1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_CAN1_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_CAN1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_CAN1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_CAN1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_CAN1_Init+0x64>)
 8001628:	f000 fd38 	bl	800209c <HAL_CAN_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001632:	f000 f9b3 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000230 	.word	0x20000230
 8001640:	40006400 	.word	0x40006400

08001644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x50>)
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <MX_I2C1_Init+0x54>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2C1_Init+0x50>)
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_I2C1_Init+0x58>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_I2C1_Init+0x50>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2C1_Init+0x50>)
 8001682:	f001 fbb3 	bl	8002dec <HAL_I2C_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 f986 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000258 	.word	0x20000258
 8001698:	40005400 	.word	0x40005400
 800169c:	000186a0 	.word	0x000186a0

080016a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016da:	229f      	movs	r2, #159	; 0x9f
 80016dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016e6:	2263      	movs	r2, #99	; 0x63
 80016e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f6:	4823      	ldr	r0, [pc, #140]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016f8:	f002 fec4 	bl	8004484 <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001702:	f000 f94b 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001710:	4619      	mov	r1, r3
 8001712:	481c      	ldr	r0, [pc, #112]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001714:	f003 fa90 	bl	8004c38 <HAL_TIM_ConfigClockSource>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800171e:	f000 f93d 	bl	800199c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001722:	4818      	ldr	r0, [pc, #96]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001724:	f002 ff9d 	bl	8004662 <HAL_TIM_PWM_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800172e:	f000 f935 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	4619      	mov	r1, r3
 8001740:	4810      	ldr	r0, [pc, #64]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001742:	f003 fe79 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800174c:	f000 f926 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001750:	2360      	movs	r3, #96	; 0x60
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001754:	2364      	movs	r3, #100	; 0x64
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2204      	movs	r2, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001768:	f003 f9a4 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001772:	f000 f913 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001778:	f000 fa28 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 800177c:	bf00      	nop
 800177e:	3738      	adds	r7, #56	; 0x38
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002ac 	.word	0x200002ac

08001788 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_TIM13_Init+0x40>)
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <MX_TIM13_Init+0x44>)
 8001790:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8000-1;
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <MX_TIM13_Init+0x40>)
 8001794:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001798:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_TIM13_Init+0x40>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_TIM13_Init+0x40>)
 80017a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80017a6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_TIM13_Init+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_TIM13_Init+0x40>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_TIM13_Init+0x40>)
 80017b6:	f002 fe65 	bl	8004484 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80017c0:	f000 f8ec 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200002f4 	.word	0x200002f4
 80017cc:	40001c00 	.word	0x40001c00

080017d0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_TIM14_Init+0x40>)
 80017d6:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <MX_TIM14_Init+0x44>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <MX_TIM14_Init+0x40>)
 80017dc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017e0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_TIM14_Init+0x40>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 15000-1;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_TIM14_Init+0x40>)
 80017ea:	f643 2297 	movw	r2, #14999	; 0x3a97
 80017ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <MX_TIM14_Init+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_TIM14_Init+0x40>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_TIM14_Init+0x40>)
 80017fe:	f002 fe41 	bl	8004484 <HAL_TIM_Base_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001808:	f000 f8c8 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000033c 	.word	0x2000033c
 8001814:	40002000 	.word	0x40002000

08001818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <MX_USART2_UART_Init+0x50>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001850:	f003 fe82 	bl	8005558 <HAL_UART_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185a:	f000 f89f 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000384 	.word	0x20000384
 8001868:	40004400 	.word	0x40004400

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_GPIO_Init+0xd0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a2c      	ldr	r2, [pc, #176]	; (800193c <MX_GPIO_Init+0xd0>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <MX_GPIO_Init+0xd0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_GPIO_Init+0xd0>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a25      	ldr	r2, [pc, #148]	; (800193c <MX_GPIO_Init+0xd0>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <MX_GPIO_Init+0xd0>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_GPIO_Init+0xd0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <MX_GPIO_Init+0xd0>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_GPIO_Init+0xd0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_GPIO_Init+0xd0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a17      	ldr	r2, [pc, #92]	; (800193c <MX_GPIO_Init+0xd0>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_GPIO_Init+0xd0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2120      	movs	r1, #32
 80018f6:	4812      	ldr	r0, [pc, #72]	; (8001940 <MX_GPIO_Init+0xd4>)
 80018f8:	f001 fa5e 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001902:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_GPIO_Init+0xd8>)
 8001914:	f001 f8bc 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001918:	2320      	movs	r3, #32
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_GPIO_Init+0xd4>)
 8001930:	f001 f8ae 	bl	8002a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020800 	.word	0x40020800

08001948 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
//	char buf[10];
//	int buf_len;

	// timer for button
	// if 1 sec has passed since the first detection of button pressed, go back to not checking state
	if (htim == &htim13) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d108      	bne.n	800196a <HAL_TIM_PeriodElapsedCallback+0x22>
	  Button_Checking = false;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	  Button_Timer_Flag = true;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim13);
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001966:	f002 fe4d 	bl	8004604 <HAL_TIM_Base_Stop_IT>
//	  buf_len = sprintf((char*)buf, "Timer13\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}

	// timer for buzzer
	if (htim == &htim14)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a09      	ldr	r2, [pc, #36]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d106      	bne.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
	  // turn off buzzer
	  htim2.Instance->CCR2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
	  // Stop timer
	  HAL_TIM_Base_Stop_IT(&htim14);
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800197c:	f002 fe42 	bl	8004604 <HAL_TIM_Base_Stop_IT>

//	  buf_len = sprintf((char*)buf, "Timer14\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200002f4 	.word	0x200002f4
 800198c:	200003c8 	.word	0x200003c8
 8001990:	200003c9 	.word	0x200003c9
 8001994:	2000033c 	.word	0x2000033c
 8001998:	200002ac 	.word	0x200002ac

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>
	...

080019a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <HAL_MspInit+0x4c>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_MspInit+0x4c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_MspInit+0x4c>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_MspInit+0x4c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019e6:	2007      	movs	r0, #7
 80019e8:	f000 ff7e 	bl	80028e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_CAN_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12c      	bne.n	8001a74 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a64:	2309      	movs	r3, #9
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_CAN_MspInit+0x8c>)
 8001a70:	f001 f80e 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40006400 	.word	0x40006400
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <HAL_I2C_MspInit+0x84>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12c      	bne.n	8001b04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001acc:	2312      	movs	r3, #18
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <HAL_I2C_MspInit+0x8c>)
 8001ae4:	f000 ffd4 	bl	8002a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400

08001b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d10e      	bne.n	8001b48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b46:	e036      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_TIM_Base_MspInit+0xac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d116      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	202c      	movs	r0, #44	; 0x2c
 8001b74:	f000 fec3 	bl	80028fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001b78:	202c      	movs	r0, #44	; 0x2c
 8001b7a:	f000 fedc 	bl	8002936 <HAL_NVIC_EnableIRQ>
}
 8001b7e:	e01a      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d115      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	202d      	movs	r0, #45	; 0x2d
 8001bac:	f000 fea7 	bl	80028fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001bb0:	202d      	movs	r0, #45	; 0x2d
 8001bb2:	f000 fec0 	bl	8002936 <HAL_NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40001c00 	.word	0x40001c00
 8001bc8:	40002000 	.word	0x40002000

08001bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d11d      	bne.n	8001c2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_TIM_MspPostInit+0x68>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_TIM_MspPostInit+0x68>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_TIM_MspPostInit+0x68>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4619      	mov	r1, r3
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <HAL_TIM_MspPostInit+0x6c>)
 8001c26:	f000 ff33 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_UART_MspInit+0x94>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d133      	bne.n	8001cc6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c96:	230c      	movs	r3, #12
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <HAL_UART_MspInit+0x9c>)
 8001cb2:	f000 feed 	bl	8002a90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2026      	movs	r0, #38	; 0x26
 8001cbc:	f000 fe1f 	bl	80028fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cc0:	2026      	movs	r0, #38	; 0x26
 8001cc2:	f000 fe38 	bl	8002936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40004400 	.word	0x40004400
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020000 	.word	0x40020000

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 f974 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <USART2_IRQHandler+0x10>)
 8001d36:	f003 fcef 	bl	8005718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000384 	.word	0x20000384

08001d44 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001d4a:	f002 fdab 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200002f4 	.word	0x200002f4

08001d58 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d5e:	f002 fda1 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000033c 	.word	0x2000033c

08001d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_kill>:

int _kill(int pid, int sig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d86:	f004 fbfb 	bl	8006580 <__errno>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2216      	movs	r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_exit>:

void _exit (int status)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ffe7 	bl	8001d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dae:	e7fe      	b.n	8001dae <_exit+0x12>

08001db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e00a      	b.n	8001dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dc2:	f3af 8000 	nop.w
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	60ba      	str	r2, [r7, #8]
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbf0      	blt.n	8001dc2 <_read+0x12>
  }

  return len;
 8001de0:	687b      	ldr	r3, [r7, #4]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e009      	b.n	8001e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf1      	blt.n	8001dfc <_write+0x12>
  }
  return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_close>:

int _close(int file)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_isatty>:

int _isatty(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f004 fb60 	bl	8006580 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	200003cc 	.word	0x200003cc
 8001ef4:	200003e8 	.word	0x200003e8

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f22:	490e      	ldr	r1, [pc, #56]	; (8001f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f38:	4c0b      	ldr	r4, [pc, #44]	; (8001f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f46:	f7ff ffd7 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f004 fb1f 	bl	800658c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4e:	f7ff f8f3 	bl	8001138 <main>
  bx  lr    
 8001f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f60:	0800983c 	.word	0x0800983c
  ldr r2, =_sbss
 8001f64:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f68:	200003e4 	.word	0x200003e4

08001f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <HAL_Init+0x40>)
 8001f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_Init+0x40>)
 8001f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_Init+0x40>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_Init+0x40>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 fca5 	bl	80028e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 f808 	bl	8001fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa4:	f7ff fd00 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x54>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_InitTick+0x58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fcbd 	bl	8002952 <HAL_SYSTICK_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00e      	b.n	8002000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d80a      	bhi.n	8001ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff0:	f000 fc85 	bl	80028fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_InitTick+0x5c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000000 	.word	0x20000000
 800200c:	20000008 	.word	0x20000008
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x20>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x24>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_IncTick+0x24>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000008 	.word	0x20000008
 8002038:	200003d0 	.word	0x200003d0

0800203c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return uwTick;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_GetTick+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	200003d0 	.word	0x200003d0

08002054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff ffee 	bl	800203c <HAL_GetTick>
 8002060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800206c:	d005      	beq.n	800207a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_Delay+0x44>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800207a:	bf00      	nop
 800207c:	f7ff ffde 	bl	800203c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f7      	bhi.n	800207c <HAL_Delay+0x28>
  {
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000008 	.word	0x20000008

0800209c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0ed      	b.n	800228a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fc9c 	bl	80019f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d0:	f7ff ffb4 	bl	800203c <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020d6:	e012      	b.n	80020fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d8:	f7ff ffb0 	bl	800203c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b0a      	cmp	r3, #10
 80020e4:	d90b      	bls.n	80020fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2205      	movs	r2, #5
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0c5      	b.n	800228a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0e5      	beq.n	80020d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0202 	bic.w	r2, r2, #2
 800211a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7ff ff8e 	bl	800203c <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002122:	e012      	b.n	800214a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002124:	f7ff ff8a 	bl	800203c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b0a      	cmp	r3, #10
 8002130:	d90b      	bls.n	800214a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2205      	movs	r2, #5
 8002142:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e09f      	b.n	800228a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1e5      	bne.n	8002124 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e1b      	ldrb	r3, [r3, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d108      	bne.n	8002172 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e007      	b.n	8002182 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002180:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7e5b      	ldrb	r3, [r3, #25]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d108      	bne.n	800219c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e007      	b.n	80021ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e9b      	ldrb	r3, [r3, #26]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d108      	bne.n	80021c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0220 	orr.w	r2, r2, #32
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e007      	b.n	80021d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0220 	bic.w	r2, r2, #32
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7edb      	ldrb	r3, [r3, #27]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d108      	bne.n	80021f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0210 	bic.w	r2, r2, #16
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e007      	b.n	8002200 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0210 	orr.w	r2, r2, #16
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7f1b      	ldrb	r3, [r3, #28]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d108      	bne.n	800221a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0208 	orr.w	r2, r2, #8
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e007      	b.n	800222a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0208 	bic.w	r2, r2, #8
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7f5b      	ldrb	r3, [r3, #29]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d108      	bne.n	8002244 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0204 	orr.w	r2, r2, #4
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e007      	b.n	8002254 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	ea42 0103 	orr.w	r1, r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d003      	beq.n	80022ba <HAL_CAN_ConfigFilter+0x26>
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	f040 80be 	bne.w	8002436 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80022ba:	4b65      	ldr	r3, [pc, #404]	; (8002450 <HAL_CAN_ConfigFilter+0x1bc>)
 80022bc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	431a      	orrs	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2201      	movs	r2, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	43db      	mvns	r3, r3
 800230c:	401a      	ands	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d123      	bne.n	8002364 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800233e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3248      	adds	r2, #72	; 0x48
 8002344:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002358:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800235a:	6979      	ldr	r1, [r7, #20]
 800235c:	3348      	adds	r3, #72	; 0x48
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d122      	bne.n	80023b2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800238c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3248      	adds	r2, #72	; 0x48
 8002392:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a8:	6979      	ldr	r1, [r7, #20]
 80023aa:	3348      	adds	r3, #72	; 0x48
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023cc:	e007      	b.n	80023de <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	401a      	ands	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023f8:	e007      	b.n	800240a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	431a      	orrs	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	431a      	orrs	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002428:	f023 0201 	bic.w	r2, r3, #1
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e006      	b.n	8002444 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
  }
}
 8002444:	4618      	mov	r0, r3
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40006400 	.word	0x40006400

08002454 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d12e      	bne.n	80024c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002480:	f7ff fddc 	bl	800203c <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002486:	e012      	b.n	80024ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002488:	f7ff fdd8 	bl	800203c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b0a      	cmp	r3, #10
 8002494:	d90b      	bls.n	80024ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2205      	movs	r2, #5
 80024a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e012      	b.n	80024d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e5      	bne.n	8002488 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e006      	b.n	80024d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024fa:	7ffb      	ldrb	r3, [r7, #31]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d003      	beq.n	8002508 <HAL_CAN_AddTxMessage+0x2c>
 8002500:	7ffb      	ldrb	r3, [r7, #31]
 8002502:	2b02      	cmp	r3, #2
 8002504:	f040 80b8 	bne.w	8002678 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80a0 	beq.w	8002668 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	0e1b      	lsrs	r3, r3, #24
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d907      	bls.n	8002548 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e09e      	b.n	8002686 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002548:	2201      	movs	r2, #1
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	409a      	lsls	r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	6809      	ldr	r1, [r1, #0]
 8002568:	431a      	orrs	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3318      	adds	r3, #24
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	440b      	add	r3, r1
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e00f      	b.n	8002596 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002580:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800258a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3318      	adds	r3, #24
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	440b      	add	r3, r1
 8002594:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3318      	adds	r3, #24
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	440b      	add	r3, r1
 80025a6:	3304      	adds	r3, #4
 80025a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	7d1b      	ldrb	r3, [r3, #20]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d111      	bne.n	80025d6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3318      	adds	r3, #24
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	4413      	add	r3, r2
 80025be:	3304      	adds	r3, #4
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	6811      	ldr	r1, [r2, #0]
 80025c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3318      	adds	r3, #24
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	440b      	add	r3, r1
 80025d2:	3304      	adds	r3, #4
 80025d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3307      	adds	r3, #7
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	061a      	lsls	r2, r3, #24
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3306      	adds	r3, #6
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3305      	adds	r3, #5
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	4313      	orrs	r3, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	3204      	adds	r2, #4
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	4610      	mov	r0, r2
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	6811      	ldr	r1, [r2, #0]
 80025fe:	ea43 0200 	orr.w	r2, r3, r0
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	440b      	add	r3, r1
 8002608:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800260c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3303      	adds	r3, #3
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	061a      	lsls	r2, r3, #24
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3302      	adds	r3, #2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3301      	adds	r3, #1
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	4313      	orrs	r3, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	4610      	mov	r0, r2
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6811      	ldr	r1, [r2, #0]
 8002634:	ea43 0200 	orr.w	r2, r3, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	440b      	add	r3, r1
 800263e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002642:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3318      	adds	r3, #24
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	4413      	add	r3, r2
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	6811      	ldr	r1, [r2, #0]
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3318      	adds	r3, #24
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	440b      	add	r3, r1
 8002662:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e00e      	b.n	8002686 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e006      	b.n	8002686 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002692:	b480      	push	{r7}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d002      	beq.n	80026b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80026ac:	7afb      	ldrb	r3, [r7, #11]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d11d      	bne.n	80026ee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3301      	adds	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3301      	adds	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d002      	beq.n	800271a <HAL_CAN_ActivateNotification+0x1e>
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d109      	bne.n	800272e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6959      	ldr	r1, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e006      	b.n	800273c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
  }
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60d3      	str	r3, [r2, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0307 	and.w	r3, r3, #7
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db0b      	blt.n	80027d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4907      	ldr	r1, [pc, #28]	; (80027e4 <__NVIC_EnableIRQ+0x38>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2001      	movs	r0, #1
 80027ce:	fa00 f202 	lsl.w	r2, r0, r2
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000e100 	.word	0xe000e100

080027e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	6039      	str	r1, [r7, #0]
 80027f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db0a      	blt.n	8002812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	490c      	ldr	r1, [pc, #48]	; (8002834 <__NVIC_SetPriority+0x4c>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	440b      	add	r3, r1
 800280c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002810:	e00a      	b.n	8002828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4908      	ldr	r1, [pc, #32]	; (8002838 <__NVIC_SetPriority+0x50>)
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	3b04      	subs	r3, #4
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	440b      	add	r3, r1
 8002826:	761a      	strb	r2, [r3, #24]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000e100 	.word	0xe000e100
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f1c3 0307 	rsb	r3, r3, #7
 8002856:	2b04      	cmp	r3, #4
 8002858:	bf28      	it	cs
 800285a:	2304      	movcs	r3, #4
 800285c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3304      	adds	r3, #4
 8002862:	2b06      	cmp	r3, #6
 8002864:	d902      	bls.n	800286c <NVIC_EncodePriority+0x30>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3b03      	subs	r3, #3
 800286a:	e000      	b.n	800286e <NVIC_EncodePriority+0x32>
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43da      	mvns	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	401a      	ands	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	43d9      	mvns	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	4313      	orrs	r3, r2
         );
}
 8002896:	4618      	mov	r0, r3
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b4:	d301      	bcc.n	80028ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00f      	b.n	80028da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ba:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <SysTick_Config+0x40>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c2:	210f      	movs	r1, #15
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028c8:	f7ff ff8e 	bl	80027e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <SysTick_Config+0x40>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d2:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <SysTick_Config+0x40>)
 80028d4:	2207      	movs	r2, #7
 80028d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	e000e010 	.word	0xe000e010

080028e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ff29 	bl	8002748 <__NVIC_SetPriorityGrouping>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002910:	f7ff ff3e 	bl	8002790 <__NVIC_GetPriorityGrouping>
 8002914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	6978      	ldr	r0, [r7, #20]
 800291c:	f7ff ff8e 	bl	800283c <NVIC_EncodePriority>
 8002920:	4602      	mov	r2, r0
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff5d 	bl	80027e8 <__NVIC_SetPriority>
}
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff31 	bl	80027ac <__NVIC_EnableIRQ>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ffa2 	bl	80028a4 <SysTick_Config>
 8002960:	4603      	mov	r3, r0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff fb60 	bl	800203c <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d008      	beq.n	800299c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e052      	b.n	8002a42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0216 	bic.w	r2, r2, #22
 80029aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <HAL_DMA_Abort+0x62>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0208 	bic.w	r2, r2, #8
 80029da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ec:	e013      	b.n	8002a16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ee:	f7ff fb25 	bl	800203c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d90c      	bls.n	8002a16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e015      	b.n	8002a42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e4      	bne.n	80029ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	223f      	movs	r2, #63	; 0x3f
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d004      	beq.n	8002a68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e00c      	b.n	8002a82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2205      	movs	r2, #5
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e165      	b.n	8002d78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 8154 	bne.w	8002d72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d005      	beq.n	8002ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d130      	bne.n	8002b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 0201 	and.w	r2, r3, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d017      	beq.n	8002b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d123      	bne.n	8002bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80ae 	beq.w	8002d72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <HAL_GPIO_Init+0x300>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a5c      	ldr	r2, [pc, #368]	; (8002d90 <HAL_GPIO_Init+0x300>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b5a      	ldr	r3, [pc, #360]	; (8002d90 <HAL_GPIO_Init+0x300>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c32:	4a58      	ldr	r2, [pc, #352]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4f      	ldr	r2, [pc, #316]	; (8002d98 <HAL_GPIO_Init+0x308>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d025      	beq.n	8002caa <HAL_GPIO_Init+0x21a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4e      	ldr	r2, [pc, #312]	; (8002d9c <HAL_GPIO_Init+0x30c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01f      	beq.n	8002ca6 <HAL_GPIO_Init+0x216>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4d      	ldr	r2, [pc, #308]	; (8002da0 <HAL_GPIO_Init+0x310>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d019      	beq.n	8002ca2 <HAL_GPIO_Init+0x212>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_GPIO_Init+0x314>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_GPIO_Init+0x20e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <HAL_GPIO_Init+0x318>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00d      	beq.n	8002c9a <HAL_GPIO_Init+0x20a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4a      	ldr	r2, [pc, #296]	; (8002dac <HAL_GPIO_Init+0x31c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <HAL_GPIO_Init+0x206>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a49      	ldr	r2, [pc, #292]	; (8002db0 <HAL_GPIO_Init+0x320>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_GPIO_Init+0x202>
 8002c8e:	2306      	movs	r3, #6
 8002c90:	e00c      	b.n	8002cac <HAL_GPIO_Init+0x21c>
 8002c92:	2307      	movs	r3, #7
 8002c94:	e00a      	b.n	8002cac <HAL_GPIO_Init+0x21c>
 8002c96:	2305      	movs	r3, #5
 8002c98:	e008      	b.n	8002cac <HAL_GPIO_Init+0x21c>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x21c>
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e004      	b.n	8002cac <HAL_GPIO_Init+0x21c>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e002      	b.n	8002cac <HAL_GPIO_Init+0x21c>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x21c>
 8002caa:	2300      	movs	r3, #0
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	f002 0203 	and.w	r2, r2, #3
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	4093      	lsls	r3, r2
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cbc:	4935      	ldr	r1, [pc, #212]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cca:	4b3a      	ldr	r3, [pc, #232]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cee:	4a31      	ldr	r2, [pc, #196]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d18:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d1e:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d6c:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	f67f ae96 	bls.w	8002aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40013800 	.word	0x40013800
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40020800 	.word	0x40020800
 8002da4:	40020c00 	.word	0x40020c00
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40021400 	.word	0x40021400
 8002db0:	40021800 	.word	0x40021800
 8002db4:	40013c00 	.word	0x40013c00

08002db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc8:	787b      	ldrb	r3, [r7, #1]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd4:	e003      	b.n	8002dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	041a      	lsls	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	619a      	str	r2, [r3, #24]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e12b      	b.n	8003056 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe fe38 	bl	8001a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	; 0x24
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e50:	f000 fe22 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8002e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a81      	ldr	r2, [pc, #516]	; (8003060 <HAL_I2C_Init+0x274>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d807      	bhi.n	8002e70 <HAL_I2C_Init+0x84>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a80      	ldr	r2, [pc, #512]	; (8003064 <HAL_I2C_Init+0x278>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e006      	b.n	8002e7e <HAL_I2C_Init+0x92>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a7d      	ldr	r2, [pc, #500]	; (8003068 <HAL_I2C_Init+0x27c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0e7      	b.n	8003056 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a78      	ldr	r2, [pc, #480]	; (800306c <HAL_I2C_Init+0x280>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a6a      	ldr	r2, [pc, #424]	; (8003060 <HAL_I2C_Init+0x274>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d802      	bhi.n	8002ec0 <HAL_I2C_Init+0xd4>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	e009      	b.n	8002ed4 <HAL_I2C_Init+0xe8>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	4a69      	ldr	r2, [pc, #420]	; (8003070 <HAL_I2C_Init+0x284>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	495c      	ldr	r1, [pc, #368]	; (8003060 <HAL_I2C_Init+0x274>)
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d819      	bhi.n	8002f28 <HAL_I2C_Init+0x13c>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e59      	subs	r1, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f02:	1c59      	adds	r1, r3, #1
 8002f04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f08:	400b      	ands	r3, r1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_I2C_Init+0x138>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1e59      	subs	r1, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f22:	e051      	b.n	8002fc8 <HAL_I2C_Init+0x1dc>
 8002f24:	2304      	movs	r3, #4
 8002f26:	e04f      	b.n	8002fc8 <HAL_I2C_Init+0x1dc>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d111      	bne.n	8002f54 <HAL_I2C_Init+0x168>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e58      	subs	r0, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	440b      	add	r3, r1
 8002f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e012      	b.n	8002f7a <HAL_I2C_Init+0x18e>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	0099      	lsls	r1, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Init+0x196>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e022      	b.n	8002fc8 <HAL_I2C_Init+0x1dc>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10e      	bne.n	8002fa8 <HAL_I2C_Init+0x1bc>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1e58      	subs	r0, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	440b      	add	r3, r1
 8002f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa6:	e00f      	b.n	8002fc8 <HAL_I2C_Init+0x1dc>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	6809      	ldr	r1, [r1, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6911      	ldr	r1, [r2, #16]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68d2      	ldr	r2, [r2, #12]
 8003002:	4311      	orrs	r1, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	430b      	orrs	r3, r1
 800300a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	000186a0 	.word	0x000186a0
 8003064:	001e847f 	.word	0x001e847f
 8003068:	003d08ff 	.word	0x003d08ff
 800306c:	431bde83 	.word	0x431bde83
 8003070:	10624dd3 	.word	0x10624dd3

08003074 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08c      	sub	sp, #48	; 0x30
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	460b      	mov	r3, r1
 8003082:	817b      	strh	r3, [r7, #10]
 8003084:	4613      	mov	r3, r2
 8003086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7fe ffd8 	bl	800203c <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b20      	cmp	r3, #32
 8003098:	f040 820b 	bne.w	80034b2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2319      	movs	r3, #25
 80030a2:	2201      	movs	r2, #1
 80030a4:	497c      	ldr	r1, [pc, #496]	; (8003298 <HAL_I2C_Master_Receive+0x224>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fad8 	bl	800365c <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
 80030b4:	e1fe      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_I2C_Master_Receive+0x50>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e1f7      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d007      	beq.n	80030ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2222      	movs	r2, #34	; 0x22
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2210      	movs	r2, #16
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	893a      	ldrh	r2, [r7, #8]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a5c      	ldr	r2, [pc, #368]	; (800329c <HAL_I2C_Master_Receive+0x228>)
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800312c:	8979      	ldrh	r1, [r7, #10]
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f9c4 	bl	80034c0 <I2C_MasterRequestRead>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1b8      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d113      	bne.n	8003172 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	623b      	str	r3, [r7, #32]
 800315e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e18c      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	2b01      	cmp	r3, #1
 8003178:	d11b      	bne.n	80031b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e16c      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d11b      	bne.n	80031f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	e14c      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003218:	e138      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	2b03      	cmp	r3, #3
 8003220:	f200 80f1 	bhi.w	8003406 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	2b01      	cmp	r3, #1
 800322a:	d123      	bne.n	8003274 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fae9 	bl	8003808 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e139      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003272:	e10b      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	2b02      	cmp	r3, #2
 800327a:	d14e      	bne.n	800331a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	2200      	movs	r2, #0
 8003284:	4906      	ldr	r1, [pc, #24]	; (80032a0 <HAL_I2C_Master_Receive+0x22c>)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f9e8 	bl	800365c <I2C_WaitOnFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e10e      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
 8003296:	bf00      	nop
 8003298:	00100002 	.word	0x00100002
 800329c:	ffff0000 	.word	0xffff0000
 80032a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003318:	e0b8      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	2200      	movs	r2, #0
 8003322:	4966      	ldr	r1, [pc, #408]	; (80034bc <HAL_I2C_Master_Receive+0x448>)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f999 	bl	800365c <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0bf      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	2200      	movs	r2, #0
 800337e:	494f      	ldr	r1, [pc, #316]	; (80034bc <HAL_I2C_Master_Receive+0x448>)
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f96b 	bl	800365c <I2C_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e091      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003404:	e042      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f9fc 	bl	8003808 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e04c      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d118      	bne.n	800348c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	f47f aec2 	bne.w	800321a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3728      	adds	r7, #40	; 0x28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	00010004 	.word	0x00010004

080034c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	460b      	mov	r3, r1
 80034ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d006      	beq.n	80034fa <I2C_MasterRequestRead+0x3a>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d003      	beq.n	80034fa <I2C_MasterRequestRead+0x3a>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034f8:	d108      	bne.n	800350c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e00b      	b.n	8003524 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	2b11      	cmp	r3, #17
 8003512:	d107      	bne.n	8003524 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003522:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f893 	bl	800365c <I2C_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354a:	d103      	bne.n	8003554 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e079      	b.n	800364c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003560:	d108      	bne.n	8003574 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	611a      	str	r2, [r3, #16]
 8003572:	e05f      	b.n	8003634 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	11db      	asrs	r3, r3, #7
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 0306 	and.w	r3, r3, #6
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f063 030f 	orn	r3, r3, #15
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4930      	ldr	r1, [pc, #192]	; (8003654 <I2C_MasterRequestRead+0x194>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f8b9 	bl	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e054      	b.n	800364c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4929      	ldr	r1, [pc, #164]	; (8003658 <I2C_MasterRequestRead+0x198>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f8a9 	bl	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e044      	b.n	800364c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f831 	bl	800365c <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d103      	bne.n	8003618 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e017      	b.n	800364c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800361c:	897b      	ldrh	r3, [r7, #10]
 800361e:	11db      	asrs	r3, r3, #7
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f003 0306 	and.w	r3, r3, #6
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f063 030e 	orn	r3, r3, #14
 800362c:	b2da      	uxtb	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4907      	ldr	r1, [pc, #28]	; (8003658 <I2C_MasterRequestRead+0x198>)
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f865 	bl	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	00010008 	.word	0x00010008
 8003658:	00010002 	.word	0x00010002

0800365c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800366c:	e025      	b.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003674:	d021      	beq.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fe fce1 	bl	800203c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d116      	bne.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f043 0220 	orr.w	r2, r3, #32
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e023      	b.n	8003702 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10d      	bne.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	43da      	mvns	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4013      	ands	r3, r2
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	e00c      	b.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	43da      	mvns	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d0b6      	beq.n	800366e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003718:	e051      	b.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003728:	d123      	bne.n	8003772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003738:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003742:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0204 	orr.w	r2, r3, #4
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e046      	b.n	8003800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003778:	d021      	beq.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fc5f 	bl	800203c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d116      	bne.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e020      	b.n	8003800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d10c      	bne.n	80037e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	43da      	mvns	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4013      	ands	r3, r2
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bf14      	ite	ne
 80037da:	2301      	movne	r3, #1
 80037dc:	2300      	moveq	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	e00b      	b.n	80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	43da      	mvns	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4013      	ands	r3, r2
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d18d      	bne.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003814:	e042      	b.n	800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b10      	cmp	r3, #16
 8003822:	d119      	bne.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e029      	b.n	80038ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe fbf0 	bl	800203c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e007      	b.n	80038ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d1b5      	bne.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0cc      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b68      	ldr	r3, [pc, #416]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d90c      	bls.n	80038f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b65      	ldr	r3, [pc, #404]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b63      	ldr	r3, [pc, #396]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0b8      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003908:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003920:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a52      	ldr	r2, [pc, #328]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800392a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800392c:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	494d      	ldr	r1, [pc, #308]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d044      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d119      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e07f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d003      	beq.n	8003972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	2b03      	cmp	r3, #3
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b3f      	ldr	r3, [pc, #252]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e067      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4934      	ldr	r1, [pc, #208]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fe fb4a 	bl	800203c <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fe fb46 	bl	800203c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e04f      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d20c      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e032      	b.n	8003a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4916      	ldr	r1, [pc, #88]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a26:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	490e      	ldr	r1, [pc, #56]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a3a:	f000 f855 	bl	8003ae8 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	490a      	ldr	r1, [pc, #40]	; (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	5ccb      	ldrb	r3, [r1, r3]
 8003a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_ClockConfig+0x1c8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe faaa 	bl	8001fb4 <HAL_InitTick>

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023c00 	.word	0x40023c00
 8003a70:	40023800 	.word	0x40023800
 8003a74:	0800943c 	.word	0x0800943c
 8003a78:	20000000 	.word	0x20000000
 8003a7c:	20000004 	.word	0x20000004

08003a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000000 	.word	0x20000000

08003a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a9c:	f7ff fff0 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0a9b      	lsrs	r3, r3, #10
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4903      	ldr	r1, [pc, #12]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	0800944c 	.word	0x0800944c

08003ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ac4:	f7ff ffdc 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0b5b      	lsrs	r3, r3, #13
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4903      	ldr	r1, [pc, #12]	; (8003ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	0800944c 	.word	0x0800944c

08003ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b0ae      	sub	sp, #184	; 0xb8
 8003aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0e:	4bcb      	ldr	r3, [pc, #812]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	f200 8206 	bhi.w	8003f28 <HAL_RCC_GetSysClockFreq+0x440>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b59 	.word	0x08003b59
 8003b28:	08003f29 	.word	0x08003f29
 8003b2c:	08003f29 	.word	0x08003f29
 8003b30:	08003f29 	.word	0x08003f29
 8003b34:	08003b61 	.word	0x08003b61
 8003b38:	08003f29 	.word	0x08003f29
 8003b3c:	08003f29 	.word	0x08003f29
 8003b40:	08003f29 	.word	0x08003f29
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003f29 	.word	0x08003f29
 8003b4c:	08003f29 	.word	0x08003f29
 8003b50:	08003f29 	.word	0x08003f29
 8003b54:	08003d59 	.word	0x08003d59
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4bb9      	ldr	r3, [pc, #740]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b5e:	e1e7      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b60:	4bb8      	ldr	r3, [pc, #736]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b66:	e1e3      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b68:	4bb4      	ldr	r3, [pc, #720]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b74:	4bb1      	ldr	r3, [pc, #708]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d071      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b80:	4bae      	ldr	r3, [pc, #696]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b8c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	462b      	mov	r3, r5
 8003baa:	f04f 0000 	mov.w	r0, #0
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	0159      	lsls	r1, r3, #5
 8003bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb8:	0150      	lsls	r0, r2, #5
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	1a51      	subs	r1, r2, r1
 8003bc2:	6439      	str	r1, [r7, #64]	; 0x40
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bca:	647b      	str	r3, [r7, #68]	; 0x44
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003bd8:	4649      	mov	r1, r9
 8003bda:	018b      	lsls	r3, r1, #6
 8003bdc:	4641      	mov	r1, r8
 8003bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003be2:	4641      	mov	r1, r8
 8003be4:	018a      	lsls	r2, r1, #6
 8003be6:	4641      	mov	r1, r8
 8003be8:	1a51      	subs	r1, r2, r1
 8003bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bec:	4649      	mov	r1, r9
 8003bee:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003c00:	4649      	mov	r1, r9
 8003c02:	00cb      	lsls	r3, r1, #3
 8003c04:	4641      	mov	r1, r8
 8003c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c0a:	4641      	mov	r1, r8
 8003c0c:	00ca      	lsls	r2, r1, #3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	4603      	mov	r3, r0
 8003c14:	4622      	mov	r2, r4
 8003c16:	189b      	adds	r3, r3, r2
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1a:	462b      	mov	r3, r5
 8003c1c:	460a      	mov	r2, r1
 8003c1e:	eb42 0303 	adc.w	r3, r2, r3
 8003c22:	637b      	str	r3, [r7, #52]	; 0x34
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c30:	4629      	mov	r1, r5
 8003c32:	024b      	lsls	r3, r1, #9
 8003c34:	4621      	mov	r1, r4
 8003c36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	024a      	lsls	r2, r1, #9
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c54:	f7fc ffc8 	bl	8000be8 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c62:	e067      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c64:	4b75      	ldr	r3, [pc, #468]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c70:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c7e:	2300      	movs	r3, #0
 8003c80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c82:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c86:	4622      	mov	r2, r4
 8003c88:	462b      	mov	r3, r5
 8003c8a:	f04f 0000 	mov.w	r0, #0
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	0159      	lsls	r1, r3, #5
 8003c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c98:	0150      	lsls	r0, r2, #5
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	1a51      	subs	r1, r2, r1
 8003ca2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003cb8:	4649      	mov	r1, r9
 8003cba:	018b      	lsls	r3, r1, #6
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	018a      	lsls	r2, r1, #6
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ccc:	4649      	mov	r1, r9
 8003cce:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cde:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ce2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ce6:	4692      	mov	sl, r2
 8003ce8:	469b      	mov	fp, r3
 8003cea:	4623      	mov	r3, r4
 8003cec:	eb1a 0303 	adds.w	r3, sl, r3
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d06:	4629      	mov	r1, r5
 8003d08:	028b      	lsls	r3, r1, #10
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d10:	4621      	mov	r1, r4
 8003d12:	028a      	lsls	r2, r1, #10
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d20:	677a      	str	r2, [r7, #116]	; 0x74
 8003d22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d26:	f7fc ff5f 	bl	8000be8 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4613      	mov	r3, r2
 8003d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d34:	4b41      	ldr	r3, [pc, #260]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d56:	e0eb      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d58:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d64:	4b35      	ldr	r3, [pc, #212]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d06b      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d70:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	2200      	movs	r2, #0
 8003d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	663b      	str	r3, [r7, #96]	; 0x60
 8003d84:	2300      	movs	r3, #0
 8003d86:	667b      	str	r3, [r7, #100]	; 0x64
 8003d88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	462b      	mov	r3, r5
 8003d90:	f04f 0000 	mov.w	r0, #0
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	0159      	lsls	r1, r3, #5
 8003d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d9e:	0150      	lsls	r0, r2, #5
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4621      	mov	r1, r4
 8003da6:	1a51      	subs	r1, r2, r1
 8003da8:	61b9      	str	r1, [r7, #24]
 8003daa:	4629      	mov	r1, r5
 8003dac:	eb63 0301 	sbc.w	r3, r3, r1
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dbe:	4659      	mov	r1, fp
 8003dc0:	018b      	lsls	r3, r1, #6
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dc8:	4651      	mov	r1, sl
 8003dca:	018a      	lsls	r2, r1, #6
 8003dcc:	4651      	mov	r1, sl
 8003dce:	ebb2 0801 	subs.w	r8, r2, r1
 8003dd2:	4659      	mov	r1, fp
 8003dd4:	eb63 0901 	sbc.w	r9, r3, r1
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003de4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003de8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dec:	4690      	mov	r8, r2
 8003dee:	4699      	mov	r9, r3
 8003df0:	4623      	mov	r3, r4
 8003df2:	eb18 0303 	adds.w	r3, r8, r3
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	462b      	mov	r3, r5
 8003dfa:	eb49 0303 	adc.w	r3, r9, r3
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	024b      	lsls	r3, r1, #9
 8003e10:	4621      	mov	r1, r4
 8003e12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e16:	4621      	mov	r1, r4
 8003e18:	024a      	lsls	r2, r1, #9
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e22:	2200      	movs	r2, #0
 8003e24:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e2c:	f7fc fedc 	bl	8000be8 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4613      	mov	r3, r2
 8003e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e3a:	e065      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x420>
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e48:	4b3d      	ldr	r3, [pc, #244]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	099b      	lsrs	r3, r3, #6
 8003e4e:	2200      	movs	r2, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	4611      	mov	r1, r2
 8003e54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e58:	653b      	str	r3, [r7, #80]	; 0x50
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e62:	4642      	mov	r2, r8
 8003e64:	464b      	mov	r3, r9
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	0159      	lsls	r1, r3, #5
 8003e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e74:	0150      	lsls	r0, r2, #5
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	1a51      	subs	r1, r2, r1
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	4649      	mov	r1, r9
 8003e82:	eb63 0301 	sbc.w	r3, r3, r1
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e94:	4659      	mov	r1, fp
 8003e96:	018b      	lsls	r3, r1, #6
 8003e98:	4651      	mov	r1, sl
 8003e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e9e:	4651      	mov	r1, sl
 8003ea0:	018a      	lsls	r2, r1, #6
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	1a54      	subs	r4, r2, r1
 8003ea6:	4659      	mov	r1, fp
 8003ea8:	eb63 0501 	sbc.w	r5, r3, r1
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	00eb      	lsls	r3, r5, #3
 8003eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eba:	00e2      	lsls	r2, r4, #3
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	461d      	mov	r5, r3
 8003ec0:	4643      	mov	r3, r8
 8003ec2:	18e3      	adds	r3, r4, r3
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	eb45 0303 	adc.w	r3, r5, r3
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eda:	4629      	mov	r1, r5
 8003edc:	028b      	lsls	r3, r1, #10
 8003ede:	4621      	mov	r1, r4
 8003ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	028a      	lsls	r2, r1, #10
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ef4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ef6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003efa:	f7fc fe75 	bl	8000be8 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4613      	mov	r3, r2
 8003f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0f1b      	lsrs	r3, r3, #28
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f26:	e003      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	37b8      	adds	r7, #184	; 0xb8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400

08003f48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e28d      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8083 	beq.w	800406e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f68:	4b94      	ldr	r3, [pc, #592]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d019      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f74:	4b91      	ldr	r3, [pc, #580]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f80:	4b8e      	ldr	r3, [pc, #568]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4b8b      	ldr	r3, [pc, #556]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	d112      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9a:	4b88      	ldr	r3, [pc, #544]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	4b84      	ldr	r3, [pc, #528]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05b      	beq.n	800406c <HAL_RCC_OscConfig+0x124>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d157      	bne.n	800406c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e25a      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x90>
 8003fca:	4b7c      	ldr	r3, [pc, #496]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a7b      	ldr	r2, [pc, #492]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0xcc>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0xb4>
 8003fe2:	4b76      	ldr	r3, [pc, #472]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a75      	ldr	r2, [pc, #468]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b73      	ldr	r3, [pc, #460]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a72      	ldr	r2, [pc, #456]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xcc>
 8003ffc:	4b6f      	ldr	r3, [pc, #444]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6e      	ldr	r2, [pc, #440]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b6c      	ldr	r3, [pc, #432]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6b      	ldr	r2, [pc, #428]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe f80e 	bl	800203c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004024:	f7fe f80a 	bl	800203c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e21f      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b61      	ldr	r3, [pc, #388]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0xdc>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd fffa 	bl	800203c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404c:	f7fd fff6 	bl	800203c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e20b      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	4b57      	ldr	r3, [pc, #348]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x104>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d06f      	beq.n	800415a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800407a:	4b50      	ldr	r3, [pc, #320]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b00      	cmp	r3, #0
 8004084:	d017      	beq.n	80040b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004086:	4b4d      	ldr	r3, [pc, #308]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800408e:	2b08      	cmp	r3, #8
 8004090:	d105      	bne.n	800409e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004092:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00b      	beq.n	80040b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	d11c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040aa:	4b44      	ldr	r3, [pc, #272]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d116      	bne.n	80040e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_RCC_OscConfig+0x186>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e1d3      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ce:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4937      	ldr	r1, [pc, #220]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e2:	e03a      	b.n	800415a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d020      	beq.n	800412e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ec:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <HAL_RCC_OscConfig+0x278>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fd ffa3 	bl	800203c <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fd ff9f 	bl	800203c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e1b4      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4925      	ldr	r1, [pc, #148]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004128:	4313      	orrs	r3, r2
 800412a:	600b      	str	r3, [r1, #0]
 800412c:	e015      	b.n	800415a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCC_OscConfig+0x278>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fd ff82 	bl	800203c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413c:	f7fd ff7e 	bl	800203c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e193      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414e:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d036      	beq.n	80041d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_RCC_OscConfig+0x27c>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004174:	f7fd ff62 	bl	800203c <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417c:	f7fd ff5e 	bl	800203c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e173      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_OscConfig+0x274>)
 8004190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x234>
 800419a:	e01b      	b.n	80041d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_OscConfig+0x27c>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a2:	f7fd ff4b 	bl	800203c <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	e00e      	b.n	80041c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041aa:	f7fd ff47 	bl	800203c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d907      	bls.n	80041c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e15c      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
 80041bc:	40023800 	.word	0x40023800
 80041c0:	42470000 	.word	0x42470000
 80041c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	4b8a      	ldr	r3, [pc, #552]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 80041ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1ea      	bne.n	80041aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8097 	beq.w	8004310 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e6:	4b83      	ldr	r3, [pc, #524]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10f      	bne.n	8004212 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a7e      	ldr	r2, [pc, #504]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b7c      	ldr	r3, [pc, #496]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004212:	4b79      	ldr	r3, [pc, #484]	; (80043f8 <HAL_RCC_OscConfig+0x4b0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d118      	bne.n	8004250 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421e:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCC_OscConfig+0x4b0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a75      	ldr	r2, [pc, #468]	; (80043f8 <HAL_RCC_OscConfig+0x4b0>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422a:	f7fd ff07 	bl	800203c <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004232:	f7fd ff03 	bl	800203c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e118      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	4b6c      	ldr	r3, [pc, #432]	; (80043f8 <HAL_RCC_OscConfig+0x4b0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x31e>
 8004258:	4b66      	ldr	r3, [pc, #408]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a65      	ldr	r2, [pc, #404]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	e01c      	b.n	80042a0 <HAL_RCC_OscConfig+0x358>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b05      	cmp	r3, #5
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x340>
 800426e:	4b61      	ldr	r3, [pc, #388]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4a60      	ldr	r2, [pc, #384]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 8004274:	f043 0304 	orr.w	r3, r3, #4
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
 800427a:	4b5e      	ldr	r3, [pc, #376]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a5d      	ldr	r2, [pc, #372]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	e00b      	b.n	80042a0 <HAL_RCC_OscConfig+0x358>
 8004288:	4b5a      	ldr	r3, [pc, #360]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a59      	ldr	r2, [pc, #356]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a56      	ldr	r2, [pc, #344]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 800429a:	f023 0304 	bic.w	r3, r3, #4
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fd fec8 	bl	800203c <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd fec4 	bl	800203c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0d7      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	4b4b      	ldr	r3, [pc, #300]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ee      	beq.n	80042b0 <HAL_RCC_OscConfig+0x368>
 80042d2:	e014      	b.n	80042fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd feb2 	bl	800203c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fd feae 	bl	800203c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0c1      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f2:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ee      	bne.n	80042dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d105      	bne.n	8004310 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004304:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	4a3a      	ldr	r2, [pc, #232]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 800430a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80ad 	beq.w	8004474 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800431a:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b08      	cmp	r3, #8
 8004324:	d060      	beq.n	80043e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d145      	bne.n	80043ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432e:	4b33      	ldr	r3, [pc, #204]	; (80043fc <HAL_RCC_OscConfig+0x4b4>)
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd fe82 	bl	800203c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd fe7e 	bl	800203c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e093      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	3b01      	subs	r3, #1
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	491b      	ldr	r1, [pc, #108]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438c:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCC_OscConfig+0x4b4>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd fe53 	bl	800203c <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439a:	f7fd fe4f 	bl	800203c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e064      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x452>
 80043b8:	e05c      	b.n	8004474 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <HAL_RCC_OscConfig+0x4b4>)
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd fe3c 	bl	800203c <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fd fe38 	bl	800203c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e04d      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCC_OscConfig+0x4ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x480>
 80043e6:	e045      	b.n	8004474 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d107      	bne.n	8004400 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e040      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40007000 	.word	0x40007000
 80043fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004400:	4b1f      	ldr	r3, [pc, #124]	; (8004480 <HAL_RCC_OscConfig+0x538>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d030      	beq.n	8004470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d129      	bne.n	8004470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d122      	bne.n	8004470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004438:	4293      	cmp	r3, r2
 800443a:	d119      	bne.n	8004470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	3b01      	subs	r3, #1
 800444a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d10f      	bne.n	8004470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d107      	bne.n	8004470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800

08004484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e041      	b.n	800451a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fd fb34 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f000 fca8 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e04e      	b.n	80045da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a23      	ldr	r2, [pc, #140]	; (80045e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d022      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d01d      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_TIM_Base_Start_IT+0xc8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d018      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a18      	ldr	r2, [pc, #96]	; (8004600 <HAL_TIM_Base_Start_IT+0xdc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d111      	bne.n	80045c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d010      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c6:	e007      	b.n	80045d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40010400 	.word	0x40010400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40001800 	.word	0x40001800

08004604 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a1a      	ldr	r2, [r3, #32]
 8004622:	f241 1311 	movw	r3, #4369	; 0x1111
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10f      	bne.n	800464c <HAL_TIM_Base_Stop_IT+0x48>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6a1a      	ldr	r2, [r3, #32]
 8004632:	f240 4344 	movw	r3, #1092	; 0x444
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <HAL_TIM_Base_Stop_IT+0x48>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e041      	b.n	80046f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f839 	bl	8004700 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2202      	movs	r2, #2
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 fbb9 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <HAL_TIM_PWM_Start+0x24>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e022      	b.n	800477e <HAL_TIM_PWM_Start+0x6a>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b04      	cmp	r3, #4
 800473c:	d109      	bne.n	8004752 <HAL_TIM_PWM_Start+0x3e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b01      	cmp	r3, #1
 8004748:	bf14      	ite	ne
 800474a:	2301      	movne	r3, #1
 800474c:	2300      	moveq	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	e015      	b.n	800477e <HAL_TIM_PWM_Start+0x6a>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d109      	bne.n	800476c <HAL_TIM_PWM_Start+0x58>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e008      	b.n	800477e <HAL_TIM_PWM_Start+0x6a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e07c      	b.n	8004880 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start+0x82>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004794:	e013      	b.n	80047be <HAL_TIM_PWM_Start+0xaa>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_PWM_Start+0x92>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a4:	e00b      	b.n	80047be <HAL_TIM_PWM_Start+0xaa>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_PWM_Start+0xa2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b4:	e003      	b.n	80047be <HAL_TIM_PWM_Start+0xaa>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	6839      	ldr	r1, [r7, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fe10 	bl	80053ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2d      	ldr	r2, [pc, #180]	; (8004888 <HAL_TIM_PWM_Start+0x174>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <HAL_TIM_PWM_Start+0xcc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2c      	ldr	r2, [pc, #176]	; (800488c <HAL_TIM_PWM_Start+0x178>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <HAL_TIM_PWM_Start+0xd0>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_TIM_PWM_Start+0xd2>
 80047e4:	2300      	movs	r3, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a22      	ldr	r2, [pc, #136]	; (8004888 <HAL_TIM_PWM_Start+0x174>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_TIM_PWM_Start+0x136>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480c:	d01d      	beq.n	800484a <HAL_TIM_PWM_Start+0x136>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <HAL_TIM_PWM_Start+0x17c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_TIM_PWM_Start+0x136>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_TIM_PWM_Start+0x180>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_TIM_PWM_Start+0x136>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <HAL_TIM_PWM_Start+0x184>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_TIM_PWM_Start+0x136>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a16      	ldr	r2, [pc, #88]	; (800488c <HAL_TIM_PWM_Start+0x178>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_TIM_PWM_Start+0x136>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_TIM_PWM_Start+0x188>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_TIM_PWM_Start+0x136>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <HAL_TIM_PWM_Start+0x18c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d111      	bne.n	800486e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b06      	cmp	r3, #6
 800485a:	d010      	beq.n	800487e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	e007      	b.n	800487e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40010000 	.word	0x40010000
 800488c:	40010400 	.word	0x40010400
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40014000 	.word	0x40014000
 80048a0:	40001800 	.word	0x40001800

080048a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d122      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d11b      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0202 	mvn.w	r2, #2
 80048d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa77 	bl	8004dda <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa69 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fa7a 	bl	8004dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b04      	cmp	r3, #4
 800490c:	d122      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d11b      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0204 	mvn.w	r2, #4
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa4d 	bl	8004dda <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa3f 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa50 	bl	8004dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b08      	cmp	r3, #8
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b08      	cmp	r3, #8
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0208 	mvn.w	r2, #8
 8004978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2204      	movs	r2, #4
 800497e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa23 	bl	8004dda <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa15 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa26 	bl	8004dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d122      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d11b      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0210 	mvn.w	r2, #16
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2208      	movs	r2, #8
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f9f9 	bl	8004dda <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f9eb 	bl	8004dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f9fc 	bl	8004dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10e      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d107      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0201 	mvn.w	r2, #1
 8004a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc ff90 	bl	8001948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d10e      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d107      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fd78 	bl	8005544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d10e      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d107      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9c1 	bl	8004e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d10e      	bne.n	8004aac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d107      	bne.n	8004aac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0220 	mvn.w	r2, #32
 8004aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fd42 	bl	8005530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e0ae      	b.n	8004c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	f200 809f 	bhi.w	8004c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004c21 	.word	0x08004c21
 8004af0:	08004c21 	.word	0x08004c21
 8004af4:	08004c21 	.word	0x08004c21
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004c21 	.word	0x08004c21
 8004b00:	08004c21 	.word	0x08004c21
 8004b04:	08004c21 	.word	0x08004c21
 8004b08:	08004b9f 	.word	0x08004b9f
 8004b0c:	08004c21 	.word	0x08004c21
 8004b10:	08004c21 	.word	0x08004c21
 8004b14:	08004c21 	.word	0x08004c21
 8004b18:	08004bdf 	.word	0x08004bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fa18 	bl	8004f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699a      	ldr	r2, [r3, #24]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0204 	bic.w	r2, r2, #4
 8004b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6999      	ldr	r1, [r3, #24]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	619a      	str	r2, [r3, #24]
      break;
 8004b5a:	e064      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa68 	bl	8005038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	619a      	str	r2, [r3, #24]
      break;
 8004b9c:	e043      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fabd 	bl	8005124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0208 	orr.w	r2, r2, #8
 8004bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	61da      	str	r2, [r3, #28]
      break;
 8004bdc:	e023      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fb11 	bl	800520c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	021a      	lsls	r2, r3, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	61da      	str	r2, [r3, #28]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	75fb      	strb	r3, [r7, #23]
      break;
 8004c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIM_ConfigClockSource+0x1c>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0b4      	b.n	8004dbe <HAL_TIM_ConfigClockSource+0x186>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c8c:	d03e      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xd4>
 8004c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c92:	f200 8087 	bhi.w	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	f000 8086 	beq.w	8004daa <HAL_TIM_ConfigClockSource+0x172>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca2:	d87f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b70      	cmp	r3, #112	; 0x70
 8004ca6:	d01a      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0xa6>
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d87b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b60      	cmp	r3, #96	; 0x60
 8004cae:	d050      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x11a>
 8004cb0:	2b60      	cmp	r3, #96	; 0x60
 8004cb2:	d877      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b50      	cmp	r3, #80	; 0x50
 8004cb6:	d03c      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0xfa>
 8004cb8:	2b50      	cmp	r3, #80	; 0x50
 8004cba:	d873      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d058      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x13a>
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d86f      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b30      	cmp	r3, #48	; 0x30
 8004cc6:	d064      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b30      	cmp	r3, #48	; 0x30
 8004cca:	d86b      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d060      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d867      	bhi.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d05c      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d05a      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x15a>
 8004cdc:	e062      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6899      	ldr	r1, [r3, #8]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f000 fb5d 	bl	80053ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	609a      	str	r2, [r3, #8]
      break;
 8004d0a:	e04f      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f000 fb46 	bl	80053ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d2e:	609a      	str	r2, [r3, #8]
      break;
 8004d30:	e03c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 faba 	bl	80052b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2150      	movs	r1, #80	; 0x50
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fb13 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004d50:	e02c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 fad9 	bl	8005316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2160      	movs	r1, #96	; 0x60
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fb03 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004d70:	e01c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 fa9a 	bl	80052b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2140      	movs	r1, #64	; 0x40
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 faf3 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004d90:	e00c      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 faea 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004da2:	e003      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      break;
 8004da8:	e000      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a40      	ldr	r2, [pc, #256]	; (8004f2c <TIM_Base_SetConfig+0x114>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d00f      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a3d      	ldr	r2, [pc, #244]	; (8004f30 <TIM_Base_SetConfig+0x118>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3c      	ldr	r2, [pc, #240]	; (8004f34 <TIM_Base_SetConfig+0x11c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a3b      	ldr	r2, [pc, #236]	; (8004f38 <TIM_Base_SetConfig+0x120>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3a      	ldr	r2, [pc, #232]	; (8004f3c <TIM_Base_SetConfig+0x124>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d108      	bne.n	8004e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2f      	ldr	r2, [pc, #188]	; (8004f2c <TIM_Base_SetConfig+0x114>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d02b      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e78:	d027      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2c      	ldr	r2, [pc, #176]	; (8004f30 <TIM_Base_SetConfig+0x118>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d023      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2b      	ldr	r2, [pc, #172]	; (8004f34 <TIM_Base_SetConfig+0x11c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01f      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <TIM_Base_SetConfig+0x120>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01b      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a29      	ldr	r2, [pc, #164]	; (8004f3c <TIM_Base_SetConfig+0x124>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a28      	ldr	r2, [pc, #160]	; (8004f40 <TIM_Base_SetConfig+0x128>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a27      	ldr	r2, [pc, #156]	; (8004f44 <TIM_Base_SetConfig+0x12c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a26      	ldr	r2, [pc, #152]	; (8004f48 <TIM_Base_SetConfig+0x130>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a25      	ldr	r2, [pc, #148]	; (8004f4c <TIM_Base_SetConfig+0x134>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a24      	ldr	r2, [pc, #144]	; (8004f50 <TIM_Base_SetConfig+0x138>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a23      	ldr	r2, [pc, #140]	; (8004f54 <TIM_Base_SetConfig+0x13c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <TIM_Base_SetConfig+0x114>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_Base_SetConfig+0xf8>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a0c      	ldr	r2, [pc, #48]	; (8004f3c <TIM_Base_SetConfig+0x124>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d103      	bne.n	8004f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	615a      	str	r2, [r3, #20]
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40010400 	.word	0x40010400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800
 8004f4c:	40001800 	.word	0x40001800
 8004f50:	40001c00 	.word	0x40001c00
 8004f54:	40002000 	.word	0x40002000

08004f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0303 	bic.w	r3, r3, #3
 8004f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 0302 	bic.w	r3, r3, #2
 8004fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a20      	ldr	r2, [pc, #128]	; (8005030 <TIM_OC1_SetConfig+0xd8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_OC1_SetConfig+0x64>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <TIM_OC1_SetConfig+0xdc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d10c      	bne.n	8004fd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0308 	bic.w	r3, r3, #8
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a15      	ldr	r2, [pc, #84]	; (8005030 <TIM_OC1_SetConfig+0xd8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_OC1_SetConfig+0x8e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a14      	ldr	r2, [pc, #80]	; (8005034 <TIM_OC1_SetConfig+0xdc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d111      	bne.n	800500a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40010000 	.word	0x40010000
 8005034:	40010400 	.word	0x40010400

08005038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f023 0210 	bic.w	r2, r3, #16
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0320 	bic.w	r3, r3, #32
 8005082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a22      	ldr	r2, [pc, #136]	; (800511c <TIM_OC2_SetConfig+0xe4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC2_SetConfig+0x68>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a21      	ldr	r2, [pc, #132]	; (8005120 <TIM_OC2_SetConfig+0xe8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d10d      	bne.n	80050bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a17      	ldr	r2, [pc, #92]	; (800511c <TIM_OC2_SetConfig+0xe4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_OC2_SetConfig+0x94>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a16      	ldr	r2, [pc, #88]	; (8005120 <TIM_OC2_SetConfig+0xe8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d113      	bne.n	80050f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40010000 	.word	0x40010000
 8005120:	40010400 	.word	0x40010400

08005124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800516c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a21      	ldr	r2, [pc, #132]	; (8005204 <TIM_OC3_SetConfig+0xe0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_OC3_SetConfig+0x66>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a20      	ldr	r2, [pc, #128]	; (8005208 <TIM_OC3_SetConfig+0xe4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10d      	bne.n	80051a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a16      	ldr	r2, [pc, #88]	; (8005204 <TIM_OC3_SetConfig+0xe0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC3_SetConfig+0x92>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a15      	ldr	r2, [pc, #84]	; (8005208 <TIM_OC3_SetConfig+0xe4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d113      	bne.n	80051de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	621a      	str	r2, [r3, #32]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40010000 	.word	0x40010000
 8005208:	40010400 	.word	0x40010400

0800520c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	031b      	lsls	r3, r3, #12
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a12      	ldr	r2, [pc, #72]	; (80052b0 <TIM_OC4_SetConfig+0xa4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d003      	beq.n	8005274 <TIM_OC4_SetConfig+0x68>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <TIM_OC4_SetConfig+0xa8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d109      	bne.n	8005288 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800527a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	019b      	lsls	r3, r3, #6
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40010400 	.word	0x40010400

080052b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f023 030a 	bic.w	r3, r3, #10
 80052f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	f023 0210 	bic.w	r2, r3, #16
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	031b      	lsls	r3, r3, #12
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	f043 0307 	orr.w	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	021a      	lsls	r2, r3, #8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2201      	movs	r2, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	43db      	mvns	r3, r3
 800540e:	401a      	ands	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	431a      	orrs	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800544c:	2302      	movs	r3, #2
 800544e:	e05a      	b.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a21      	ldr	r2, [pc, #132]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d022      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549c:	d01d      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d018      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1b      	ldr	r2, [pc, #108]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00e      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a15      	ldr	r2, [pc, #84]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10c      	bne.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40010400 	.word	0x40010400
 8005528:	40014000 	.word	0x40014000
 800552c:	40001800 	.word	0x40001800

08005530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e03f      	b.n	80055ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fc fb5c 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2224      	movs	r2, #36	; 0x24
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800559a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fd7b 	bl	8006098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b08a      	sub	sp, #40	; 0x28
 80055f6:	af02      	add	r7, sp, #8
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	4613      	mov	r3, r2
 8005600:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b20      	cmp	r3, #32
 8005610:	d17c      	bne.n	800570c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_UART_Transmit+0x2c>
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e075      	b.n	800570e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_UART_Transmit+0x3e>
 800562c:	2302      	movs	r3, #2
 800562e:	e06e      	b.n	800570e <HAL_UART_Transmit+0x11c>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2221      	movs	r2, #33	; 0x21
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005646:	f7fc fcf9 	bl	800203c <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	88fa      	ldrh	r2, [r7, #6]
 8005656:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005660:	d108      	bne.n	8005674 <HAL_UART_Transmit+0x82>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e003      	b.n	800567c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005678:	2300      	movs	r3, #0
 800567a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005684:	e02a      	b.n	80056dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	2180      	movs	r1, #128	; 0x80
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 faf9 	bl	8005c88 <UART_WaitOnFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e036      	b.n	800570e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	3302      	adds	r3, #2
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	e007      	b.n	80056ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	3301      	adds	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1cf      	bne.n	8005686 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2140      	movs	r1, #64	; 0x40
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fac9 	bl	8005c88 <UART_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e006      	b.n	800570e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	e000      	b.n	800570e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
  }
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b0ba      	sub	sp, #232	; 0xe8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800573e:	2300      	movs	r3, #0
 8005740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005744:	2300      	movs	r3, #0
 8005746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_UART_IRQHandler+0x66>
 800576a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fbd3 	bl	8005f22 <UART_Receive_IT>
      return;
 800577c:	e256      	b.n	8005c2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800577e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80de 	beq.w	8005944 <HAL_UART_IRQHandler+0x22c>
 8005788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005798:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80d1 	beq.w	8005944 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <HAL_UART_IRQHandler+0xae>
 80057ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f043 0201 	orr.w	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <HAL_UART_IRQHandler+0xd2>
 80057d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d005      	beq.n	80057ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f043 0202 	orr.w	r2, r3, #2
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <HAL_UART_IRQHandler+0xf6>
 80057f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d005      	beq.n	800580e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f043 0204 	orr.w	r2, r3, #4
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d011      	beq.n	800583e <HAL_UART_IRQHandler+0x126>
 800581a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f043 0208 	orr.w	r2, r3, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 81ed 	beq.w	8005c22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_UART_IRQHandler+0x14e>
 8005854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fb5e 	bl	8005f22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <HAL_UART_IRQHandler+0x17a>
 800588a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d04f      	beq.n	8005932 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa66 	bl	8005d64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d141      	bne.n	800592a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3314      	adds	r3, #20
 80058ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3314      	adds	r3, #20
 80058ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1d9      	bne.n	80058a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d013      	beq.n	8005922 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	4a7d      	ldr	r2, [pc, #500]	; (8005af4 <HAL_UART_IRQHandler+0x3dc>)
 8005900:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	4618      	mov	r0, r3
 8005908:	f7fd f89f 	bl	8002a4a <HAL_DMA_Abort_IT>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d016      	beq.n	8005940 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800591c:	4610      	mov	r0, r2
 800591e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005920:	e00e      	b.n	8005940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f99a 	bl	8005c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	e00a      	b.n	8005940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f996 	bl	8005c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	e006      	b.n	8005940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f992 	bl	8005c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800593e:	e170      	b.n	8005c22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	bf00      	nop
    return;
 8005942:	e16e      	b.n	8005c22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005948:	2b01      	cmp	r3, #1
 800594a:	f040 814a 	bne.w	8005be2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8143 	beq.w	8005be2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800595c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 813c 	beq.w	8005be2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800596a:	2300      	movs	r3, #0
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	f040 80b4 	bne.w	8005af8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800599c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8140 	beq.w	8005c26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ae:	429a      	cmp	r2, r3
 80059b0:	f080 8139 	bcs.w	8005c26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c6:	f000 8088 	beq.w	8005ada <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1d9      	bne.n	80059ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3314      	adds	r3, #20
 8005a1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3314      	adds	r3, #20
 8005a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e1      	bne.n	8005a16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3314      	adds	r3, #20
 8005a58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3314      	adds	r3, #20
 8005a72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e3      	bne.n	8005a52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aaa:	f023 0310 	bic.w	r3, r3, #16
 8005aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005abc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005abe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e3      	bne.n	8005a98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fc ff48 	bl	800296a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f8c0 	bl	8005c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005af0:	e099      	b.n	8005c26 <HAL_UART_IRQHandler+0x50e>
 8005af2:	bf00      	nop
 8005af4:	08005e2b 	.word	0x08005e2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 808b 	beq.w	8005c2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8086 	beq.w	8005c2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	330c      	adds	r3, #12
 8005b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b42:	647a      	str	r2, [r7, #68]	; 0x44
 8005b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e3      	bne.n	8005b1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3314      	adds	r3, #20
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	623b      	str	r3, [r7, #32]
   return(result);
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3314      	adds	r3, #20
 8005b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b82:	e841 2300 	strex	r3, r2, [r1]
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1e3      	bne.n	8005b56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0310 	bic.w	r3, r3, #16
 8005bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	330c      	adds	r3, #12
 8005bbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005bc0:	61fa      	str	r2, [r7, #28]
 8005bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	69b9      	ldr	r1, [r7, #24]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e3      	bne.n	8005b9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f848 	bl	8005c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005be0:	e023      	b.n	8005c2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <HAL_UART_IRQHandler+0x4ea>
 8005bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f929 	bl	8005e52 <UART_Transmit_IT>
    return;
 8005c00:	e014      	b.n	8005c2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00e      	beq.n	8005c2c <HAL_UART_IRQHandler+0x514>
 8005c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d008      	beq.n	8005c2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f969 	bl	8005ef2 <UART_EndTransmit_IT>
    return;
 8005c20:	e004      	b.n	8005c2c <HAL_UART_IRQHandler+0x514>
    return;
 8005c22:	bf00      	nop
 8005c24:	e002      	b.n	8005c2c <HAL_UART_IRQHandler+0x514>
      return;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <HAL_UART_IRQHandler+0x514>
      return;
 8005c2a:	bf00      	nop
  }
}
 8005c2c:	37e8      	adds	r7, #232	; 0xe8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop

08005c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b090      	sub	sp, #64	; 0x40
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c98:	e050      	b.n	8005d3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ca0:	d04c      	beq.n	8005d3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ca8:	f7fc f9c8 	bl	800203c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d241      	bcs.n	8005d3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cd8:	637a      	str	r2, [r7, #52]	; 0x34
 8005cda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d0c:	623a      	str	r2, [r7, #32]
 8005d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	69f9      	ldr	r1, [r7, #28]
 8005d12:	6a3a      	ldr	r2, [r7, #32]
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e00f      	b.n	8005d5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2301      	moveq	r3, #1
 8005d4e:	2300      	movne	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d09f      	beq.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3740      	adds	r7, #64	; 0x40
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b095      	sub	sp, #84	; 0x54
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d8c:	643a      	str	r2, [r7, #64]	; 0x40
 8005d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3314      	adds	r3, #20
 8005da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3314      	adds	r3, #20
 8005dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e5      	bne.n	8005da0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d119      	bne.n	8005e10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f023 0310 	bic.w	r3, r3, #16
 8005df2:	647b      	str	r3, [r7, #68]	; 0x44
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfc:	61ba      	str	r2, [r7, #24]
 8005dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	613b      	str	r3, [r7, #16]
   return(result);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e5      	bne.n	8005ddc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e1e:	bf00      	nop
 8005e20:	3754      	adds	r7, #84	; 0x54
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7ff ff09 	bl	8005c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b21      	cmp	r3, #33	; 0x21
 8005e64:	d13e      	bne.n	8005ee4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6e:	d114      	bne.n	8005e9a <UART_Transmit_IT+0x48>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d110      	bne.n	8005e9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	1c9a      	adds	r2, r3, #2
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	621a      	str	r2, [r3, #32]
 8005e98:	e008      	b.n	8005eac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	1c59      	adds	r1, r3, #1
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6211      	str	r1, [r2, #32]
 8005ea4:	781a      	ldrb	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10f      	bne.n	8005ee0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ece:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ede:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff fe8e 	bl	8005c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b08c      	sub	sp, #48	; 0x30
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b22      	cmp	r3, #34	; 0x22
 8005f34:	f040 80ab 	bne.w	800608e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f40:	d117      	bne.n	8005f72 <UART_Receive_IT+0x50>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d113      	bne.n	8005f72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	1c9a      	adds	r2, r3, #2
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f70:	e026      	b.n	8005fc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f84:	d007      	beq.n	8005f96 <UART_Receive_IT+0x74>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <UART_Receive_IT+0x82>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e008      	b.n	8005fb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d15a      	bne.n	800608a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0220 	bic.w	r2, r2, #32
 8005fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ff2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	2b01      	cmp	r3, #1
 8006012:	d135      	bne.n	8006080 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	330c      	adds	r3, #12
 8006020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	613b      	str	r3, [r7, #16]
   return(result);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f023 0310 	bic.w	r3, r3, #16
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	330c      	adds	r3, #12
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	623a      	str	r2, [r7, #32]
 800603c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	69f9      	ldr	r1, [r7, #28]
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	61bb      	str	r3, [r7, #24]
   return(result);
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e5      	bne.n	800601a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b10      	cmp	r3, #16
 800605a:	d10a      	bne.n	8006072 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff fdf9 	bl	8005c70 <HAL_UARTEx_RxEventCallback>
 800607e:	e002      	b.n	8006086 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff fde1 	bl	8005c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	e002      	b.n	8006090 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	e000      	b.n	8006090 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800608e:	2302      	movs	r3, #2
  }
}
 8006090:	4618      	mov	r0, r3
 8006092:	3730      	adds	r7, #48	; 0x30
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800609c:	b0c0      	sub	sp, #256	; 0x100
 800609e:	af00      	add	r7, sp, #0
 80060a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b4:	68d9      	ldr	r1, [r3, #12]
 80060b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	ea40 0301 	orr.w	r3, r0, r1
 80060c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060f0:	f021 010c 	bic.w	r1, r1, #12
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060fe:	430b      	orrs	r3, r1
 8006100:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006112:	6999      	ldr	r1, [r3, #24]
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	ea40 0301 	orr.w	r3, r0, r1
 800611e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b8f      	ldr	r3, [pc, #572]	; (8006364 <UART_SetConfig+0x2cc>)
 8006128:	429a      	cmp	r2, r3
 800612a:	d005      	beq.n	8006138 <UART_SetConfig+0xa0>
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b8d      	ldr	r3, [pc, #564]	; (8006368 <UART_SetConfig+0x2d0>)
 8006134:	429a      	cmp	r2, r3
 8006136:	d104      	bne.n	8006142 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006138:	f7fd fcc2 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 800613c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006140:	e003      	b.n	800614a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006142:	f7fd fca9 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8006146:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006154:	f040 810c 	bne.w	8006370 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800615c:	2200      	movs	r2, #0
 800615e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006162:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006166:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800616a:	4622      	mov	r2, r4
 800616c:	462b      	mov	r3, r5
 800616e:	1891      	adds	r1, r2, r2
 8006170:	65b9      	str	r1, [r7, #88]	; 0x58
 8006172:	415b      	adcs	r3, r3
 8006174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006176:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800617a:	4621      	mov	r1, r4
 800617c:	eb12 0801 	adds.w	r8, r2, r1
 8006180:	4629      	mov	r1, r5
 8006182:	eb43 0901 	adc.w	r9, r3, r1
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800619a:	4690      	mov	r8, r2
 800619c:	4699      	mov	r9, r3
 800619e:	4623      	mov	r3, r4
 80061a0:	eb18 0303 	adds.w	r3, r8, r3
 80061a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061a8:	462b      	mov	r3, r5
 80061aa:	eb49 0303 	adc.w	r3, r9, r3
 80061ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061c6:	460b      	mov	r3, r1
 80061c8:	18db      	adds	r3, r3, r3
 80061ca:	653b      	str	r3, [r7, #80]	; 0x50
 80061cc:	4613      	mov	r3, r2
 80061ce:	eb42 0303 	adc.w	r3, r2, r3
 80061d2:	657b      	str	r3, [r7, #84]	; 0x54
 80061d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061dc:	f7fa fd04 	bl	8000be8 <__aeabi_uldivmod>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4b61      	ldr	r3, [pc, #388]	; (800636c <UART_SetConfig+0x2d4>)
 80061e6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	011c      	lsls	r4, r3, #4
 80061ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006200:	4642      	mov	r2, r8
 8006202:	464b      	mov	r3, r9
 8006204:	1891      	adds	r1, r2, r2
 8006206:	64b9      	str	r1, [r7, #72]	; 0x48
 8006208:	415b      	adcs	r3, r3
 800620a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800620c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006210:	4641      	mov	r1, r8
 8006212:	eb12 0a01 	adds.w	sl, r2, r1
 8006216:	4649      	mov	r1, r9
 8006218:	eb43 0b01 	adc.w	fp, r3, r1
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006228:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800622c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006230:	4692      	mov	sl, r2
 8006232:	469b      	mov	fp, r3
 8006234:	4643      	mov	r3, r8
 8006236:	eb1a 0303 	adds.w	r3, sl, r3
 800623a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800623e:	464b      	mov	r3, r9
 8006240:	eb4b 0303 	adc.w	r3, fp, r3
 8006244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006254:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006258:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800625c:	460b      	mov	r3, r1
 800625e:	18db      	adds	r3, r3, r3
 8006260:	643b      	str	r3, [r7, #64]	; 0x40
 8006262:	4613      	mov	r3, r2
 8006264:	eb42 0303 	adc.w	r3, r2, r3
 8006268:	647b      	str	r3, [r7, #68]	; 0x44
 800626a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800626e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006272:	f7fa fcb9 	bl	8000be8 <__aeabi_uldivmod>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4611      	mov	r1, r2
 800627c:	4b3b      	ldr	r3, [pc, #236]	; (800636c <UART_SetConfig+0x2d4>)
 800627e:	fba3 2301 	umull	r2, r3, r3, r1
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	2264      	movs	r2, #100	; 0x64
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	1acb      	subs	r3, r1, r3
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006292:	4b36      	ldr	r3, [pc, #216]	; (800636c <UART_SetConfig+0x2d4>)
 8006294:	fba3 2302 	umull	r2, r3, r3, r2
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062a0:	441c      	add	r4, r3
 80062a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062b4:	4642      	mov	r2, r8
 80062b6:	464b      	mov	r3, r9
 80062b8:	1891      	adds	r1, r2, r2
 80062ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80062bc:	415b      	adcs	r3, r3
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062c4:	4641      	mov	r1, r8
 80062c6:	1851      	adds	r1, r2, r1
 80062c8:	6339      	str	r1, [r7, #48]	; 0x30
 80062ca:	4649      	mov	r1, r9
 80062cc:	414b      	adcs	r3, r1
 80062ce:	637b      	str	r3, [r7, #52]	; 0x34
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062dc:	4659      	mov	r1, fp
 80062de:	00cb      	lsls	r3, r1, #3
 80062e0:	4651      	mov	r1, sl
 80062e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e6:	4651      	mov	r1, sl
 80062e8:	00ca      	lsls	r2, r1, #3
 80062ea:	4610      	mov	r0, r2
 80062ec:	4619      	mov	r1, r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	4642      	mov	r2, r8
 80062f2:	189b      	adds	r3, r3, r2
 80062f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062f8:	464b      	mov	r3, r9
 80062fa:	460a      	mov	r2, r1
 80062fc:	eb42 0303 	adc.w	r3, r2, r3
 8006300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006310:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006314:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006318:	460b      	mov	r3, r1
 800631a:	18db      	adds	r3, r3, r3
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
 800631e:	4613      	mov	r3, r2
 8006320:	eb42 0303 	adc.w	r3, r2, r3
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800632a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800632e:	f7fa fc5b 	bl	8000be8 <__aeabi_uldivmod>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4b0d      	ldr	r3, [pc, #52]	; (800636c <UART_SetConfig+0x2d4>)
 8006338:	fba3 1302 	umull	r1, r3, r3, r2
 800633c:	095b      	lsrs	r3, r3, #5
 800633e:	2164      	movs	r1, #100	; 0x64
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	3332      	adds	r3, #50	; 0x32
 800634a:	4a08      	ldr	r2, [pc, #32]	; (800636c <UART_SetConfig+0x2d4>)
 800634c:	fba2 2303 	umull	r2, r3, r2, r3
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	f003 0207 	and.w	r2, r3, #7
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4422      	add	r2, r4
 800635e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006360:	e105      	b.n	800656e <UART_SetConfig+0x4d6>
 8006362:	bf00      	nop
 8006364:	40011000 	.word	0x40011000
 8006368:	40011400 	.word	0x40011400
 800636c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006374:	2200      	movs	r2, #0
 8006376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800637a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800637e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006382:	4642      	mov	r2, r8
 8006384:	464b      	mov	r3, r9
 8006386:	1891      	adds	r1, r2, r2
 8006388:	6239      	str	r1, [r7, #32]
 800638a:	415b      	adcs	r3, r3
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
 800638e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006392:	4641      	mov	r1, r8
 8006394:	1854      	adds	r4, r2, r1
 8006396:	4649      	mov	r1, r9
 8006398:	eb43 0501 	adc.w	r5, r3, r1
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	00eb      	lsls	r3, r5, #3
 80063a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063aa:	00e2      	lsls	r2, r4, #3
 80063ac:	4614      	mov	r4, r2
 80063ae:	461d      	mov	r5, r3
 80063b0:	4643      	mov	r3, r8
 80063b2:	18e3      	adds	r3, r4, r3
 80063b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063b8:	464b      	mov	r3, r9
 80063ba:	eb45 0303 	adc.w	r3, r5, r3
 80063be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063de:	4629      	mov	r1, r5
 80063e0:	008b      	lsls	r3, r1, #2
 80063e2:	4621      	mov	r1, r4
 80063e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063e8:	4621      	mov	r1, r4
 80063ea:	008a      	lsls	r2, r1, #2
 80063ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063f0:	f7fa fbfa 	bl	8000be8 <__aeabi_uldivmod>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4b60      	ldr	r3, [pc, #384]	; (800657c <UART_SetConfig+0x4e4>)
 80063fa:	fba3 2302 	umull	r2, r3, r3, r2
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	011c      	lsls	r4, r3, #4
 8006402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006406:	2200      	movs	r2, #0
 8006408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800640c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006410:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006414:	4642      	mov	r2, r8
 8006416:	464b      	mov	r3, r9
 8006418:	1891      	adds	r1, r2, r2
 800641a:	61b9      	str	r1, [r7, #24]
 800641c:	415b      	adcs	r3, r3
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006424:	4641      	mov	r1, r8
 8006426:	1851      	adds	r1, r2, r1
 8006428:	6139      	str	r1, [r7, #16]
 800642a:	4649      	mov	r1, r9
 800642c:	414b      	adcs	r3, r1
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800643c:	4659      	mov	r1, fp
 800643e:	00cb      	lsls	r3, r1, #3
 8006440:	4651      	mov	r1, sl
 8006442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006446:	4651      	mov	r1, sl
 8006448:	00ca      	lsls	r2, r1, #3
 800644a:	4610      	mov	r0, r2
 800644c:	4619      	mov	r1, r3
 800644e:	4603      	mov	r3, r0
 8006450:	4642      	mov	r2, r8
 8006452:	189b      	adds	r3, r3, r2
 8006454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006458:	464b      	mov	r3, r9
 800645a:	460a      	mov	r2, r1
 800645c:	eb42 0303 	adc.w	r3, r2, r3
 8006460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	67bb      	str	r3, [r7, #120]	; 0x78
 800646e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800647c:	4649      	mov	r1, r9
 800647e:	008b      	lsls	r3, r1, #2
 8006480:	4641      	mov	r1, r8
 8006482:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006486:	4641      	mov	r1, r8
 8006488:	008a      	lsls	r2, r1, #2
 800648a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800648e:	f7fa fbab 	bl	8000be8 <__aeabi_uldivmod>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4b39      	ldr	r3, [pc, #228]	; (800657c <UART_SetConfig+0x4e4>)
 8006498:	fba3 1302 	umull	r1, r3, r3, r2
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	2164      	movs	r1, #100	; 0x64
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	3332      	adds	r3, #50	; 0x32
 80064aa:	4a34      	ldr	r2, [pc, #208]	; (800657c <UART_SetConfig+0x4e4>)
 80064ac:	fba2 2303 	umull	r2, r3, r2, r3
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064b6:	441c      	add	r4, r3
 80064b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064bc:	2200      	movs	r2, #0
 80064be:	673b      	str	r3, [r7, #112]	; 0x70
 80064c0:	677a      	str	r2, [r7, #116]	; 0x74
 80064c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064c6:	4642      	mov	r2, r8
 80064c8:	464b      	mov	r3, r9
 80064ca:	1891      	adds	r1, r2, r2
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	415b      	adcs	r3, r3
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064d6:	4641      	mov	r1, r8
 80064d8:	1851      	adds	r1, r2, r1
 80064da:	6039      	str	r1, [r7, #0]
 80064dc:	4649      	mov	r1, r9
 80064de:	414b      	adcs	r3, r1
 80064e0:	607b      	str	r3, [r7, #4]
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064ee:	4659      	mov	r1, fp
 80064f0:	00cb      	lsls	r3, r1, #3
 80064f2:	4651      	mov	r1, sl
 80064f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064f8:	4651      	mov	r1, sl
 80064fa:	00ca      	lsls	r2, r1, #3
 80064fc:	4610      	mov	r0, r2
 80064fe:	4619      	mov	r1, r3
 8006500:	4603      	mov	r3, r0
 8006502:	4642      	mov	r2, r8
 8006504:	189b      	adds	r3, r3, r2
 8006506:	66bb      	str	r3, [r7, #104]	; 0x68
 8006508:	464b      	mov	r3, r9
 800650a:	460a      	mov	r2, r1
 800650c:	eb42 0303 	adc.w	r3, r2, r3
 8006510:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	663b      	str	r3, [r7, #96]	; 0x60
 800651c:	667a      	str	r2, [r7, #100]	; 0x64
 800651e:	f04f 0200 	mov.w	r2, #0
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800652a:	4649      	mov	r1, r9
 800652c:	008b      	lsls	r3, r1, #2
 800652e:	4641      	mov	r1, r8
 8006530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006534:	4641      	mov	r1, r8
 8006536:	008a      	lsls	r2, r1, #2
 8006538:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800653c:	f7fa fb54 	bl	8000be8 <__aeabi_uldivmod>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <UART_SetConfig+0x4e4>)
 8006546:	fba3 1302 	umull	r1, r3, r3, r2
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	2164      	movs	r1, #100	; 0x64
 800654e:	fb01 f303 	mul.w	r3, r1, r3
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	3332      	adds	r3, #50	; 0x32
 8006558:	4a08      	ldr	r2, [pc, #32]	; (800657c <UART_SetConfig+0x4e4>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f003 020f 	and.w	r2, r3, #15
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4422      	add	r2, r4
 800656c:	609a      	str	r2, [r3, #8]
}
 800656e:	bf00      	nop
 8006570:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006574:	46bd      	mov	sp, r7
 8006576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800657a:	bf00      	nop
 800657c:	51eb851f 	.word	0x51eb851f

08006580 <__errno>:
 8006580:	4b01      	ldr	r3, [pc, #4]	; (8006588 <__errno+0x8>)
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	2000000c 	.word	0x2000000c

0800658c <__libc_init_array>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4d0d      	ldr	r5, [pc, #52]	; (80065c4 <__libc_init_array+0x38>)
 8006590:	4c0d      	ldr	r4, [pc, #52]	; (80065c8 <__libc_init_array+0x3c>)
 8006592:	1b64      	subs	r4, r4, r5
 8006594:	10a4      	asrs	r4, r4, #2
 8006596:	2600      	movs	r6, #0
 8006598:	42a6      	cmp	r6, r4
 800659a:	d109      	bne.n	80065b0 <__libc_init_array+0x24>
 800659c:	4d0b      	ldr	r5, [pc, #44]	; (80065cc <__libc_init_array+0x40>)
 800659e:	4c0c      	ldr	r4, [pc, #48]	; (80065d0 <__libc_init_array+0x44>)
 80065a0:	f002 ff04 	bl	80093ac <_init>
 80065a4:	1b64      	subs	r4, r4, r5
 80065a6:	10a4      	asrs	r4, r4, #2
 80065a8:	2600      	movs	r6, #0
 80065aa:	42a6      	cmp	r6, r4
 80065ac:	d105      	bne.n	80065ba <__libc_init_array+0x2e>
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b4:	4798      	blx	r3
 80065b6:	3601      	adds	r6, #1
 80065b8:	e7ee      	b.n	8006598 <__libc_init_array+0xc>
 80065ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80065be:	4798      	blx	r3
 80065c0:	3601      	adds	r6, #1
 80065c2:	e7f2      	b.n	80065aa <__libc_init_array+0x1e>
 80065c4:	08009834 	.word	0x08009834
 80065c8:	08009834 	.word	0x08009834
 80065cc:	08009834 	.word	0x08009834
 80065d0:	08009838 	.word	0x08009838

080065d4 <memcpy>:
 80065d4:	440a      	add	r2, r1
 80065d6:	4291      	cmp	r1, r2
 80065d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80065dc:	d100      	bne.n	80065e0 <memcpy+0xc>
 80065de:	4770      	bx	lr
 80065e0:	b510      	push	{r4, lr}
 80065e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ea:	4291      	cmp	r1, r2
 80065ec:	d1f9      	bne.n	80065e2 <memcpy+0xe>
 80065ee:	bd10      	pop	{r4, pc}

080065f0 <memset>:
 80065f0:	4402      	add	r2, r0
 80065f2:	4603      	mov	r3, r0
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d100      	bne.n	80065fa <memset+0xa>
 80065f8:	4770      	bx	lr
 80065fa:	f803 1b01 	strb.w	r1, [r3], #1
 80065fe:	e7f9      	b.n	80065f4 <memset+0x4>

08006600 <__cvt>:
 8006600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006604:	ec55 4b10 	vmov	r4, r5, d0
 8006608:	2d00      	cmp	r5, #0
 800660a:	460e      	mov	r6, r1
 800660c:	4619      	mov	r1, r3
 800660e:	462b      	mov	r3, r5
 8006610:	bfbb      	ittet	lt
 8006612:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006616:	461d      	movlt	r5, r3
 8006618:	2300      	movge	r3, #0
 800661a:	232d      	movlt	r3, #45	; 0x2d
 800661c:	700b      	strb	r3, [r1, #0]
 800661e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006620:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006624:	4691      	mov	r9, r2
 8006626:	f023 0820 	bic.w	r8, r3, #32
 800662a:	bfbc      	itt	lt
 800662c:	4622      	movlt	r2, r4
 800662e:	4614      	movlt	r4, r2
 8006630:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006634:	d005      	beq.n	8006642 <__cvt+0x42>
 8006636:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800663a:	d100      	bne.n	800663e <__cvt+0x3e>
 800663c:	3601      	adds	r6, #1
 800663e:	2102      	movs	r1, #2
 8006640:	e000      	b.n	8006644 <__cvt+0x44>
 8006642:	2103      	movs	r1, #3
 8006644:	ab03      	add	r3, sp, #12
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	ab02      	add	r3, sp, #8
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	ec45 4b10 	vmov	d0, r4, r5
 8006650:	4653      	mov	r3, sl
 8006652:	4632      	mov	r2, r6
 8006654:	f000 fcec 	bl	8007030 <_dtoa_r>
 8006658:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800665c:	4607      	mov	r7, r0
 800665e:	d102      	bne.n	8006666 <__cvt+0x66>
 8006660:	f019 0f01 	tst.w	r9, #1
 8006664:	d022      	beq.n	80066ac <__cvt+0xac>
 8006666:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800666a:	eb07 0906 	add.w	r9, r7, r6
 800666e:	d110      	bne.n	8006692 <__cvt+0x92>
 8006670:	783b      	ldrb	r3, [r7, #0]
 8006672:	2b30      	cmp	r3, #48	; 0x30
 8006674:	d10a      	bne.n	800668c <__cvt+0x8c>
 8006676:	2200      	movs	r2, #0
 8006678:	2300      	movs	r3, #0
 800667a:	4620      	mov	r0, r4
 800667c:	4629      	mov	r1, r5
 800667e:	f7fa fa43 	bl	8000b08 <__aeabi_dcmpeq>
 8006682:	b918      	cbnz	r0, 800668c <__cvt+0x8c>
 8006684:	f1c6 0601 	rsb	r6, r6, #1
 8006688:	f8ca 6000 	str.w	r6, [sl]
 800668c:	f8da 3000 	ldr.w	r3, [sl]
 8006690:	4499      	add	r9, r3
 8006692:	2200      	movs	r2, #0
 8006694:	2300      	movs	r3, #0
 8006696:	4620      	mov	r0, r4
 8006698:	4629      	mov	r1, r5
 800669a:	f7fa fa35 	bl	8000b08 <__aeabi_dcmpeq>
 800669e:	b108      	cbz	r0, 80066a4 <__cvt+0xa4>
 80066a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80066a4:	2230      	movs	r2, #48	; 0x30
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	454b      	cmp	r3, r9
 80066aa:	d307      	bcc.n	80066bc <__cvt+0xbc>
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066b0:	1bdb      	subs	r3, r3, r7
 80066b2:	4638      	mov	r0, r7
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	b004      	add	sp, #16
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	1c59      	adds	r1, r3, #1
 80066be:	9103      	str	r1, [sp, #12]
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	e7f0      	b.n	80066a6 <__cvt+0xa6>

080066c4 <__exponent>:
 80066c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066c6:	4603      	mov	r3, r0
 80066c8:	2900      	cmp	r1, #0
 80066ca:	bfb8      	it	lt
 80066cc:	4249      	neglt	r1, r1
 80066ce:	f803 2b02 	strb.w	r2, [r3], #2
 80066d2:	bfb4      	ite	lt
 80066d4:	222d      	movlt	r2, #45	; 0x2d
 80066d6:	222b      	movge	r2, #43	; 0x2b
 80066d8:	2909      	cmp	r1, #9
 80066da:	7042      	strb	r2, [r0, #1]
 80066dc:	dd2a      	ble.n	8006734 <__exponent+0x70>
 80066de:	f10d 0407 	add.w	r4, sp, #7
 80066e2:	46a4      	mov	ip, r4
 80066e4:	270a      	movs	r7, #10
 80066e6:	46a6      	mov	lr, r4
 80066e8:	460a      	mov	r2, r1
 80066ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80066ee:	fb07 1516 	mls	r5, r7, r6, r1
 80066f2:	3530      	adds	r5, #48	; 0x30
 80066f4:	2a63      	cmp	r2, #99	; 0x63
 80066f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80066fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80066fe:	4631      	mov	r1, r6
 8006700:	dcf1      	bgt.n	80066e6 <__exponent+0x22>
 8006702:	3130      	adds	r1, #48	; 0x30
 8006704:	f1ae 0502 	sub.w	r5, lr, #2
 8006708:	f804 1c01 	strb.w	r1, [r4, #-1]
 800670c:	1c44      	adds	r4, r0, #1
 800670e:	4629      	mov	r1, r5
 8006710:	4561      	cmp	r1, ip
 8006712:	d30a      	bcc.n	800672a <__exponent+0x66>
 8006714:	f10d 0209 	add.w	r2, sp, #9
 8006718:	eba2 020e 	sub.w	r2, r2, lr
 800671c:	4565      	cmp	r5, ip
 800671e:	bf88      	it	hi
 8006720:	2200      	movhi	r2, #0
 8006722:	4413      	add	r3, r2
 8006724:	1a18      	subs	r0, r3, r0
 8006726:	b003      	add	sp, #12
 8006728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800672a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800672e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006732:	e7ed      	b.n	8006710 <__exponent+0x4c>
 8006734:	2330      	movs	r3, #48	; 0x30
 8006736:	3130      	adds	r1, #48	; 0x30
 8006738:	7083      	strb	r3, [r0, #2]
 800673a:	70c1      	strb	r1, [r0, #3]
 800673c:	1d03      	adds	r3, r0, #4
 800673e:	e7f1      	b.n	8006724 <__exponent+0x60>

08006740 <_printf_float>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	ed2d 8b02 	vpush	{d8}
 8006748:	b08d      	sub	sp, #52	; 0x34
 800674a:	460c      	mov	r4, r1
 800674c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006750:	4616      	mov	r6, r2
 8006752:	461f      	mov	r7, r3
 8006754:	4605      	mov	r5, r0
 8006756:	f001 fa59 	bl	8007c0c <_localeconv_r>
 800675a:	f8d0 a000 	ldr.w	sl, [r0]
 800675e:	4650      	mov	r0, sl
 8006760:	f7f9 fd56 	bl	8000210 <strlen>
 8006764:	2300      	movs	r3, #0
 8006766:	930a      	str	r3, [sp, #40]	; 0x28
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	9305      	str	r3, [sp, #20]
 800676c:	f8d8 3000 	ldr.w	r3, [r8]
 8006770:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006774:	3307      	adds	r3, #7
 8006776:	f023 0307 	bic.w	r3, r3, #7
 800677a:	f103 0208 	add.w	r2, r3, #8
 800677e:	f8c8 2000 	str.w	r2, [r8]
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800678a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800678e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006792:	9307      	str	r3, [sp, #28]
 8006794:	f8cd 8018 	str.w	r8, [sp, #24]
 8006798:	ee08 0a10 	vmov	s16, r0
 800679c:	4b9f      	ldr	r3, [pc, #636]	; (8006a1c <_printf_float+0x2dc>)
 800679e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067a6:	f7fa f9e1 	bl	8000b6c <__aeabi_dcmpun>
 80067aa:	bb88      	cbnz	r0, 8006810 <_printf_float+0xd0>
 80067ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b0:	4b9a      	ldr	r3, [pc, #616]	; (8006a1c <_printf_float+0x2dc>)
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067b6:	f7fa f9bb 	bl	8000b30 <__aeabi_dcmple>
 80067ba:	bb48      	cbnz	r0, 8006810 <_printf_float+0xd0>
 80067bc:	2200      	movs	r2, #0
 80067be:	2300      	movs	r3, #0
 80067c0:	4640      	mov	r0, r8
 80067c2:	4649      	mov	r1, r9
 80067c4:	f7fa f9aa 	bl	8000b1c <__aeabi_dcmplt>
 80067c8:	b110      	cbz	r0, 80067d0 <_printf_float+0x90>
 80067ca:	232d      	movs	r3, #45	; 0x2d
 80067cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d0:	4b93      	ldr	r3, [pc, #588]	; (8006a20 <_printf_float+0x2e0>)
 80067d2:	4894      	ldr	r0, [pc, #592]	; (8006a24 <_printf_float+0x2e4>)
 80067d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80067d8:	bf94      	ite	ls
 80067da:	4698      	movls	r8, r3
 80067dc:	4680      	movhi	r8, r0
 80067de:	2303      	movs	r3, #3
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	9b05      	ldr	r3, [sp, #20]
 80067e4:	f023 0204 	bic.w	r2, r3, #4
 80067e8:	6022      	str	r2, [r4, #0]
 80067ea:	f04f 0900 	mov.w	r9, #0
 80067ee:	9700      	str	r7, [sp, #0]
 80067f0:	4633      	mov	r3, r6
 80067f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80067f4:	4621      	mov	r1, r4
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 f9d8 	bl	8006bac <_printf_common>
 80067fc:	3001      	adds	r0, #1
 80067fe:	f040 8090 	bne.w	8006922 <_printf_float+0x1e2>
 8006802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006806:	b00d      	add	sp, #52	; 0x34
 8006808:	ecbd 8b02 	vpop	{d8}
 800680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006810:	4642      	mov	r2, r8
 8006812:	464b      	mov	r3, r9
 8006814:	4640      	mov	r0, r8
 8006816:	4649      	mov	r1, r9
 8006818:	f7fa f9a8 	bl	8000b6c <__aeabi_dcmpun>
 800681c:	b140      	cbz	r0, 8006830 <_printf_float+0xf0>
 800681e:	464b      	mov	r3, r9
 8006820:	2b00      	cmp	r3, #0
 8006822:	bfbc      	itt	lt
 8006824:	232d      	movlt	r3, #45	; 0x2d
 8006826:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800682a:	487f      	ldr	r0, [pc, #508]	; (8006a28 <_printf_float+0x2e8>)
 800682c:	4b7f      	ldr	r3, [pc, #508]	; (8006a2c <_printf_float+0x2ec>)
 800682e:	e7d1      	b.n	80067d4 <_printf_float+0x94>
 8006830:	6863      	ldr	r3, [r4, #4]
 8006832:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006836:	9206      	str	r2, [sp, #24]
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	d13f      	bne.n	80068bc <_printf_float+0x17c>
 800683c:	2306      	movs	r3, #6
 800683e:	6063      	str	r3, [r4, #4]
 8006840:	9b05      	ldr	r3, [sp, #20]
 8006842:	6861      	ldr	r1, [r4, #4]
 8006844:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006848:	2300      	movs	r3, #0
 800684a:	9303      	str	r3, [sp, #12]
 800684c:	ab0a      	add	r3, sp, #40	; 0x28
 800684e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006852:	ab09      	add	r3, sp, #36	; 0x24
 8006854:	ec49 8b10 	vmov	d0, r8, r9
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	6022      	str	r2, [r4, #0]
 800685c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006860:	4628      	mov	r0, r5
 8006862:	f7ff fecd 	bl	8006600 <__cvt>
 8006866:	9b06      	ldr	r3, [sp, #24]
 8006868:	9909      	ldr	r1, [sp, #36]	; 0x24
 800686a:	2b47      	cmp	r3, #71	; 0x47
 800686c:	4680      	mov	r8, r0
 800686e:	d108      	bne.n	8006882 <_printf_float+0x142>
 8006870:	1cc8      	adds	r0, r1, #3
 8006872:	db02      	blt.n	800687a <_printf_float+0x13a>
 8006874:	6863      	ldr	r3, [r4, #4]
 8006876:	4299      	cmp	r1, r3
 8006878:	dd41      	ble.n	80068fe <_printf_float+0x1be>
 800687a:	f1ab 0b02 	sub.w	fp, fp, #2
 800687e:	fa5f fb8b 	uxtb.w	fp, fp
 8006882:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006886:	d820      	bhi.n	80068ca <_printf_float+0x18a>
 8006888:	3901      	subs	r1, #1
 800688a:	465a      	mov	r2, fp
 800688c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006890:	9109      	str	r1, [sp, #36]	; 0x24
 8006892:	f7ff ff17 	bl	80066c4 <__exponent>
 8006896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006898:	1813      	adds	r3, r2, r0
 800689a:	2a01      	cmp	r2, #1
 800689c:	4681      	mov	r9, r0
 800689e:	6123      	str	r3, [r4, #16]
 80068a0:	dc02      	bgt.n	80068a8 <_printf_float+0x168>
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	07d2      	lsls	r2, r2, #31
 80068a6:	d501      	bpl.n	80068ac <_printf_float+0x16c>
 80068a8:	3301      	adds	r3, #1
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d09c      	beq.n	80067ee <_printf_float+0xae>
 80068b4:	232d      	movs	r3, #45	; 0x2d
 80068b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ba:	e798      	b.n	80067ee <_printf_float+0xae>
 80068bc:	9a06      	ldr	r2, [sp, #24]
 80068be:	2a47      	cmp	r2, #71	; 0x47
 80068c0:	d1be      	bne.n	8006840 <_printf_float+0x100>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1bc      	bne.n	8006840 <_printf_float+0x100>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e7b9      	b.n	800683e <_printf_float+0xfe>
 80068ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80068ce:	d118      	bne.n	8006902 <_printf_float+0x1c2>
 80068d0:	2900      	cmp	r1, #0
 80068d2:	6863      	ldr	r3, [r4, #4]
 80068d4:	dd0b      	ble.n	80068ee <_printf_float+0x1ae>
 80068d6:	6121      	str	r1, [r4, #16]
 80068d8:	b913      	cbnz	r3, 80068e0 <_printf_float+0x1a0>
 80068da:	6822      	ldr	r2, [r4, #0]
 80068dc:	07d0      	lsls	r0, r2, #31
 80068de:	d502      	bpl.n	80068e6 <_printf_float+0x1a6>
 80068e0:	3301      	adds	r3, #1
 80068e2:	440b      	add	r3, r1
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80068e8:	f04f 0900 	mov.w	r9, #0
 80068ec:	e7de      	b.n	80068ac <_printf_float+0x16c>
 80068ee:	b913      	cbnz	r3, 80068f6 <_printf_float+0x1b6>
 80068f0:	6822      	ldr	r2, [r4, #0]
 80068f2:	07d2      	lsls	r2, r2, #31
 80068f4:	d501      	bpl.n	80068fa <_printf_float+0x1ba>
 80068f6:	3302      	adds	r3, #2
 80068f8:	e7f4      	b.n	80068e4 <_printf_float+0x1a4>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e7f2      	b.n	80068e4 <_printf_float+0x1a4>
 80068fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006904:	4299      	cmp	r1, r3
 8006906:	db05      	blt.n	8006914 <_printf_float+0x1d4>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	6121      	str	r1, [r4, #16]
 800690c:	07d8      	lsls	r0, r3, #31
 800690e:	d5ea      	bpl.n	80068e6 <_printf_float+0x1a6>
 8006910:	1c4b      	adds	r3, r1, #1
 8006912:	e7e7      	b.n	80068e4 <_printf_float+0x1a4>
 8006914:	2900      	cmp	r1, #0
 8006916:	bfd4      	ite	le
 8006918:	f1c1 0202 	rsble	r2, r1, #2
 800691c:	2201      	movgt	r2, #1
 800691e:	4413      	add	r3, r2
 8006920:	e7e0      	b.n	80068e4 <_printf_float+0x1a4>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	055a      	lsls	r2, r3, #21
 8006926:	d407      	bmi.n	8006938 <_printf_float+0x1f8>
 8006928:	6923      	ldr	r3, [r4, #16]
 800692a:	4642      	mov	r2, r8
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	d12c      	bne.n	8006990 <_printf_float+0x250>
 8006936:	e764      	b.n	8006802 <_printf_float+0xc2>
 8006938:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800693c:	f240 80e0 	bls.w	8006b00 <_printf_float+0x3c0>
 8006940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006944:	2200      	movs	r2, #0
 8006946:	2300      	movs	r3, #0
 8006948:	f7fa f8de 	bl	8000b08 <__aeabi_dcmpeq>
 800694c:	2800      	cmp	r0, #0
 800694e:	d034      	beq.n	80069ba <_printf_float+0x27a>
 8006950:	4a37      	ldr	r2, [pc, #220]	; (8006a30 <_printf_float+0x2f0>)
 8006952:	2301      	movs	r3, #1
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f af51 	beq.w	8006802 <_printf_float+0xc2>
 8006960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006964:	429a      	cmp	r2, r3
 8006966:	db02      	blt.n	800696e <_printf_float+0x22e>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	07d8      	lsls	r0, r3, #31
 800696c:	d510      	bpl.n	8006990 <_printf_float+0x250>
 800696e:	ee18 3a10 	vmov	r3, s16
 8006972:	4652      	mov	r2, sl
 8006974:	4631      	mov	r1, r6
 8006976:	4628      	mov	r0, r5
 8006978:	47b8      	blx	r7
 800697a:	3001      	adds	r0, #1
 800697c:	f43f af41 	beq.w	8006802 <_printf_float+0xc2>
 8006980:	f04f 0800 	mov.w	r8, #0
 8006984:	f104 091a 	add.w	r9, r4, #26
 8006988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800698a:	3b01      	subs	r3, #1
 800698c:	4543      	cmp	r3, r8
 800698e:	dc09      	bgt.n	80069a4 <_printf_float+0x264>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	079b      	lsls	r3, r3, #30
 8006994:	f100 8105 	bmi.w	8006ba2 <_printf_float+0x462>
 8006998:	68e0      	ldr	r0, [r4, #12]
 800699a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800699c:	4298      	cmp	r0, r3
 800699e:	bfb8      	it	lt
 80069a0:	4618      	movlt	r0, r3
 80069a2:	e730      	b.n	8006806 <_printf_float+0xc6>
 80069a4:	2301      	movs	r3, #1
 80069a6:	464a      	mov	r2, r9
 80069a8:	4631      	mov	r1, r6
 80069aa:	4628      	mov	r0, r5
 80069ac:	47b8      	blx	r7
 80069ae:	3001      	adds	r0, #1
 80069b0:	f43f af27 	beq.w	8006802 <_printf_float+0xc2>
 80069b4:	f108 0801 	add.w	r8, r8, #1
 80069b8:	e7e6      	b.n	8006988 <_printf_float+0x248>
 80069ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dc39      	bgt.n	8006a34 <_printf_float+0x2f4>
 80069c0:	4a1b      	ldr	r2, [pc, #108]	; (8006a30 <_printf_float+0x2f0>)
 80069c2:	2301      	movs	r3, #1
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b8      	blx	r7
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f af19 	beq.w	8006802 <_printf_float+0xc2>
 80069d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069d4:	4313      	orrs	r3, r2
 80069d6:	d102      	bne.n	80069de <_printf_float+0x29e>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	07d9      	lsls	r1, r3, #31
 80069dc:	d5d8      	bpl.n	8006990 <_printf_float+0x250>
 80069de:	ee18 3a10 	vmov	r3, s16
 80069e2:	4652      	mov	r2, sl
 80069e4:	4631      	mov	r1, r6
 80069e6:	4628      	mov	r0, r5
 80069e8:	47b8      	blx	r7
 80069ea:	3001      	adds	r0, #1
 80069ec:	f43f af09 	beq.w	8006802 <_printf_float+0xc2>
 80069f0:	f04f 0900 	mov.w	r9, #0
 80069f4:	f104 0a1a 	add.w	sl, r4, #26
 80069f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fa:	425b      	negs	r3, r3
 80069fc:	454b      	cmp	r3, r9
 80069fe:	dc01      	bgt.n	8006a04 <_printf_float+0x2c4>
 8006a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a02:	e792      	b.n	800692a <_printf_float+0x1ea>
 8006a04:	2301      	movs	r3, #1
 8006a06:	4652      	mov	r2, sl
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f43f aef7 	beq.w	8006802 <_printf_float+0xc2>
 8006a14:	f109 0901 	add.w	r9, r9, #1
 8006a18:	e7ee      	b.n	80069f8 <_printf_float+0x2b8>
 8006a1a:	bf00      	nop
 8006a1c:	7fefffff 	.word	0x7fefffff
 8006a20:	08009458 	.word	0x08009458
 8006a24:	0800945c 	.word	0x0800945c
 8006a28:	08009464 	.word	0x08009464
 8006a2c:	08009460 	.word	0x08009460
 8006a30:	08009468 	.word	0x08009468
 8006a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	bfa8      	it	ge
 8006a3c:	461a      	movge	r2, r3
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	4691      	mov	r9, r2
 8006a42:	dc37      	bgt.n	8006ab4 <_printf_float+0x374>
 8006a44:	f04f 0b00 	mov.w	fp, #0
 8006a48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a4c:	f104 021a 	add.w	r2, r4, #26
 8006a50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a52:	9305      	str	r3, [sp, #20]
 8006a54:	eba3 0309 	sub.w	r3, r3, r9
 8006a58:	455b      	cmp	r3, fp
 8006a5a:	dc33      	bgt.n	8006ac4 <_printf_float+0x384>
 8006a5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a60:	429a      	cmp	r2, r3
 8006a62:	db3b      	blt.n	8006adc <_printf_float+0x39c>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	07da      	lsls	r2, r3, #31
 8006a68:	d438      	bmi.n	8006adc <_printf_float+0x39c>
 8006a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6c:	9a05      	ldr	r2, [sp, #20]
 8006a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a70:	1a9a      	subs	r2, r3, r2
 8006a72:	eba3 0901 	sub.w	r9, r3, r1
 8006a76:	4591      	cmp	r9, r2
 8006a78:	bfa8      	it	ge
 8006a7a:	4691      	movge	r9, r2
 8006a7c:	f1b9 0f00 	cmp.w	r9, #0
 8006a80:	dc35      	bgt.n	8006aee <_printf_float+0x3ae>
 8006a82:	f04f 0800 	mov.w	r8, #0
 8006a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a8a:	f104 0a1a 	add.w	sl, r4, #26
 8006a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	eba3 0309 	sub.w	r3, r3, r9
 8006a98:	4543      	cmp	r3, r8
 8006a9a:	f77f af79 	ble.w	8006990 <_printf_float+0x250>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	f43f aeaa 	beq.w	8006802 <_printf_float+0xc2>
 8006aae:	f108 0801 	add.w	r8, r8, #1
 8006ab2:	e7ec      	b.n	8006a8e <_printf_float+0x34e>
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4642      	mov	r2, r8
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d1c0      	bne.n	8006a44 <_printf_float+0x304>
 8006ac2:	e69e      	b.n	8006802 <_printf_float+0xc2>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	9205      	str	r2, [sp, #20]
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f ae97 	beq.w	8006802 <_printf_float+0xc2>
 8006ad4:	9a05      	ldr	r2, [sp, #20]
 8006ad6:	f10b 0b01 	add.w	fp, fp, #1
 8006ada:	e7b9      	b.n	8006a50 <_printf_float+0x310>
 8006adc:	ee18 3a10 	vmov	r3, s16
 8006ae0:	4652      	mov	r2, sl
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b8      	blx	r7
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d1be      	bne.n	8006a6a <_printf_float+0x32a>
 8006aec:	e689      	b.n	8006802 <_printf_float+0xc2>
 8006aee:	9a05      	ldr	r2, [sp, #20]
 8006af0:	464b      	mov	r3, r9
 8006af2:	4442      	add	r2, r8
 8006af4:	4631      	mov	r1, r6
 8006af6:	4628      	mov	r0, r5
 8006af8:	47b8      	blx	r7
 8006afa:	3001      	adds	r0, #1
 8006afc:	d1c1      	bne.n	8006a82 <_printf_float+0x342>
 8006afe:	e680      	b.n	8006802 <_printf_float+0xc2>
 8006b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b02:	2a01      	cmp	r2, #1
 8006b04:	dc01      	bgt.n	8006b0a <_printf_float+0x3ca>
 8006b06:	07db      	lsls	r3, r3, #31
 8006b08:	d538      	bpl.n	8006b7c <_printf_float+0x43c>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b8      	blx	r7
 8006b14:	3001      	adds	r0, #1
 8006b16:	f43f ae74 	beq.w	8006802 <_printf_float+0xc2>
 8006b1a:	ee18 3a10 	vmov	r3, s16
 8006b1e:	4652      	mov	r2, sl
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f ae6b 	beq.w	8006802 <_printf_float+0xc2>
 8006b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b30:	2200      	movs	r2, #0
 8006b32:	2300      	movs	r3, #0
 8006b34:	f7f9 ffe8 	bl	8000b08 <__aeabi_dcmpeq>
 8006b38:	b9d8      	cbnz	r0, 8006b72 <_printf_float+0x432>
 8006b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b3c:	f108 0201 	add.w	r2, r8, #1
 8006b40:	3b01      	subs	r3, #1
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d10e      	bne.n	8006b6a <_printf_float+0x42a>
 8006b4c:	e659      	b.n	8006802 <_printf_float+0xc2>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4652      	mov	r2, sl
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f ae52 	beq.w	8006802 <_printf_float+0xc2>
 8006b5e:	f108 0801 	add.w	r8, r8, #1
 8006b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b64:	3b01      	subs	r3, #1
 8006b66:	4543      	cmp	r3, r8
 8006b68:	dcf1      	bgt.n	8006b4e <_printf_float+0x40e>
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b70:	e6dc      	b.n	800692c <_printf_float+0x1ec>
 8006b72:	f04f 0800 	mov.w	r8, #0
 8006b76:	f104 0a1a 	add.w	sl, r4, #26
 8006b7a:	e7f2      	b.n	8006b62 <_printf_float+0x422>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	4642      	mov	r2, r8
 8006b80:	e7df      	b.n	8006b42 <_printf_float+0x402>
 8006b82:	2301      	movs	r3, #1
 8006b84:	464a      	mov	r2, r9
 8006b86:	4631      	mov	r1, r6
 8006b88:	4628      	mov	r0, r5
 8006b8a:	47b8      	blx	r7
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f43f ae38 	beq.w	8006802 <_printf_float+0xc2>
 8006b92:	f108 0801 	add.w	r8, r8, #1
 8006b96:	68e3      	ldr	r3, [r4, #12]
 8006b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b9a:	1a5b      	subs	r3, r3, r1
 8006b9c:	4543      	cmp	r3, r8
 8006b9e:	dcf0      	bgt.n	8006b82 <_printf_float+0x442>
 8006ba0:	e6fa      	b.n	8006998 <_printf_float+0x258>
 8006ba2:	f04f 0800 	mov.w	r8, #0
 8006ba6:	f104 0919 	add.w	r9, r4, #25
 8006baa:	e7f4      	b.n	8006b96 <_printf_float+0x456>

08006bac <_printf_common>:
 8006bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	4616      	mov	r6, r2
 8006bb2:	4699      	mov	r9, r3
 8006bb4:	688a      	ldr	r2, [r1, #8]
 8006bb6:	690b      	ldr	r3, [r1, #16]
 8006bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	bfb8      	it	lt
 8006bc0:	4613      	movlt	r3, r2
 8006bc2:	6033      	str	r3, [r6, #0]
 8006bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bc8:	4607      	mov	r7, r0
 8006bca:	460c      	mov	r4, r1
 8006bcc:	b10a      	cbz	r2, 8006bd2 <_printf_common+0x26>
 8006bce:	3301      	adds	r3, #1
 8006bd0:	6033      	str	r3, [r6, #0]
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	0699      	lsls	r1, r3, #26
 8006bd6:	bf42      	ittt	mi
 8006bd8:	6833      	ldrmi	r3, [r6, #0]
 8006bda:	3302      	addmi	r3, #2
 8006bdc:	6033      	strmi	r3, [r6, #0]
 8006bde:	6825      	ldr	r5, [r4, #0]
 8006be0:	f015 0506 	ands.w	r5, r5, #6
 8006be4:	d106      	bne.n	8006bf4 <_printf_common+0x48>
 8006be6:	f104 0a19 	add.w	sl, r4, #25
 8006bea:	68e3      	ldr	r3, [r4, #12]
 8006bec:	6832      	ldr	r2, [r6, #0]
 8006bee:	1a9b      	subs	r3, r3, r2
 8006bf0:	42ab      	cmp	r3, r5
 8006bf2:	dc26      	bgt.n	8006c42 <_printf_common+0x96>
 8006bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bf8:	1e13      	subs	r3, r2, #0
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	bf18      	it	ne
 8006bfe:	2301      	movne	r3, #1
 8006c00:	0692      	lsls	r2, r2, #26
 8006c02:	d42b      	bmi.n	8006c5c <_printf_common+0xb0>
 8006c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c08:	4649      	mov	r1, r9
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	47c0      	blx	r8
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d01e      	beq.n	8006c50 <_printf_common+0xa4>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	68e5      	ldr	r5, [r4, #12]
 8006c16:	6832      	ldr	r2, [r6, #0]
 8006c18:	f003 0306 	and.w	r3, r3, #6
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	bf08      	it	eq
 8006c20:	1aad      	subeq	r5, r5, r2
 8006c22:	68a3      	ldr	r3, [r4, #8]
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	bf0c      	ite	eq
 8006c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c2c:	2500      	movne	r5, #0
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	bfc4      	itt	gt
 8006c32:	1a9b      	subgt	r3, r3, r2
 8006c34:	18ed      	addgt	r5, r5, r3
 8006c36:	2600      	movs	r6, #0
 8006c38:	341a      	adds	r4, #26
 8006c3a:	42b5      	cmp	r5, r6
 8006c3c:	d11a      	bne.n	8006c74 <_printf_common+0xc8>
 8006c3e:	2000      	movs	r0, #0
 8006c40:	e008      	b.n	8006c54 <_printf_common+0xa8>
 8006c42:	2301      	movs	r3, #1
 8006c44:	4652      	mov	r2, sl
 8006c46:	4649      	mov	r1, r9
 8006c48:	4638      	mov	r0, r7
 8006c4a:	47c0      	blx	r8
 8006c4c:	3001      	adds	r0, #1
 8006c4e:	d103      	bne.n	8006c58 <_printf_common+0xac>
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c58:	3501      	adds	r5, #1
 8006c5a:	e7c6      	b.n	8006bea <_printf_common+0x3e>
 8006c5c:	18e1      	adds	r1, r4, r3
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	2030      	movs	r0, #48	; 0x30
 8006c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c66:	4422      	add	r2, r4
 8006c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c70:	3302      	adds	r3, #2
 8006c72:	e7c7      	b.n	8006c04 <_printf_common+0x58>
 8006c74:	2301      	movs	r3, #1
 8006c76:	4622      	mov	r2, r4
 8006c78:	4649      	mov	r1, r9
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	47c0      	blx	r8
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d0e6      	beq.n	8006c50 <_printf_common+0xa4>
 8006c82:	3601      	adds	r6, #1
 8006c84:	e7d9      	b.n	8006c3a <_printf_common+0x8e>
	...

08006c88 <_printf_i>:
 8006c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c8c:	7e0f      	ldrb	r7, [r1, #24]
 8006c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c90:	2f78      	cmp	r7, #120	; 0x78
 8006c92:	4691      	mov	r9, r2
 8006c94:	4680      	mov	r8, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	469a      	mov	sl, r3
 8006c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c9e:	d807      	bhi.n	8006cb0 <_printf_i+0x28>
 8006ca0:	2f62      	cmp	r7, #98	; 0x62
 8006ca2:	d80a      	bhi.n	8006cba <_printf_i+0x32>
 8006ca4:	2f00      	cmp	r7, #0
 8006ca6:	f000 80d8 	beq.w	8006e5a <_printf_i+0x1d2>
 8006caa:	2f58      	cmp	r7, #88	; 0x58
 8006cac:	f000 80a3 	beq.w	8006df6 <_printf_i+0x16e>
 8006cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cb8:	e03a      	b.n	8006d30 <_printf_i+0xa8>
 8006cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cbe:	2b15      	cmp	r3, #21
 8006cc0:	d8f6      	bhi.n	8006cb0 <_printf_i+0x28>
 8006cc2:	a101      	add	r1, pc, #4	; (adr r1, 8006cc8 <_printf_i+0x40>)
 8006cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cc8:	08006d21 	.word	0x08006d21
 8006ccc:	08006d35 	.word	0x08006d35
 8006cd0:	08006cb1 	.word	0x08006cb1
 8006cd4:	08006cb1 	.word	0x08006cb1
 8006cd8:	08006cb1 	.word	0x08006cb1
 8006cdc:	08006cb1 	.word	0x08006cb1
 8006ce0:	08006d35 	.word	0x08006d35
 8006ce4:	08006cb1 	.word	0x08006cb1
 8006ce8:	08006cb1 	.word	0x08006cb1
 8006cec:	08006cb1 	.word	0x08006cb1
 8006cf0:	08006cb1 	.word	0x08006cb1
 8006cf4:	08006e41 	.word	0x08006e41
 8006cf8:	08006d65 	.word	0x08006d65
 8006cfc:	08006e23 	.word	0x08006e23
 8006d00:	08006cb1 	.word	0x08006cb1
 8006d04:	08006cb1 	.word	0x08006cb1
 8006d08:	08006e63 	.word	0x08006e63
 8006d0c:	08006cb1 	.word	0x08006cb1
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006cb1 	.word	0x08006cb1
 8006d18:	08006cb1 	.word	0x08006cb1
 8006d1c:	08006e2b 	.word	0x08006e2b
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	1d1a      	adds	r2, r3, #4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	602a      	str	r2, [r5, #0]
 8006d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0a3      	b.n	8006e7c <_printf_i+0x1f4>
 8006d34:	6820      	ldr	r0, [r4, #0]
 8006d36:	6829      	ldr	r1, [r5, #0]
 8006d38:	0606      	lsls	r6, r0, #24
 8006d3a:	f101 0304 	add.w	r3, r1, #4
 8006d3e:	d50a      	bpl.n	8006d56 <_printf_i+0xce>
 8006d40:	680e      	ldr	r6, [r1, #0]
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	2e00      	cmp	r6, #0
 8006d46:	da03      	bge.n	8006d50 <_printf_i+0xc8>
 8006d48:	232d      	movs	r3, #45	; 0x2d
 8006d4a:	4276      	negs	r6, r6
 8006d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d50:	485e      	ldr	r0, [pc, #376]	; (8006ecc <_printf_i+0x244>)
 8006d52:	230a      	movs	r3, #10
 8006d54:	e019      	b.n	8006d8a <_printf_i+0x102>
 8006d56:	680e      	ldr	r6, [r1, #0]
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d5e:	bf18      	it	ne
 8006d60:	b236      	sxthne	r6, r6
 8006d62:	e7ef      	b.n	8006d44 <_printf_i+0xbc>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	6820      	ldr	r0, [r4, #0]
 8006d68:	1d19      	adds	r1, r3, #4
 8006d6a:	6029      	str	r1, [r5, #0]
 8006d6c:	0601      	lsls	r1, r0, #24
 8006d6e:	d501      	bpl.n	8006d74 <_printf_i+0xec>
 8006d70:	681e      	ldr	r6, [r3, #0]
 8006d72:	e002      	b.n	8006d7a <_printf_i+0xf2>
 8006d74:	0646      	lsls	r6, r0, #25
 8006d76:	d5fb      	bpl.n	8006d70 <_printf_i+0xe8>
 8006d78:	881e      	ldrh	r6, [r3, #0]
 8006d7a:	4854      	ldr	r0, [pc, #336]	; (8006ecc <_printf_i+0x244>)
 8006d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8006d7e:	bf0c      	ite	eq
 8006d80:	2308      	moveq	r3, #8
 8006d82:	230a      	movne	r3, #10
 8006d84:	2100      	movs	r1, #0
 8006d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d8a:	6865      	ldr	r5, [r4, #4]
 8006d8c:	60a5      	str	r5, [r4, #8]
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	bfa2      	ittt	ge
 8006d92:	6821      	ldrge	r1, [r4, #0]
 8006d94:	f021 0104 	bicge.w	r1, r1, #4
 8006d98:	6021      	strge	r1, [r4, #0]
 8006d9a:	b90e      	cbnz	r6, 8006da0 <_printf_i+0x118>
 8006d9c:	2d00      	cmp	r5, #0
 8006d9e:	d04d      	beq.n	8006e3c <_printf_i+0x1b4>
 8006da0:	4615      	mov	r5, r2
 8006da2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006da6:	fb03 6711 	mls	r7, r3, r1, r6
 8006daa:	5dc7      	ldrb	r7, [r0, r7]
 8006dac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006db0:	4637      	mov	r7, r6
 8006db2:	42bb      	cmp	r3, r7
 8006db4:	460e      	mov	r6, r1
 8006db6:	d9f4      	bls.n	8006da2 <_printf_i+0x11a>
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d10b      	bne.n	8006dd4 <_printf_i+0x14c>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	07de      	lsls	r6, r3, #31
 8006dc0:	d508      	bpl.n	8006dd4 <_printf_i+0x14c>
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	6861      	ldr	r1, [r4, #4]
 8006dc6:	4299      	cmp	r1, r3
 8006dc8:	bfde      	ittt	le
 8006dca:	2330      	movle	r3, #48	; 0x30
 8006dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006dd4:	1b52      	subs	r2, r2, r5
 8006dd6:	6122      	str	r2, [r4, #16]
 8006dd8:	f8cd a000 	str.w	sl, [sp]
 8006ddc:	464b      	mov	r3, r9
 8006dde:	aa03      	add	r2, sp, #12
 8006de0:	4621      	mov	r1, r4
 8006de2:	4640      	mov	r0, r8
 8006de4:	f7ff fee2 	bl	8006bac <_printf_common>
 8006de8:	3001      	adds	r0, #1
 8006dea:	d14c      	bne.n	8006e86 <_printf_i+0x1fe>
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df0:	b004      	add	sp, #16
 8006df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df6:	4835      	ldr	r0, [pc, #212]	; (8006ecc <_printf_i+0x244>)
 8006df8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006dfc:	6829      	ldr	r1, [r5, #0]
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e04:	6029      	str	r1, [r5, #0]
 8006e06:	061d      	lsls	r5, r3, #24
 8006e08:	d514      	bpl.n	8006e34 <_printf_i+0x1ac>
 8006e0a:	07df      	lsls	r7, r3, #31
 8006e0c:	bf44      	itt	mi
 8006e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e12:	6023      	strmi	r3, [r4, #0]
 8006e14:	b91e      	cbnz	r6, 8006e1e <_printf_i+0x196>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	f023 0320 	bic.w	r3, r3, #32
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	2310      	movs	r3, #16
 8006e20:	e7b0      	b.n	8006d84 <_printf_i+0xfc>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	f043 0320 	orr.w	r3, r3, #32
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	2378      	movs	r3, #120	; 0x78
 8006e2c:	4828      	ldr	r0, [pc, #160]	; (8006ed0 <_printf_i+0x248>)
 8006e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e32:	e7e3      	b.n	8006dfc <_printf_i+0x174>
 8006e34:	0659      	lsls	r1, r3, #25
 8006e36:	bf48      	it	mi
 8006e38:	b2b6      	uxthmi	r6, r6
 8006e3a:	e7e6      	b.n	8006e0a <_printf_i+0x182>
 8006e3c:	4615      	mov	r5, r2
 8006e3e:	e7bb      	b.n	8006db8 <_printf_i+0x130>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	6826      	ldr	r6, [r4, #0]
 8006e44:	6961      	ldr	r1, [r4, #20]
 8006e46:	1d18      	adds	r0, r3, #4
 8006e48:	6028      	str	r0, [r5, #0]
 8006e4a:	0635      	lsls	r5, r6, #24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	d501      	bpl.n	8006e54 <_printf_i+0x1cc>
 8006e50:	6019      	str	r1, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <_printf_i+0x1d2>
 8006e54:	0670      	lsls	r0, r6, #25
 8006e56:	d5fb      	bpl.n	8006e50 <_printf_i+0x1c8>
 8006e58:	8019      	strh	r1, [r3, #0]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	4615      	mov	r5, r2
 8006e60:	e7ba      	b.n	8006dd8 <_printf_i+0x150>
 8006e62:	682b      	ldr	r3, [r5, #0]
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	602a      	str	r2, [r5, #0]
 8006e68:	681d      	ldr	r5, [r3, #0]
 8006e6a:	6862      	ldr	r2, [r4, #4]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f7f9 f9d6 	bl	8000220 <memchr>
 8006e74:	b108      	cbz	r0, 8006e7a <_printf_i+0x1f2>
 8006e76:	1b40      	subs	r0, r0, r5
 8006e78:	6060      	str	r0, [r4, #4]
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e84:	e7a8      	b.n	8006dd8 <_printf_i+0x150>
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	462a      	mov	r2, r5
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	47d0      	blx	sl
 8006e90:	3001      	adds	r0, #1
 8006e92:	d0ab      	beq.n	8006dec <_printf_i+0x164>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	079b      	lsls	r3, r3, #30
 8006e98:	d413      	bmi.n	8006ec2 <_printf_i+0x23a>
 8006e9a:	68e0      	ldr	r0, [r4, #12]
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	bfb8      	it	lt
 8006ea2:	4618      	movlt	r0, r3
 8006ea4:	e7a4      	b.n	8006df0 <_printf_i+0x168>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4649      	mov	r1, r9
 8006eac:	4640      	mov	r0, r8
 8006eae:	47d0      	blx	sl
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d09b      	beq.n	8006dec <_printf_i+0x164>
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	9903      	ldr	r1, [sp, #12]
 8006eba:	1a5b      	subs	r3, r3, r1
 8006ebc:	42ab      	cmp	r3, r5
 8006ebe:	dcf2      	bgt.n	8006ea6 <_printf_i+0x21e>
 8006ec0:	e7eb      	b.n	8006e9a <_printf_i+0x212>
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	f104 0619 	add.w	r6, r4, #25
 8006ec8:	e7f5      	b.n	8006eb6 <_printf_i+0x22e>
 8006eca:	bf00      	nop
 8006ecc:	0800946a 	.word	0x0800946a
 8006ed0:	0800947b 	.word	0x0800947b

08006ed4 <siprintf>:
 8006ed4:	b40e      	push	{r1, r2, r3}
 8006ed6:	b500      	push	{lr}
 8006ed8:	b09c      	sub	sp, #112	; 0x70
 8006eda:	ab1d      	add	r3, sp, #116	; 0x74
 8006edc:	9002      	str	r0, [sp, #8]
 8006ede:	9006      	str	r0, [sp, #24]
 8006ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ee4:	4809      	ldr	r0, [pc, #36]	; (8006f0c <siprintf+0x38>)
 8006ee6:	9107      	str	r1, [sp, #28]
 8006ee8:	9104      	str	r1, [sp, #16]
 8006eea:	4909      	ldr	r1, [pc, #36]	; (8006f10 <siprintf+0x3c>)
 8006eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef0:	9105      	str	r1, [sp, #20]
 8006ef2:	6800      	ldr	r0, [r0, #0]
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	a902      	add	r1, sp, #8
 8006ef8:	f001 fb6a 	bl	80085d0 <_svfiprintf_r>
 8006efc:	9b02      	ldr	r3, [sp, #8]
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	b01c      	add	sp, #112	; 0x70
 8006f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f08:	b003      	add	sp, #12
 8006f0a:	4770      	bx	lr
 8006f0c:	2000000c 	.word	0x2000000c
 8006f10:	ffff0208 	.word	0xffff0208

08006f14 <quorem>:
 8006f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	6903      	ldr	r3, [r0, #16]
 8006f1a:	690c      	ldr	r4, [r1, #16]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	4607      	mov	r7, r0
 8006f20:	f2c0 8081 	blt.w	8007026 <quorem+0x112>
 8006f24:	3c01      	subs	r4, #1
 8006f26:	f101 0814 	add.w	r8, r1, #20
 8006f2a:	f100 0514 	add.w	r5, r0, #20
 8006f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f48:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f4c:	d331      	bcc.n	8006fb2 <quorem+0x9e>
 8006f4e:	f04f 0e00 	mov.w	lr, #0
 8006f52:	4640      	mov	r0, r8
 8006f54:	46ac      	mov	ip, r5
 8006f56:	46f2      	mov	sl, lr
 8006f58:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f5c:	b293      	uxth	r3, r2
 8006f5e:	fb06 e303 	mla	r3, r6, r3, lr
 8006f62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	ebaa 0303 	sub.w	r3, sl, r3
 8006f6c:	f8dc a000 	ldr.w	sl, [ip]
 8006f70:	0c12      	lsrs	r2, r2, #16
 8006f72:	fa13 f38a 	uxtah	r3, r3, sl
 8006f76:	fb06 e202 	mla	r2, r6, r2, lr
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	9b00      	ldr	r3, [sp, #0]
 8006f7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f82:	b292      	uxth	r2, r2
 8006f84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f90:	4581      	cmp	r9, r0
 8006f92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f96:	f84c 3b04 	str.w	r3, [ip], #4
 8006f9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f9e:	d2db      	bcs.n	8006f58 <quorem+0x44>
 8006fa0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fa4:	b92b      	cbnz	r3, 8006fb2 <quorem+0x9e>
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	3b04      	subs	r3, #4
 8006faa:	429d      	cmp	r5, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	d32e      	bcc.n	800700e <quorem+0xfa>
 8006fb0:	613c      	str	r4, [r7, #16]
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f001 f8b8 	bl	8008128 <__mcmp>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	db24      	blt.n	8007006 <quorem+0xf2>
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f04f 0c00 	mov.w	ip, #0
 8006fc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fc8:	f8d0 e000 	ldr.w	lr, [r0]
 8006fcc:	b293      	uxth	r3, r2
 8006fce:	ebac 0303 	sub.w	r3, ip, r3
 8006fd2:	0c12      	lsrs	r2, r2, #16
 8006fd4:	fa13 f38e 	uxtah	r3, r3, lr
 8006fd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fe6:	45c1      	cmp	r9, r8
 8006fe8:	f840 3b04 	str.w	r3, [r0], #4
 8006fec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ff0:	d2e8      	bcs.n	8006fc4 <quorem+0xb0>
 8006ff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ffa:	b922      	cbnz	r2, 8007006 <quorem+0xf2>
 8006ffc:	3b04      	subs	r3, #4
 8006ffe:	429d      	cmp	r5, r3
 8007000:	461a      	mov	r2, r3
 8007002:	d30a      	bcc.n	800701a <quorem+0x106>
 8007004:	613c      	str	r4, [r7, #16]
 8007006:	4630      	mov	r0, r6
 8007008:	b003      	add	sp, #12
 800700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	3b04      	subs	r3, #4
 8007012:	2a00      	cmp	r2, #0
 8007014:	d1cc      	bne.n	8006fb0 <quorem+0x9c>
 8007016:	3c01      	subs	r4, #1
 8007018:	e7c7      	b.n	8006faa <quorem+0x96>
 800701a:	6812      	ldr	r2, [r2, #0]
 800701c:	3b04      	subs	r3, #4
 800701e:	2a00      	cmp	r2, #0
 8007020:	d1f0      	bne.n	8007004 <quorem+0xf0>
 8007022:	3c01      	subs	r4, #1
 8007024:	e7eb      	b.n	8006ffe <quorem+0xea>
 8007026:	2000      	movs	r0, #0
 8007028:	e7ee      	b.n	8007008 <quorem+0xf4>
 800702a:	0000      	movs	r0, r0
 800702c:	0000      	movs	r0, r0
	...

08007030 <_dtoa_r>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	ed2d 8b04 	vpush	{d8-d9}
 8007038:	ec57 6b10 	vmov	r6, r7, d0
 800703c:	b093      	sub	sp, #76	; 0x4c
 800703e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007040:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007044:	9106      	str	r1, [sp, #24]
 8007046:	ee10 aa10 	vmov	sl, s0
 800704a:	4604      	mov	r4, r0
 800704c:	9209      	str	r2, [sp, #36]	; 0x24
 800704e:	930c      	str	r3, [sp, #48]	; 0x30
 8007050:	46bb      	mov	fp, r7
 8007052:	b975      	cbnz	r5, 8007072 <_dtoa_r+0x42>
 8007054:	2010      	movs	r0, #16
 8007056:	f000 fddd 	bl	8007c14 <malloc>
 800705a:	4602      	mov	r2, r0
 800705c:	6260      	str	r0, [r4, #36]	; 0x24
 800705e:	b920      	cbnz	r0, 800706a <_dtoa_r+0x3a>
 8007060:	4ba7      	ldr	r3, [pc, #668]	; (8007300 <_dtoa_r+0x2d0>)
 8007062:	21ea      	movs	r1, #234	; 0xea
 8007064:	48a7      	ldr	r0, [pc, #668]	; (8007304 <_dtoa_r+0x2d4>)
 8007066:	f001 fbc3 	bl	80087f0 <__assert_func>
 800706a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800706e:	6005      	str	r5, [r0, #0]
 8007070:	60c5      	str	r5, [r0, #12]
 8007072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007074:	6819      	ldr	r1, [r3, #0]
 8007076:	b151      	cbz	r1, 800708e <_dtoa_r+0x5e>
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	604a      	str	r2, [r1, #4]
 800707c:	2301      	movs	r3, #1
 800707e:	4093      	lsls	r3, r2
 8007080:	608b      	str	r3, [r1, #8]
 8007082:	4620      	mov	r0, r4
 8007084:	f000 fe0e 	bl	8007ca4 <_Bfree>
 8007088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	1e3b      	subs	r3, r7, #0
 8007090:	bfaa      	itet	ge
 8007092:	2300      	movge	r3, #0
 8007094:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007098:	f8c8 3000 	strge.w	r3, [r8]
 800709c:	4b9a      	ldr	r3, [pc, #616]	; (8007308 <_dtoa_r+0x2d8>)
 800709e:	bfbc      	itt	lt
 80070a0:	2201      	movlt	r2, #1
 80070a2:	f8c8 2000 	strlt.w	r2, [r8]
 80070a6:	ea33 030b 	bics.w	r3, r3, fp
 80070aa:	d11b      	bne.n	80070e4 <_dtoa_r+0xb4>
 80070ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070b8:	4333      	orrs	r3, r6
 80070ba:	f000 8592 	beq.w	8007be2 <_dtoa_r+0xbb2>
 80070be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070c0:	b963      	cbnz	r3, 80070dc <_dtoa_r+0xac>
 80070c2:	4b92      	ldr	r3, [pc, #584]	; (800730c <_dtoa_r+0x2dc>)
 80070c4:	e022      	b.n	800710c <_dtoa_r+0xdc>
 80070c6:	4b92      	ldr	r3, [pc, #584]	; (8007310 <_dtoa_r+0x2e0>)
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	3308      	adds	r3, #8
 80070cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	9801      	ldr	r0, [sp, #4]
 80070d2:	b013      	add	sp, #76	; 0x4c
 80070d4:	ecbd 8b04 	vpop	{d8-d9}
 80070d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070dc:	4b8b      	ldr	r3, [pc, #556]	; (800730c <_dtoa_r+0x2dc>)
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	3303      	adds	r3, #3
 80070e2:	e7f3      	b.n	80070cc <_dtoa_r+0x9c>
 80070e4:	2200      	movs	r2, #0
 80070e6:	2300      	movs	r3, #0
 80070e8:	4650      	mov	r0, sl
 80070ea:	4659      	mov	r1, fp
 80070ec:	f7f9 fd0c 	bl	8000b08 <__aeabi_dcmpeq>
 80070f0:	ec4b ab19 	vmov	d9, sl, fp
 80070f4:	4680      	mov	r8, r0
 80070f6:	b158      	cbz	r0, 8007110 <_dtoa_r+0xe0>
 80070f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070fa:	2301      	movs	r3, #1
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 856b 	beq.w	8007bdc <_dtoa_r+0xbac>
 8007106:	4883      	ldr	r0, [pc, #524]	; (8007314 <_dtoa_r+0x2e4>)
 8007108:	6018      	str	r0, [r3, #0]
 800710a:	1e43      	subs	r3, r0, #1
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	e7df      	b.n	80070d0 <_dtoa_r+0xa0>
 8007110:	ec4b ab10 	vmov	d0, sl, fp
 8007114:	aa10      	add	r2, sp, #64	; 0x40
 8007116:	a911      	add	r1, sp, #68	; 0x44
 8007118:	4620      	mov	r0, r4
 800711a:	f001 f8ab 	bl	8008274 <__d2b>
 800711e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007122:	ee08 0a10 	vmov	s16, r0
 8007126:	2d00      	cmp	r5, #0
 8007128:	f000 8084 	beq.w	8007234 <_dtoa_r+0x204>
 800712c:	ee19 3a90 	vmov	r3, s19
 8007130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007134:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007138:	4656      	mov	r6, sl
 800713a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800713e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007142:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007146:	4b74      	ldr	r3, [pc, #464]	; (8007318 <_dtoa_r+0x2e8>)
 8007148:	2200      	movs	r2, #0
 800714a:	4630      	mov	r0, r6
 800714c:	4639      	mov	r1, r7
 800714e:	f7f9 f8bb 	bl	80002c8 <__aeabi_dsub>
 8007152:	a365      	add	r3, pc, #404	; (adr r3, 80072e8 <_dtoa_r+0x2b8>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f7f9 fa6e 	bl	8000638 <__aeabi_dmul>
 800715c:	a364      	add	r3, pc, #400	; (adr r3, 80072f0 <_dtoa_r+0x2c0>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	f7f9 f8b3 	bl	80002cc <__adddf3>
 8007166:	4606      	mov	r6, r0
 8007168:	4628      	mov	r0, r5
 800716a:	460f      	mov	r7, r1
 800716c:	f7f9 f9fa 	bl	8000564 <__aeabi_i2d>
 8007170:	a361      	add	r3, pc, #388	; (adr r3, 80072f8 <_dtoa_r+0x2c8>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7f9 fa5f 	bl	8000638 <__aeabi_dmul>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4630      	mov	r0, r6
 8007180:	4639      	mov	r1, r7
 8007182:	f7f9 f8a3 	bl	80002cc <__adddf3>
 8007186:	4606      	mov	r6, r0
 8007188:	460f      	mov	r7, r1
 800718a:	f7f9 fd05 	bl	8000b98 <__aeabi_d2iz>
 800718e:	2200      	movs	r2, #0
 8007190:	9000      	str	r0, [sp, #0]
 8007192:	2300      	movs	r3, #0
 8007194:	4630      	mov	r0, r6
 8007196:	4639      	mov	r1, r7
 8007198:	f7f9 fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800719c:	b150      	cbz	r0, 80071b4 <_dtoa_r+0x184>
 800719e:	9800      	ldr	r0, [sp, #0]
 80071a0:	f7f9 f9e0 	bl	8000564 <__aeabi_i2d>
 80071a4:	4632      	mov	r2, r6
 80071a6:	463b      	mov	r3, r7
 80071a8:	f7f9 fcae 	bl	8000b08 <__aeabi_dcmpeq>
 80071ac:	b910      	cbnz	r0, 80071b4 <_dtoa_r+0x184>
 80071ae:	9b00      	ldr	r3, [sp, #0]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	9b00      	ldr	r3, [sp, #0]
 80071b6:	2b16      	cmp	r3, #22
 80071b8:	d85a      	bhi.n	8007270 <_dtoa_r+0x240>
 80071ba:	9a00      	ldr	r2, [sp, #0]
 80071bc:	4b57      	ldr	r3, [pc, #348]	; (800731c <_dtoa_r+0x2ec>)
 80071be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	ec51 0b19 	vmov	r0, r1, d9
 80071ca:	f7f9 fca7 	bl	8000b1c <__aeabi_dcmplt>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d050      	beq.n	8007274 <_dtoa_r+0x244>
 80071d2:	9b00      	ldr	r3, [sp, #0]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	2300      	movs	r3, #0
 80071da:	930b      	str	r3, [sp, #44]	; 0x2c
 80071dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071de:	1b5d      	subs	r5, r3, r5
 80071e0:	1e6b      	subs	r3, r5, #1
 80071e2:	9305      	str	r3, [sp, #20]
 80071e4:	bf45      	ittet	mi
 80071e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80071ea:	9304      	strmi	r3, [sp, #16]
 80071ec:	2300      	movpl	r3, #0
 80071ee:	2300      	movmi	r3, #0
 80071f0:	bf4c      	ite	mi
 80071f2:	9305      	strmi	r3, [sp, #20]
 80071f4:	9304      	strpl	r3, [sp, #16]
 80071f6:	9b00      	ldr	r3, [sp, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	db3d      	blt.n	8007278 <_dtoa_r+0x248>
 80071fc:	9b05      	ldr	r3, [sp, #20]
 80071fe:	9a00      	ldr	r2, [sp, #0]
 8007200:	920a      	str	r2, [sp, #40]	; 0x28
 8007202:	4413      	add	r3, r2
 8007204:	9305      	str	r3, [sp, #20]
 8007206:	2300      	movs	r3, #0
 8007208:	9307      	str	r3, [sp, #28]
 800720a:	9b06      	ldr	r3, [sp, #24]
 800720c:	2b09      	cmp	r3, #9
 800720e:	f200 8089 	bhi.w	8007324 <_dtoa_r+0x2f4>
 8007212:	2b05      	cmp	r3, #5
 8007214:	bfc4      	itt	gt
 8007216:	3b04      	subgt	r3, #4
 8007218:	9306      	strgt	r3, [sp, #24]
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	f1a3 0302 	sub.w	r3, r3, #2
 8007220:	bfcc      	ite	gt
 8007222:	2500      	movgt	r5, #0
 8007224:	2501      	movle	r5, #1
 8007226:	2b03      	cmp	r3, #3
 8007228:	f200 8087 	bhi.w	800733a <_dtoa_r+0x30a>
 800722c:	e8df f003 	tbb	[pc, r3]
 8007230:	59383a2d 	.word	0x59383a2d
 8007234:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007238:	441d      	add	r5, r3
 800723a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800723e:	2b20      	cmp	r3, #32
 8007240:	bfc1      	itttt	gt
 8007242:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007246:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800724a:	fa0b f303 	lslgt.w	r3, fp, r3
 800724e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007252:	bfda      	itte	le
 8007254:	f1c3 0320 	rsble	r3, r3, #32
 8007258:	fa06 f003 	lslle.w	r0, r6, r3
 800725c:	4318      	orrgt	r0, r3
 800725e:	f7f9 f971 	bl	8000544 <__aeabi_ui2d>
 8007262:	2301      	movs	r3, #1
 8007264:	4606      	mov	r6, r0
 8007266:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800726a:	3d01      	subs	r5, #1
 800726c:	930e      	str	r3, [sp, #56]	; 0x38
 800726e:	e76a      	b.n	8007146 <_dtoa_r+0x116>
 8007270:	2301      	movs	r3, #1
 8007272:	e7b2      	b.n	80071da <_dtoa_r+0x1aa>
 8007274:	900b      	str	r0, [sp, #44]	; 0x2c
 8007276:	e7b1      	b.n	80071dc <_dtoa_r+0x1ac>
 8007278:	9b04      	ldr	r3, [sp, #16]
 800727a:	9a00      	ldr	r2, [sp, #0]
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	4253      	negs	r3, r2
 8007282:	9307      	str	r3, [sp, #28]
 8007284:	2300      	movs	r3, #0
 8007286:	930a      	str	r3, [sp, #40]	; 0x28
 8007288:	e7bf      	b.n	800720a <_dtoa_r+0x1da>
 800728a:	2300      	movs	r3, #0
 800728c:	9308      	str	r3, [sp, #32]
 800728e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	dc55      	bgt.n	8007340 <_dtoa_r+0x310>
 8007294:	2301      	movs	r3, #1
 8007296:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800729a:	461a      	mov	r2, r3
 800729c:	9209      	str	r2, [sp, #36]	; 0x24
 800729e:	e00c      	b.n	80072ba <_dtoa_r+0x28a>
 80072a0:	2301      	movs	r3, #1
 80072a2:	e7f3      	b.n	800728c <_dtoa_r+0x25c>
 80072a4:	2300      	movs	r3, #0
 80072a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a8:	9308      	str	r3, [sp, #32]
 80072aa:	9b00      	ldr	r3, [sp, #0]
 80072ac:	4413      	add	r3, r2
 80072ae:	9302      	str	r3, [sp, #8]
 80072b0:	3301      	adds	r3, #1
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	9303      	str	r3, [sp, #12]
 80072b6:	bfb8      	it	lt
 80072b8:	2301      	movlt	r3, #1
 80072ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80072bc:	2200      	movs	r2, #0
 80072be:	6042      	str	r2, [r0, #4]
 80072c0:	2204      	movs	r2, #4
 80072c2:	f102 0614 	add.w	r6, r2, #20
 80072c6:	429e      	cmp	r6, r3
 80072c8:	6841      	ldr	r1, [r0, #4]
 80072ca:	d93d      	bls.n	8007348 <_dtoa_r+0x318>
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 fca9 	bl	8007c24 <_Balloc>
 80072d2:	9001      	str	r0, [sp, #4]
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d13b      	bne.n	8007350 <_dtoa_r+0x320>
 80072d8:	4b11      	ldr	r3, [pc, #68]	; (8007320 <_dtoa_r+0x2f0>)
 80072da:	4602      	mov	r2, r0
 80072dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072e0:	e6c0      	b.n	8007064 <_dtoa_r+0x34>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e7df      	b.n	80072a6 <_dtoa_r+0x276>
 80072e6:	bf00      	nop
 80072e8:	636f4361 	.word	0x636f4361
 80072ec:	3fd287a7 	.word	0x3fd287a7
 80072f0:	8b60c8b3 	.word	0x8b60c8b3
 80072f4:	3fc68a28 	.word	0x3fc68a28
 80072f8:	509f79fb 	.word	0x509f79fb
 80072fc:	3fd34413 	.word	0x3fd34413
 8007300:	08009499 	.word	0x08009499
 8007304:	080094b0 	.word	0x080094b0
 8007308:	7ff00000 	.word	0x7ff00000
 800730c:	08009495 	.word	0x08009495
 8007310:	0800948c 	.word	0x0800948c
 8007314:	08009469 	.word	0x08009469
 8007318:	3ff80000 	.word	0x3ff80000
 800731c:	080095a0 	.word	0x080095a0
 8007320:	0800950b 	.word	0x0800950b
 8007324:	2501      	movs	r5, #1
 8007326:	2300      	movs	r3, #0
 8007328:	9306      	str	r3, [sp, #24]
 800732a:	9508      	str	r5, [sp, #32]
 800732c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007330:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007334:	2200      	movs	r2, #0
 8007336:	2312      	movs	r3, #18
 8007338:	e7b0      	b.n	800729c <_dtoa_r+0x26c>
 800733a:	2301      	movs	r3, #1
 800733c:	9308      	str	r3, [sp, #32]
 800733e:	e7f5      	b.n	800732c <_dtoa_r+0x2fc>
 8007340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007342:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007346:	e7b8      	b.n	80072ba <_dtoa_r+0x28a>
 8007348:	3101      	adds	r1, #1
 800734a:	6041      	str	r1, [r0, #4]
 800734c:	0052      	lsls	r2, r2, #1
 800734e:	e7b8      	b.n	80072c2 <_dtoa_r+0x292>
 8007350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007352:	9a01      	ldr	r2, [sp, #4]
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	2b0e      	cmp	r3, #14
 800735a:	f200 809d 	bhi.w	8007498 <_dtoa_r+0x468>
 800735e:	2d00      	cmp	r5, #0
 8007360:	f000 809a 	beq.w	8007498 <_dtoa_r+0x468>
 8007364:	9b00      	ldr	r3, [sp, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	dd32      	ble.n	80073d0 <_dtoa_r+0x3a0>
 800736a:	4ab7      	ldr	r2, [pc, #732]	; (8007648 <_dtoa_r+0x618>)
 800736c:	f003 030f 	and.w	r3, r3, #15
 8007370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007378:	9b00      	ldr	r3, [sp, #0]
 800737a:	05d8      	lsls	r0, r3, #23
 800737c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007380:	d516      	bpl.n	80073b0 <_dtoa_r+0x380>
 8007382:	4bb2      	ldr	r3, [pc, #712]	; (800764c <_dtoa_r+0x61c>)
 8007384:	ec51 0b19 	vmov	r0, r1, d9
 8007388:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800738c:	f7f9 fa7e 	bl	800088c <__aeabi_ddiv>
 8007390:	f007 070f 	and.w	r7, r7, #15
 8007394:	4682      	mov	sl, r0
 8007396:	468b      	mov	fp, r1
 8007398:	2503      	movs	r5, #3
 800739a:	4eac      	ldr	r6, [pc, #688]	; (800764c <_dtoa_r+0x61c>)
 800739c:	b957      	cbnz	r7, 80073b4 <_dtoa_r+0x384>
 800739e:	4642      	mov	r2, r8
 80073a0:	464b      	mov	r3, r9
 80073a2:	4650      	mov	r0, sl
 80073a4:	4659      	mov	r1, fp
 80073a6:	f7f9 fa71 	bl	800088c <__aeabi_ddiv>
 80073aa:	4682      	mov	sl, r0
 80073ac:	468b      	mov	fp, r1
 80073ae:	e028      	b.n	8007402 <_dtoa_r+0x3d2>
 80073b0:	2502      	movs	r5, #2
 80073b2:	e7f2      	b.n	800739a <_dtoa_r+0x36a>
 80073b4:	07f9      	lsls	r1, r7, #31
 80073b6:	d508      	bpl.n	80073ca <_dtoa_r+0x39a>
 80073b8:	4640      	mov	r0, r8
 80073ba:	4649      	mov	r1, r9
 80073bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073c0:	f7f9 f93a 	bl	8000638 <__aeabi_dmul>
 80073c4:	3501      	adds	r5, #1
 80073c6:	4680      	mov	r8, r0
 80073c8:	4689      	mov	r9, r1
 80073ca:	107f      	asrs	r7, r7, #1
 80073cc:	3608      	adds	r6, #8
 80073ce:	e7e5      	b.n	800739c <_dtoa_r+0x36c>
 80073d0:	f000 809b 	beq.w	800750a <_dtoa_r+0x4da>
 80073d4:	9b00      	ldr	r3, [sp, #0]
 80073d6:	4f9d      	ldr	r7, [pc, #628]	; (800764c <_dtoa_r+0x61c>)
 80073d8:	425e      	negs	r6, r3
 80073da:	4b9b      	ldr	r3, [pc, #620]	; (8007648 <_dtoa_r+0x618>)
 80073dc:	f006 020f 	and.w	r2, r6, #15
 80073e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	ec51 0b19 	vmov	r0, r1, d9
 80073ec:	f7f9 f924 	bl	8000638 <__aeabi_dmul>
 80073f0:	1136      	asrs	r6, r6, #4
 80073f2:	4682      	mov	sl, r0
 80073f4:	468b      	mov	fp, r1
 80073f6:	2300      	movs	r3, #0
 80073f8:	2502      	movs	r5, #2
 80073fa:	2e00      	cmp	r6, #0
 80073fc:	d17a      	bne.n	80074f4 <_dtoa_r+0x4c4>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1d3      	bne.n	80073aa <_dtoa_r+0x37a>
 8007402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8082 	beq.w	800750e <_dtoa_r+0x4de>
 800740a:	4b91      	ldr	r3, [pc, #580]	; (8007650 <_dtoa_r+0x620>)
 800740c:	2200      	movs	r2, #0
 800740e:	4650      	mov	r0, sl
 8007410:	4659      	mov	r1, fp
 8007412:	f7f9 fb83 	bl	8000b1c <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	d079      	beq.n	800750e <_dtoa_r+0x4de>
 800741a:	9b03      	ldr	r3, [sp, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d076      	beq.n	800750e <_dtoa_r+0x4de>
 8007420:	9b02      	ldr	r3, [sp, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	dd36      	ble.n	8007494 <_dtoa_r+0x464>
 8007426:	9b00      	ldr	r3, [sp, #0]
 8007428:	4650      	mov	r0, sl
 800742a:	4659      	mov	r1, fp
 800742c:	1e5f      	subs	r7, r3, #1
 800742e:	2200      	movs	r2, #0
 8007430:	4b88      	ldr	r3, [pc, #544]	; (8007654 <_dtoa_r+0x624>)
 8007432:	f7f9 f901 	bl	8000638 <__aeabi_dmul>
 8007436:	9e02      	ldr	r6, [sp, #8]
 8007438:	4682      	mov	sl, r0
 800743a:	468b      	mov	fp, r1
 800743c:	3501      	adds	r5, #1
 800743e:	4628      	mov	r0, r5
 8007440:	f7f9 f890 	bl	8000564 <__aeabi_i2d>
 8007444:	4652      	mov	r2, sl
 8007446:	465b      	mov	r3, fp
 8007448:	f7f9 f8f6 	bl	8000638 <__aeabi_dmul>
 800744c:	4b82      	ldr	r3, [pc, #520]	; (8007658 <_dtoa_r+0x628>)
 800744e:	2200      	movs	r2, #0
 8007450:	f7f8 ff3c 	bl	80002cc <__adddf3>
 8007454:	46d0      	mov	r8, sl
 8007456:	46d9      	mov	r9, fp
 8007458:	4682      	mov	sl, r0
 800745a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800745e:	2e00      	cmp	r6, #0
 8007460:	d158      	bne.n	8007514 <_dtoa_r+0x4e4>
 8007462:	4b7e      	ldr	r3, [pc, #504]	; (800765c <_dtoa_r+0x62c>)
 8007464:	2200      	movs	r2, #0
 8007466:	4640      	mov	r0, r8
 8007468:	4649      	mov	r1, r9
 800746a:	f7f8 ff2d 	bl	80002c8 <__aeabi_dsub>
 800746e:	4652      	mov	r2, sl
 8007470:	465b      	mov	r3, fp
 8007472:	4680      	mov	r8, r0
 8007474:	4689      	mov	r9, r1
 8007476:	f7f9 fb6f 	bl	8000b58 <__aeabi_dcmpgt>
 800747a:	2800      	cmp	r0, #0
 800747c:	f040 8295 	bne.w	80079aa <_dtoa_r+0x97a>
 8007480:	4652      	mov	r2, sl
 8007482:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007486:	4640      	mov	r0, r8
 8007488:	4649      	mov	r1, r9
 800748a:	f7f9 fb47 	bl	8000b1c <__aeabi_dcmplt>
 800748e:	2800      	cmp	r0, #0
 8007490:	f040 8289 	bne.w	80079a6 <_dtoa_r+0x976>
 8007494:	ec5b ab19 	vmov	sl, fp, d9
 8007498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800749a:	2b00      	cmp	r3, #0
 800749c:	f2c0 8148 	blt.w	8007730 <_dtoa_r+0x700>
 80074a0:	9a00      	ldr	r2, [sp, #0]
 80074a2:	2a0e      	cmp	r2, #14
 80074a4:	f300 8144 	bgt.w	8007730 <_dtoa_r+0x700>
 80074a8:	4b67      	ldr	r3, [pc, #412]	; (8007648 <_dtoa_r+0x618>)
 80074aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f280 80d5 	bge.w	8007664 <_dtoa_r+0x634>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f300 80d1 	bgt.w	8007664 <_dtoa_r+0x634>
 80074c2:	f040 826f 	bne.w	80079a4 <_dtoa_r+0x974>
 80074c6:	4b65      	ldr	r3, [pc, #404]	; (800765c <_dtoa_r+0x62c>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	4640      	mov	r0, r8
 80074cc:	4649      	mov	r1, r9
 80074ce:	f7f9 f8b3 	bl	8000638 <__aeabi_dmul>
 80074d2:	4652      	mov	r2, sl
 80074d4:	465b      	mov	r3, fp
 80074d6:	f7f9 fb35 	bl	8000b44 <__aeabi_dcmpge>
 80074da:	9e03      	ldr	r6, [sp, #12]
 80074dc:	4637      	mov	r7, r6
 80074de:	2800      	cmp	r0, #0
 80074e0:	f040 8245 	bne.w	800796e <_dtoa_r+0x93e>
 80074e4:	9d01      	ldr	r5, [sp, #4]
 80074e6:	2331      	movs	r3, #49	; 0x31
 80074e8:	f805 3b01 	strb.w	r3, [r5], #1
 80074ec:	9b00      	ldr	r3, [sp, #0]
 80074ee:	3301      	adds	r3, #1
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	e240      	b.n	8007976 <_dtoa_r+0x946>
 80074f4:	07f2      	lsls	r2, r6, #31
 80074f6:	d505      	bpl.n	8007504 <_dtoa_r+0x4d4>
 80074f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074fc:	f7f9 f89c 	bl	8000638 <__aeabi_dmul>
 8007500:	3501      	adds	r5, #1
 8007502:	2301      	movs	r3, #1
 8007504:	1076      	asrs	r6, r6, #1
 8007506:	3708      	adds	r7, #8
 8007508:	e777      	b.n	80073fa <_dtoa_r+0x3ca>
 800750a:	2502      	movs	r5, #2
 800750c:	e779      	b.n	8007402 <_dtoa_r+0x3d2>
 800750e:	9f00      	ldr	r7, [sp, #0]
 8007510:	9e03      	ldr	r6, [sp, #12]
 8007512:	e794      	b.n	800743e <_dtoa_r+0x40e>
 8007514:	9901      	ldr	r1, [sp, #4]
 8007516:	4b4c      	ldr	r3, [pc, #304]	; (8007648 <_dtoa_r+0x618>)
 8007518:	4431      	add	r1, r6
 800751a:	910d      	str	r1, [sp, #52]	; 0x34
 800751c:	9908      	ldr	r1, [sp, #32]
 800751e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007522:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007526:	2900      	cmp	r1, #0
 8007528:	d043      	beq.n	80075b2 <_dtoa_r+0x582>
 800752a:	494d      	ldr	r1, [pc, #308]	; (8007660 <_dtoa_r+0x630>)
 800752c:	2000      	movs	r0, #0
 800752e:	f7f9 f9ad 	bl	800088c <__aeabi_ddiv>
 8007532:	4652      	mov	r2, sl
 8007534:	465b      	mov	r3, fp
 8007536:	f7f8 fec7 	bl	80002c8 <__aeabi_dsub>
 800753a:	9d01      	ldr	r5, [sp, #4]
 800753c:	4682      	mov	sl, r0
 800753e:	468b      	mov	fp, r1
 8007540:	4649      	mov	r1, r9
 8007542:	4640      	mov	r0, r8
 8007544:	f7f9 fb28 	bl	8000b98 <__aeabi_d2iz>
 8007548:	4606      	mov	r6, r0
 800754a:	f7f9 f80b 	bl	8000564 <__aeabi_i2d>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4640      	mov	r0, r8
 8007554:	4649      	mov	r1, r9
 8007556:	f7f8 feb7 	bl	80002c8 <__aeabi_dsub>
 800755a:	3630      	adds	r6, #48	; 0x30
 800755c:	f805 6b01 	strb.w	r6, [r5], #1
 8007560:	4652      	mov	r2, sl
 8007562:	465b      	mov	r3, fp
 8007564:	4680      	mov	r8, r0
 8007566:	4689      	mov	r9, r1
 8007568:	f7f9 fad8 	bl	8000b1c <__aeabi_dcmplt>
 800756c:	2800      	cmp	r0, #0
 800756e:	d163      	bne.n	8007638 <_dtoa_r+0x608>
 8007570:	4642      	mov	r2, r8
 8007572:	464b      	mov	r3, r9
 8007574:	4936      	ldr	r1, [pc, #216]	; (8007650 <_dtoa_r+0x620>)
 8007576:	2000      	movs	r0, #0
 8007578:	f7f8 fea6 	bl	80002c8 <__aeabi_dsub>
 800757c:	4652      	mov	r2, sl
 800757e:	465b      	mov	r3, fp
 8007580:	f7f9 facc 	bl	8000b1c <__aeabi_dcmplt>
 8007584:	2800      	cmp	r0, #0
 8007586:	f040 80b5 	bne.w	80076f4 <_dtoa_r+0x6c4>
 800758a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800758c:	429d      	cmp	r5, r3
 800758e:	d081      	beq.n	8007494 <_dtoa_r+0x464>
 8007590:	4b30      	ldr	r3, [pc, #192]	; (8007654 <_dtoa_r+0x624>)
 8007592:	2200      	movs	r2, #0
 8007594:	4650      	mov	r0, sl
 8007596:	4659      	mov	r1, fp
 8007598:	f7f9 f84e 	bl	8000638 <__aeabi_dmul>
 800759c:	4b2d      	ldr	r3, [pc, #180]	; (8007654 <_dtoa_r+0x624>)
 800759e:	4682      	mov	sl, r0
 80075a0:	468b      	mov	fp, r1
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	2200      	movs	r2, #0
 80075a8:	f7f9 f846 	bl	8000638 <__aeabi_dmul>
 80075ac:	4680      	mov	r8, r0
 80075ae:	4689      	mov	r9, r1
 80075b0:	e7c6      	b.n	8007540 <_dtoa_r+0x510>
 80075b2:	4650      	mov	r0, sl
 80075b4:	4659      	mov	r1, fp
 80075b6:	f7f9 f83f 	bl	8000638 <__aeabi_dmul>
 80075ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075bc:	9d01      	ldr	r5, [sp, #4]
 80075be:	930f      	str	r3, [sp, #60]	; 0x3c
 80075c0:	4682      	mov	sl, r0
 80075c2:	468b      	mov	fp, r1
 80075c4:	4649      	mov	r1, r9
 80075c6:	4640      	mov	r0, r8
 80075c8:	f7f9 fae6 	bl	8000b98 <__aeabi_d2iz>
 80075cc:	4606      	mov	r6, r0
 80075ce:	f7f8 ffc9 	bl	8000564 <__aeabi_i2d>
 80075d2:	3630      	adds	r6, #48	; 0x30
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f7f8 fe74 	bl	80002c8 <__aeabi_dsub>
 80075e0:	f805 6b01 	strb.w	r6, [r5], #1
 80075e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e6:	429d      	cmp	r5, r3
 80075e8:	4680      	mov	r8, r0
 80075ea:	4689      	mov	r9, r1
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	d124      	bne.n	800763c <_dtoa_r+0x60c>
 80075f2:	4b1b      	ldr	r3, [pc, #108]	; (8007660 <_dtoa_r+0x630>)
 80075f4:	4650      	mov	r0, sl
 80075f6:	4659      	mov	r1, fp
 80075f8:	f7f8 fe68 	bl	80002cc <__adddf3>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4640      	mov	r0, r8
 8007602:	4649      	mov	r1, r9
 8007604:	f7f9 faa8 	bl	8000b58 <__aeabi_dcmpgt>
 8007608:	2800      	cmp	r0, #0
 800760a:	d173      	bne.n	80076f4 <_dtoa_r+0x6c4>
 800760c:	4652      	mov	r2, sl
 800760e:	465b      	mov	r3, fp
 8007610:	4913      	ldr	r1, [pc, #76]	; (8007660 <_dtoa_r+0x630>)
 8007612:	2000      	movs	r0, #0
 8007614:	f7f8 fe58 	bl	80002c8 <__aeabi_dsub>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4640      	mov	r0, r8
 800761e:	4649      	mov	r1, r9
 8007620:	f7f9 fa7c 	bl	8000b1c <__aeabi_dcmplt>
 8007624:	2800      	cmp	r0, #0
 8007626:	f43f af35 	beq.w	8007494 <_dtoa_r+0x464>
 800762a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800762c:	1e6b      	subs	r3, r5, #1
 800762e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007630:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007634:	2b30      	cmp	r3, #48	; 0x30
 8007636:	d0f8      	beq.n	800762a <_dtoa_r+0x5fa>
 8007638:	9700      	str	r7, [sp, #0]
 800763a:	e049      	b.n	80076d0 <_dtoa_r+0x6a0>
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <_dtoa_r+0x624>)
 800763e:	f7f8 fffb 	bl	8000638 <__aeabi_dmul>
 8007642:	4680      	mov	r8, r0
 8007644:	4689      	mov	r9, r1
 8007646:	e7bd      	b.n	80075c4 <_dtoa_r+0x594>
 8007648:	080095a0 	.word	0x080095a0
 800764c:	08009578 	.word	0x08009578
 8007650:	3ff00000 	.word	0x3ff00000
 8007654:	40240000 	.word	0x40240000
 8007658:	401c0000 	.word	0x401c0000
 800765c:	40140000 	.word	0x40140000
 8007660:	3fe00000 	.word	0x3fe00000
 8007664:	9d01      	ldr	r5, [sp, #4]
 8007666:	4656      	mov	r6, sl
 8007668:	465f      	mov	r7, fp
 800766a:	4642      	mov	r2, r8
 800766c:	464b      	mov	r3, r9
 800766e:	4630      	mov	r0, r6
 8007670:	4639      	mov	r1, r7
 8007672:	f7f9 f90b 	bl	800088c <__aeabi_ddiv>
 8007676:	f7f9 fa8f 	bl	8000b98 <__aeabi_d2iz>
 800767a:	4682      	mov	sl, r0
 800767c:	f7f8 ff72 	bl	8000564 <__aeabi_i2d>
 8007680:	4642      	mov	r2, r8
 8007682:	464b      	mov	r3, r9
 8007684:	f7f8 ffd8 	bl	8000638 <__aeabi_dmul>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4630      	mov	r0, r6
 800768e:	4639      	mov	r1, r7
 8007690:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007694:	f7f8 fe18 	bl	80002c8 <__aeabi_dsub>
 8007698:	f805 6b01 	strb.w	r6, [r5], #1
 800769c:	9e01      	ldr	r6, [sp, #4]
 800769e:	9f03      	ldr	r7, [sp, #12]
 80076a0:	1bae      	subs	r6, r5, r6
 80076a2:	42b7      	cmp	r7, r6
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	d135      	bne.n	8007716 <_dtoa_r+0x6e6>
 80076aa:	f7f8 fe0f 	bl	80002cc <__adddf3>
 80076ae:	4642      	mov	r2, r8
 80076b0:	464b      	mov	r3, r9
 80076b2:	4606      	mov	r6, r0
 80076b4:	460f      	mov	r7, r1
 80076b6:	f7f9 fa4f 	bl	8000b58 <__aeabi_dcmpgt>
 80076ba:	b9d0      	cbnz	r0, 80076f2 <_dtoa_r+0x6c2>
 80076bc:	4642      	mov	r2, r8
 80076be:	464b      	mov	r3, r9
 80076c0:	4630      	mov	r0, r6
 80076c2:	4639      	mov	r1, r7
 80076c4:	f7f9 fa20 	bl	8000b08 <__aeabi_dcmpeq>
 80076c8:	b110      	cbz	r0, 80076d0 <_dtoa_r+0x6a0>
 80076ca:	f01a 0f01 	tst.w	sl, #1
 80076ce:	d110      	bne.n	80076f2 <_dtoa_r+0x6c2>
 80076d0:	4620      	mov	r0, r4
 80076d2:	ee18 1a10 	vmov	r1, s16
 80076d6:	f000 fae5 	bl	8007ca4 <_Bfree>
 80076da:	2300      	movs	r3, #0
 80076dc:	9800      	ldr	r0, [sp, #0]
 80076de:	702b      	strb	r3, [r5, #0]
 80076e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076e2:	3001      	adds	r0, #1
 80076e4:	6018      	str	r0, [r3, #0]
 80076e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f43f acf1 	beq.w	80070d0 <_dtoa_r+0xa0>
 80076ee:	601d      	str	r5, [r3, #0]
 80076f0:	e4ee      	b.n	80070d0 <_dtoa_r+0xa0>
 80076f2:	9f00      	ldr	r7, [sp, #0]
 80076f4:	462b      	mov	r3, r5
 80076f6:	461d      	mov	r5, r3
 80076f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076fc:	2a39      	cmp	r2, #57	; 0x39
 80076fe:	d106      	bne.n	800770e <_dtoa_r+0x6de>
 8007700:	9a01      	ldr	r2, [sp, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d1f7      	bne.n	80076f6 <_dtoa_r+0x6c6>
 8007706:	9901      	ldr	r1, [sp, #4]
 8007708:	2230      	movs	r2, #48	; 0x30
 800770a:	3701      	adds	r7, #1
 800770c:	700a      	strb	r2, [r1, #0]
 800770e:	781a      	ldrb	r2, [r3, #0]
 8007710:	3201      	adds	r2, #1
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	e790      	b.n	8007638 <_dtoa_r+0x608>
 8007716:	4ba6      	ldr	r3, [pc, #664]	; (80079b0 <_dtoa_r+0x980>)
 8007718:	2200      	movs	r2, #0
 800771a:	f7f8 ff8d 	bl	8000638 <__aeabi_dmul>
 800771e:	2200      	movs	r2, #0
 8007720:	2300      	movs	r3, #0
 8007722:	4606      	mov	r6, r0
 8007724:	460f      	mov	r7, r1
 8007726:	f7f9 f9ef 	bl	8000b08 <__aeabi_dcmpeq>
 800772a:	2800      	cmp	r0, #0
 800772c:	d09d      	beq.n	800766a <_dtoa_r+0x63a>
 800772e:	e7cf      	b.n	80076d0 <_dtoa_r+0x6a0>
 8007730:	9a08      	ldr	r2, [sp, #32]
 8007732:	2a00      	cmp	r2, #0
 8007734:	f000 80d7 	beq.w	80078e6 <_dtoa_r+0x8b6>
 8007738:	9a06      	ldr	r2, [sp, #24]
 800773a:	2a01      	cmp	r2, #1
 800773c:	f300 80ba 	bgt.w	80078b4 <_dtoa_r+0x884>
 8007740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007742:	2a00      	cmp	r2, #0
 8007744:	f000 80b2 	beq.w	80078ac <_dtoa_r+0x87c>
 8007748:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800774c:	9e07      	ldr	r6, [sp, #28]
 800774e:	9d04      	ldr	r5, [sp, #16]
 8007750:	9a04      	ldr	r2, [sp, #16]
 8007752:	441a      	add	r2, r3
 8007754:	9204      	str	r2, [sp, #16]
 8007756:	9a05      	ldr	r2, [sp, #20]
 8007758:	2101      	movs	r1, #1
 800775a:	441a      	add	r2, r3
 800775c:	4620      	mov	r0, r4
 800775e:	9205      	str	r2, [sp, #20]
 8007760:	f000 fb58 	bl	8007e14 <__i2b>
 8007764:	4607      	mov	r7, r0
 8007766:	2d00      	cmp	r5, #0
 8007768:	dd0c      	ble.n	8007784 <_dtoa_r+0x754>
 800776a:	9b05      	ldr	r3, [sp, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	dd09      	ble.n	8007784 <_dtoa_r+0x754>
 8007770:	42ab      	cmp	r3, r5
 8007772:	9a04      	ldr	r2, [sp, #16]
 8007774:	bfa8      	it	ge
 8007776:	462b      	movge	r3, r5
 8007778:	1ad2      	subs	r2, r2, r3
 800777a:	9204      	str	r2, [sp, #16]
 800777c:	9a05      	ldr	r2, [sp, #20]
 800777e:	1aed      	subs	r5, r5, r3
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	9305      	str	r3, [sp, #20]
 8007784:	9b07      	ldr	r3, [sp, #28]
 8007786:	b31b      	cbz	r3, 80077d0 <_dtoa_r+0x7a0>
 8007788:	9b08      	ldr	r3, [sp, #32]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80af 	beq.w	80078ee <_dtoa_r+0x8be>
 8007790:	2e00      	cmp	r6, #0
 8007792:	dd13      	ble.n	80077bc <_dtoa_r+0x78c>
 8007794:	4639      	mov	r1, r7
 8007796:	4632      	mov	r2, r6
 8007798:	4620      	mov	r0, r4
 800779a:	f000 fbfb 	bl	8007f94 <__pow5mult>
 800779e:	ee18 2a10 	vmov	r2, s16
 80077a2:	4601      	mov	r1, r0
 80077a4:	4607      	mov	r7, r0
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 fb4a 	bl	8007e40 <__multiply>
 80077ac:	ee18 1a10 	vmov	r1, s16
 80077b0:	4680      	mov	r8, r0
 80077b2:	4620      	mov	r0, r4
 80077b4:	f000 fa76 	bl	8007ca4 <_Bfree>
 80077b8:	ee08 8a10 	vmov	s16, r8
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	1b9a      	subs	r2, r3, r6
 80077c0:	d006      	beq.n	80077d0 <_dtoa_r+0x7a0>
 80077c2:	ee18 1a10 	vmov	r1, s16
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 fbe4 	bl	8007f94 <__pow5mult>
 80077cc:	ee08 0a10 	vmov	s16, r0
 80077d0:	2101      	movs	r1, #1
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 fb1e 	bl	8007e14 <__i2b>
 80077d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077da:	2b00      	cmp	r3, #0
 80077dc:	4606      	mov	r6, r0
 80077de:	f340 8088 	ble.w	80078f2 <_dtoa_r+0x8c2>
 80077e2:	461a      	mov	r2, r3
 80077e4:	4601      	mov	r1, r0
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 fbd4 	bl	8007f94 <__pow5mult>
 80077ec:	9b06      	ldr	r3, [sp, #24]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	4606      	mov	r6, r0
 80077f2:	f340 8081 	ble.w	80078f8 <_dtoa_r+0x8c8>
 80077f6:	f04f 0800 	mov.w	r8, #0
 80077fa:	6933      	ldr	r3, [r6, #16]
 80077fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007800:	6918      	ldr	r0, [r3, #16]
 8007802:	f000 fab7 	bl	8007d74 <__hi0bits>
 8007806:	f1c0 0020 	rsb	r0, r0, #32
 800780a:	9b05      	ldr	r3, [sp, #20]
 800780c:	4418      	add	r0, r3
 800780e:	f010 001f 	ands.w	r0, r0, #31
 8007812:	f000 8092 	beq.w	800793a <_dtoa_r+0x90a>
 8007816:	f1c0 0320 	rsb	r3, r0, #32
 800781a:	2b04      	cmp	r3, #4
 800781c:	f340 808a 	ble.w	8007934 <_dtoa_r+0x904>
 8007820:	f1c0 001c 	rsb	r0, r0, #28
 8007824:	9b04      	ldr	r3, [sp, #16]
 8007826:	4403      	add	r3, r0
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	9b05      	ldr	r3, [sp, #20]
 800782c:	4403      	add	r3, r0
 800782e:	4405      	add	r5, r0
 8007830:	9305      	str	r3, [sp, #20]
 8007832:	9b04      	ldr	r3, [sp, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	dd07      	ble.n	8007848 <_dtoa_r+0x818>
 8007838:	ee18 1a10 	vmov	r1, s16
 800783c:	461a      	mov	r2, r3
 800783e:	4620      	mov	r0, r4
 8007840:	f000 fc02 	bl	8008048 <__lshift>
 8007844:	ee08 0a10 	vmov	s16, r0
 8007848:	9b05      	ldr	r3, [sp, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	dd05      	ble.n	800785a <_dtoa_r+0x82a>
 800784e:	4631      	mov	r1, r6
 8007850:	461a      	mov	r2, r3
 8007852:	4620      	mov	r0, r4
 8007854:	f000 fbf8 	bl	8008048 <__lshift>
 8007858:	4606      	mov	r6, r0
 800785a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d06e      	beq.n	800793e <_dtoa_r+0x90e>
 8007860:	ee18 0a10 	vmov	r0, s16
 8007864:	4631      	mov	r1, r6
 8007866:	f000 fc5f 	bl	8008128 <__mcmp>
 800786a:	2800      	cmp	r0, #0
 800786c:	da67      	bge.n	800793e <_dtoa_r+0x90e>
 800786e:	9b00      	ldr	r3, [sp, #0]
 8007870:	3b01      	subs	r3, #1
 8007872:	ee18 1a10 	vmov	r1, s16
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	220a      	movs	r2, #10
 800787a:	2300      	movs	r3, #0
 800787c:	4620      	mov	r0, r4
 800787e:	f000 fa33 	bl	8007ce8 <__multadd>
 8007882:	9b08      	ldr	r3, [sp, #32]
 8007884:	ee08 0a10 	vmov	s16, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 81b1 	beq.w	8007bf0 <_dtoa_r+0xbc0>
 800788e:	2300      	movs	r3, #0
 8007890:	4639      	mov	r1, r7
 8007892:	220a      	movs	r2, #10
 8007894:	4620      	mov	r0, r4
 8007896:	f000 fa27 	bl	8007ce8 <__multadd>
 800789a:	9b02      	ldr	r3, [sp, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	4607      	mov	r7, r0
 80078a0:	f300 808e 	bgt.w	80079c0 <_dtoa_r+0x990>
 80078a4:	9b06      	ldr	r3, [sp, #24]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	dc51      	bgt.n	800794e <_dtoa_r+0x91e>
 80078aa:	e089      	b.n	80079c0 <_dtoa_r+0x990>
 80078ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078b2:	e74b      	b.n	800774c <_dtoa_r+0x71c>
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	1e5e      	subs	r6, r3, #1
 80078b8:	9b07      	ldr	r3, [sp, #28]
 80078ba:	42b3      	cmp	r3, r6
 80078bc:	bfbf      	itttt	lt
 80078be:	9b07      	ldrlt	r3, [sp, #28]
 80078c0:	9607      	strlt	r6, [sp, #28]
 80078c2:	1af2      	sublt	r2, r6, r3
 80078c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078c6:	bfb6      	itet	lt
 80078c8:	189b      	addlt	r3, r3, r2
 80078ca:	1b9e      	subge	r6, r3, r6
 80078cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	bfb8      	it	lt
 80078d2:	2600      	movlt	r6, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bfb7      	itett	lt
 80078d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078e0:	1a9d      	sublt	r5, r3, r2
 80078e2:	2300      	movlt	r3, #0
 80078e4:	e734      	b.n	8007750 <_dtoa_r+0x720>
 80078e6:	9e07      	ldr	r6, [sp, #28]
 80078e8:	9d04      	ldr	r5, [sp, #16]
 80078ea:	9f08      	ldr	r7, [sp, #32]
 80078ec:	e73b      	b.n	8007766 <_dtoa_r+0x736>
 80078ee:	9a07      	ldr	r2, [sp, #28]
 80078f0:	e767      	b.n	80077c2 <_dtoa_r+0x792>
 80078f2:	9b06      	ldr	r3, [sp, #24]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	dc18      	bgt.n	800792a <_dtoa_r+0x8fa>
 80078f8:	f1ba 0f00 	cmp.w	sl, #0
 80078fc:	d115      	bne.n	800792a <_dtoa_r+0x8fa>
 80078fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007902:	b993      	cbnz	r3, 800792a <_dtoa_r+0x8fa>
 8007904:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007908:	0d1b      	lsrs	r3, r3, #20
 800790a:	051b      	lsls	r3, r3, #20
 800790c:	b183      	cbz	r3, 8007930 <_dtoa_r+0x900>
 800790e:	9b04      	ldr	r3, [sp, #16]
 8007910:	3301      	adds	r3, #1
 8007912:	9304      	str	r3, [sp, #16]
 8007914:	9b05      	ldr	r3, [sp, #20]
 8007916:	3301      	adds	r3, #1
 8007918:	9305      	str	r3, [sp, #20]
 800791a:	f04f 0801 	mov.w	r8, #1
 800791e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007920:	2b00      	cmp	r3, #0
 8007922:	f47f af6a 	bne.w	80077fa <_dtoa_r+0x7ca>
 8007926:	2001      	movs	r0, #1
 8007928:	e76f      	b.n	800780a <_dtoa_r+0x7da>
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	e7f6      	b.n	800791e <_dtoa_r+0x8ee>
 8007930:	4698      	mov	r8, r3
 8007932:	e7f4      	b.n	800791e <_dtoa_r+0x8ee>
 8007934:	f43f af7d 	beq.w	8007832 <_dtoa_r+0x802>
 8007938:	4618      	mov	r0, r3
 800793a:	301c      	adds	r0, #28
 800793c:	e772      	b.n	8007824 <_dtoa_r+0x7f4>
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	dc37      	bgt.n	80079b4 <_dtoa_r+0x984>
 8007944:	9b06      	ldr	r3, [sp, #24]
 8007946:	2b02      	cmp	r3, #2
 8007948:	dd34      	ble.n	80079b4 <_dtoa_r+0x984>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	9302      	str	r3, [sp, #8]
 800794e:	9b02      	ldr	r3, [sp, #8]
 8007950:	b96b      	cbnz	r3, 800796e <_dtoa_r+0x93e>
 8007952:	4631      	mov	r1, r6
 8007954:	2205      	movs	r2, #5
 8007956:	4620      	mov	r0, r4
 8007958:	f000 f9c6 	bl	8007ce8 <__multadd>
 800795c:	4601      	mov	r1, r0
 800795e:	4606      	mov	r6, r0
 8007960:	ee18 0a10 	vmov	r0, s16
 8007964:	f000 fbe0 	bl	8008128 <__mcmp>
 8007968:	2800      	cmp	r0, #0
 800796a:	f73f adbb 	bgt.w	80074e4 <_dtoa_r+0x4b4>
 800796e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007970:	9d01      	ldr	r5, [sp, #4]
 8007972:	43db      	mvns	r3, r3
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	f04f 0800 	mov.w	r8, #0
 800797a:	4631      	mov	r1, r6
 800797c:	4620      	mov	r0, r4
 800797e:	f000 f991 	bl	8007ca4 <_Bfree>
 8007982:	2f00      	cmp	r7, #0
 8007984:	f43f aea4 	beq.w	80076d0 <_dtoa_r+0x6a0>
 8007988:	f1b8 0f00 	cmp.w	r8, #0
 800798c:	d005      	beq.n	800799a <_dtoa_r+0x96a>
 800798e:	45b8      	cmp	r8, r7
 8007990:	d003      	beq.n	800799a <_dtoa_r+0x96a>
 8007992:	4641      	mov	r1, r8
 8007994:	4620      	mov	r0, r4
 8007996:	f000 f985 	bl	8007ca4 <_Bfree>
 800799a:	4639      	mov	r1, r7
 800799c:	4620      	mov	r0, r4
 800799e:	f000 f981 	bl	8007ca4 <_Bfree>
 80079a2:	e695      	b.n	80076d0 <_dtoa_r+0x6a0>
 80079a4:	2600      	movs	r6, #0
 80079a6:	4637      	mov	r7, r6
 80079a8:	e7e1      	b.n	800796e <_dtoa_r+0x93e>
 80079aa:	9700      	str	r7, [sp, #0]
 80079ac:	4637      	mov	r7, r6
 80079ae:	e599      	b.n	80074e4 <_dtoa_r+0x4b4>
 80079b0:	40240000 	.word	0x40240000
 80079b4:	9b08      	ldr	r3, [sp, #32]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 80ca 	beq.w	8007b50 <_dtoa_r+0xb20>
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	9302      	str	r3, [sp, #8]
 80079c0:	2d00      	cmp	r5, #0
 80079c2:	dd05      	ble.n	80079d0 <_dtoa_r+0x9a0>
 80079c4:	4639      	mov	r1, r7
 80079c6:	462a      	mov	r2, r5
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fb3d 	bl	8008048 <__lshift>
 80079ce:	4607      	mov	r7, r0
 80079d0:	f1b8 0f00 	cmp.w	r8, #0
 80079d4:	d05b      	beq.n	8007a8e <_dtoa_r+0xa5e>
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 f923 	bl	8007c24 <_Balloc>
 80079de:	4605      	mov	r5, r0
 80079e0:	b928      	cbnz	r0, 80079ee <_dtoa_r+0x9be>
 80079e2:	4b87      	ldr	r3, [pc, #540]	; (8007c00 <_dtoa_r+0xbd0>)
 80079e4:	4602      	mov	r2, r0
 80079e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079ea:	f7ff bb3b 	b.w	8007064 <_dtoa_r+0x34>
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	3202      	adds	r2, #2
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	f107 010c 	add.w	r1, r7, #12
 80079f8:	300c      	adds	r0, #12
 80079fa:	f7fe fdeb 	bl	80065d4 <memcpy>
 80079fe:	2201      	movs	r2, #1
 8007a00:	4629      	mov	r1, r5
 8007a02:	4620      	mov	r0, r4
 8007a04:	f000 fb20 	bl	8008048 <__lshift>
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	f103 0901 	add.w	r9, r3, #1
 8007a0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007a12:	4413      	add	r3, r2
 8007a14:	9305      	str	r3, [sp, #20]
 8007a16:	f00a 0301 	and.w	r3, sl, #1
 8007a1a:	46b8      	mov	r8, r7
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	4607      	mov	r7, r0
 8007a20:	4631      	mov	r1, r6
 8007a22:	ee18 0a10 	vmov	r0, s16
 8007a26:	f7ff fa75 	bl	8006f14 <quorem>
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	9002      	str	r0, [sp, #8]
 8007a2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a32:	ee18 0a10 	vmov	r0, s16
 8007a36:	f000 fb77 	bl	8008128 <__mcmp>
 8007a3a:	463a      	mov	r2, r7
 8007a3c:	9003      	str	r0, [sp, #12]
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 fb8d 	bl	8008160 <__mdiff>
 8007a46:	68c2      	ldr	r2, [r0, #12]
 8007a48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	bb02      	cbnz	r2, 8007a92 <_dtoa_r+0xa62>
 8007a50:	4601      	mov	r1, r0
 8007a52:	ee18 0a10 	vmov	r0, s16
 8007a56:	f000 fb67 	bl	8008128 <__mcmp>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4620      	mov	r0, r4
 8007a60:	9207      	str	r2, [sp, #28]
 8007a62:	f000 f91f 	bl	8007ca4 <_Bfree>
 8007a66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a6a:	ea43 0102 	orr.w	r1, r3, r2
 8007a6e:	9b04      	ldr	r3, [sp, #16]
 8007a70:	430b      	orrs	r3, r1
 8007a72:	464d      	mov	r5, r9
 8007a74:	d10f      	bne.n	8007a96 <_dtoa_r+0xa66>
 8007a76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a7a:	d02a      	beq.n	8007ad2 <_dtoa_r+0xaa2>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	dd02      	ble.n	8007a88 <_dtoa_r+0xa58>
 8007a82:	9b02      	ldr	r3, [sp, #8]
 8007a84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a88:	f88b a000 	strb.w	sl, [fp]
 8007a8c:	e775      	b.n	800797a <_dtoa_r+0x94a>
 8007a8e:	4638      	mov	r0, r7
 8007a90:	e7ba      	b.n	8007a08 <_dtoa_r+0x9d8>
 8007a92:	2201      	movs	r2, #1
 8007a94:	e7e2      	b.n	8007a5c <_dtoa_r+0xa2c>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	db04      	blt.n	8007aa6 <_dtoa_r+0xa76>
 8007a9c:	9906      	ldr	r1, [sp, #24]
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	9904      	ldr	r1, [sp, #16]
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	d122      	bne.n	8007aec <_dtoa_r+0xabc>
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	ddee      	ble.n	8007a88 <_dtoa_r+0xa58>
 8007aaa:	ee18 1a10 	vmov	r1, s16
 8007aae:	2201      	movs	r2, #1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 fac9 	bl	8008048 <__lshift>
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	ee08 0a10 	vmov	s16, r0
 8007abc:	f000 fb34 	bl	8008128 <__mcmp>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	dc03      	bgt.n	8007acc <_dtoa_r+0xa9c>
 8007ac4:	d1e0      	bne.n	8007a88 <_dtoa_r+0xa58>
 8007ac6:	f01a 0f01 	tst.w	sl, #1
 8007aca:	d0dd      	beq.n	8007a88 <_dtoa_r+0xa58>
 8007acc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ad0:	d1d7      	bne.n	8007a82 <_dtoa_r+0xa52>
 8007ad2:	2339      	movs	r3, #57	; 0x39
 8007ad4:	f88b 3000 	strb.w	r3, [fp]
 8007ad8:	462b      	mov	r3, r5
 8007ada:	461d      	mov	r5, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ae2:	2a39      	cmp	r2, #57	; 0x39
 8007ae4:	d071      	beq.n	8007bca <_dtoa_r+0xb9a>
 8007ae6:	3201      	adds	r2, #1
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	e746      	b.n	800797a <_dtoa_r+0x94a>
 8007aec:	2a00      	cmp	r2, #0
 8007aee:	dd07      	ble.n	8007b00 <_dtoa_r+0xad0>
 8007af0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007af4:	d0ed      	beq.n	8007ad2 <_dtoa_r+0xaa2>
 8007af6:	f10a 0301 	add.w	r3, sl, #1
 8007afa:	f88b 3000 	strb.w	r3, [fp]
 8007afe:	e73c      	b.n	800797a <_dtoa_r+0x94a>
 8007b00:	9b05      	ldr	r3, [sp, #20]
 8007b02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007b06:	4599      	cmp	r9, r3
 8007b08:	d047      	beq.n	8007b9a <_dtoa_r+0xb6a>
 8007b0a:	ee18 1a10 	vmov	r1, s16
 8007b0e:	2300      	movs	r3, #0
 8007b10:	220a      	movs	r2, #10
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 f8e8 	bl	8007ce8 <__multadd>
 8007b18:	45b8      	cmp	r8, r7
 8007b1a:	ee08 0a10 	vmov	s16, r0
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	f04f 020a 	mov.w	r2, #10
 8007b26:	4641      	mov	r1, r8
 8007b28:	4620      	mov	r0, r4
 8007b2a:	d106      	bne.n	8007b3a <_dtoa_r+0xb0a>
 8007b2c:	f000 f8dc 	bl	8007ce8 <__multadd>
 8007b30:	4680      	mov	r8, r0
 8007b32:	4607      	mov	r7, r0
 8007b34:	f109 0901 	add.w	r9, r9, #1
 8007b38:	e772      	b.n	8007a20 <_dtoa_r+0x9f0>
 8007b3a:	f000 f8d5 	bl	8007ce8 <__multadd>
 8007b3e:	4639      	mov	r1, r7
 8007b40:	4680      	mov	r8, r0
 8007b42:	2300      	movs	r3, #0
 8007b44:	220a      	movs	r2, #10
 8007b46:	4620      	mov	r0, r4
 8007b48:	f000 f8ce 	bl	8007ce8 <__multadd>
 8007b4c:	4607      	mov	r7, r0
 8007b4e:	e7f1      	b.n	8007b34 <_dtoa_r+0xb04>
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	9302      	str	r3, [sp, #8]
 8007b54:	9d01      	ldr	r5, [sp, #4]
 8007b56:	ee18 0a10 	vmov	r0, s16
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	f7ff f9da 	bl	8006f14 <quorem>
 8007b60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	f805 ab01 	strb.w	sl, [r5], #1
 8007b6a:	1aea      	subs	r2, r5, r3
 8007b6c:	9b02      	ldr	r3, [sp, #8]
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	dd09      	ble.n	8007b86 <_dtoa_r+0xb56>
 8007b72:	ee18 1a10 	vmov	r1, s16
 8007b76:	2300      	movs	r3, #0
 8007b78:	220a      	movs	r2, #10
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 f8b4 	bl	8007ce8 <__multadd>
 8007b80:	ee08 0a10 	vmov	s16, r0
 8007b84:	e7e7      	b.n	8007b56 <_dtoa_r+0xb26>
 8007b86:	9b02      	ldr	r3, [sp, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	bfc8      	it	gt
 8007b8c:	461d      	movgt	r5, r3
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	bfd8      	it	le
 8007b92:	2501      	movle	r5, #1
 8007b94:	441d      	add	r5, r3
 8007b96:	f04f 0800 	mov.w	r8, #0
 8007b9a:	ee18 1a10 	vmov	r1, s16
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 fa51 	bl	8008048 <__lshift>
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	ee08 0a10 	vmov	s16, r0
 8007bac:	f000 fabc 	bl	8008128 <__mcmp>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	dc91      	bgt.n	8007ad8 <_dtoa_r+0xaa8>
 8007bb4:	d102      	bne.n	8007bbc <_dtoa_r+0xb8c>
 8007bb6:	f01a 0f01 	tst.w	sl, #1
 8007bba:	d18d      	bne.n	8007ad8 <_dtoa_r+0xaa8>
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bc4:	2a30      	cmp	r2, #48	; 0x30
 8007bc6:	d0fa      	beq.n	8007bbe <_dtoa_r+0xb8e>
 8007bc8:	e6d7      	b.n	800797a <_dtoa_r+0x94a>
 8007bca:	9a01      	ldr	r2, [sp, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d184      	bne.n	8007ada <_dtoa_r+0xaaa>
 8007bd0:	9b00      	ldr	r3, [sp, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	2331      	movs	r3, #49	; 0x31
 8007bd8:	7013      	strb	r3, [r2, #0]
 8007bda:	e6ce      	b.n	800797a <_dtoa_r+0x94a>
 8007bdc:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <_dtoa_r+0xbd4>)
 8007bde:	f7ff ba95 	b.w	800710c <_dtoa_r+0xdc>
 8007be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f47f aa6e 	bne.w	80070c6 <_dtoa_r+0x96>
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <_dtoa_r+0xbd8>)
 8007bec:	f7ff ba8e 	b.w	800710c <_dtoa_r+0xdc>
 8007bf0:	9b02      	ldr	r3, [sp, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	dcae      	bgt.n	8007b54 <_dtoa_r+0xb24>
 8007bf6:	9b06      	ldr	r3, [sp, #24]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	f73f aea8 	bgt.w	800794e <_dtoa_r+0x91e>
 8007bfe:	e7a9      	b.n	8007b54 <_dtoa_r+0xb24>
 8007c00:	0800950b 	.word	0x0800950b
 8007c04:	08009468 	.word	0x08009468
 8007c08:	0800948c 	.word	0x0800948c

08007c0c <_localeconv_r>:
 8007c0c:	4800      	ldr	r0, [pc, #0]	; (8007c10 <_localeconv_r+0x4>)
 8007c0e:	4770      	bx	lr
 8007c10:	20000160 	.word	0x20000160

08007c14 <malloc>:
 8007c14:	4b02      	ldr	r3, [pc, #8]	; (8007c20 <malloc+0xc>)
 8007c16:	4601      	mov	r1, r0
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	f000 bc09 	b.w	8008430 <_malloc_r>
 8007c1e:	bf00      	nop
 8007c20:	2000000c 	.word	0x2000000c

08007c24 <_Balloc>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c28:	4604      	mov	r4, r0
 8007c2a:	460d      	mov	r5, r1
 8007c2c:	b976      	cbnz	r6, 8007c4c <_Balloc+0x28>
 8007c2e:	2010      	movs	r0, #16
 8007c30:	f7ff fff0 	bl	8007c14 <malloc>
 8007c34:	4602      	mov	r2, r0
 8007c36:	6260      	str	r0, [r4, #36]	; 0x24
 8007c38:	b920      	cbnz	r0, 8007c44 <_Balloc+0x20>
 8007c3a:	4b18      	ldr	r3, [pc, #96]	; (8007c9c <_Balloc+0x78>)
 8007c3c:	4818      	ldr	r0, [pc, #96]	; (8007ca0 <_Balloc+0x7c>)
 8007c3e:	2166      	movs	r1, #102	; 0x66
 8007c40:	f000 fdd6 	bl	80087f0 <__assert_func>
 8007c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c48:	6006      	str	r6, [r0, #0]
 8007c4a:	60c6      	str	r6, [r0, #12]
 8007c4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c4e:	68f3      	ldr	r3, [r6, #12]
 8007c50:	b183      	cbz	r3, 8007c74 <_Balloc+0x50>
 8007c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c5a:	b9b8      	cbnz	r0, 8007c8c <_Balloc+0x68>
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c62:	1d72      	adds	r2, r6, #5
 8007c64:	0092      	lsls	r2, r2, #2
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 fb60 	bl	800832c <_calloc_r>
 8007c6c:	b160      	cbz	r0, 8007c88 <_Balloc+0x64>
 8007c6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c72:	e00e      	b.n	8007c92 <_Balloc+0x6e>
 8007c74:	2221      	movs	r2, #33	; 0x21
 8007c76:	2104      	movs	r1, #4
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fb57 	bl	800832c <_calloc_r>
 8007c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c80:	60f0      	str	r0, [r6, #12]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e4      	bne.n	8007c52 <_Balloc+0x2e>
 8007c88:	2000      	movs	r0, #0
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	6802      	ldr	r2, [r0, #0]
 8007c8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c92:	2300      	movs	r3, #0
 8007c94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c98:	e7f7      	b.n	8007c8a <_Balloc+0x66>
 8007c9a:	bf00      	nop
 8007c9c:	08009499 	.word	0x08009499
 8007ca0:	0800951c 	.word	0x0800951c

08007ca4 <_Bfree>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ca8:	4605      	mov	r5, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	b976      	cbnz	r6, 8007ccc <_Bfree+0x28>
 8007cae:	2010      	movs	r0, #16
 8007cb0:	f7ff ffb0 	bl	8007c14 <malloc>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6268      	str	r0, [r5, #36]	; 0x24
 8007cb8:	b920      	cbnz	r0, 8007cc4 <_Bfree+0x20>
 8007cba:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <_Bfree+0x3c>)
 8007cbc:	4809      	ldr	r0, [pc, #36]	; (8007ce4 <_Bfree+0x40>)
 8007cbe:	218a      	movs	r1, #138	; 0x8a
 8007cc0:	f000 fd96 	bl	80087f0 <__assert_func>
 8007cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cc8:	6006      	str	r6, [r0, #0]
 8007cca:	60c6      	str	r6, [r0, #12]
 8007ccc:	b13c      	cbz	r4, 8007cde <_Bfree+0x3a>
 8007cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cd0:	6862      	ldr	r2, [r4, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cd8:	6021      	str	r1, [r4, #0]
 8007cda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cde:	bd70      	pop	{r4, r5, r6, pc}
 8007ce0:	08009499 	.word	0x08009499
 8007ce4:	0800951c 	.word	0x0800951c

08007ce8 <__multadd>:
 8007ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cec:	690d      	ldr	r5, [r1, #16]
 8007cee:	4607      	mov	r7, r0
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	461e      	mov	r6, r3
 8007cf4:	f101 0c14 	add.w	ip, r1, #20
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f8dc 3000 	ldr.w	r3, [ip]
 8007cfe:	b299      	uxth	r1, r3
 8007d00:	fb02 6101 	mla	r1, r2, r1, r6
 8007d04:	0c1e      	lsrs	r6, r3, #16
 8007d06:	0c0b      	lsrs	r3, r1, #16
 8007d08:	fb02 3306 	mla	r3, r2, r6, r3
 8007d0c:	b289      	uxth	r1, r1
 8007d0e:	3001      	adds	r0, #1
 8007d10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d14:	4285      	cmp	r5, r0
 8007d16:	f84c 1b04 	str.w	r1, [ip], #4
 8007d1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d1e:	dcec      	bgt.n	8007cfa <__multadd+0x12>
 8007d20:	b30e      	cbz	r6, 8007d66 <__multadd+0x7e>
 8007d22:	68a3      	ldr	r3, [r4, #8]
 8007d24:	42ab      	cmp	r3, r5
 8007d26:	dc19      	bgt.n	8007d5c <__multadd+0x74>
 8007d28:	6861      	ldr	r1, [r4, #4]
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	3101      	adds	r1, #1
 8007d2e:	f7ff ff79 	bl	8007c24 <_Balloc>
 8007d32:	4680      	mov	r8, r0
 8007d34:	b928      	cbnz	r0, 8007d42 <__multadd+0x5a>
 8007d36:	4602      	mov	r2, r0
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <__multadd+0x84>)
 8007d3a:	480d      	ldr	r0, [pc, #52]	; (8007d70 <__multadd+0x88>)
 8007d3c:	21b5      	movs	r1, #181	; 0xb5
 8007d3e:	f000 fd57 	bl	80087f0 <__assert_func>
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	3202      	adds	r2, #2
 8007d46:	f104 010c 	add.w	r1, r4, #12
 8007d4a:	0092      	lsls	r2, r2, #2
 8007d4c:	300c      	adds	r0, #12
 8007d4e:	f7fe fc41 	bl	80065d4 <memcpy>
 8007d52:	4621      	mov	r1, r4
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7ff ffa5 	bl	8007ca4 <_Bfree>
 8007d5a:	4644      	mov	r4, r8
 8007d5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d60:	3501      	adds	r5, #1
 8007d62:	615e      	str	r6, [r3, #20]
 8007d64:	6125      	str	r5, [r4, #16]
 8007d66:	4620      	mov	r0, r4
 8007d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d6c:	0800950b 	.word	0x0800950b
 8007d70:	0800951c 	.word	0x0800951c

08007d74 <__hi0bits>:
 8007d74:	0c03      	lsrs	r3, r0, #16
 8007d76:	041b      	lsls	r3, r3, #16
 8007d78:	b9d3      	cbnz	r3, 8007db0 <__hi0bits+0x3c>
 8007d7a:	0400      	lsls	r0, r0, #16
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d82:	bf04      	itt	eq
 8007d84:	0200      	lsleq	r0, r0, #8
 8007d86:	3308      	addeq	r3, #8
 8007d88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d8c:	bf04      	itt	eq
 8007d8e:	0100      	lsleq	r0, r0, #4
 8007d90:	3304      	addeq	r3, #4
 8007d92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d96:	bf04      	itt	eq
 8007d98:	0080      	lsleq	r0, r0, #2
 8007d9a:	3302      	addeq	r3, #2
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	db05      	blt.n	8007dac <__hi0bits+0x38>
 8007da0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007da4:	f103 0301 	add.w	r3, r3, #1
 8007da8:	bf08      	it	eq
 8007daa:	2320      	moveq	r3, #32
 8007dac:	4618      	mov	r0, r3
 8007dae:	4770      	bx	lr
 8007db0:	2300      	movs	r3, #0
 8007db2:	e7e4      	b.n	8007d7e <__hi0bits+0xa>

08007db4 <__lo0bits>:
 8007db4:	6803      	ldr	r3, [r0, #0]
 8007db6:	f013 0207 	ands.w	r2, r3, #7
 8007dba:	4601      	mov	r1, r0
 8007dbc:	d00b      	beq.n	8007dd6 <__lo0bits+0x22>
 8007dbe:	07da      	lsls	r2, r3, #31
 8007dc0:	d423      	bmi.n	8007e0a <__lo0bits+0x56>
 8007dc2:	0798      	lsls	r0, r3, #30
 8007dc4:	bf49      	itett	mi
 8007dc6:	085b      	lsrmi	r3, r3, #1
 8007dc8:	089b      	lsrpl	r3, r3, #2
 8007dca:	2001      	movmi	r0, #1
 8007dcc:	600b      	strmi	r3, [r1, #0]
 8007dce:	bf5c      	itt	pl
 8007dd0:	600b      	strpl	r3, [r1, #0]
 8007dd2:	2002      	movpl	r0, #2
 8007dd4:	4770      	bx	lr
 8007dd6:	b298      	uxth	r0, r3
 8007dd8:	b9a8      	cbnz	r0, 8007e06 <__lo0bits+0x52>
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	2010      	movs	r0, #16
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	b90a      	cbnz	r2, 8007de6 <__lo0bits+0x32>
 8007de2:	3008      	adds	r0, #8
 8007de4:	0a1b      	lsrs	r3, r3, #8
 8007de6:	071a      	lsls	r2, r3, #28
 8007de8:	bf04      	itt	eq
 8007dea:	091b      	lsreq	r3, r3, #4
 8007dec:	3004      	addeq	r0, #4
 8007dee:	079a      	lsls	r2, r3, #30
 8007df0:	bf04      	itt	eq
 8007df2:	089b      	lsreq	r3, r3, #2
 8007df4:	3002      	addeq	r0, #2
 8007df6:	07da      	lsls	r2, r3, #31
 8007df8:	d403      	bmi.n	8007e02 <__lo0bits+0x4e>
 8007dfa:	085b      	lsrs	r3, r3, #1
 8007dfc:	f100 0001 	add.w	r0, r0, #1
 8007e00:	d005      	beq.n	8007e0e <__lo0bits+0x5a>
 8007e02:	600b      	str	r3, [r1, #0]
 8007e04:	4770      	bx	lr
 8007e06:	4610      	mov	r0, r2
 8007e08:	e7e9      	b.n	8007dde <__lo0bits+0x2a>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	4770      	bx	lr
 8007e0e:	2020      	movs	r0, #32
 8007e10:	4770      	bx	lr
	...

08007e14 <__i2b>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	460c      	mov	r4, r1
 8007e18:	2101      	movs	r1, #1
 8007e1a:	f7ff ff03 	bl	8007c24 <_Balloc>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	b928      	cbnz	r0, 8007e2e <__i2b+0x1a>
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <__i2b+0x24>)
 8007e24:	4805      	ldr	r0, [pc, #20]	; (8007e3c <__i2b+0x28>)
 8007e26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e2a:	f000 fce1 	bl	80087f0 <__assert_func>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	6144      	str	r4, [r0, #20]
 8007e32:	6103      	str	r3, [r0, #16]
 8007e34:	bd10      	pop	{r4, pc}
 8007e36:	bf00      	nop
 8007e38:	0800950b 	.word	0x0800950b
 8007e3c:	0800951c 	.word	0x0800951c

08007e40 <__multiply>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4691      	mov	r9, r2
 8007e46:	690a      	ldr	r2, [r1, #16]
 8007e48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	bfb8      	it	lt
 8007e50:	460b      	movlt	r3, r1
 8007e52:	460c      	mov	r4, r1
 8007e54:	bfbc      	itt	lt
 8007e56:	464c      	movlt	r4, r9
 8007e58:	4699      	movlt	r9, r3
 8007e5a:	6927      	ldr	r7, [r4, #16]
 8007e5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e60:	68a3      	ldr	r3, [r4, #8]
 8007e62:	6861      	ldr	r1, [r4, #4]
 8007e64:	eb07 060a 	add.w	r6, r7, sl
 8007e68:	42b3      	cmp	r3, r6
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	bfb8      	it	lt
 8007e6e:	3101      	addlt	r1, #1
 8007e70:	f7ff fed8 	bl	8007c24 <_Balloc>
 8007e74:	b930      	cbnz	r0, 8007e84 <__multiply+0x44>
 8007e76:	4602      	mov	r2, r0
 8007e78:	4b44      	ldr	r3, [pc, #272]	; (8007f8c <__multiply+0x14c>)
 8007e7a:	4845      	ldr	r0, [pc, #276]	; (8007f90 <__multiply+0x150>)
 8007e7c:	f240 115d 	movw	r1, #349	; 0x15d
 8007e80:	f000 fcb6 	bl	80087f0 <__assert_func>
 8007e84:	f100 0514 	add.w	r5, r0, #20
 8007e88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4543      	cmp	r3, r8
 8007e92:	d321      	bcc.n	8007ed8 <__multiply+0x98>
 8007e94:	f104 0314 	add.w	r3, r4, #20
 8007e98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e9c:	f109 0314 	add.w	r3, r9, #20
 8007ea0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ea4:	9202      	str	r2, [sp, #8]
 8007ea6:	1b3a      	subs	r2, r7, r4
 8007ea8:	3a15      	subs	r2, #21
 8007eaa:	f022 0203 	bic.w	r2, r2, #3
 8007eae:	3204      	adds	r2, #4
 8007eb0:	f104 0115 	add.w	r1, r4, #21
 8007eb4:	428f      	cmp	r7, r1
 8007eb6:	bf38      	it	cc
 8007eb8:	2204      	movcc	r2, #4
 8007eba:	9201      	str	r2, [sp, #4]
 8007ebc:	9a02      	ldr	r2, [sp, #8]
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d80c      	bhi.n	8007ede <__multiply+0x9e>
 8007ec4:	2e00      	cmp	r6, #0
 8007ec6:	dd03      	ble.n	8007ed0 <__multiply+0x90>
 8007ec8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d05a      	beq.n	8007f86 <__multiply+0x146>
 8007ed0:	6106      	str	r6, [r0, #16]
 8007ed2:	b005      	add	sp, #20
 8007ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed8:	f843 2b04 	str.w	r2, [r3], #4
 8007edc:	e7d8      	b.n	8007e90 <__multiply+0x50>
 8007ede:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ee2:	f1ba 0f00 	cmp.w	sl, #0
 8007ee6:	d024      	beq.n	8007f32 <__multiply+0xf2>
 8007ee8:	f104 0e14 	add.w	lr, r4, #20
 8007eec:	46a9      	mov	r9, r5
 8007eee:	f04f 0c00 	mov.w	ip, #0
 8007ef2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ef6:	f8d9 1000 	ldr.w	r1, [r9]
 8007efa:	fa1f fb82 	uxth.w	fp, r2
 8007efe:	b289      	uxth	r1, r1
 8007f00:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f08:	f8d9 2000 	ldr.w	r2, [r9]
 8007f0c:	4461      	add	r1, ip
 8007f0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f12:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f1a:	b289      	uxth	r1, r1
 8007f1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f20:	4577      	cmp	r7, lr
 8007f22:	f849 1b04 	str.w	r1, [r9], #4
 8007f26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f2a:	d8e2      	bhi.n	8007ef2 <__multiply+0xb2>
 8007f2c:	9a01      	ldr	r2, [sp, #4]
 8007f2e:	f845 c002 	str.w	ip, [r5, r2]
 8007f32:	9a03      	ldr	r2, [sp, #12]
 8007f34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	f1b9 0f00 	cmp.w	r9, #0
 8007f3e:	d020      	beq.n	8007f82 <__multiply+0x142>
 8007f40:	6829      	ldr	r1, [r5, #0]
 8007f42:	f104 0c14 	add.w	ip, r4, #20
 8007f46:	46ae      	mov	lr, r5
 8007f48:	f04f 0a00 	mov.w	sl, #0
 8007f4c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f54:	fb09 220b 	mla	r2, r9, fp, r2
 8007f58:	4492      	add	sl, r2
 8007f5a:	b289      	uxth	r1, r1
 8007f5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f60:	f84e 1b04 	str.w	r1, [lr], #4
 8007f64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f68:	f8be 1000 	ldrh.w	r1, [lr]
 8007f6c:	0c12      	lsrs	r2, r2, #16
 8007f6e:	fb09 1102 	mla	r1, r9, r2, r1
 8007f72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f76:	4567      	cmp	r7, ip
 8007f78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f7c:	d8e6      	bhi.n	8007f4c <__multiply+0x10c>
 8007f7e:	9a01      	ldr	r2, [sp, #4]
 8007f80:	50a9      	str	r1, [r5, r2]
 8007f82:	3504      	adds	r5, #4
 8007f84:	e79a      	b.n	8007ebc <__multiply+0x7c>
 8007f86:	3e01      	subs	r6, #1
 8007f88:	e79c      	b.n	8007ec4 <__multiply+0x84>
 8007f8a:	bf00      	nop
 8007f8c:	0800950b 	.word	0x0800950b
 8007f90:	0800951c 	.word	0x0800951c

08007f94 <__pow5mult>:
 8007f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f98:	4615      	mov	r5, r2
 8007f9a:	f012 0203 	ands.w	r2, r2, #3
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	d007      	beq.n	8007fb4 <__pow5mult+0x20>
 8007fa4:	4c25      	ldr	r4, [pc, #148]	; (800803c <__pow5mult+0xa8>)
 8007fa6:	3a01      	subs	r2, #1
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fae:	f7ff fe9b 	bl	8007ce8 <__multadd>
 8007fb2:	4607      	mov	r7, r0
 8007fb4:	10ad      	asrs	r5, r5, #2
 8007fb6:	d03d      	beq.n	8008034 <__pow5mult+0xa0>
 8007fb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fba:	b97c      	cbnz	r4, 8007fdc <__pow5mult+0x48>
 8007fbc:	2010      	movs	r0, #16
 8007fbe:	f7ff fe29 	bl	8007c14 <malloc>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	6270      	str	r0, [r6, #36]	; 0x24
 8007fc6:	b928      	cbnz	r0, 8007fd4 <__pow5mult+0x40>
 8007fc8:	4b1d      	ldr	r3, [pc, #116]	; (8008040 <__pow5mult+0xac>)
 8007fca:	481e      	ldr	r0, [pc, #120]	; (8008044 <__pow5mult+0xb0>)
 8007fcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fd0:	f000 fc0e 	bl	80087f0 <__assert_func>
 8007fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fd8:	6004      	str	r4, [r0, #0]
 8007fda:	60c4      	str	r4, [r0, #12]
 8007fdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fe4:	b94c      	cbnz	r4, 8007ffa <__pow5mult+0x66>
 8007fe6:	f240 2171 	movw	r1, #625	; 0x271
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7ff ff12 	bl	8007e14 <__i2b>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	6003      	str	r3, [r0, #0]
 8007ffa:	f04f 0900 	mov.w	r9, #0
 8007ffe:	07eb      	lsls	r3, r5, #31
 8008000:	d50a      	bpl.n	8008018 <__pow5mult+0x84>
 8008002:	4639      	mov	r1, r7
 8008004:	4622      	mov	r2, r4
 8008006:	4630      	mov	r0, r6
 8008008:	f7ff ff1a 	bl	8007e40 <__multiply>
 800800c:	4639      	mov	r1, r7
 800800e:	4680      	mov	r8, r0
 8008010:	4630      	mov	r0, r6
 8008012:	f7ff fe47 	bl	8007ca4 <_Bfree>
 8008016:	4647      	mov	r7, r8
 8008018:	106d      	asrs	r5, r5, #1
 800801a:	d00b      	beq.n	8008034 <__pow5mult+0xa0>
 800801c:	6820      	ldr	r0, [r4, #0]
 800801e:	b938      	cbnz	r0, 8008030 <__pow5mult+0x9c>
 8008020:	4622      	mov	r2, r4
 8008022:	4621      	mov	r1, r4
 8008024:	4630      	mov	r0, r6
 8008026:	f7ff ff0b 	bl	8007e40 <__multiply>
 800802a:	6020      	str	r0, [r4, #0]
 800802c:	f8c0 9000 	str.w	r9, [r0]
 8008030:	4604      	mov	r4, r0
 8008032:	e7e4      	b.n	8007ffe <__pow5mult+0x6a>
 8008034:	4638      	mov	r0, r7
 8008036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800803a:	bf00      	nop
 800803c:	08009668 	.word	0x08009668
 8008040:	08009499 	.word	0x08009499
 8008044:	0800951c 	.word	0x0800951c

08008048 <__lshift>:
 8008048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	460c      	mov	r4, r1
 800804e:	6849      	ldr	r1, [r1, #4]
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	4607      	mov	r7, r0
 800805a:	4691      	mov	r9, r2
 800805c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008060:	f108 0601 	add.w	r6, r8, #1
 8008064:	42b3      	cmp	r3, r6
 8008066:	db0b      	blt.n	8008080 <__lshift+0x38>
 8008068:	4638      	mov	r0, r7
 800806a:	f7ff fddb 	bl	8007c24 <_Balloc>
 800806e:	4605      	mov	r5, r0
 8008070:	b948      	cbnz	r0, 8008086 <__lshift+0x3e>
 8008072:	4602      	mov	r2, r0
 8008074:	4b2a      	ldr	r3, [pc, #168]	; (8008120 <__lshift+0xd8>)
 8008076:	482b      	ldr	r0, [pc, #172]	; (8008124 <__lshift+0xdc>)
 8008078:	f240 11d9 	movw	r1, #473	; 0x1d9
 800807c:	f000 fbb8 	bl	80087f0 <__assert_func>
 8008080:	3101      	adds	r1, #1
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	e7ee      	b.n	8008064 <__lshift+0x1c>
 8008086:	2300      	movs	r3, #0
 8008088:	f100 0114 	add.w	r1, r0, #20
 800808c:	f100 0210 	add.w	r2, r0, #16
 8008090:	4618      	mov	r0, r3
 8008092:	4553      	cmp	r3, sl
 8008094:	db37      	blt.n	8008106 <__lshift+0xbe>
 8008096:	6920      	ldr	r0, [r4, #16]
 8008098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800809c:	f104 0314 	add.w	r3, r4, #20
 80080a0:	f019 091f 	ands.w	r9, r9, #31
 80080a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080ac:	d02f      	beq.n	800810e <__lshift+0xc6>
 80080ae:	f1c9 0e20 	rsb	lr, r9, #32
 80080b2:	468a      	mov	sl, r1
 80080b4:	f04f 0c00 	mov.w	ip, #0
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	fa02 f209 	lsl.w	r2, r2, r9
 80080be:	ea42 020c 	orr.w	r2, r2, ip
 80080c2:	f84a 2b04 	str.w	r2, [sl], #4
 80080c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ca:	4298      	cmp	r0, r3
 80080cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080d0:	d8f2      	bhi.n	80080b8 <__lshift+0x70>
 80080d2:	1b03      	subs	r3, r0, r4
 80080d4:	3b15      	subs	r3, #21
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	3304      	adds	r3, #4
 80080dc:	f104 0215 	add.w	r2, r4, #21
 80080e0:	4290      	cmp	r0, r2
 80080e2:	bf38      	it	cc
 80080e4:	2304      	movcc	r3, #4
 80080e6:	f841 c003 	str.w	ip, [r1, r3]
 80080ea:	f1bc 0f00 	cmp.w	ip, #0
 80080ee:	d001      	beq.n	80080f4 <__lshift+0xac>
 80080f0:	f108 0602 	add.w	r6, r8, #2
 80080f4:	3e01      	subs	r6, #1
 80080f6:	4638      	mov	r0, r7
 80080f8:	612e      	str	r6, [r5, #16]
 80080fa:	4621      	mov	r1, r4
 80080fc:	f7ff fdd2 	bl	8007ca4 <_Bfree>
 8008100:	4628      	mov	r0, r5
 8008102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008106:	f842 0f04 	str.w	r0, [r2, #4]!
 800810a:	3301      	adds	r3, #1
 800810c:	e7c1      	b.n	8008092 <__lshift+0x4a>
 800810e:	3904      	subs	r1, #4
 8008110:	f853 2b04 	ldr.w	r2, [r3], #4
 8008114:	f841 2f04 	str.w	r2, [r1, #4]!
 8008118:	4298      	cmp	r0, r3
 800811a:	d8f9      	bhi.n	8008110 <__lshift+0xc8>
 800811c:	e7ea      	b.n	80080f4 <__lshift+0xac>
 800811e:	bf00      	nop
 8008120:	0800950b 	.word	0x0800950b
 8008124:	0800951c 	.word	0x0800951c

08008128 <__mcmp>:
 8008128:	b530      	push	{r4, r5, lr}
 800812a:	6902      	ldr	r2, [r0, #16]
 800812c:	690c      	ldr	r4, [r1, #16]
 800812e:	1b12      	subs	r2, r2, r4
 8008130:	d10e      	bne.n	8008150 <__mcmp+0x28>
 8008132:	f100 0314 	add.w	r3, r0, #20
 8008136:	3114      	adds	r1, #20
 8008138:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800813c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008140:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008144:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008148:	42a5      	cmp	r5, r4
 800814a:	d003      	beq.n	8008154 <__mcmp+0x2c>
 800814c:	d305      	bcc.n	800815a <__mcmp+0x32>
 800814e:	2201      	movs	r2, #1
 8008150:	4610      	mov	r0, r2
 8008152:	bd30      	pop	{r4, r5, pc}
 8008154:	4283      	cmp	r3, r0
 8008156:	d3f3      	bcc.n	8008140 <__mcmp+0x18>
 8008158:	e7fa      	b.n	8008150 <__mcmp+0x28>
 800815a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800815e:	e7f7      	b.n	8008150 <__mcmp+0x28>

08008160 <__mdiff>:
 8008160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	460c      	mov	r4, r1
 8008166:	4606      	mov	r6, r0
 8008168:	4611      	mov	r1, r2
 800816a:	4620      	mov	r0, r4
 800816c:	4690      	mov	r8, r2
 800816e:	f7ff ffdb 	bl	8008128 <__mcmp>
 8008172:	1e05      	subs	r5, r0, #0
 8008174:	d110      	bne.n	8008198 <__mdiff+0x38>
 8008176:	4629      	mov	r1, r5
 8008178:	4630      	mov	r0, r6
 800817a:	f7ff fd53 	bl	8007c24 <_Balloc>
 800817e:	b930      	cbnz	r0, 800818e <__mdiff+0x2e>
 8008180:	4b3a      	ldr	r3, [pc, #232]	; (800826c <__mdiff+0x10c>)
 8008182:	4602      	mov	r2, r0
 8008184:	f240 2132 	movw	r1, #562	; 0x232
 8008188:	4839      	ldr	r0, [pc, #228]	; (8008270 <__mdiff+0x110>)
 800818a:	f000 fb31 	bl	80087f0 <__assert_func>
 800818e:	2301      	movs	r3, #1
 8008190:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008198:	bfa4      	itt	ge
 800819a:	4643      	movge	r3, r8
 800819c:	46a0      	movge	r8, r4
 800819e:	4630      	mov	r0, r6
 80081a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081a4:	bfa6      	itte	ge
 80081a6:	461c      	movge	r4, r3
 80081a8:	2500      	movge	r5, #0
 80081aa:	2501      	movlt	r5, #1
 80081ac:	f7ff fd3a 	bl	8007c24 <_Balloc>
 80081b0:	b920      	cbnz	r0, 80081bc <__mdiff+0x5c>
 80081b2:	4b2e      	ldr	r3, [pc, #184]	; (800826c <__mdiff+0x10c>)
 80081b4:	4602      	mov	r2, r0
 80081b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081ba:	e7e5      	b.n	8008188 <__mdiff+0x28>
 80081bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081c0:	6926      	ldr	r6, [r4, #16]
 80081c2:	60c5      	str	r5, [r0, #12]
 80081c4:	f104 0914 	add.w	r9, r4, #20
 80081c8:	f108 0514 	add.w	r5, r8, #20
 80081cc:	f100 0e14 	add.w	lr, r0, #20
 80081d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081d8:	f108 0210 	add.w	r2, r8, #16
 80081dc:	46f2      	mov	sl, lr
 80081de:	2100      	movs	r1, #0
 80081e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80081e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081e8:	fa1f f883 	uxth.w	r8, r3
 80081ec:	fa11 f18b 	uxtah	r1, r1, fp
 80081f0:	0c1b      	lsrs	r3, r3, #16
 80081f2:	eba1 0808 	sub.w	r8, r1, r8
 80081f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081fe:	fa1f f888 	uxth.w	r8, r8
 8008202:	1419      	asrs	r1, r3, #16
 8008204:	454e      	cmp	r6, r9
 8008206:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800820a:	f84a 3b04 	str.w	r3, [sl], #4
 800820e:	d8e7      	bhi.n	80081e0 <__mdiff+0x80>
 8008210:	1b33      	subs	r3, r6, r4
 8008212:	3b15      	subs	r3, #21
 8008214:	f023 0303 	bic.w	r3, r3, #3
 8008218:	3304      	adds	r3, #4
 800821a:	3415      	adds	r4, #21
 800821c:	42a6      	cmp	r6, r4
 800821e:	bf38      	it	cc
 8008220:	2304      	movcc	r3, #4
 8008222:	441d      	add	r5, r3
 8008224:	4473      	add	r3, lr
 8008226:	469e      	mov	lr, r3
 8008228:	462e      	mov	r6, r5
 800822a:	4566      	cmp	r6, ip
 800822c:	d30e      	bcc.n	800824c <__mdiff+0xec>
 800822e:	f10c 0203 	add.w	r2, ip, #3
 8008232:	1b52      	subs	r2, r2, r5
 8008234:	f022 0203 	bic.w	r2, r2, #3
 8008238:	3d03      	subs	r5, #3
 800823a:	45ac      	cmp	ip, r5
 800823c:	bf38      	it	cc
 800823e:	2200      	movcc	r2, #0
 8008240:	441a      	add	r2, r3
 8008242:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008246:	b17b      	cbz	r3, 8008268 <__mdiff+0x108>
 8008248:	6107      	str	r7, [r0, #16]
 800824a:	e7a3      	b.n	8008194 <__mdiff+0x34>
 800824c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008250:	fa11 f288 	uxtah	r2, r1, r8
 8008254:	1414      	asrs	r4, r2, #16
 8008256:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800825a:	b292      	uxth	r2, r2
 800825c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008260:	f84e 2b04 	str.w	r2, [lr], #4
 8008264:	1421      	asrs	r1, r4, #16
 8008266:	e7e0      	b.n	800822a <__mdiff+0xca>
 8008268:	3f01      	subs	r7, #1
 800826a:	e7ea      	b.n	8008242 <__mdiff+0xe2>
 800826c:	0800950b 	.word	0x0800950b
 8008270:	0800951c 	.word	0x0800951c

08008274 <__d2b>:
 8008274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008278:	4689      	mov	r9, r1
 800827a:	2101      	movs	r1, #1
 800827c:	ec57 6b10 	vmov	r6, r7, d0
 8008280:	4690      	mov	r8, r2
 8008282:	f7ff fccf 	bl	8007c24 <_Balloc>
 8008286:	4604      	mov	r4, r0
 8008288:	b930      	cbnz	r0, 8008298 <__d2b+0x24>
 800828a:	4602      	mov	r2, r0
 800828c:	4b25      	ldr	r3, [pc, #148]	; (8008324 <__d2b+0xb0>)
 800828e:	4826      	ldr	r0, [pc, #152]	; (8008328 <__d2b+0xb4>)
 8008290:	f240 310a 	movw	r1, #778	; 0x30a
 8008294:	f000 faac 	bl	80087f0 <__assert_func>
 8008298:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800829c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082a0:	bb35      	cbnz	r5, 80082f0 <__d2b+0x7c>
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	d028      	beq.n	80082fa <__d2b+0x86>
 80082a8:	4668      	mov	r0, sp
 80082aa:	9600      	str	r6, [sp, #0]
 80082ac:	f7ff fd82 	bl	8007db4 <__lo0bits>
 80082b0:	9900      	ldr	r1, [sp, #0]
 80082b2:	b300      	cbz	r0, 80082f6 <__d2b+0x82>
 80082b4:	9a01      	ldr	r2, [sp, #4]
 80082b6:	f1c0 0320 	rsb	r3, r0, #32
 80082ba:	fa02 f303 	lsl.w	r3, r2, r3
 80082be:	430b      	orrs	r3, r1
 80082c0:	40c2      	lsrs	r2, r0
 80082c2:	6163      	str	r3, [r4, #20]
 80082c4:	9201      	str	r2, [sp, #4]
 80082c6:	9b01      	ldr	r3, [sp, #4]
 80082c8:	61a3      	str	r3, [r4, #24]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bf14      	ite	ne
 80082ce:	2202      	movne	r2, #2
 80082d0:	2201      	moveq	r2, #1
 80082d2:	6122      	str	r2, [r4, #16]
 80082d4:	b1d5      	cbz	r5, 800830c <__d2b+0x98>
 80082d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082da:	4405      	add	r5, r0
 80082dc:	f8c9 5000 	str.w	r5, [r9]
 80082e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082e4:	f8c8 0000 	str.w	r0, [r8]
 80082e8:	4620      	mov	r0, r4
 80082ea:	b003      	add	sp, #12
 80082ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082f4:	e7d5      	b.n	80082a2 <__d2b+0x2e>
 80082f6:	6161      	str	r1, [r4, #20]
 80082f8:	e7e5      	b.n	80082c6 <__d2b+0x52>
 80082fa:	a801      	add	r0, sp, #4
 80082fc:	f7ff fd5a 	bl	8007db4 <__lo0bits>
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	6163      	str	r3, [r4, #20]
 8008304:	2201      	movs	r2, #1
 8008306:	6122      	str	r2, [r4, #16]
 8008308:	3020      	adds	r0, #32
 800830a:	e7e3      	b.n	80082d4 <__d2b+0x60>
 800830c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008310:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008314:	f8c9 0000 	str.w	r0, [r9]
 8008318:	6918      	ldr	r0, [r3, #16]
 800831a:	f7ff fd2b 	bl	8007d74 <__hi0bits>
 800831e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008322:	e7df      	b.n	80082e4 <__d2b+0x70>
 8008324:	0800950b 	.word	0x0800950b
 8008328:	0800951c 	.word	0x0800951c

0800832c <_calloc_r>:
 800832c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800832e:	fba1 2402 	umull	r2, r4, r1, r2
 8008332:	b94c      	cbnz	r4, 8008348 <_calloc_r+0x1c>
 8008334:	4611      	mov	r1, r2
 8008336:	9201      	str	r2, [sp, #4]
 8008338:	f000 f87a 	bl	8008430 <_malloc_r>
 800833c:	9a01      	ldr	r2, [sp, #4]
 800833e:	4605      	mov	r5, r0
 8008340:	b930      	cbnz	r0, 8008350 <_calloc_r+0x24>
 8008342:	4628      	mov	r0, r5
 8008344:	b003      	add	sp, #12
 8008346:	bd30      	pop	{r4, r5, pc}
 8008348:	220c      	movs	r2, #12
 800834a:	6002      	str	r2, [r0, #0]
 800834c:	2500      	movs	r5, #0
 800834e:	e7f8      	b.n	8008342 <_calloc_r+0x16>
 8008350:	4621      	mov	r1, r4
 8008352:	f7fe f94d 	bl	80065f0 <memset>
 8008356:	e7f4      	b.n	8008342 <_calloc_r+0x16>

08008358 <_free_r>:
 8008358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800835a:	2900      	cmp	r1, #0
 800835c:	d044      	beq.n	80083e8 <_free_r+0x90>
 800835e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008362:	9001      	str	r0, [sp, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f1a1 0404 	sub.w	r4, r1, #4
 800836a:	bfb8      	it	lt
 800836c:	18e4      	addlt	r4, r4, r3
 800836e:	f000 fa9b 	bl	80088a8 <__malloc_lock>
 8008372:	4a1e      	ldr	r2, [pc, #120]	; (80083ec <_free_r+0x94>)
 8008374:	9801      	ldr	r0, [sp, #4]
 8008376:	6813      	ldr	r3, [r2, #0]
 8008378:	b933      	cbnz	r3, 8008388 <_free_r+0x30>
 800837a:	6063      	str	r3, [r4, #4]
 800837c:	6014      	str	r4, [r2, #0]
 800837e:	b003      	add	sp, #12
 8008380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008384:	f000 ba96 	b.w	80088b4 <__malloc_unlock>
 8008388:	42a3      	cmp	r3, r4
 800838a:	d908      	bls.n	800839e <_free_r+0x46>
 800838c:	6825      	ldr	r5, [r4, #0]
 800838e:	1961      	adds	r1, r4, r5
 8008390:	428b      	cmp	r3, r1
 8008392:	bf01      	itttt	eq
 8008394:	6819      	ldreq	r1, [r3, #0]
 8008396:	685b      	ldreq	r3, [r3, #4]
 8008398:	1949      	addeq	r1, r1, r5
 800839a:	6021      	streq	r1, [r4, #0]
 800839c:	e7ed      	b.n	800837a <_free_r+0x22>
 800839e:	461a      	mov	r2, r3
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	b10b      	cbz	r3, 80083a8 <_free_r+0x50>
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	d9fa      	bls.n	800839e <_free_r+0x46>
 80083a8:	6811      	ldr	r1, [r2, #0]
 80083aa:	1855      	adds	r5, r2, r1
 80083ac:	42a5      	cmp	r5, r4
 80083ae:	d10b      	bne.n	80083c8 <_free_r+0x70>
 80083b0:	6824      	ldr	r4, [r4, #0]
 80083b2:	4421      	add	r1, r4
 80083b4:	1854      	adds	r4, r2, r1
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	6011      	str	r1, [r2, #0]
 80083ba:	d1e0      	bne.n	800837e <_free_r+0x26>
 80083bc:	681c      	ldr	r4, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	6053      	str	r3, [r2, #4]
 80083c2:	4421      	add	r1, r4
 80083c4:	6011      	str	r1, [r2, #0]
 80083c6:	e7da      	b.n	800837e <_free_r+0x26>
 80083c8:	d902      	bls.n	80083d0 <_free_r+0x78>
 80083ca:	230c      	movs	r3, #12
 80083cc:	6003      	str	r3, [r0, #0]
 80083ce:	e7d6      	b.n	800837e <_free_r+0x26>
 80083d0:	6825      	ldr	r5, [r4, #0]
 80083d2:	1961      	adds	r1, r4, r5
 80083d4:	428b      	cmp	r3, r1
 80083d6:	bf04      	itt	eq
 80083d8:	6819      	ldreq	r1, [r3, #0]
 80083da:	685b      	ldreq	r3, [r3, #4]
 80083dc:	6063      	str	r3, [r4, #4]
 80083de:	bf04      	itt	eq
 80083e0:	1949      	addeq	r1, r1, r5
 80083e2:	6021      	streq	r1, [r4, #0]
 80083e4:	6054      	str	r4, [r2, #4]
 80083e6:	e7ca      	b.n	800837e <_free_r+0x26>
 80083e8:	b003      	add	sp, #12
 80083ea:	bd30      	pop	{r4, r5, pc}
 80083ec:	200003d4 	.word	0x200003d4

080083f0 <sbrk_aligned>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	4e0e      	ldr	r6, [pc, #56]	; (800842c <sbrk_aligned+0x3c>)
 80083f4:	460c      	mov	r4, r1
 80083f6:	6831      	ldr	r1, [r6, #0]
 80083f8:	4605      	mov	r5, r0
 80083fa:	b911      	cbnz	r1, 8008402 <sbrk_aligned+0x12>
 80083fc:	f000 f9e8 	bl	80087d0 <_sbrk_r>
 8008400:	6030      	str	r0, [r6, #0]
 8008402:	4621      	mov	r1, r4
 8008404:	4628      	mov	r0, r5
 8008406:	f000 f9e3 	bl	80087d0 <_sbrk_r>
 800840a:	1c43      	adds	r3, r0, #1
 800840c:	d00a      	beq.n	8008424 <sbrk_aligned+0x34>
 800840e:	1cc4      	adds	r4, r0, #3
 8008410:	f024 0403 	bic.w	r4, r4, #3
 8008414:	42a0      	cmp	r0, r4
 8008416:	d007      	beq.n	8008428 <sbrk_aligned+0x38>
 8008418:	1a21      	subs	r1, r4, r0
 800841a:	4628      	mov	r0, r5
 800841c:	f000 f9d8 	bl	80087d0 <_sbrk_r>
 8008420:	3001      	adds	r0, #1
 8008422:	d101      	bne.n	8008428 <sbrk_aligned+0x38>
 8008424:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008428:	4620      	mov	r0, r4
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	200003d8 	.word	0x200003d8

08008430 <_malloc_r>:
 8008430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008434:	1ccd      	adds	r5, r1, #3
 8008436:	f025 0503 	bic.w	r5, r5, #3
 800843a:	3508      	adds	r5, #8
 800843c:	2d0c      	cmp	r5, #12
 800843e:	bf38      	it	cc
 8008440:	250c      	movcc	r5, #12
 8008442:	2d00      	cmp	r5, #0
 8008444:	4607      	mov	r7, r0
 8008446:	db01      	blt.n	800844c <_malloc_r+0x1c>
 8008448:	42a9      	cmp	r1, r5
 800844a:	d905      	bls.n	8008458 <_malloc_r+0x28>
 800844c:	230c      	movs	r3, #12
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	2600      	movs	r6, #0
 8008452:	4630      	mov	r0, r6
 8008454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008458:	4e2e      	ldr	r6, [pc, #184]	; (8008514 <_malloc_r+0xe4>)
 800845a:	f000 fa25 	bl	80088a8 <__malloc_lock>
 800845e:	6833      	ldr	r3, [r6, #0]
 8008460:	461c      	mov	r4, r3
 8008462:	bb34      	cbnz	r4, 80084b2 <_malloc_r+0x82>
 8008464:	4629      	mov	r1, r5
 8008466:	4638      	mov	r0, r7
 8008468:	f7ff ffc2 	bl	80083f0 <sbrk_aligned>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	4604      	mov	r4, r0
 8008470:	d14d      	bne.n	800850e <_malloc_r+0xde>
 8008472:	6834      	ldr	r4, [r6, #0]
 8008474:	4626      	mov	r6, r4
 8008476:	2e00      	cmp	r6, #0
 8008478:	d140      	bne.n	80084fc <_malloc_r+0xcc>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	4631      	mov	r1, r6
 800847e:	4638      	mov	r0, r7
 8008480:	eb04 0803 	add.w	r8, r4, r3
 8008484:	f000 f9a4 	bl	80087d0 <_sbrk_r>
 8008488:	4580      	cmp	r8, r0
 800848a:	d13a      	bne.n	8008502 <_malloc_r+0xd2>
 800848c:	6821      	ldr	r1, [r4, #0]
 800848e:	3503      	adds	r5, #3
 8008490:	1a6d      	subs	r5, r5, r1
 8008492:	f025 0503 	bic.w	r5, r5, #3
 8008496:	3508      	adds	r5, #8
 8008498:	2d0c      	cmp	r5, #12
 800849a:	bf38      	it	cc
 800849c:	250c      	movcc	r5, #12
 800849e:	4629      	mov	r1, r5
 80084a0:	4638      	mov	r0, r7
 80084a2:	f7ff ffa5 	bl	80083f0 <sbrk_aligned>
 80084a6:	3001      	adds	r0, #1
 80084a8:	d02b      	beq.n	8008502 <_malloc_r+0xd2>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	442b      	add	r3, r5
 80084ae:	6023      	str	r3, [r4, #0]
 80084b0:	e00e      	b.n	80084d0 <_malloc_r+0xa0>
 80084b2:	6822      	ldr	r2, [r4, #0]
 80084b4:	1b52      	subs	r2, r2, r5
 80084b6:	d41e      	bmi.n	80084f6 <_malloc_r+0xc6>
 80084b8:	2a0b      	cmp	r2, #11
 80084ba:	d916      	bls.n	80084ea <_malloc_r+0xba>
 80084bc:	1961      	adds	r1, r4, r5
 80084be:	42a3      	cmp	r3, r4
 80084c0:	6025      	str	r5, [r4, #0]
 80084c2:	bf18      	it	ne
 80084c4:	6059      	strne	r1, [r3, #4]
 80084c6:	6863      	ldr	r3, [r4, #4]
 80084c8:	bf08      	it	eq
 80084ca:	6031      	streq	r1, [r6, #0]
 80084cc:	5162      	str	r2, [r4, r5]
 80084ce:	604b      	str	r3, [r1, #4]
 80084d0:	4638      	mov	r0, r7
 80084d2:	f104 060b 	add.w	r6, r4, #11
 80084d6:	f000 f9ed 	bl	80088b4 <__malloc_unlock>
 80084da:	f026 0607 	bic.w	r6, r6, #7
 80084de:	1d23      	adds	r3, r4, #4
 80084e0:	1af2      	subs	r2, r6, r3
 80084e2:	d0b6      	beq.n	8008452 <_malloc_r+0x22>
 80084e4:	1b9b      	subs	r3, r3, r6
 80084e6:	50a3      	str	r3, [r4, r2]
 80084e8:	e7b3      	b.n	8008452 <_malloc_r+0x22>
 80084ea:	6862      	ldr	r2, [r4, #4]
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	bf0c      	ite	eq
 80084f0:	6032      	streq	r2, [r6, #0]
 80084f2:	605a      	strne	r2, [r3, #4]
 80084f4:	e7ec      	b.n	80084d0 <_malloc_r+0xa0>
 80084f6:	4623      	mov	r3, r4
 80084f8:	6864      	ldr	r4, [r4, #4]
 80084fa:	e7b2      	b.n	8008462 <_malloc_r+0x32>
 80084fc:	4634      	mov	r4, r6
 80084fe:	6876      	ldr	r6, [r6, #4]
 8008500:	e7b9      	b.n	8008476 <_malloc_r+0x46>
 8008502:	230c      	movs	r3, #12
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	4638      	mov	r0, r7
 8008508:	f000 f9d4 	bl	80088b4 <__malloc_unlock>
 800850c:	e7a1      	b.n	8008452 <_malloc_r+0x22>
 800850e:	6025      	str	r5, [r4, #0]
 8008510:	e7de      	b.n	80084d0 <_malloc_r+0xa0>
 8008512:	bf00      	nop
 8008514:	200003d4 	.word	0x200003d4

08008518 <__ssputs_r>:
 8008518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800851c:	688e      	ldr	r6, [r1, #8]
 800851e:	429e      	cmp	r6, r3
 8008520:	4682      	mov	sl, r0
 8008522:	460c      	mov	r4, r1
 8008524:	4690      	mov	r8, r2
 8008526:	461f      	mov	r7, r3
 8008528:	d838      	bhi.n	800859c <__ssputs_r+0x84>
 800852a:	898a      	ldrh	r2, [r1, #12]
 800852c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008530:	d032      	beq.n	8008598 <__ssputs_r+0x80>
 8008532:	6825      	ldr	r5, [r4, #0]
 8008534:	6909      	ldr	r1, [r1, #16]
 8008536:	eba5 0901 	sub.w	r9, r5, r1
 800853a:	6965      	ldr	r5, [r4, #20]
 800853c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008544:	3301      	adds	r3, #1
 8008546:	444b      	add	r3, r9
 8008548:	106d      	asrs	r5, r5, #1
 800854a:	429d      	cmp	r5, r3
 800854c:	bf38      	it	cc
 800854e:	461d      	movcc	r5, r3
 8008550:	0553      	lsls	r3, r2, #21
 8008552:	d531      	bpl.n	80085b8 <__ssputs_r+0xa0>
 8008554:	4629      	mov	r1, r5
 8008556:	f7ff ff6b 	bl	8008430 <_malloc_r>
 800855a:	4606      	mov	r6, r0
 800855c:	b950      	cbnz	r0, 8008574 <__ssputs_r+0x5c>
 800855e:	230c      	movs	r3, #12
 8008560:	f8ca 3000 	str.w	r3, [sl]
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800856a:	81a3      	strh	r3, [r4, #12]
 800856c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008574:	6921      	ldr	r1, [r4, #16]
 8008576:	464a      	mov	r2, r9
 8008578:	f7fe f82c 	bl	80065d4 <memcpy>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	6126      	str	r6, [r4, #16]
 800858a:	6165      	str	r5, [r4, #20]
 800858c:	444e      	add	r6, r9
 800858e:	eba5 0509 	sub.w	r5, r5, r9
 8008592:	6026      	str	r6, [r4, #0]
 8008594:	60a5      	str	r5, [r4, #8]
 8008596:	463e      	mov	r6, r7
 8008598:	42be      	cmp	r6, r7
 800859a:	d900      	bls.n	800859e <__ssputs_r+0x86>
 800859c:	463e      	mov	r6, r7
 800859e:	6820      	ldr	r0, [r4, #0]
 80085a0:	4632      	mov	r2, r6
 80085a2:	4641      	mov	r1, r8
 80085a4:	f000 f966 	bl	8008874 <memmove>
 80085a8:	68a3      	ldr	r3, [r4, #8]
 80085aa:	1b9b      	subs	r3, r3, r6
 80085ac:	60a3      	str	r3, [r4, #8]
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	4433      	add	r3, r6
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	2000      	movs	r0, #0
 80085b6:	e7db      	b.n	8008570 <__ssputs_r+0x58>
 80085b8:	462a      	mov	r2, r5
 80085ba:	f000 f981 	bl	80088c0 <_realloc_r>
 80085be:	4606      	mov	r6, r0
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d1e1      	bne.n	8008588 <__ssputs_r+0x70>
 80085c4:	6921      	ldr	r1, [r4, #16]
 80085c6:	4650      	mov	r0, sl
 80085c8:	f7ff fec6 	bl	8008358 <_free_r>
 80085cc:	e7c7      	b.n	800855e <__ssputs_r+0x46>
	...

080085d0 <_svfiprintf_r>:
 80085d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	4698      	mov	r8, r3
 80085d6:	898b      	ldrh	r3, [r1, #12]
 80085d8:	061b      	lsls	r3, r3, #24
 80085da:	b09d      	sub	sp, #116	; 0x74
 80085dc:	4607      	mov	r7, r0
 80085de:	460d      	mov	r5, r1
 80085e0:	4614      	mov	r4, r2
 80085e2:	d50e      	bpl.n	8008602 <_svfiprintf_r+0x32>
 80085e4:	690b      	ldr	r3, [r1, #16]
 80085e6:	b963      	cbnz	r3, 8008602 <_svfiprintf_r+0x32>
 80085e8:	2140      	movs	r1, #64	; 0x40
 80085ea:	f7ff ff21 	bl	8008430 <_malloc_r>
 80085ee:	6028      	str	r0, [r5, #0]
 80085f0:	6128      	str	r0, [r5, #16]
 80085f2:	b920      	cbnz	r0, 80085fe <_svfiprintf_r+0x2e>
 80085f4:	230c      	movs	r3, #12
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085fc:	e0d1      	b.n	80087a2 <_svfiprintf_r+0x1d2>
 80085fe:	2340      	movs	r3, #64	; 0x40
 8008600:	616b      	str	r3, [r5, #20]
 8008602:	2300      	movs	r3, #0
 8008604:	9309      	str	r3, [sp, #36]	; 0x24
 8008606:	2320      	movs	r3, #32
 8008608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800860c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008610:	2330      	movs	r3, #48	; 0x30
 8008612:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087bc <_svfiprintf_r+0x1ec>
 8008616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800861a:	f04f 0901 	mov.w	r9, #1
 800861e:	4623      	mov	r3, r4
 8008620:	469a      	mov	sl, r3
 8008622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008626:	b10a      	cbz	r2, 800862c <_svfiprintf_r+0x5c>
 8008628:	2a25      	cmp	r2, #37	; 0x25
 800862a:	d1f9      	bne.n	8008620 <_svfiprintf_r+0x50>
 800862c:	ebba 0b04 	subs.w	fp, sl, r4
 8008630:	d00b      	beq.n	800864a <_svfiprintf_r+0x7a>
 8008632:	465b      	mov	r3, fp
 8008634:	4622      	mov	r2, r4
 8008636:	4629      	mov	r1, r5
 8008638:	4638      	mov	r0, r7
 800863a:	f7ff ff6d 	bl	8008518 <__ssputs_r>
 800863e:	3001      	adds	r0, #1
 8008640:	f000 80aa 	beq.w	8008798 <_svfiprintf_r+0x1c8>
 8008644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008646:	445a      	add	r2, fp
 8008648:	9209      	str	r2, [sp, #36]	; 0x24
 800864a:	f89a 3000 	ldrb.w	r3, [sl]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 80a2 	beq.w	8008798 <_svfiprintf_r+0x1c8>
 8008654:	2300      	movs	r3, #0
 8008656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800865a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800865e:	f10a 0a01 	add.w	sl, sl, #1
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	9307      	str	r3, [sp, #28]
 8008666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800866a:	931a      	str	r3, [sp, #104]	; 0x68
 800866c:	4654      	mov	r4, sl
 800866e:	2205      	movs	r2, #5
 8008670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008674:	4851      	ldr	r0, [pc, #324]	; (80087bc <_svfiprintf_r+0x1ec>)
 8008676:	f7f7 fdd3 	bl	8000220 <memchr>
 800867a:	9a04      	ldr	r2, [sp, #16]
 800867c:	b9d8      	cbnz	r0, 80086b6 <_svfiprintf_r+0xe6>
 800867e:	06d0      	lsls	r0, r2, #27
 8008680:	bf44      	itt	mi
 8008682:	2320      	movmi	r3, #32
 8008684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008688:	0711      	lsls	r1, r2, #28
 800868a:	bf44      	itt	mi
 800868c:	232b      	movmi	r3, #43	; 0x2b
 800868e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008692:	f89a 3000 	ldrb.w	r3, [sl]
 8008696:	2b2a      	cmp	r3, #42	; 0x2a
 8008698:	d015      	beq.n	80086c6 <_svfiprintf_r+0xf6>
 800869a:	9a07      	ldr	r2, [sp, #28]
 800869c:	4654      	mov	r4, sl
 800869e:	2000      	movs	r0, #0
 80086a0:	f04f 0c0a 	mov.w	ip, #10
 80086a4:	4621      	mov	r1, r4
 80086a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086aa:	3b30      	subs	r3, #48	; 0x30
 80086ac:	2b09      	cmp	r3, #9
 80086ae:	d94e      	bls.n	800874e <_svfiprintf_r+0x17e>
 80086b0:	b1b0      	cbz	r0, 80086e0 <_svfiprintf_r+0x110>
 80086b2:	9207      	str	r2, [sp, #28]
 80086b4:	e014      	b.n	80086e0 <_svfiprintf_r+0x110>
 80086b6:	eba0 0308 	sub.w	r3, r0, r8
 80086ba:	fa09 f303 	lsl.w	r3, r9, r3
 80086be:	4313      	orrs	r3, r2
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	46a2      	mov	sl, r4
 80086c4:	e7d2      	b.n	800866c <_svfiprintf_r+0x9c>
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	1d19      	adds	r1, r3, #4
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	9103      	str	r1, [sp, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bfbb      	ittet	lt
 80086d2:	425b      	neglt	r3, r3
 80086d4:	f042 0202 	orrlt.w	r2, r2, #2
 80086d8:	9307      	strge	r3, [sp, #28]
 80086da:	9307      	strlt	r3, [sp, #28]
 80086dc:	bfb8      	it	lt
 80086de:	9204      	strlt	r2, [sp, #16]
 80086e0:	7823      	ldrb	r3, [r4, #0]
 80086e2:	2b2e      	cmp	r3, #46	; 0x2e
 80086e4:	d10c      	bne.n	8008700 <_svfiprintf_r+0x130>
 80086e6:	7863      	ldrb	r3, [r4, #1]
 80086e8:	2b2a      	cmp	r3, #42	; 0x2a
 80086ea:	d135      	bne.n	8008758 <_svfiprintf_r+0x188>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	1d1a      	adds	r2, r3, #4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	9203      	str	r2, [sp, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfb8      	it	lt
 80086f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086fc:	3402      	adds	r4, #2
 80086fe:	9305      	str	r3, [sp, #20]
 8008700:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087cc <_svfiprintf_r+0x1fc>
 8008704:	7821      	ldrb	r1, [r4, #0]
 8008706:	2203      	movs	r2, #3
 8008708:	4650      	mov	r0, sl
 800870a:	f7f7 fd89 	bl	8000220 <memchr>
 800870e:	b140      	cbz	r0, 8008722 <_svfiprintf_r+0x152>
 8008710:	2340      	movs	r3, #64	; 0x40
 8008712:	eba0 000a 	sub.w	r0, r0, sl
 8008716:	fa03 f000 	lsl.w	r0, r3, r0
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	4303      	orrs	r3, r0
 800871e:	3401      	adds	r4, #1
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008726:	4826      	ldr	r0, [pc, #152]	; (80087c0 <_svfiprintf_r+0x1f0>)
 8008728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800872c:	2206      	movs	r2, #6
 800872e:	f7f7 fd77 	bl	8000220 <memchr>
 8008732:	2800      	cmp	r0, #0
 8008734:	d038      	beq.n	80087a8 <_svfiprintf_r+0x1d8>
 8008736:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <_svfiprintf_r+0x1f4>)
 8008738:	bb1b      	cbnz	r3, 8008782 <_svfiprintf_r+0x1b2>
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	3307      	adds	r3, #7
 800873e:	f023 0307 	bic.w	r3, r3, #7
 8008742:	3308      	adds	r3, #8
 8008744:	9303      	str	r3, [sp, #12]
 8008746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008748:	4433      	add	r3, r6
 800874a:	9309      	str	r3, [sp, #36]	; 0x24
 800874c:	e767      	b.n	800861e <_svfiprintf_r+0x4e>
 800874e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008752:	460c      	mov	r4, r1
 8008754:	2001      	movs	r0, #1
 8008756:	e7a5      	b.n	80086a4 <_svfiprintf_r+0xd4>
 8008758:	2300      	movs	r3, #0
 800875a:	3401      	adds	r4, #1
 800875c:	9305      	str	r3, [sp, #20]
 800875e:	4619      	mov	r1, r3
 8008760:	f04f 0c0a 	mov.w	ip, #10
 8008764:	4620      	mov	r0, r4
 8008766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800876a:	3a30      	subs	r2, #48	; 0x30
 800876c:	2a09      	cmp	r2, #9
 800876e:	d903      	bls.n	8008778 <_svfiprintf_r+0x1a8>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0c5      	beq.n	8008700 <_svfiprintf_r+0x130>
 8008774:	9105      	str	r1, [sp, #20]
 8008776:	e7c3      	b.n	8008700 <_svfiprintf_r+0x130>
 8008778:	fb0c 2101 	mla	r1, ip, r1, r2
 800877c:	4604      	mov	r4, r0
 800877e:	2301      	movs	r3, #1
 8008780:	e7f0      	b.n	8008764 <_svfiprintf_r+0x194>
 8008782:	ab03      	add	r3, sp, #12
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	462a      	mov	r2, r5
 8008788:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <_svfiprintf_r+0x1f8>)
 800878a:	a904      	add	r1, sp, #16
 800878c:	4638      	mov	r0, r7
 800878e:	f7fd ffd7 	bl	8006740 <_printf_float>
 8008792:	1c42      	adds	r2, r0, #1
 8008794:	4606      	mov	r6, r0
 8008796:	d1d6      	bne.n	8008746 <_svfiprintf_r+0x176>
 8008798:	89ab      	ldrh	r3, [r5, #12]
 800879a:	065b      	lsls	r3, r3, #25
 800879c:	f53f af2c 	bmi.w	80085f8 <_svfiprintf_r+0x28>
 80087a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087a2:	b01d      	add	sp, #116	; 0x74
 80087a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a8:	ab03      	add	r3, sp, #12
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	462a      	mov	r2, r5
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <_svfiprintf_r+0x1f8>)
 80087b0:	a904      	add	r1, sp, #16
 80087b2:	4638      	mov	r0, r7
 80087b4:	f7fe fa68 	bl	8006c88 <_printf_i>
 80087b8:	e7eb      	b.n	8008792 <_svfiprintf_r+0x1c2>
 80087ba:	bf00      	nop
 80087bc:	08009674 	.word	0x08009674
 80087c0:	0800967e 	.word	0x0800967e
 80087c4:	08006741 	.word	0x08006741
 80087c8:	08008519 	.word	0x08008519
 80087cc:	0800967a 	.word	0x0800967a

080087d0 <_sbrk_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4d06      	ldr	r5, [pc, #24]	; (80087ec <_sbrk_r+0x1c>)
 80087d4:	2300      	movs	r3, #0
 80087d6:	4604      	mov	r4, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	f7f9 fb56 	bl	8001e8c <_sbrk>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_sbrk_r+0x1a>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_sbrk_r+0x1a>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	200003dc 	.word	0x200003dc

080087f0 <__assert_func>:
 80087f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087f2:	4614      	mov	r4, r2
 80087f4:	461a      	mov	r2, r3
 80087f6:	4b09      	ldr	r3, [pc, #36]	; (800881c <__assert_func+0x2c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4605      	mov	r5, r0
 80087fc:	68d8      	ldr	r0, [r3, #12]
 80087fe:	b14c      	cbz	r4, 8008814 <__assert_func+0x24>
 8008800:	4b07      	ldr	r3, [pc, #28]	; (8008820 <__assert_func+0x30>)
 8008802:	9100      	str	r1, [sp, #0]
 8008804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008808:	4906      	ldr	r1, [pc, #24]	; (8008824 <__assert_func+0x34>)
 800880a:	462b      	mov	r3, r5
 800880c:	f000 f80e 	bl	800882c <fiprintf>
 8008810:	f000 faac 	bl	8008d6c <abort>
 8008814:	4b04      	ldr	r3, [pc, #16]	; (8008828 <__assert_func+0x38>)
 8008816:	461c      	mov	r4, r3
 8008818:	e7f3      	b.n	8008802 <__assert_func+0x12>
 800881a:	bf00      	nop
 800881c:	2000000c 	.word	0x2000000c
 8008820:	08009685 	.word	0x08009685
 8008824:	08009692 	.word	0x08009692
 8008828:	080096c0 	.word	0x080096c0

0800882c <fiprintf>:
 800882c:	b40e      	push	{r1, r2, r3}
 800882e:	b503      	push	{r0, r1, lr}
 8008830:	4601      	mov	r1, r0
 8008832:	ab03      	add	r3, sp, #12
 8008834:	4805      	ldr	r0, [pc, #20]	; (800884c <fiprintf+0x20>)
 8008836:	f853 2b04 	ldr.w	r2, [r3], #4
 800883a:	6800      	ldr	r0, [r0, #0]
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	f000 f897 	bl	8008970 <_vfiprintf_r>
 8008842:	b002      	add	sp, #8
 8008844:	f85d eb04 	ldr.w	lr, [sp], #4
 8008848:	b003      	add	sp, #12
 800884a:	4770      	bx	lr
 800884c:	2000000c 	.word	0x2000000c

08008850 <__ascii_mbtowc>:
 8008850:	b082      	sub	sp, #8
 8008852:	b901      	cbnz	r1, 8008856 <__ascii_mbtowc+0x6>
 8008854:	a901      	add	r1, sp, #4
 8008856:	b142      	cbz	r2, 800886a <__ascii_mbtowc+0x1a>
 8008858:	b14b      	cbz	r3, 800886e <__ascii_mbtowc+0x1e>
 800885a:	7813      	ldrb	r3, [r2, #0]
 800885c:	600b      	str	r3, [r1, #0]
 800885e:	7812      	ldrb	r2, [r2, #0]
 8008860:	1e10      	subs	r0, r2, #0
 8008862:	bf18      	it	ne
 8008864:	2001      	movne	r0, #1
 8008866:	b002      	add	sp, #8
 8008868:	4770      	bx	lr
 800886a:	4610      	mov	r0, r2
 800886c:	e7fb      	b.n	8008866 <__ascii_mbtowc+0x16>
 800886e:	f06f 0001 	mvn.w	r0, #1
 8008872:	e7f8      	b.n	8008866 <__ascii_mbtowc+0x16>

08008874 <memmove>:
 8008874:	4288      	cmp	r0, r1
 8008876:	b510      	push	{r4, lr}
 8008878:	eb01 0402 	add.w	r4, r1, r2
 800887c:	d902      	bls.n	8008884 <memmove+0x10>
 800887e:	4284      	cmp	r4, r0
 8008880:	4623      	mov	r3, r4
 8008882:	d807      	bhi.n	8008894 <memmove+0x20>
 8008884:	1e43      	subs	r3, r0, #1
 8008886:	42a1      	cmp	r1, r4
 8008888:	d008      	beq.n	800889c <memmove+0x28>
 800888a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800888e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008892:	e7f8      	b.n	8008886 <memmove+0x12>
 8008894:	4402      	add	r2, r0
 8008896:	4601      	mov	r1, r0
 8008898:	428a      	cmp	r2, r1
 800889a:	d100      	bne.n	800889e <memmove+0x2a>
 800889c:	bd10      	pop	{r4, pc}
 800889e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088a6:	e7f7      	b.n	8008898 <memmove+0x24>

080088a8 <__malloc_lock>:
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <__malloc_lock+0x8>)
 80088aa:	f000 bc1f 	b.w	80090ec <__retarget_lock_acquire_recursive>
 80088ae:	bf00      	nop
 80088b0:	200003e0 	.word	0x200003e0

080088b4 <__malloc_unlock>:
 80088b4:	4801      	ldr	r0, [pc, #4]	; (80088bc <__malloc_unlock+0x8>)
 80088b6:	f000 bc1a 	b.w	80090ee <__retarget_lock_release_recursive>
 80088ba:	bf00      	nop
 80088bc:	200003e0 	.word	0x200003e0

080088c0 <_realloc_r>:
 80088c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c4:	4680      	mov	r8, r0
 80088c6:	4614      	mov	r4, r2
 80088c8:	460e      	mov	r6, r1
 80088ca:	b921      	cbnz	r1, 80088d6 <_realloc_r+0x16>
 80088cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	4611      	mov	r1, r2
 80088d2:	f7ff bdad 	b.w	8008430 <_malloc_r>
 80088d6:	b92a      	cbnz	r2, 80088e4 <_realloc_r+0x24>
 80088d8:	f7ff fd3e 	bl	8008358 <_free_r>
 80088dc:	4625      	mov	r5, r4
 80088de:	4628      	mov	r0, r5
 80088e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e4:	f000 fc6a 	bl	80091bc <_malloc_usable_size_r>
 80088e8:	4284      	cmp	r4, r0
 80088ea:	4607      	mov	r7, r0
 80088ec:	d802      	bhi.n	80088f4 <_realloc_r+0x34>
 80088ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088f2:	d812      	bhi.n	800891a <_realloc_r+0x5a>
 80088f4:	4621      	mov	r1, r4
 80088f6:	4640      	mov	r0, r8
 80088f8:	f7ff fd9a 	bl	8008430 <_malloc_r>
 80088fc:	4605      	mov	r5, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	d0ed      	beq.n	80088de <_realloc_r+0x1e>
 8008902:	42bc      	cmp	r4, r7
 8008904:	4622      	mov	r2, r4
 8008906:	4631      	mov	r1, r6
 8008908:	bf28      	it	cs
 800890a:	463a      	movcs	r2, r7
 800890c:	f7fd fe62 	bl	80065d4 <memcpy>
 8008910:	4631      	mov	r1, r6
 8008912:	4640      	mov	r0, r8
 8008914:	f7ff fd20 	bl	8008358 <_free_r>
 8008918:	e7e1      	b.n	80088de <_realloc_r+0x1e>
 800891a:	4635      	mov	r5, r6
 800891c:	e7df      	b.n	80088de <_realloc_r+0x1e>

0800891e <__sfputc_r>:
 800891e:	6893      	ldr	r3, [r2, #8]
 8008920:	3b01      	subs	r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	b410      	push	{r4}
 8008926:	6093      	str	r3, [r2, #8]
 8008928:	da08      	bge.n	800893c <__sfputc_r+0x1e>
 800892a:	6994      	ldr	r4, [r2, #24]
 800892c:	42a3      	cmp	r3, r4
 800892e:	db01      	blt.n	8008934 <__sfputc_r+0x16>
 8008930:	290a      	cmp	r1, #10
 8008932:	d103      	bne.n	800893c <__sfputc_r+0x1e>
 8008934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008938:	f000 b94a 	b.w	8008bd0 <__swbuf_r>
 800893c:	6813      	ldr	r3, [r2, #0]
 800893e:	1c58      	adds	r0, r3, #1
 8008940:	6010      	str	r0, [r2, #0]
 8008942:	7019      	strb	r1, [r3, #0]
 8008944:	4608      	mov	r0, r1
 8008946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800894a:	4770      	bx	lr

0800894c <__sfputs_r>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	4606      	mov	r6, r0
 8008950:	460f      	mov	r7, r1
 8008952:	4614      	mov	r4, r2
 8008954:	18d5      	adds	r5, r2, r3
 8008956:	42ac      	cmp	r4, r5
 8008958:	d101      	bne.n	800895e <__sfputs_r+0x12>
 800895a:	2000      	movs	r0, #0
 800895c:	e007      	b.n	800896e <__sfputs_r+0x22>
 800895e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008962:	463a      	mov	r2, r7
 8008964:	4630      	mov	r0, r6
 8008966:	f7ff ffda 	bl	800891e <__sfputc_r>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	d1f3      	bne.n	8008956 <__sfputs_r+0xa>
 800896e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008970 <_vfiprintf_r>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	460d      	mov	r5, r1
 8008976:	b09d      	sub	sp, #116	; 0x74
 8008978:	4614      	mov	r4, r2
 800897a:	4698      	mov	r8, r3
 800897c:	4606      	mov	r6, r0
 800897e:	b118      	cbz	r0, 8008988 <_vfiprintf_r+0x18>
 8008980:	6983      	ldr	r3, [r0, #24]
 8008982:	b90b      	cbnz	r3, 8008988 <_vfiprintf_r+0x18>
 8008984:	f000 fb14 	bl	8008fb0 <__sinit>
 8008988:	4b89      	ldr	r3, [pc, #548]	; (8008bb0 <_vfiprintf_r+0x240>)
 800898a:	429d      	cmp	r5, r3
 800898c:	d11b      	bne.n	80089c6 <_vfiprintf_r+0x56>
 800898e:	6875      	ldr	r5, [r6, #4]
 8008990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008992:	07d9      	lsls	r1, r3, #31
 8008994:	d405      	bmi.n	80089a2 <_vfiprintf_r+0x32>
 8008996:	89ab      	ldrh	r3, [r5, #12]
 8008998:	059a      	lsls	r2, r3, #22
 800899a:	d402      	bmi.n	80089a2 <_vfiprintf_r+0x32>
 800899c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800899e:	f000 fba5 	bl	80090ec <__retarget_lock_acquire_recursive>
 80089a2:	89ab      	ldrh	r3, [r5, #12]
 80089a4:	071b      	lsls	r3, r3, #28
 80089a6:	d501      	bpl.n	80089ac <_vfiprintf_r+0x3c>
 80089a8:	692b      	ldr	r3, [r5, #16]
 80089aa:	b9eb      	cbnz	r3, 80089e8 <_vfiprintf_r+0x78>
 80089ac:	4629      	mov	r1, r5
 80089ae:	4630      	mov	r0, r6
 80089b0:	f000 f96e 	bl	8008c90 <__swsetup_r>
 80089b4:	b1c0      	cbz	r0, 80089e8 <_vfiprintf_r+0x78>
 80089b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089b8:	07dc      	lsls	r4, r3, #31
 80089ba:	d50e      	bpl.n	80089da <_vfiprintf_r+0x6a>
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089c0:	b01d      	add	sp, #116	; 0x74
 80089c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c6:	4b7b      	ldr	r3, [pc, #492]	; (8008bb4 <_vfiprintf_r+0x244>)
 80089c8:	429d      	cmp	r5, r3
 80089ca:	d101      	bne.n	80089d0 <_vfiprintf_r+0x60>
 80089cc:	68b5      	ldr	r5, [r6, #8]
 80089ce:	e7df      	b.n	8008990 <_vfiprintf_r+0x20>
 80089d0:	4b79      	ldr	r3, [pc, #484]	; (8008bb8 <_vfiprintf_r+0x248>)
 80089d2:	429d      	cmp	r5, r3
 80089d4:	bf08      	it	eq
 80089d6:	68f5      	ldreq	r5, [r6, #12]
 80089d8:	e7da      	b.n	8008990 <_vfiprintf_r+0x20>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	0598      	lsls	r0, r3, #22
 80089de:	d4ed      	bmi.n	80089bc <_vfiprintf_r+0x4c>
 80089e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089e2:	f000 fb84 	bl	80090ee <__retarget_lock_release_recursive>
 80089e6:	e7e9      	b.n	80089bc <_vfiprintf_r+0x4c>
 80089e8:	2300      	movs	r3, #0
 80089ea:	9309      	str	r3, [sp, #36]	; 0x24
 80089ec:	2320      	movs	r3, #32
 80089ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80089f6:	2330      	movs	r3, #48	; 0x30
 80089f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bbc <_vfiprintf_r+0x24c>
 80089fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a00:	f04f 0901 	mov.w	r9, #1
 8008a04:	4623      	mov	r3, r4
 8008a06:	469a      	mov	sl, r3
 8008a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a0c:	b10a      	cbz	r2, 8008a12 <_vfiprintf_r+0xa2>
 8008a0e:	2a25      	cmp	r2, #37	; 0x25
 8008a10:	d1f9      	bne.n	8008a06 <_vfiprintf_r+0x96>
 8008a12:	ebba 0b04 	subs.w	fp, sl, r4
 8008a16:	d00b      	beq.n	8008a30 <_vfiprintf_r+0xc0>
 8008a18:	465b      	mov	r3, fp
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff ff94 	bl	800894c <__sfputs_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	f000 80aa 	beq.w	8008b7e <_vfiprintf_r+0x20e>
 8008a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a2c:	445a      	add	r2, fp
 8008a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a30:	f89a 3000 	ldrb.w	r3, [sl]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80a2 	beq.w	8008b7e <_vfiprintf_r+0x20e>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a44:	f10a 0a01 	add.w	sl, sl, #1
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	9307      	str	r3, [sp, #28]
 8008a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a50:	931a      	str	r3, [sp, #104]	; 0x68
 8008a52:	4654      	mov	r4, sl
 8008a54:	2205      	movs	r2, #5
 8008a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a5a:	4858      	ldr	r0, [pc, #352]	; (8008bbc <_vfiprintf_r+0x24c>)
 8008a5c:	f7f7 fbe0 	bl	8000220 <memchr>
 8008a60:	9a04      	ldr	r2, [sp, #16]
 8008a62:	b9d8      	cbnz	r0, 8008a9c <_vfiprintf_r+0x12c>
 8008a64:	06d1      	lsls	r1, r2, #27
 8008a66:	bf44      	itt	mi
 8008a68:	2320      	movmi	r3, #32
 8008a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a6e:	0713      	lsls	r3, r2, #28
 8008a70:	bf44      	itt	mi
 8008a72:	232b      	movmi	r3, #43	; 0x2b
 8008a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a78:	f89a 3000 	ldrb.w	r3, [sl]
 8008a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a7e:	d015      	beq.n	8008aac <_vfiprintf_r+0x13c>
 8008a80:	9a07      	ldr	r2, [sp, #28]
 8008a82:	4654      	mov	r4, sl
 8008a84:	2000      	movs	r0, #0
 8008a86:	f04f 0c0a 	mov.w	ip, #10
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a90:	3b30      	subs	r3, #48	; 0x30
 8008a92:	2b09      	cmp	r3, #9
 8008a94:	d94e      	bls.n	8008b34 <_vfiprintf_r+0x1c4>
 8008a96:	b1b0      	cbz	r0, 8008ac6 <_vfiprintf_r+0x156>
 8008a98:	9207      	str	r2, [sp, #28]
 8008a9a:	e014      	b.n	8008ac6 <_vfiprintf_r+0x156>
 8008a9c:	eba0 0308 	sub.w	r3, r0, r8
 8008aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	9304      	str	r3, [sp, #16]
 8008aa8:	46a2      	mov	sl, r4
 8008aaa:	e7d2      	b.n	8008a52 <_vfiprintf_r+0xe2>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	1d19      	adds	r1, r3, #4
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	9103      	str	r1, [sp, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bfbb      	ittet	lt
 8008ab8:	425b      	neglt	r3, r3
 8008aba:	f042 0202 	orrlt.w	r2, r2, #2
 8008abe:	9307      	strge	r3, [sp, #28]
 8008ac0:	9307      	strlt	r3, [sp, #28]
 8008ac2:	bfb8      	it	lt
 8008ac4:	9204      	strlt	r2, [sp, #16]
 8008ac6:	7823      	ldrb	r3, [r4, #0]
 8008ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8008aca:	d10c      	bne.n	8008ae6 <_vfiprintf_r+0x176>
 8008acc:	7863      	ldrb	r3, [r4, #1]
 8008ace:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad0:	d135      	bne.n	8008b3e <_vfiprintf_r+0x1ce>
 8008ad2:	9b03      	ldr	r3, [sp, #12]
 8008ad4:	1d1a      	adds	r2, r3, #4
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	9203      	str	r2, [sp, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	bfb8      	it	lt
 8008ade:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ae2:	3402      	adds	r4, #2
 8008ae4:	9305      	str	r3, [sp, #20]
 8008ae6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bcc <_vfiprintf_r+0x25c>
 8008aea:	7821      	ldrb	r1, [r4, #0]
 8008aec:	2203      	movs	r2, #3
 8008aee:	4650      	mov	r0, sl
 8008af0:	f7f7 fb96 	bl	8000220 <memchr>
 8008af4:	b140      	cbz	r0, 8008b08 <_vfiprintf_r+0x198>
 8008af6:	2340      	movs	r3, #64	; 0x40
 8008af8:	eba0 000a 	sub.w	r0, r0, sl
 8008afc:	fa03 f000 	lsl.w	r0, r3, r0
 8008b00:	9b04      	ldr	r3, [sp, #16]
 8008b02:	4303      	orrs	r3, r0
 8008b04:	3401      	adds	r4, #1
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0c:	482c      	ldr	r0, [pc, #176]	; (8008bc0 <_vfiprintf_r+0x250>)
 8008b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b12:	2206      	movs	r2, #6
 8008b14:	f7f7 fb84 	bl	8000220 <memchr>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d03f      	beq.n	8008b9c <_vfiprintf_r+0x22c>
 8008b1c:	4b29      	ldr	r3, [pc, #164]	; (8008bc4 <_vfiprintf_r+0x254>)
 8008b1e:	bb1b      	cbnz	r3, 8008b68 <_vfiprintf_r+0x1f8>
 8008b20:	9b03      	ldr	r3, [sp, #12]
 8008b22:	3307      	adds	r3, #7
 8008b24:	f023 0307 	bic.w	r3, r3, #7
 8008b28:	3308      	adds	r3, #8
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2e:	443b      	add	r3, r7
 8008b30:	9309      	str	r3, [sp, #36]	; 0x24
 8008b32:	e767      	b.n	8008a04 <_vfiprintf_r+0x94>
 8008b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b38:	460c      	mov	r4, r1
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	e7a5      	b.n	8008a8a <_vfiprintf_r+0x11a>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	3401      	adds	r4, #1
 8008b42:	9305      	str	r3, [sp, #20]
 8008b44:	4619      	mov	r1, r3
 8008b46:	f04f 0c0a 	mov.w	ip, #10
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b50:	3a30      	subs	r2, #48	; 0x30
 8008b52:	2a09      	cmp	r2, #9
 8008b54:	d903      	bls.n	8008b5e <_vfiprintf_r+0x1ee>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0c5      	beq.n	8008ae6 <_vfiprintf_r+0x176>
 8008b5a:	9105      	str	r1, [sp, #20]
 8008b5c:	e7c3      	b.n	8008ae6 <_vfiprintf_r+0x176>
 8008b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b62:	4604      	mov	r4, r0
 8008b64:	2301      	movs	r3, #1
 8008b66:	e7f0      	b.n	8008b4a <_vfiprintf_r+0x1da>
 8008b68:	ab03      	add	r3, sp, #12
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	4b16      	ldr	r3, [pc, #88]	; (8008bc8 <_vfiprintf_r+0x258>)
 8008b70:	a904      	add	r1, sp, #16
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7fd fde4 	bl	8006740 <_printf_float>
 8008b78:	4607      	mov	r7, r0
 8008b7a:	1c78      	adds	r0, r7, #1
 8008b7c:	d1d6      	bne.n	8008b2c <_vfiprintf_r+0x1bc>
 8008b7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b80:	07d9      	lsls	r1, r3, #31
 8008b82:	d405      	bmi.n	8008b90 <_vfiprintf_r+0x220>
 8008b84:	89ab      	ldrh	r3, [r5, #12]
 8008b86:	059a      	lsls	r2, r3, #22
 8008b88:	d402      	bmi.n	8008b90 <_vfiprintf_r+0x220>
 8008b8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b8c:	f000 faaf 	bl	80090ee <__retarget_lock_release_recursive>
 8008b90:	89ab      	ldrh	r3, [r5, #12]
 8008b92:	065b      	lsls	r3, r3, #25
 8008b94:	f53f af12 	bmi.w	80089bc <_vfiprintf_r+0x4c>
 8008b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b9a:	e711      	b.n	80089c0 <_vfiprintf_r+0x50>
 8008b9c:	ab03      	add	r3, sp, #12
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	462a      	mov	r2, r5
 8008ba2:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <_vfiprintf_r+0x258>)
 8008ba4:	a904      	add	r1, sp, #16
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f7fe f86e 	bl	8006c88 <_printf_i>
 8008bac:	e7e4      	b.n	8008b78 <_vfiprintf_r+0x208>
 8008bae:	bf00      	nop
 8008bb0:	080097ec 	.word	0x080097ec
 8008bb4:	0800980c 	.word	0x0800980c
 8008bb8:	080097cc 	.word	0x080097cc
 8008bbc:	08009674 	.word	0x08009674
 8008bc0:	0800967e 	.word	0x0800967e
 8008bc4:	08006741 	.word	0x08006741
 8008bc8:	0800894d 	.word	0x0800894d
 8008bcc:	0800967a 	.word	0x0800967a

08008bd0 <__swbuf_r>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	460e      	mov	r6, r1
 8008bd4:	4614      	mov	r4, r2
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	b118      	cbz	r0, 8008be2 <__swbuf_r+0x12>
 8008bda:	6983      	ldr	r3, [r0, #24]
 8008bdc:	b90b      	cbnz	r3, 8008be2 <__swbuf_r+0x12>
 8008bde:	f000 f9e7 	bl	8008fb0 <__sinit>
 8008be2:	4b21      	ldr	r3, [pc, #132]	; (8008c68 <__swbuf_r+0x98>)
 8008be4:	429c      	cmp	r4, r3
 8008be6:	d12b      	bne.n	8008c40 <__swbuf_r+0x70>
 8008be8:	686c      	ldr	r4, [r5, #4]
 8008bea:	69a3      	ldr	r3, [r4, #24]
 8008bec:	60a3      	str	r3, [r4, #8]
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	071a      	lsls	r2, r3, #28
 8008bf2:	d52f      	bpl.n	8008c54 <__swbuf_r+0x84>
 8008bf4:	6923      	ldr	r3, [r4, #16]
 8008bf6:	b36b      	cbz	r3, 8008c54 <__swbuf_r+0x84>
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	6820      	ldr	r0, [r4, #0]
 8008bfc:	1ac0      	subs	r0, r0, r3
 8008bfe:	6963      	ldr	r3, [r4, #20]
 8008c00:	b2f6      	uxtb	r6, r6
 8008c02:	4283      	cmp	r3, r0
 8008c04:	4637      	mov	r7, r6
 8008c06:	dc04      	bgt.n	8008c12 <__swbuf_r+0x42>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 f93c 	bl	8008e88 <_fflush_r>
 8008c10:	bb30      	cbnz	r0, 8008c60 <__swbuf_r+0x90>
 8008c12:	68a3      	ldr	r3, [r4, #8]
 8008c14:	3b01      	subs	r3, #1
 8008c16:	60a3      	str	r3, [r4, #8]
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	6022      	str	r2, [r4, #0]
 8008c1e:	701e      	strb	r6, [r3, #0]
 8008c20:	6963      	ldr	r3, [r4, #20]
 8008c22:	3001      	adds	r0, #1
 8008c24:	4283      	cmp	r3, r0
 8008c26:	d004      	beq.n	8008c32 <__swbuf_r+0x62>
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	07db      	lsls	r3, r3, #31
 8008c2c:	d506      	bpl.n	8008c3c <__swbuf_r+0x6c>
 8008c2e:	2e0a      	cmp	r6, #10
 8008c30:	d104      	bne.n	8008c3c <__swbuf_r+0x6c>
 8008c32:	4621      	mov	r1, r4
 8008c34:	4628      	mov	r0, r5
 8008c36:	f000 f927 	bl	8008e88 <_fflush_r>
 8008c3a:	b988      	cbnz	r0, 8008c60 <__swbuf_r+0x90>
 8008c3c:	4638      	mov	r0, r7
 8008c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <__swbuf_r+0x9c>)
 8008c42:	429c      	cmp	r4, r3
 8008c44:	d101      	bne.n	8008c4a <__swbuf_r+0x7a>
 8008c46:	68ac      	ldr	r4, [r5, #8]
 8008c48:	e7cf      	b.n	8008bea <__swbuf_r+0x1a>
 8008c4a:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <__swbuf_r+0xa0>)
 8008c4c:	429c      	cmp	r4, r3
 8008c4e:	bf08      	it	eq
 8008c50:	68ec      	ldreq	r4, [r5, #12]
 8008c52:	e7ca      	b.n	8008bea <__swbuf_r+0x1a>
 8008c54:	4621      	mov	r1, r4
 8008c56:	4628      	mov	r0, r5
 8008c58:	f000 f81a 	bl	8008c90 <__swsetup_r>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d0cb      	beq.n	8008bf8 <__swbuf_r+0x28>
 8008c60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c64:	e7ea      	b.n	8008c3c <__swbuf_r+0x6c>
 8008c66:	bf00      	nop
 8008c68:	080097ec 	.word	0x080097ec
 8008c6c:	0800980c 	.word	0x0800980c
 8008c70:	080097cc 	.word	0x080097cc

08008c74 <__ascii_wctomb>:
 8008c74:	b149      	cbz	r1, 8008c8a <__ascii_wctomb+0x16>
 8008c76:	2aff      	cmp	r2, #255	; 0xff
 8008c78:	bf85      	ittet	hi
 8008c7a:	238a      	movhi	r3, #138	; 0x8a
 8008c7c:	6003      	strhi	r3, [r0, #0]
 8008c7e:	700a      	strbls	r2, [r1, #0]
 8008c80:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008c84:	bf98      	it	ls
 8008c86:	2001      	movls	r0, #1
 8008c88:	4770      	bx	lr
 8008c8a:	4608      	mov	r0, r1
 8008c8c:	4770      	bx	lr
	...

08008c90 <__swsetup_r>:
 8008c90:	4b32      	ldr	r3, [pc, #200]	; (8008d5c <__swsetup_r+0xcc>)
 8008c92:	b570      	push	{r4, r5, r6, lr}
 8008c94:	681d      	ldr	r5, [r3, #0]
 8008c96:	4606      	mov	r6, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	b125      	cbz	r5, 8008ca6 <__swsetup_r+0x16>
 8008c9c:	69ab      	ldr	r3, [r5, #24]
 8008c9e:	b913      	cbnz	r3, 8008ca6 <__swsetup_r+0x16>
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f000 f985 	bl	8008fb0 <__sinit>
 8008ca6:	4b2e      	ldr	r3, [pc, #184]	; (8008d60 <__swsetup_r+0xd0>)
 8008ca8:	429c      	cmp	r4, r3
 8008caa:	d10f      	bne.n	8008ccc <__swsetup_r+0x3c>
 8008cac:	686c      	ldr	r4, [r5, #4]
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cb4:	0719      	lsls	r1, r3, #28
 8008cb6:	d42c      	bmi.n	8008d12 <__swsetup_r+0x82>
 8008cb8:	06dd      	lsls	r5, r3, #27
 8008cba:	d411      	bmi.n	8008ce0 <__swsetup_r+0x50>
 8008cbc:	2309      	movs	r3, #9
 8008cbe:	6033      	str	r3, [r6, #0]
 8008cc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cc4:	81a3      	strh	r3, [r4, #12]
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cca:	e03e      	b.n	8008d4a <__swsetup_r+0xba>
 8008ccc:	4b25      	ldr	r3, [pc, #148]	; (8008d64 <__swsetup_r+0xd4>)
 8008cce:	429c      	cmp	r4, r3
 8008cd0:	d101      	bne.n	8008cd6 <__swsetup_r+0x46>
 8008cd2:	68ac      	ldr	r4, [r5, #8]
 8008cd4:	e7eb      	b.n	8008cae <__swsetup_r+0x1e>
 8008cd6:	4b24      	ldr	r3, [pc, #144]	; (8008d68 <__swsetup_r+0xd8>)
 8008cd8:	429c      	cmp	r4, r3
 8008cda:	bf08      	it	eq
 8008cdc:	68ec      	ldreq	r4, [r5, #12]
 8008cde:	e7e6      	b.n	8008cae <__swsetup_r+0x1e>
 8008ce0:	0758      	lsls	r0, r3, #29
 8008ce2:	d512      	bpl.n	8008d0a <__swsetup_r+0x7a>
 8008ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ce6:	b141      	cbz	r1, 8008cfa <__swsetup_r+0x6a>
 8008ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cec:	4299      	cmp	r1, r3
 8008cee:	d002      	beq.n	8008cf6 <__swsetup_r+0x66>
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff fb31 	bl	8008358 <_free_r>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6363      	str	r3, [r4, #52]	; 0x34
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	2300      	movs	r3, #0
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	6923      	ldr	r3, [r4, #16]
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	f043 0308 	orr.w	r3, r3, #8
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	b94b      	cbnz	r3, 8008d2a <__swsetup_r+0x9a>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d20:	d003      	beq.n	8008d2a <__swsetup_r+0x9a>
 8008d22:	4621      	mov	r1, r4
 8008d24:	4630      	mov	r0, r6
 8008d26:	f000 fa09 	bl	800913c <__smakebuf_r>
 8008d2a:	89a0      	ldrh	r0, [r4, #12]
 8008d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d30:	f010 0301 	ands.w	r3, r0, #1
 8008d34:	d00a      	beq.n	8008d4c <__swsetup_r+0xbc>
 8008d36:	2300      	movs	r3, #0
 8008d38:	60a3      	str	r3, [r4, #8]
 8008d3a:	6963      	ldr	r3, [r4, #20]
 8008d3c:	425b      	negs	r3, r3
 8008d3e:	61a3      	str	r3, [r4, #24]
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	b943      	cbnz	r3, 8008d56 <__swsetup_r+0xc6>
 8008d44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d48:	d1ba      	bne.n	8008cc0 <__swsetup_r+0x30>
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	0781      	lsls	r1, r0, #30
 8008d4e:	bf58      	it	pl
 8008d50:	6963      	ldrpl	r3, [r4, #20]
 8008d52:	60a3      	str	r3, [r4, #8]
 8008d54:	e7f4      	b.n	8008d40 <__swsetup_r+0xb0>
 8008d56:	2000      	movs	r0, #0
 8008d58:	e7f7      	b.n	8008d4a <__swsetup_r+0xba>
 8008d5a:	bf00      	nop
 8008d5c:	2000000c 	.word	0x2000000c
 8008d60:	080097ec 	.word	0x080097ec
 8008d64:	0800980c 	.word	0x0800980c
 8008d68:	080097cc 	.word	0x080097cc

08008d6c <abort>:
 8008d6c:	b508      	push	{r3, lr}
 8008d6e:	2006      	movs	r0, #6
 8008d70:	f000 fa54 	bl	800921c <raise>
 8008d74:	2001      	movs	r0, #1
 8008d76:	f7f9 f811 	bl	8001d9c <_exit>
	...

08008d7c <__sflush_r>:
 8008d7c:	898a      	ldrh	r2, [r1, #12]
 8008d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d82:	4605      	mov	r5, r0
 8008d84:	0710      	lsls	r0, r2, #28
 8008d86:	460c      	mov	r4, r1
 8008d88:	d458      	bmi.n	8008e3c <__sflush_r+0xc0>
 8008d8a:	684b      	ldr	r3, [r1, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc05      	bgt.n	8008d9c <__sflush_r+0x20>
 8008d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	dc02      	bgt.n	8008d9c <__sflush_r+0x20>
 8008d96:	2000      	movs	r0, #0
 8008d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	d0f9      	beq.n	8008d96 <__sflush_r+0x1a>
 8008da2:	2300      	movs	r3, #0
 8008da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008da8:	682f      	ldr	r7, [r5, #0]
 8008daa:	602b      	str	r3, [r5, #0]
 8008dac:	d032      	beq.n	8008e14 <__sflush_r+0x98>
 8008dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	075a      	lsls	r2, r3, #29
 8008db4:	d505      	bpl.n	8008dc2 <__sflush_r+0x46>
 8008db6:	6863      	ldr	r3, [r4, #4]
 8008db8:	1ac0      	subs	r0, r0, r3
 8008dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dbc:	b10b      	cbz	r3, 8008dc2 <__sflush_r+0x46>
 8008dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dc0:	1ac0      	subs	r0, r0, r3
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dc8:	6a21      	ldr	r1, [r4, #32]
 8008dca:	4628      	mov	r0, r5
 8008dcc:	47b0      	blx	r6
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	d106      	bne.n	8008de2 <__sflush_r+0x66>
 8008dd4:	6829      	ldr	r1, [r5, #0]
 8008dd6:	291d      	cmp	r1, #29
 8008dd8:	d82c      	bhi.n	8008e34 <__sflush_r+0xb8>
 8008dda:	4a2a      	ldr	r2, [pc, #168]	; (8008e84 <__sflush_r+0x108>)
 8008ddc:	40ca      	lsrs	r2, r1
 8008dde:	07d6      	lsls	r6, r2, #31
 8008de0:	d528      	bpl.n	8008e34 <__sflush_r+0xb8>
 8008de2:	2200      	movs	r2, #0
 8008de4:	6062      	str	r2, [r4, #4]
 8008de6:	04d9      	lsls	r1, r3, #19
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	6022      	str	r2, [r4, #0]
 8008dec:	d504      	bpl.n	8008df8 <__sflush_r+0x7c>
 8008dee:	1c42      	adds	r2, r0, #1
 8008df0:	d101      	bne.n	8008df6 <__sflush_r+0x7a>
 8008df2:	682b      	ldr	r3, [r5, #0]
 8008df4:	b903      	cbnz	r3, 8008df8 <__sflush_r+0x7c>
 8008df6:	6560      	str	r0, [r4, #84]	; 0x54
 8008df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfa:	602f      	str	r7, [r5, #0]
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	d0ca      	beq.n	8008d96 <__sflush_r+0x1a>
 8008e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e04:	4299      	cmp	r1, r3
 8008e06:	d002      	beq.n	8008e0e <__sflush_r+0x92>
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f7ff faa5 	bl	8008358 <_free_r>
 8008e0e:	2000      	movs	r0, #0
 8008e10:	6360      	str	r0, [r4, #52]	; 0x34
 8008e12:	e7c1      	b.n	8008d98 <__sflush_r+0x1c>
 8008e14:	6a21      	ldr	r1, [r4, #32]
 8008e16:	2301      	movs	r3, #1
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b0      	blx	r6
 8008e1c:	1c41      	adds	r1, r0, #1
 8008e1e:	d1c7      	bne.n	8008db0 <__sflush_r+0x34>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0c4      	beq.n	8008db0 <__sflush_r+0x34>
 8008e26:	2b1d      	cmp	r3, #29
 8008e28:	d001      	beq.n	8008e2e <__sflush_r+0xb2>
 8008e2a:	2b16      	cmp	r3, #22
 8008e2c:	d101      	bne.n	8008e32 <__sflush_r+0xb6>
 8008e2e:	602f      	str	r7, [r5, #0]
 8008e30:	e7b1      	b.n	8008d96 <__sflush_r+0x1a>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	e7ad      	b.n	8008d98 <__sflush_r+0x1c>
 8008e3c:	690f      	ldr	r7, [r1, #16]
 8008e3e:	2f00      	cmp	r7, #0
 8008e40:	d0a9      	beq.n	8008d96 <__sflush_r+0x1a>
 8008e42:	0793      	lsls	r3, r2, #30
 8008e44:	680e      	ldr	r6, [r1, #0]
 8008e46:	bf08      	it	eq
 8008e48:	694b      	ldreq	r3, [r1, #20]
 8008e4a:	600f      	str	r7, [r1, #0]
 8008e4c:	bf18      	it	ne
 8008e4e:	2300      	movne	r3, #0
 8008e50:	eba6 0807 	sub.w	r8, r6, r7
 8008e54:	608b      	str	r3, [r1, #8]
 8008e56:	f1b8 0f00 	cmp.w	r8, #0
 8008e5a:	dd9c      	ble.n	8008d96 <__sflush_r+0x1a>
 8008e5c:	6a21      	ldr	r1, [r4, #32]
 8008e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e60:	4643      	mov	r3, r8
 8008e62:	463a      	mov	r2, r7
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b0      	blx	r6
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	dc06      	bgt.n	8008e7a <__sflush_r+0xfe>
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e78:	e78e      	b.n	8008d98 <__sflush_r+0x1c>
 8008e7a:	4407      	add	r7, r0
 8008e7c:	eba8 0800 	sub.w	r8, r8, r0
 8008e80:	e7e9      	b.n	8008e56 <__sflush_r+0xda>
 8008e82:	bf00      	nop
 8008e84:	20400001 	.word	0x20400001

08008e88 <_fflush_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	690b      	ldr	r3, [r1, #16]
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	b913      	cbnz	r3, 8008e98 <_fflush_r+0x10>
 8008e92:	2500      	movs	r5, #0
 8008e94:	4628      	mov	r0, r5
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	b118      	cbz	r0, 8008ea2 <_fflush_r+0x1a>
 8008e9a:	6983      	ldr	r3, [r0, #24]
 8008e9c:	b90b      	cbnz	r3, 8008ea2 <_fflush_r+0x1a>
 8008e9e:	f000 f887 	bl	8008fb0 <__sinit>
 8008ea2:	4b14      	ldr	r3, [pc, #80]	; (8008ef4 <_fflush_r+0x6c>)
 8008ea4:	429c      	cmp	r4, r3
 8008ea6:	d11b      	bne.n	8008ee0 <_fflush_r+0x58>
 8008ea8:	686c      	ldr	r4, [r5, #4]
 8008eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0ef      	beq.n	8008e92 <_fflush_r+0xa>
 8008eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008eb4:	07d0      	lsls	r0, r2, #31
 8008eb6:	d404      	bmi.n	8008ec2 <_fflush_r+0x3a>
 8008eb8:	0599      	lsls	r1, r3, #22
 8008eba:	d402      	bmi.n	8008ec2 <_fflush_r+0x3a>
 8008ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ebe:	f000 f915 	bl	80090ec <__retarget_lock_acquire_recursive>
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f7ff ff59 	bl	8008d7c <__sflush_r>
 8008eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ecc:	07da      	lsls	r2, r3, #31
 8008ece:	4605      	mov	r5, r0
 8008ed0:	d4e0      	bmi.n	8008e94 <_fflush_r+0xc>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	059b      	lsls	r3, r3, #22
 8008ed6:	d4dd      	bmi.n	8008e94 <_fflush_r+0xc>
 8008ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eda:	f000 f908 	bl	80090ee <__retarget_lock_release_recursive>
 8008ede:	e7d9      	b.n	8008e94 <_fflush_r+0xc>
 8008ee0:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <_fflush_r+0x70>)
 8008ee2:	429c      	cmp	r4, r3
 8008ee4:	d101      	bne.n	8008eea <_fflush_r+0x62>
 8008ee6:	68ac      	ldr	r4, [r5, #8]
 8008ee8:	e7df      	b.n	8008eaa <_fflush_r+0x22>
 8008eea:	4b04      	ldr	r3, [pc, #16]	; (8008efc <_fflush_r+0x74>)
 8008eec:	429c      	cmp	r4, r3
 8008eee:	bf08      	it	eq
 8008ef0:	68ec      	ldreq	r4, [r5, #12]
 8008ef2:	e7da      	b.n	8008eaa <_fflush_r+0x22>
 8008ef4:	080097ec 	.word	0x080097ec
 8008ef8:	0800980c 	.word	0x0800980c
 8008efc:	080097cc 	.word	0x080097cc

08008f00 <std>:
 8008f00:	2300      	movs	r3, #0
 8008f02:	b510      	push	{r4, lr}
 8008f04:	4604      	mov	r4, r0
 8008f06:	e9c0 3300 	strd	r3, r3, [r0]
 8008f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f0e:	6083      	str	r3, [r0, #8]
 8008f10:	8181      	strh	r1, [r0, #12]
 8008f12:	6643      	str	r3, [r0, #100]	; 0x64
 8008f14:	81c2      	strh	r2, [r0, #14]
 8008f16:	6183      	str	r3, [r0, #24]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	2208      	movs	r2, #8
 8008f1c:	305c      	adds	r0, #92	; 0x5c
 8008f1e:	f7fd fb67 	bl	80065f0 <memset>
 8008f22:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <std+0x38>)
 8008f24:	6263      	str	r3, [r4, #36]	; 0x24
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <std+0x3c>)
 8008f28:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <std+0x40>)
 8008f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <std+0x44>)
 8008f30:	6224      	str	r4, [r4, #32]
 8008f32:	6323      	str	r3, [r4, #48]	; 0x30
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	bf00      	nop
 8008f38:	08009255 	.word	0x08009255
 8008f3c:	08009277 	.word	0x08009277
 8008f40:	080092af 	.word	0x080092af
 8008f44:	080092d3 	.word	0x080092d3

08008f48 <_cleanup_r>:
 8008f48:	4901      	ldr	r1, [pc, #4]	; (8008f50 <_cleanup_r+0x8>)
 8008f4a:	f000 b8af 	b.w	80090ac <_fwalk_reent>
 8008f4e:	bf00      	nop
 8008f50:	08008e89 	.word	0x08008e89

08008f54 <__sfmoreglue>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	2268      	movs	r2, #104	; 0x68
 8008f58:	1e4d      	subs	r5, r1, #1
 8008f5a:	4355      	muls	r5, r2
 8008f5c:	460e      	mov	r6, r1
 8008f5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f62:	f7ff fa65 	bl	8008430 <_malloc_r>
 8008f66:	4604      	mov	r4, r0
 8008f68:	b140      	cbz	r0, 8008f7c <__sfmoreglue+0x28>
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	e9c0 1600 	strd	r1, r6, [r0]
 8008f70:	300c      	adds	r0, #12
 8008f72:	60a0      	str	r0, [r4, #8]
 8008f74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f78:	f7fd fb3a 	bl	80065f0 <memset>
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}

08008f80 <__sfp_lock_acquire>:
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <__sfp_lock_acquire+0x8>)
 8008f82:	f000 b8b3 	b.w	80090ec <__retarget_lock_acquire_recursive>
 8008f86:	bf00      	nop
 8008f88:	200003e1 	.word	0x200003e1

08008f8c <__sfp_lock_release>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__sfp_lock_release+0x8>)
 8008f8e:	f000 b8ae 	b.w	80090ee <__retarget_lock_release_recursive>
 8008f92:	bf00      	nop
 8008f94:	200003e1 	.word	0x200003e1

08008f98 <__sinit_lock_acquire>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__sinit_lock_acquire+0x8>)
 8008f9a:	f000 b8a7 	b.w	80090ec <__retarget_lock_acquire_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	200003e2 	.word	0x200003e2

08008fa4 <__sinit_lock_release>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__sinit_lock_release+0x8>)
 8008fa6:	f000 b8a2 	b.w	80090ee <__retarget_lock_release_recursive>
 8008faa:	bf00      	nop
 8008fac:	200003e2 	.word	0x200003e2

08008fb0 <__sinit>:
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	f7ff fff0 	bl	8008f98 <__sinit_lock_acquire>
 8008fb8:	69a3      	ldr	r3, [r4, #24]
 8008fba:	b11b      	cbz	r3, 8008fc4 <__sinit+0x14>
 8008fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc0:	f7ff bff0 	b.w	8008fa4 <__sinit_lock_release>
 8008fc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fc8:	6523      	str	r3, [r4, #80]	; 0x50
 8008fca:	4b13      	ldr	r3, [pc, #76]	; (8009018 <__sinit+0x68>)
 8008fcc:	4a13      	ldr	r2, [pc, #76]	; (800901c <__sinit+0x6c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fd2:	42a3      	cmp	r3, r4
 8008fd4:	bf04      	itt	eq
 8008fd6:	2301      	moveq	r3, #1
 8008fd8:	61a3      	streq	r3, [r4, #24]
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 f820 	bl	8009020 <__sfp>
 8008fe0:	6060      	str	r0, [r4, #4]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 f81c 	bl	8009020 <__sfp>
 8008fe8:	60a0      	str	r0, [r4, #8]
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 f818 	bl	8009020 <__sfp>
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	60e0      	str	r0, [r4, #12]
 8008ff4:	2104      	movs	r1, #4
 8008ff6:	6860      	ldr	r0, [r4, #4]
 8008ff8:	f7ff ff82 	bl	8008f00 <std>
 8008ffc:	68a0      	ldr	r0, [r4, #8]
 8008ffe:	2201      	movs	r2, #1
 8009000:	2109      	movs	r1, #9
 8009002:	f7ff ff7d 	bl	8008f00 <std>
 8009006:	68e0      	ldr	r0, [r4, #12]
 8009008:	2202      	movs	r2, #2
 800900a:	2112      	movs	r1, #18
 800900c:	f7ff ff78 	bl	8008f00 <std>
 8009010:	2301      	movs	r3, #1
 8009012:	61a3      	str	r3, [r4, #24]
 8009014:	e7d2      	b.n	8008fbc <__sinit+0xc>
 8009016:	bf00      	nop
 8009018:	08009454 	.word	0x08009454
 800901c:	08008f49 	.word	0x08008f49

08009020 <__sfp>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	4607      	mov	r7, r0
 8009024:	f7ff ffac 	bl	8008f80 <__sfp_lock_acquire>
 8009028:	4b1e      	ldr	r3, [pc, #120]	; (80090a4 <__sfp+0x84>)
 800902a:	681e      	ldr	r6, [r3, #0]
 800902c:	69b3      	ldr	r3, [r6, #24]
 800902e:	b913      	cbnz	r3, 8009036 <__sfp+0x16>
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff ffbd 	bl	8008fb0 <__sinit>
 8009036:	3648      	adds	r6, #72	; 0x48
 8009038:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800903c:	3b01      	subs	r3, #1
 800903e:	d503      	bpl.n	8009048 <__sfp+0x28>
 8009040:	6833      	ldr	r3, [r6, #0]
 8009042:	b30b      	cbz	r3, 8009088 <__sfp+0x68>
 8009044:	6836      	ldr	r6, [r6, #0]
 8009046:	e7f7      	b.n	8009038 <__sfp+0x18>
 8009048:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800904c:	b9d5      	cbnz	r5, 8009084 <__sfp+0x64>
 800904e:	4b16      	ldr	r3, [pc, #88]	; (80090a8 <__sfp+0x88>)
 8009050:	60e3      	str	r3, [r4, #12]
 8009052:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009056:	6665      	str	r5, [r4, #100]	; 0x64
 8009058:	f000 f847 	bl	80090ea <__retarget_lock_init_recursive>
 800905c:	f7ff ff96 	bl	8008f8c <__sfp_lock_release>
 8009060:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009064:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009068:	6025      	str	r5, [r4, #0]
 800906a:	61a5      	str	r5, [r4, #24]
 800906c:	2208      	movs	r2, #8
 800906e:	4629      	mov	r1, r5
 8009070:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009074:	f7fd fabc 	bl	80065f0 <memset>
 8009078:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800907c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009080:	4620      	mov	r0, r4
 8009082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009084:	3468      	adds	r4, #104	; 0x68
 8009086:	e7d9      	b.n	800903c <__sfp+0x1c>
 8009088:	2104      	movs	r1, #4
 800908a:	4638      	mov	r0, r7
 800908c:	f7ff ff62 	bl	8008f54 <__sfmoreglue>
 8009090:	4604      	mov	r4, r0
 8009092:	6030      	str	r0, [r6, #0]
 8009094:	2800      	cmp	r0, #0
 8009096:	d1d5      	bne.n	8009044 <__sfp+0x24>
 8009098:	f7ff ff78 	bl	8008f8c <__sfp_lock_release>
 800909c:	230c      	movs	r3, #12
 800909e:	603b      	str	r3, [r7, #0]
 80090a0:	e7ee      	b.n	8009080 <__sfp+0x60>
 80090a2:	bf00      	nop
 80090a4:	08009454 	.word	0x08009454
 80090a8:	ffff0001 	.word	0xffff0001

080090ac <_fwalk_reent>:
 80090ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b0:	4606      	mov	r6, r0
 80090b2:	4688      	mov	r8, r1
 80090b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090b8:	2700      	movs	r7, #0
 80090ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090be:	f1b9 0901 	subs.w	r9, r9, #1
 80090c2:	d505      	bpl.n	80090d0 <_fwalk_reent+0x24>
 80090c4:	6824      	ldr	r4, [r4, #0]
 80090c6:	2c00      	cmp	r4, #0
 80090c8:	d1f7      	bne.n	80090ba <_fwalk_reent+0xe>
 80090ca:	4638      	mov	r0, r7
 80090cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d0:	89ab      	ldrh	r3, [r5, #12]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d907      	bls.n	80090e6 <_fwalk_reent+0x3a>
 80090d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090da:	3301      	adds	r3, #1
 80090dc:	d003      	beq.n	80090e6 <_fwalk_reent+0x3a>
 80090de:	4629      	mov	r1, r5
 80090e0:	4630      	mov	r0, r6
 80090e2:	47c0      	blx	r8
 80090e4:	4307      	orrs	r7, r0
 80090e6:	3568      	adds	r5, #104	; 0x68
 80090e8:	e7e9      	b.n	80090be <_fwalk_reent+0x12>

080090ea <__retarget_lock_init_recursive>:
 80090ea:	4770      	bx	lr

080090ec <__retarget_lock_acquire_recursive>:
 80090ec:	4770      	bx	lr

080090ee <__retarget_lock_release_recursive>:
 80090ee:	4770      	bx	lr

080090f0 <__swhatbuf_r>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	460e      	mov	r6, r1
 80090f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f8:	2900      	cmp	r1, #0
 80090fa:	b096      	sub	sp, #88	; 0x58
 80090fc:	4614      	mov	r4, r2
 80090fe:	461d      	mov	r5, r3
 8009100:	da08      	bge.n	8009114 <__swhatbuf_r+0x24>
 8009102:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	602a      	str	r2, [r5, #0]
 800910a:	061a      	lsls	r2, r3, #24
 800910c:	d410      	bmi.n	8009130 <__swhatbuf_r+0x40>
 800910e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009112:	e00e      	b.n	8009132 <__swhatbuf_r+0x42>
 8009114:	466a      	mov	r2, sp
 8009116:	f000 f903 	bl	8009320 <_fstat_r>
 800911a:	2800      	cmp	r0, #0
 800911c:	dbf1      	blt.n	8009102 <__swhatbuf_r+0x12>
 800911e:	9a01      	ldr	r2, [sp, #4]
 8009120:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009124:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009128:	425a      	negs	r2, r3
 800912a:	415a      	adcs	r2, r3
 800912c:	602a      	str	r2, [r5, #0]
 800912e:	e7ee      	b.n	800910e <__swhatbuf_r+0x1e>
 8009130:	2340      	movs	r3, #64	; 0x40
 8009132:	2000      	movs	r0, #0
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	b016      	add	sp, #88	; 0x58
 8009138:	bd70      	pop	{r4, r5, r6, pc}
	...

0800913c <__smakebuf_r>:
 800913c:	898b      	ldrh	r3, [r1, #12]
 800913e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009140:	079d      	lsls	r5, r3, #30
 8009142:	4606      	mov	r6, r0
 8009144:	460c      	mov	r4, r1
 8009146:	d507      	bpl.n	8009158 <__smakebuf_r+0x1c>
 8009148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	2301      	movs	r3, #1
 8009152:	6163      	str	r3, [r4, #20]
 8009154:	b002      	add	sp, #8
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	ab01      	add	r3, sp, #4
 800915a:	466a      	mov	r2, sp
 800915c:	f7ff ffc8 	bl	80090f0 <__swhatbuf_r>
 8009160:	9900      	ldr	r1, [sp, #0]
 8009162:	4605      	mov	r5, r0
 8009164:	4630      	mov	r0, r6
 8009166:	f7ff f963 	bl	8008430 <_malloc_r>
 800916a:	b948      	cbnz	r0, 8009180 <__smakebuf_r+0x44>
 800916c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009170:	059a      	lsls	r2, r3, #22
 8009172:	d4ef      	bmi.n	8009154 <__smakebuf_r+0x18>
 8009174:	f023 0303 	bic.w	r3, r3, #3
 8009178:	f043 0302 	orr.w	r3, r3, #2
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	e7e3      	b.n	8009148 <__smakebuf_r+0xc>
 8009180:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <__smakebuf_r+0x7c>)
 8009182:	62b3      	str	r3, [r6, #40]	; 0x28
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	6020      	str	r0, [r4, #0]
 8009188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918c:	81a3      	strh	r3, [r4, #12]
 800918e:	9b00      	ldr	r3, [sp, #0]
 8009190:	6163      	str	r3, [r4, #20]
 8009192:	9b01      	ldr	r3, [sp, #4]
 8009194:	6120      	str	r0, [r4, #16]
 8009196:	b15b      	cbz	r3, 80091b0 <__smakebuf_r+0x74>
 8009198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800919c:	4630      	mov	r0, r6
 800919e:	f000 f8d1 	bl	8009344 <_isatty_r>
 80091a2:	b128      	cbz	r0, 80091b0 <__smakebuf_r+0x74>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f023 0303 	bic.w	r3, r3, #3
 80091aa:	f043 0301 	orr.w	r3, r3, #1
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	89a0      	ldrh	r0, [r4, #12]
 80091b2:	4305      	orrs	r5, r0
 80091b4:	81a5      	strh	r5, [r4, #12]
 80091b6:	e7cd      	b.n	8009154 <__smakebuf_r+0x18>
 80091b8:	08008f49 	.word	0x08008f49

080091bc <_malloc_usable_size_r>:
 80091bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c0:	1f18      	subs	r0, r3, #4
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfbc      	itt	lt
 80091c6:	580b      	ldrlt	r3, [r1, r0]
 80091c8:	18c0      	addlt	r0, r0, r3
 80091ca:	4770      	bx	lr

080091cc <_raise_r>:
 80091cc:	291f      	cmp	r1, #31
 80091ce:	b538      	push	{r3, r4, r5, lr}
 80091d0:	4604      	mov	r4, r0
 80091d2:	460d      	mov	r5, r1
 80091d4:	d904      	bls.n	80091e0 <_raise_r+0x14>
 80091d6:	2316      	movs	r3, #22
 80091d8:	6003      	str	r3, [r0, #0]
 80091da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091e2:	b112      	cbz	r2, 80091ea <_raise_r+0x1e>
 80091e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091e8:	b94b      	cbnz	r3, 80091fe <_raise_r+0x32>
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 f830 	bl	8009250 <_getpid_r>
 80091f0:	462a      	mov	r2, r5
 80091f2:	4601      	mov	r1, r0
 80091f4:	4620      	mov	r0, r4
 80091f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091fa:	f000 b817 	b.w	800922c <_kill_r>
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d00a      	beq.n	8009218 <_raise_r+0x4c>
 8009202:	1c59      	adds	r1, r3, #1
 8009204:	d103      	bne.n	800920e <_raise_r+0x42>
 8009206:	2316      	movs	r3, #22
 8009208:	6003      	str	r3, [r0, #0]
 800920a:	2001      	movs	r0, #1
 800920c:	e7e7      	b.n	80091de <_raise_r+0x12>
 800920e:	2400      	movs	r4, #0
 8009210:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009214:	4628      	mov	r0, r5
 8009216:	4798      	blx	r3
 8009218:	2000      	movs	r0, #0
 800921a:	e7e0      	b.n	80091de <_raise_r+0x12>

0800921c <raise>:
 800921c:	4b02      	ldr	r3, [pc, #8]	; (8009228 <raise+0xc>)
 800921e:	4601      	mov	r1, r0
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f7ff bfd3 	b.w	80091cc <_raise_r>
 8009226:	bf00      	nop
 8009228:	2000000c 	.word	0x2000000c

0800922c <_kill_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4d07      	ldr	r5, [pc, #28]	; (800924c <_kill_r+0x20>)
 8009230:	2300      	movs	r3, #0
 8009232:	4604      	mov	r4, r0
 8009234:	4608      	mov	r0, r1
 8009236:	4611      	mov	r1, r2
 8009238:	602b      	str	r3, [r5, #0]
 800923a:	f7f8 fd9f 	bl	8001d7c <_kill>
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	d102      	bne.n	8009248 <_kill_r+0x1c>
 8009242:	682b      	ldr	r3, [r5, #0]
 8009244:	b103      	cbz	r3, 8009248 <_kill_r+0x1c>
 8009246:	6023      	str	r3, [r4, #0]
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	bf00      	nop
 800924c:	200003dc 	.word	0x200003dc

08009250 <_getpid_r>:
 8009250:	f7f8 bd8c 	b.w	8001d6c <_getpid>

08009254 <__sread>:
 8009254:	b510      	push	{r4, lr}
 8009256:	460c      	mov	r4, r1
 8009258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925c:	f000 f894 	bl	8009388 <_read_r>
 8009260:	2800      	cmp	r0, #0
 8009262:	bfab      	itete	ge
 8009264:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009266:	89a3      	ldrhlt	r3, [r4, #12]
 8009268:	181b      	addge	r3, r3, r0
 800926a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800926e:	bfac      	ite	ge
 8009270:	6563      	strge	r3, [r4, #84]	; 0x54
 8009272:	81a3      	strhlt	r3, [r4, #12]
 8009274:	bd10      	pop	{r4, pc}

08009276 <__swrite>:
 8009276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927a:	461f      	mov	r7, r3
 800927c:	898b      	ldrh	r3, [r1, #12]
 800927e:	05db      	lsls	r3, r3, #23
 8009280:	4605      	mov	r5, r0
 8009282:	460c      	mov	r4, r1
 8009284:	4616      	mov	r6, r2
 8009286:	d505      	bpl.n	8009294 <__swrite+0x1e>
 8009288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928c:	2302      	movs	r3, #2
 800928e:	2200      	movs	r2, #0
 8009290:	f000 f868 	bl	8009364 <_lseek_r>
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800929a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	4632      	mov	r2, r6
 80092a2:	463b      	mov	r3, r7
 80092a4:	4628      	mov	r0, r5
 80092a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092aa:	f000 b817 	b.w	80092dc <_write_r>

080092ae <__sseek>:
 80092ae:	b510      	push	{r4, lr}
 80092b0:	460c      	mov	r4, r1
 80092b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b6:	f000 f855 	bl	8009364 <_lseek_r>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	bf15      	itete	ne
 80092c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80092c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092ca:	81a3      	strheq	r3, [r4, #12]
 80092cc:	bf18      	it	ne
 80092ce:	81a3      	strhne	r3, [r4, #12]
 80092d0:	bd10      	pop	{r4, pc}

080092d2 <__sclose>:
 80092d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d6:	f000 b813 	b.w	8009300 <_close_r>
	...

080092dc <_write_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4d07      	ldr	r5, [pc, #28]	; (80092fc <_write_r+0x20>)
 80092e0:	4604      	mov	r4, r0
 80092e2:	4608      	mov	r0, r1
 80092e4:	4611      	mov	r1, r2
 80092e6:	2200      	movs	r2, #0
 80092e8:	602a      	str	r2, [r5, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f7f8 fd7d 	bl	8001dea <_write>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_write_r+0x1e>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_write_r+0x1e>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	200003dc 	.word	0x200003dc

08009300 <_close_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	4d06      	ldr	r5, [pc, #24]	; (800931c <_close_r+0x1c>)
 8009304:	2300      	movs	r3, #0
 8009306:	4604      	mov	r4, r0
 8009308:	4608      	mov	r0, r1
 800930a:	602b      	str	r3, [r5, #0]
 800930c:	f7f8 fd89 	bl	8001e22 <_close>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d102      	bne.n	800931a <_close_r+0x1a>
 8009314:	682b      	ldr	r3, [r5, #0]
 8009316:	b103      	cbz	r3, 800931a <_close_r+0x1a>
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	bd38      	pop	{r3, r4, r5, pc}
 800931c:	200003dc 	.word	0x200003dc

08009320 <_fstat_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d07      	ldr	r5, [pc, #28]	; (8009340 <_fstat_r+0x20>)
 8009324:	2300      	movs	r3, #0
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	f7f8 fd84 	bl	8001e3a <_fstat>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d102      	bne.n	800933c <_fstat_r+0x1c>
 8009336:	682b      	ldr	r3, [r5, #0]
 8009338:	b103      	cbz	r3, 800933c <_fstat_r+0x1c>
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	bd38      	pop	{r3, r4, r5, pc}
 800933e:	bf00      	nop
 8009340:	200003dc 	.word	0x200003dc

08009344 <_isatty_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d06      	ldr	r5, [pc, #24]	; (8009360 <_isatty_r+0x1c>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	f7f8 fd83 	bl	8001e5a <_isatty>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d102      	bne.n	800935e <_isatty_r+0x1a>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	b103      	cbz	r3, 800935e <_isatty_r+0x1a>
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	200003dc 	.word	0x200003dc

08009364 <_lseek_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	; (8009384 <_lseek_r+0x20>)
 8009368:	4604      	mov	r4, r0
 800936a:	4608      	mov	r0, r1
 800936c:	4611      	mov	r1, r2
 800936e:	2200      	movs	r2, #0
 8009370:	602a      	str	r2, [r5, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	f7f8 fd7c 	bl	8001e70 <_lseek>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_lseek_r+0x1e>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_lseek_r+0x1e>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	200003dc 	.word	0x200003dc

08009388 <_read_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d07      	ldr	r5, [pc, #28]	; (80093a8 <_read_r+0x20>)
 800938c:	4604      	mov	r4, r0
 800938e:	4608      	mov	r0, r1
 8009390:	4611      	mov	r1, r2
 8009392:	2200      	movs	r2, #0
 8009394:	602a      	str	r2, [r5, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	f7f8 fd0a 	bl	8001db0 <_read>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	d102      	bne.n	80093a6 <_read_r+0x1e>
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	b103      	cbz	r3, 80093a6 <_read_r+0x1e>
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	200003dc 	.word	0x200003dc

080093ac <_init>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	bf00      	nop
 80093b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b2:	bc08      	pop	{r3}
 80093b4:	469e      	mov	lr, r3
 80093b6:	4770      	bx	lr

080093b8 <_fini>:
 80093b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ba:	bf00      	nop
 80093bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093be:	bc08      	pop	{r3}
 80093c0:	469e      	mov	lr, r3
 80093c2:	4770      	bx	lr
