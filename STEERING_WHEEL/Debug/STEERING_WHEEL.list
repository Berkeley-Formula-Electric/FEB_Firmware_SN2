
STEERING_WHEEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a64  08005a64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a6c  08005a6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08005ae4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005ae4  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012710  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c9  00000000  00000000  000327b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00034880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00035910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c25  00000000  00000000  000368f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013937  00000000  00000000  00059515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d646f  00000000  00000000  0006ce4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001432bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b9c  00000000  00000000  0014330c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059a8 	.word	0x080059a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080059a8 	.word	0x080059a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <assign_filter_array>:
const FilterArrayLength RMS_RX_NUM = 1;

const AddressIdType IVPDB_RX_ID[] = {SW_ID};
const FilterArrayLength IVPDB_RX_NUM = 1;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3b01      	subs	r3, #1
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d815      	bhi.n	80005f0 <assign_filter_array+0x3c>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <assign_filter_array+0x18>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005e1 	.word	0x080005e1
 80005d0:	080005f1 	.word	0x080005f1
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	080005e9 	.word	0x080005e9
 80005dc:	080005ed 	.word	0x080005ed
        case BMS_ID:
            return BMS_RX_ID;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <assign_filter_array+0x4c>)
 80005e2:	e006      	b.n	80005f2 <assign_filter_array+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <assign_filter_array+0x50>)
 80005e6:	e004      	b.n	80005f2 <assign_filter_array+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_ID;
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <assign_filter_array+0x54>)
 80005ea:	e002      	b.n	80005f2 <assign_filter_array+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_ID;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <assign_filter_array+0x58>)
 80005ee:	e000      	b.n	80005f2 <assign_filter_array+0x3e>
            break;
    }
    return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	08005a04 	.word	0x08005a04
 8000604:	08005a08 	.word	0x08005a08
 8000608:	08005a10 	.word	0x08005a10
 800060c:	08005a14 	.word	0x08005a14

08000610 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	2b04      	cmp	r3, #4
 800061e:	d815      	bhi.n	800064c <assign_filter_array_legnth+0x3c>
 8000620:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <assign_filter_array_legnth+0x18>)
 8000622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000626:	bf00      	nop
 8000628:	0800063d 	.word	0x0800063d
 800062c:	0800064d 	.word	0x0800064d
 8000630:	08000641 	.word	0x08000641
 8000634:	08000645 	.word	0x08000645
 8000638:	08000649 	.word	0x08000649
        case BMS_ID:
            return BMS_RX_NUM;
 800063c:	2301      	movs	r3, #1
 800063e:	e006      	b.n	800064e <assign_filter_array_legnth+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8000640:	2302      	movs	r3, #2
 8000642:	e004      	b.n	800064e <assign_filter_array_legnth+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_NUM;
 8000644:	2301      	movs	r3, #1
 8000646:	e002      	b.n	800064e <assign_filter_array_legnth+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_NUM;
 8000648:	2301      	movs	r3, #1
 800064a:	e000      	b.n	800064e <assign_filter_array_legnth+0x3e>
            break;
    }
    return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <FEB_CAN_Filter_Config>:
uint8_t TxData[8];
uint8_t RxData[8];
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b090      	sub	sp, #64	; 0x40
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	4611      	mov	r1, r2
 8000668:	461a      	mov	r2, r3
 800066a:	460b      	mov	r3, r1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	4613      	mov	r3, r2
 8000670:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 8000672:	2300      	movs	r3, #0
 8000674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000676:	e027      	b.n	80006c8 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000678:	2301      	movs	r3, #1
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8000684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	4413      	add	r3, r2
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	025b      	lsls	r3, r3, #9
 8000690:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 8000696:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800069a:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80006a4:	2301      	movs	r3, #1
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 80006a8:	231b      	movs	r3, #27
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f001 f846 	bl	8001744 <HAL_CAN_ConfigFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 80006be:	f000 fc67 	bl	8000f90 <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 80006c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006c4:	3301      	adds	r3, #1
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbd3      	blt.n	8000678 <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3740      	adds	r7, #64	; 0x40
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <FEB_CAN_Init+0x80>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d104      	bne.n	80006fa <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	e008      	b.n	800070c <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <FEB_CAN_Init+0x84>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d103      	bne.n	800070c <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 8000704:	2301      	movs	r3, #1
 8000706:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8000708:	2310      	movs	r3, #16
 800070a:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <FEB_CAN_Init+0x88>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <FEB_CAN_Init+0x88>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <FEB_CAN_Init+0x88>)
 800071a:	2200      	movs	r2, #0
 800071c:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 800071e:	6838      	ldr	r0, [r7, #0]
 8000720:	f7ff ff48 	bl	80005b4 <assign_filter_array>
 8000724:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 8000726:	6838      	ldr	r0, [r7, #0]
 8000728:	f7ff ff72 	bl	8000610 <assign_filter_array_legnth>
 800072c:	4603      	mov	r3, r0
 800072e:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	7afa      	ldrb	r2, [r7, #11]
 8000734:	68f9      	ldr	r1, [r7, #12]
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff90 	bl	800065c <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f001 f8e1 	bl	8001904 <HAL_CAN_Start>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <FEB_CAN_Init+0x70>
	  Error_Handler();
 8000748:	f000 fc22 	bl	8000f90 <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 800074c:	6939      	ldr	r1, [r7, #16]
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f001 fa2c 	bl	8001bac <HAL_CAN_ActivateNotification>

}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40006400 	.word	0x40006400
 8000760:	40006800 	.word	0x40006800
 8000764:	2000008c 	.word	0x2000008c

08000768 <FEB_CAN_Transmit>:
		Error_Handler();
	}
	store_msg(&RxHeader, RxData);
}

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	461a      	mov	r2, r3
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	480f      	ldr	r0, [pc, #60]	; (80007bc <FEB_CAN_Transmit+0x54>)
 800077e:	f004 fc9d 	bl	80050bc <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <FEB_CAN_Transmit+0x58>)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <FEB_CAN_Transmit+0x58>)
 800078c:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 800078e:	bf00      	nop
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f001 f9d6 	bl	8001b42 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f9      	beq.n	8000790 <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <FEB_CAN_Transmit+0x5c>)
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <FEB_CAN_Transmit+0x54>)
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <FEB_CAN_Transmit+0x58>)
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f001 f8f2 	bl	800198c <HAL_CAN_AddTxMessage>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 80007ae:	f000 fbef 	bl	8000f90 <Error_Handler>
	}
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000a4 	.word	0x200000a4
 80007c0:	2000008c 	.word	0x2000008c
 80007c4:	200000ac 	.word	0x200000ac

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b0a9      	sub	sp, #164	; 0xa4
 80007cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fe27 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f98f 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 fb43 	bl	8000e60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007da:	f000 fb17 	bl	8000e0c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007de:	f000 fa2b 	bl	8000c38 <MX_I2C1_Init>
  MX_TIM14_Init();
 80007e2:	f000 faef 	bl	8000dc4 <MX_TIM14_Init>
  MX_TIM2_Init();
 80007e6:	f000 fa55 	bl	8000c94 <MX_TIM2_Init>
  MX_CAN1_Init();
 80007ea:	f000 f9ef 	bl	8000bcc <MX_CAN1_Init>
  MX_TIM13_Init();
 80007ee:	f000 fac5 	bl	8000d7c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  bool ready_to_drive = false;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  bool last_button_state = false;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool lock = false;
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

  bool lastButton_4 = 0; // coolant pump
 8000804:	2300      	movs	r3, #0
 8000806:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
  bool lastButton_5 = 0; // acumulator fans
 800080a:	2300      	movs	r3, #0
 800080c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  bool lastButton_6 = 0; // extra
 8000810:	2300      	movs	r3, #0
 8000812:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  bool lock_4 = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  bool lock_5 = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  bool lock_6 = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  bool coolant_pump = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  bool accumulator_fans = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  bool extra = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  int buf_len;
  //uint8_t data1;
  uint8_t data2;
  HAL_StatusTypeDef ret;

  HAL_TIM_Base_Start_IT(&htim13);
 800083a:	48a4      	ldr	r0, [pc, #656]	; (8000acc <main+0x304>)
 800083c:	f003 f838 	bl	80038b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim13);
 8000840:	48a2      	ldr	r0, [pc, #648]	; (8000acc <main+0x304>)
 8000842:	f003 f8a5 	bl	8003990 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000846:	48a2      	ldr	r0, [pc, #648]	; (8000ad0 <main+0x308>)
 8000848:	f003 f832 	bl	80038b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim14);
 800084c:	48a0      	ldr	r0, [pc, #640]	; (8000ad0 <main+0x308>)
 800084e:	f003 f89f 	bl	8003990 <HAL_TIM_Base_Stop_IT>
  Button_Checking = false;
 8000852:	4ba0      	ldr	r3, [pc, #640]	; (8000ad4 <main+0x30c>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
  Button_Timer_Flag = false;
 8000858:	4b9f      	ldr	r3, [pc, #636]	; (8000ad8 <main+0x310>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
  // 0% PWM cycle to turnoff buzzer
  htim2.Instance->CCR2 = 0;
 800085e:	4b9f      	ldr	r3, [pc, #636]	; (8000adc <main+0x314>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2200      	movs	r2, #0
 8000864:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000866:	2104      	movs	r1, #4
 8000868:	489c      	ldr	r0, [pc, #624]	; (8000adc <main+0x314>)
 800086a:	f003 f919 	bl	8003aa0 <HAL_TIM_PWM_Start>


  FEB_CAN_Init(&hcan1, SW_ID);
 800086e:	2102      	movs	r1, #2
 8000870:	489b      	ldr	r0, [pc, #620]	; (8000ae0 <main+0x318>)
 8000872:	f7ff ff33 	bl	80006dc <FEB_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 8000876:	200a      	movs	r0, #10
 8000878:	f000 fe44 	bl	8001504 <HAL_Delay>
	  // read both IOexpanders
//	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP1_ADDR, &data1, 1, HAL_MAX_DELAY);
//	  if ( ret != HAL_OK ) {
//		  buf_len = sprintf((char*)buf, "IO_1 Error\r\n");
//	  }
	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP2_ADDR, &data2, 1, HAL_MAX_DELAY);
 800087c:	2342      	movs	r3, #66	; 0x42
 800087e:	b299      	uxth	r1, r3
 8000880:	1cfa      	adds	r2, r7, #3
 8000882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2301      	movs	r3, #1
 800088a:	4896      	ldr	r0, [pc, #600]	; (8000ae4 <main+0x31c>)
 800088c:	f001 fdb8 	bl	8002400 <HAL_I2C_Master_Receive>
 8000890:	4603      	mov	r3, r0
 8000892:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  if ( ret != HAL_OK ) {
 8000896:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800089a:	2b00      	cmp	r3, #0
 800089c:	d006      	beq.n	80008ac <main+0xe4>
		  buf_len = sprintf((char*)buf, "IO_2 Error\r\n");
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4991      	ldr	r1, [pc, #580]	; (8000ae8 <main+0x320>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fc20 	bl	80050e8 <siprintf>
 80008a8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
//		  HAL_TIM_Base_Start_IT(&htim14);
//		  // turn on buzzer with 30% PWM cycle
//		  htim2.Instance->CCR2 = VOLUME;
//	  }

	  if (!(data2 & (1<<1))) { // BUT_4 -> IO2 P1, coolant pump
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d123      	bne.n	80008fe <main+0x136>
		  if (!lastButton_4) {
 80008b6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80008ba:	f083 0301 	eor.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d018      	beq.n	80008f6 <main+0x12e>
			  lock_4 = true;
 80008c4:	2301      	movs	r3, #1
 80008c6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  coolant_pump = !coolant_pump;
 80008ca:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf14      	ite	ne
 80008d2:	2301      	movne	r3, #1
 80008d4:	2300      	moveq	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			  FEB_CAN_Transmit(&hcan1, SW_COOLANT_PUMP, (uint8_t *) &coolant_pump, 1);
 80008e8:	f107 0286 	add.w	r2, r7, #134	; 0x86
 80008ec:	2301      	movs	r3, #1
 80008ee:	2121      	movs	r1, #33	; 0x21
 80008f0:	487b      	ldr	r0, [pc, #492]	; (8000ae0 <main+0x318>)
 80008f2:	f7ff ff39 	bl	8000768 <FEB_CAN_Transmit>
		  }
		  lastButton_4 = true;
 80008f6:	2301      	movs	r3, #1
 80008f8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80008fc:	e009      	b.n	8000912 <main+0x14a>
	  } else {
		  if (lastButton_4) {
 80008fe:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000902:	2b00      	cmp	r3, #0
 8000904:	d002      	beq.n	800090c <main+0x144>
			  lock_4 = false;
 8000906:	2300      	movs	r3, #0
 8000908:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		  }
		  lastButton_4 = false;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	  }

	  if (!(data2 & (1<<2))) { // BUT_5 -> IO2 P2, accumulator fans
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	2b00      	cmp	r3, #0
 800091a:	d123      	bne.n	8000964 <main+0x19c>
		  if (!lastButton_5) {
 800091c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000920:	f083 0301 	eor.w	r3, r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d018      	beq.n	800095c <main+0x194>
			  lock_5 = true;
 800092a:	2301      	movs	r3, #1
 800092c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  accumulator_fans = !accumulator_fans;
 8000930:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f083 0301 	eor.w	r3, r3, #1
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	b2db      	uxtb	r3, r3
 800094a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			  FEB_CAN_Transmit(&hcan1, SW_ACUMULATOR_FANS, (uint8_t *) &accumulator_fans, 1);
 800094e:	f107 0285 	add.w	r2, r7, #133	; 0x85
 8000952:	2301      	movs	r3, #1
 8000954:	2122      	movs	r1, #34	; 0x22
 8000956:	4862      	ldr	r0, [pc, #392]	; (8000ae0 <main+0x318>)
 8000958:	f7ff ff06 	bl	8000768 <FEB_CAN_Transmit>
		  }
		  lastButton_5 = true;
 800095c:	2301      	movs	r3, #1
 800095e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8000962:	e009      	b.n	8000978 <main+0x1b0>
	  } else {
		  if (lastButton_5) {
 8000964:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <main+0x1aa>
			  lock_5 = false;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		  }
		  lastButton_5 = false;
 8000972:	2300      	movs	r3, #0
 8000974:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	  }

	  if (!(data2 & (1<<3))) { // BUT_6 -> IO2 P3, extra
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	2b00      	cmp	r3, #0
 8000980:	d123      	bne.n	80009ca <main+0x202>
		  if (!lastButton_6) {
 8000982:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000986:	f083 0301 	eor.w	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d018      	beq.n	80009c2 <main+0x1fa>
			  lock_6 = true;
 8000990:	2301      	movs	r3, #1
 8000992:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  extra = !extra;
 8000996:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800099a:	2b00      	cmp	r3, #0
 800099c:	bf14      	ite	ne
 800099e:	2301      	movne	r3, #1
 80009a0:	2300      	moveq	r3, #0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	f083 0301 	eor.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			  FEB_CAN_Transmit(&hcan1, SW_EXTRA, (uint8_t *) &extra, 1);
 80009b4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80009b8:	2301      	movs	r3, #1
 80009ba:	2123      	movs	r1, #35	; 0x23
 80009bc:	4848      	ldr	r0, [pc, #288]	; (8000ae0 <main+0x318>)
 80009be:	f7ff fed3 	bl	8000768 <FEB_CAN_Transmit>
		  }
		  lastButton_6 = true;
 80009c2:	2301      	movs	r3, #1
 80009c4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80009c8:	e009      	b.n	80009de <main+0x216>
	  } else {
		  if (lastButton_6) {
 80009ca:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <main+0x210>
			  lock_6 = false;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
		  }
		  lastButton_6 = false;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  }

	  if (!(data2 & (1<<0))) { // BUT_3 -> IO2 P0, ready to drive
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d145      	bne.n	8000a74 <main+0x2ac>
//		  buf_len = sprintf((char*)buf, "BUT_3\r\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);

		  // if the system is not checking a button, start the timer to check the timer
		  if (!Button_Checking && (last_button_state == false) && !lock) {
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <main+0x30c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	f083 0301 	eor.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d013      	beq.n	8000a1e <main+0x256>
 80009f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80009fa:	f083 0301 	eor.w	r3, r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00c      	beq.n	8000a1e <main+0x256>
 8000a04:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000a08:	f083 0301 	eor.w	r3, r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d005      	beq.n	8000a1e <main+0x256>
			  // Start timer to count 1 sec hold time
			  HAL_TIM_Base_Start_IT(&htim13);
 8000a12:	482e      	ldr	r0, [pc, #184]	; (8000acc <main+0x304>)
 8000a14:	f002 ff4c 	bl	80038b0 <HAL_TIM_Base_Start_IT>
			  Button_Checking = true;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <main+0x30c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "starting timer 13\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }
		  // if 1 sec has elapsed, and this button is still pressed, it is a valid action
		  // turn on buzzer and send CAN msg, reset states
		  if (Button_Timer_Flag) {
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <main+0x310>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d022      	beq.n	8000a6c <main+0x2a4>
			  ready_to_drive = !ready_to_drive;
 8000a26:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf14      	ite	ne
 8000a2e:	2301      	movne	r3, #1
 8000a30:	2300      	moveq	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	f083 0301 	eor.w	r3, r3, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			  // when the ready_to_drive state is just changed, lock from changing again
			  lock = true;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

			  // start timer for buzzer
			  HAL_TIM_Base_Start_IT(&htim14);
 8000a4a:	4821      	ldr	r0, [pc, #132]	; (8000ad0 <main+0x308>)
 8000a4c:	f002 ff30 	bl	80038b0 <HAL_TIM_Base_Start_IT>
			  // turn on buzzer at VOLUME
			  htim2.Instance->CCR2 = VOLUME;
 8000a50:	2202      	movs	r2, #2
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <main+0x314>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	639a      	str	r2, [r3, #56]	; 0x38

			  FEB_CAN_Transmit(&hcan1, SW_READY_TO_DRIVE, (uint8_t *) &ready_to_drive, 1);
 8000a58:	f107 0287 	add.w	r2, r7, #135	; 0x87
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	2120      	movs	r1, #32
 8000a60:	481f      	ldr	r0, [pc, #124]	; (8000ae0 <main+0x318>)
 8000a62:	f7ff fe81 	bl	8000768 <FEB_CAN_Transmit>

			  Button_Timer_Flag = false;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <main+0x310>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "staring timer 14\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }

		  //record button state
		  last_button_state = true;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000a72:	e00c      	b.n	8000a8e <main+0x2c6>

	  } else {
		  Button_Timer_Flag = false;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <main+0x310>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]

		  // allow ready_to_drive to change when button is released.
		  if (last_button_state) {
 8000a7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d005      	beq.n	8000a8e <main+0x2c6>
			  last_button_state = false;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  lock = false;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		  }
	  }
//	  buf_len = sprintf((char*)buf, "check:%d flag:%d\r\n", Button_Checking, Button_Timer_Flag);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	  buf_len = sprintf((char*)buf, "ready: %d coolant: %d accumulator: %d extra: %d\r\n", ready_to_drive, coolant_pump, accumulator_fans, extra);
 8000a8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a92:	4619      	mov	r1, r3
 8000a94:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000a98:	461c      	mov	r4, r3
 8000a9a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000a9e:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8000aa2:	1d38      	adds	r0, r7, #4
 8000aa4:	9201      	str	r2, [sp, #4]
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	4623      	mov	r3, r4
 8000aaa:	460a      	mov	r2, r1
 8000aac:	490f      	ldr	r1, [pc, #60]	; (8000aec <main+0x324>)
 8000aae:	f004 fb1b 	bl	80050e8 <siprintf>
 8000ab2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8000ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	1d39      	adds	r1, r7, #4
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <main+0x328>)
 8000ac4:	f003 ff5b 	bl	800497e <HAL_UART_Transmit>
	  HAL_Delay(10);
 8000ac8:	e6d5      	b.n	8000876 <main+0xae>
 8000aca:	bf00      	nop
 8000acc:	20000174 	.word	0x20000174
 8000ad0:	200001bc 	.word	0x200001bc
 8000ad4:	20000248 	.word	0x20000248
 8000ad8:	20000249 	.word	0x20000249
 8000adc:	2000012c 	.word	0x2000012c
 8000ae0:	200000b0 	.word	0x200000b0
 8000ae4:	200000d8 	.word	0x200000d8
 8000ae8:	080059c0 	.word	0x080059c0
 8000aec:	080059d0 	.word	0x080059d0
 8000af0:	20000204 	.word	0x20000204

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	; 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2234      	movs	r2, #52	; 0x34
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 fae8 	bl	80050d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a28      	ldr	r2, [pc, #160]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b64:	2304      	movs	r3, #4
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b68:	23a0      	movs	r3, #160	; 0xa0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 fba9 	bl	80032d4 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b88:	f000 fa02 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2105      	movs	r1, #5
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 f848 	bl	8002c40 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bb6:	f000 f9eb 	bl	8000f90 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	; 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bd2:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <MX_CAN1_Init+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bd8:	2210      	movs	r2, #16
 8000bda:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000c1c:	f000 fc96 	bl	800154c <HAL_CAN_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c26:	f000 f9b3 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000b0 	.word	0x200000b0
 8000c34:	40006400 	.word	0x40006400

08000c38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c3e:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <MX_I2C1_Init+0x54>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <MX_I2C1_Init+0x58>)
 8000c46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_I2C1_Init+0x50>)
 8000c76:	f001 fa7f 	bl	8002178 <HAL_I2C_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f000 f986 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000d8 	.word	0x200000d8
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	000186a0 	.word	0x000186a0

08000c94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08e      	sub	sp, #56	; 0x38
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000cce:	229f      	movs	r2, #159	; 0x9f
 8000cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000cda:	2263      	movs	r2, #99	; 0x63
 8000cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cea:	4823      	ldr	r0, [pc, #140]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000cec:	f002 fd90 	bl	8003810 <HAL_TIM_Base_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000cf6:	f000 f94b 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d04:	4619      	mov	r1, r3
 8000d06:	481c      	ldr	r0, [pc, #112]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000d08:	f003 f95c 	bl	8003fc4 <HAL_TIM_ConfigClockSource>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d12:	f000 f93d 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000d18:	f002 fe69 	bl	80039ee <HAL_TIM_PWM_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d22:	f000 f935 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	4619      	mov	r1, r3
 8000d34:	4810      	ldr	r0, [pc, #64]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000d36:	f003 fd45 	bl	80047c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000d40:	f000 f926 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d44:	2360      	movs	r3, #96	; 0x60
 8000d46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000d48:	2364      	movs	r3, #100	; 0x64
 8000d4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2204      	movs	r2, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000d5c:	f003 f870 	bl	8003e40 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000d66:	f000 f913 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d6a:	4803      	ldr	r0, [pc, #12]	; (8000d78 <MX_TIM2_Init+0xe4>)
 8000d6c:	f000 fa28 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000d70:	bf00      	nop
 8000d72:	3738      	adds	r7, #56	; 0x38
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000012c 	.word	0x2000012c

08000d7c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_TIM13_Init+0x40>)
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <MX_TIM13_Init+0x44>)
 8000d84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8000-1;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <MX_TIM13_Init+0x40>)
 8000d88:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d8c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_TIM13_Init+0x40>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_TIM13_Init+0x40>)
 8000d96:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d9a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <MX_TIM13_Init+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_TIM13_Init+0x40>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_TIM13_Init+0x40>)
 8000daa:	f002 fd31 	bl	8003810 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000db4:	f000 f8ec 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000174 	.word	0x20000174
 8000dc0:	40001c00 	.word	0x40001c00

08000dc4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_TIM14_Init+0x40>)
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <MX_TIM14_Init+0x44>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_TIM14_Init+0x40>)
 8000dd0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dd4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_TIM14_Init+0x40>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 15000-1;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_TIM14_Init+0x40>)
 8000dde:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000de2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_TIM14_Init+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_TIM14_Init+0x40>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_TIM14_Init+0x40>)
 8000df2:	f002 fd0d 	bl	8003810 <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000dfc:	f000 f8c8 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200001bc 	.word	0x200001bc
 8000e08:	40002000 	.word	0x40002000

08000e0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <MX_USART2_UART_Init+0x50>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_USART2_UART_Init+0x4c>)
 8000e44:	f003 fd4e 	bl	80048e4 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e4e:	f000 f89f 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000204 	.word	0x20000204
 8000e5c:	40004400 	.word	0x40004400

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a2c      	ldr	r2, [pc, #176]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2120      	movs	r1, #32
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000eec:	f001 f92a 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ef6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	480c      	ldr	r0, [pc, #48]	; (8000f38 <MX_GPIO_Init+0xd8>)
 8000f08:	f000 ff88 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000f24:	f000 ff7a 	bl	8001e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020800 	.word	0x40020800

08000f3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
//	char buf[10];
//	int buf_len;

	// timer for button
	// if 1 sec has passed since the first detection of button pressed, go back to not checking state
	if (htim == &htim13) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d108      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x22>
	  Button_Checking = false;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
	  Button_Timer_Flag = true;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim13);
 8000f58:	4808      	ldr	r0, [pc, #32]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f5a:	f002 fd19 	bl	8003990 <HAL_TIM_Base_Stop_IT>
//	  buf_len = sprintf((char*)buf, "Timer13\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}

	// timer for buzzer
	if (htim == &htim14)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
	  // turn off buzzer
	  htim2.Instance->CCR2 = 0;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	639a      	str	r2, [r3, #56]	; 0x38
	  // Stop timer
	  HAL_TIM_Base_Stop_IT(&htim14);
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f70:	f002 fd0e 	bl	8003990 <HAL_TIM_Base_Stop_IT>

//	  buf_len = sprintf((char*)buf, "Timer14\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000174 	.word	0x20000174
 8000f80:	20000248 	.word	0x20000248
 8000f84:	20000249 	.word	0x20000249
 8000f88:	200001bc 	.word	0x200001bc
 8000f8c:	2000012c 	.word	0x2000012c

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f000 fedc 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800

08000fec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a19      	ldr	r2, [pc, #100]	; (8001070 <HAL_CAN_MspInit+0x84>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12c      	bne.n	8001068 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_CAN_MspInit+0x88>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_CAN_MspInit+0x88>)
 8001018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_CAN_MspInit+0x88>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_CAN_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_CAN_MspInit+0x88>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_CAN_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001046:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001058:	2309      	movs	r3, #9
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_CAN_MspInit+0x8c>)
 8001064:	f000 feda 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40006400 	.word	0x40006400
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_I2C_MspInit+0x84>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12c      	bne.n	80010f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010cc:	2304      	movs	r3, #4
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <HAL_I2C_MspInit+0x8c>)
 80010d8:	f000 fea0 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40005400 	.word	0x40005400
 8001104:	40023800 	.word	0x40023800
 8001108:	40020400 	.word	0x40020400

0800110c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800111c:	d10e      	bne.n	800113c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <HAL_TIM_Base_MspInit+0xa8>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <HAL_TIM_Base_MspInit+0xa8>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <HAL_TIM_Base_MspInit+0xa8>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800113a:	e036      	b.n	80011aa <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <HAL_TIM_Base_MspInit+0xac>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d116      	bne.n	8001174 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_TIM_Base_MspInit+0xa8>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <HAL_TIM_Base_MspInit+0xa8>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_TIM_Base_MspInit+0xa8>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	202c      	movs	r0, #44	; 0x2c
 8001168:	f000 fe21 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800116c:	202c      	movs	r0, #44	; 0x2c
 800116e:	f000 fe3a 	bl	8001de6 <HAL_NVIC_EnableIRQ>
}
 8001172:	e01a      	b.n	80011aa <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_TIM_Base_MspInit+0xb0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d115      	bne.n	80011aa <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_TIM_Base_MspInit+0xa8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_TIM_Base_MspInit+0xa8>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_TIM_Base_MspInit+0xa8>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	202d      	movs	r0, #45	; 0x2d
 80011a0:	f000 fe05 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80011a4:	202d      	movs	r0, #45	; 0x2d
 80011a6:	f000 fe1e 	bl	8001de6 <HAL_NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40001c00 	.word	0x40001c00
 80011bc:	40002000 	.word	0x40002000

080011c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e0:	d11d      	bne.n	800121e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_TIM_MspPostInit+0x68>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <HAL_TIM_MspPostInit+0x68>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_TIM_MspPostInit+0x68>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011fe:	2302      	movs	r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800120e:	2301      	movs	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4619      	mov	r1, r3
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <HAL_TIM_MspPostInit+0x6c>)
 800121a:	f000 fdff 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <HAL_UART_MspInit+0x84>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d12b      	bne.n	80012aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_UART_MspInit+0x88>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <HAL_UART_MspInit+0x88>)
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_UART_MspInit+0x88>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_UART_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <HAL_UART_MspInit+0x88>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_UART_MspInit+0x88>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800128a:	230c      	movs	r3, #12
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129a:	2307      	movs	r3, #7
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <HAL_UART_MspInit+0x8c>)
 80012a6:	f000 fdb9 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f000 f8da 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800131a:	f002 fc89 	bl	8003c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000174 	.word	0x20000174

08001328 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800132e:	f002 fc7f 	bl	8003c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200001bc 	.word	0x200001bc

0800133c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001344:	4a14      	ldr	r2, [pc, #80]	; (8001398 <_sbrk+0x5c>)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <_sbrk+0x60>)
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_sbrk+0x64>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <_sbrk+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800136c:	f003 fe7c 	bl	8005068 <__errno>
 8001370:	4603      	mov	r3, r0
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137a:	e009      	b.n	8001390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <_sbrk+0x64>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <_sbrk+0x64>)
 800138c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20020000 	.word	0x20020000
 800139c:	00000400 	.word	0x00000400
 80013a0:	2000024c 	.word	0x2000024c
 80013a4:	20000268 	.word	0x20000268

080013a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SystemInit+0x20>)
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <SystemInit+0x20>)
 80013b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013d2:	490e      	ldr	r1, [pc, #56]	; (800140c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e8:	4c0b      	ldr	r4, [pc, #44]	; (8001418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f6:	f7ff ffd7 	bl	80013a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f003 fe3b 	bl	8005074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff f9e3 	bl	80007c8 <main>
  bx  lr    
 8001402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001410:	08005a74 	.word	0x08005a74
  ldr r2, =_sbss
 8001414:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001418:	20000264 	.word	0x20000264

0800141c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <HAL_Init+0x40>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_Init+0x40>)
 8001436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x40>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 fca5 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fda2 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fcbd 	bl	8001e02 <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a0:	f000 fc85 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000250 	.word	0x20000250

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000250 	.word	0x20000250

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0ed      	b.n	800173a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fd3e 	bl	8000fec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001580:	f7ff ffb4 	bl	80014ec <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001586:	e012      	b.n	80015ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001588:	f7ff ffb0 	bl	80014ec <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b0a      	cmp	r3, #10
 8001594:	d90b      	bls.n	80015ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2205      	movs	r2, #5
 80015a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0c5      	b.n	800173a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0e5      	beq.n	8001588 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0202 	bic.w	r2, r2, #2
 80015ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015cc:	f7ff ff8e 	bl	80014ec <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015d2:	e012      	b.n	80015fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d4:	f7ff ff8a 	bl	80014ec <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b0a      	cmp	r3, #10
 80015e0:	d90b      	bls.n	80015fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2205      	movs	r2, #5
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e09f      	b.n	800173a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1e5      	bne.n	80015d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7e1b      	ldrb	r3, [r3, #24]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d108      	bne.n	8001622 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	e007      	b.n	8001632 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7e5b      	ldrb	r3, [r3, #25]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d108      	bne.n	800164c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e007      	b.n	800165c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800165a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e9b      	ldrb	r3, [r3, #26]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d108      	bne.n	8001676 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e007      	b.n	8001686 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0220 	bic.w	r2, r2, #32
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7edb      	ldrb	r3, [r3, #27]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0210 	bic.w	r2, r2, #16
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e007      	b.n	80016b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0210 	orr.w	r2, r2, #16
 80016ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7f1b      	ldrb	r3, [r3, #28]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d108      	bne.n	80016ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0208 	orr.w	r2, r2, #8
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e007      	b.n	80016da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0208 	bic.w	r2, r2, #8
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7f5b      	ldrb	r3, [r3, #29]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d108      	bne.n	80016f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0204 	orr.w	r2, r2, #4
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e007      	b.n	8001704 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0204 	bic.w	r2, r2, #4
 8001702:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	ea42 0103 	orr.w	r1, r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	1e5a      	subs	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800175c:	7cfb      	ldrb	r3, [r7, #19]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d003      	beq.n	800176a <HAL_CAN_ConfigFilter+0x26>
 8001762:	7cfb      	ldrb	r3, [r7, #19]
 8001764:	2b02      	cmp	r3, #2
 8001766:	f040 80be 	bne.w	80018e6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800176a:	4b65      	ldr	r3, [pc, #404]	; (8001900 <HAL_CAN_ConfigFilter+0x1bc>)
 800176c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001774:	f043 0201 	orr.w	r2, r3, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001784:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	431a      	orrs	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	2201      	movs	r2, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	401a      	ands	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d123      	bne.n	8001814 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3248      	adds	r2, #72	; 0x48
 80017f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001808:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800180a:	6979      	ldr	r1, [r7, #20]
 800180c:	3348      	adds	r3, #72	; 0x48
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d122      	bne.n	8001862 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800183c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3248      	adds	r2, #72	; 0x48
 8001842:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001856:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001858:	6979      	ldr	r1, [r7, #20]
 800185a:	3348      	adds	r3, #72	; 0x48
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	401a      	ands	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800187c:	e007      	b.n	800188e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	431a      	orrs	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43db      	mvns	r3, r3
 80018a0:	401a      	ands	r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018a8:	e007      	b.n	80018ba <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018d8:	f023 0201 	bic.w	r2, r3, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e006      	b.n	80018f4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
  }
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40006400 	.word	0x40006400

08001904 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d12e      	bne.n	8001976 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001930:	f7ff fddc 	bl	80014ec <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001936:	e012      	b.n	800195e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001938:	f7ff fdd8 	bl	80014ec <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d90b      	bls.n	800195e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e012      	b.n	8001984 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e5      	bne.n	8001938 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e006      	b.n	8001984 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d003      	beq.n	80019b8 <HAL_CAN_AddTxMessage+0x2c>
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	f040 80b8 	bne.w	8001b28 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10a      	bne.n	80019d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80a0 	beq.w	8001b18 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	0e1b      	lsrs	r3, r3, #24
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d907      	bls.n	80019f8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e09e      	b.n	8001b36 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019f8:	2201      	movs	r2, #1
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	409a      	lsls	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a14:	68f9      	ldr	r1, [r7, #12]
 8001a16:	6809      	ldr	r1, [r1, #0]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3318      	adds	r3, #24
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	440b      	add	r3, r1
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e00f      	b.n	8001a46 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a30:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a3a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3318      	adds	r3, #24
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	440b      	add	r3, r1
 8001a44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6819      	ldr	r1, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3318      	adds	r3, #24
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	440b      	add	r3, r1
 8001a56:	3304      	adds	r3, #4
 8001a58:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	7d1b      	ldrb	r3, [r3, #20]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d111      	bne.n	8001a86 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3318      	adds	r3, #24
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3304      	adds	r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	6811      	ldr	r1, [r2, #0]
 8001a76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3318      	adds	r3, #24
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	440b      	add	r3, r1
 8001a82:	3304      	adds	r3, #4
 8001a84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3307      	adds	r3, #7
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	061a      	lsls	r2, r3, #24
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3306      	adds	r3, #6
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	041b      	lsls	r3, r3, #16
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3305      	adds	r3, #5
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	3204      	adds	r2, #4
 8001aa6:	7812      	ldrb	r2, [r2, #0]
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	6811      	ldr	r1, [r2, #0]
 8001aae:	ea43 0200 	orr.w	r2, r3, r0
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001abc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	061a      	lsls	r2, r3, #24
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	4610      	mov	r0, r2
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	6811      	ldr	r1, [r2, #0]
 8001ae4:	ea43 0200 	orr.w	r2, r3, r0
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001af2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3318      	adds	r3, #24
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	6811      	ldr	r1, [r2, #0]
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	440b      	add	r3, r1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e00e      	b.n	8001b36 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e006      	b.n	8001b36 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b54:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d002      	beq.n	8001b62 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d11d      	bne.n	8001b9e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3301      	adds	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d002      	beq.n	8001bca <HAL_CAN_ActivateNotification+0x1e>
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d109      	bne.n	8001bde <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6959      	ldr	r1, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e006      	b.n	8001bec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
  }
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff3e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff31 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e165      	b.n	8002104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 8154 	bne.w	80020fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d017      	beq.n	8001f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80ae 	beq.w	80020fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_GPIO_Init+0x300>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_GPIO_Init+0x300>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_GPIO_Init+0x300>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbe:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_GPIO_Init+0x304>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <HAL_GPIO_Init+0x308>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x216>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_GPIO_Init+0x310>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x212>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_GPIO_Init+0x314>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4b      	ldr	r2, [pc, #300]	; (8002134 <HAL_GPIO_Init+0x318>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x20a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4a      	ldr	r2, [pc, #296]	; (8002138 <HAL_GPIO_Init+0x31c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x206>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a49      	ldr	r2, [pc, #292]	; (800213c <HAL_GPIO_Init+0x320>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x202>
 800201a:	2306      	movs	r3, #6
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800201e:	2307      	movs	r3, #7
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	; (8002120 <HAL_GPIO_Init+0x304>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_GPIO_Init+0x324>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207a:	4a31      	ldr	r2, [pc, #196]	; (8002140 <HAL_GPIO_Init+0x324>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <HAL_GPIO_Init+0x324>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f8:	4a11      	ldr	r2, [pc, #68]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f ae96 	bls.w	8001e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e12b      	b.n	80023e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe ff6c 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021dc:	f000 fe22 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 80021e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a81      	ldr	r2, [pc, #516]	; (80023ec <HAL_I2C_Init+0x274>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d807      	bhi.n	80021fc <HAL_I2C_Init+0x84>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a80      	ldr	r2, [pc, #512]	; (80023f0 <HAL_I2C_Init+0x278>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	bf94      	ite	ls
 80021f4:	2301      	movls	r3, #1
 80021f6:	2300      	movhi	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e006      	b.n	800220a <HAL_I2C_Init+0x92>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a7d      	ldr	r2, [pc, #500]	; (80023f4 <HAL_I2C_Init+0x27c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	bf94      	ite	ls
 8002204:	2301      	movls	r3, #1
 8002206:	2300      	movhi	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0e7      	b.n	80023e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a78      	ldr	r2, [pc, #480]	; (80023f8 <HAL_I2C_Init+0x280>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0c9b      	lsrs	r3, r3, #18
 800221c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a6a      	ldr	r2, [pc, #424]	; (80023ec <HAL_I2C_Init+0x274>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d802      	bhi.n	800224c <HAL_I2C_Init+0xd4>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3301      	adds	r3, #1
 800224a:	e009      	b.n	8002260 <HAL_I2C_Init+0xe8>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	4a69      	ldr	r2, [pc, #420]	; (80023fc <HAL_I2C_Init+0x284>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	3301      	adds	r3, #1
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	430b      	orrs	r3, r1
 8002266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002272:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	495c      	ldr	r1, [pc, #368]	; (80023ec <HAL_I2C_Init+0x274>)
 800227c:	428b      	cmp	r3, r1
 800227e:	d819      	bhi.n	80022b4 <HAL_I2C_Init+0x13c>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e59      	subs	r1, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fbb1 f3f3 	udiv	r3, r1, r3
 800228e:	1c59      	adds	r1, r3, #1
 8002290:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002294:	400b      	ands	r3, r1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_I2C_Init+0x138>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1e59      	subs	r1, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a8:	3301      	adds	r3, #1
 80022aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ae:	e051      	b.n	8002354 <HAL_I2C_Init+0x1dc>
 80022b0:	2304      	movs	r3, #4
 80022b2:	e04f      	b.n	8002354 <HAL_I2C_Init+0x1dc>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d111      	bne.n	80022e0 <HAL_I2C_Init+0x168>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e58      	subs	r0, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	440b      	add	r3, r1
 80022ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf0c      	ite	eq
 80022d8:	2301      	moveq	r3, #1
 80022da:	2300      	movne	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e012      	b.n	8002306 <HAL_I2C_Init+0x18e>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1e58      	subs	r0, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	0099      	lsls	r1, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf0c      	ite	eq
 8002300:	2301      	moveq	r3, #1
 8002302:	2300      	movne	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Init+0x196>
 800230a:	2301      	movs	r3, #1
 800230c:	e022      	b.n	8002354 <HAL_I2C_Init+0x1dc>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10e      	bne.n	8002334 <HAL_I2C_Init+0x1bc>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1e58      	subs	r0, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6859      	ldr	r1, [r3, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	440b      	add	r3, r1
 8002324:	fbb0 f3f3 	udiv	r3, r0, r3
 8002328:	3301      	adds	r3, #1
 800232a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002332:	e00f      	b.n	8002354 <HAL_I2C_Init+0x1dc>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1e58      	subs	r0, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	0099      	lsls	r1, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	fbb0 f3f3 	udiv	r3, r0, r3
 800234a:	3301      	adds	r3, #1
 800234c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	6809      	ldr	r1, [r1, #0]
 8002358:	4313      	orrs	r3, r2
 800235a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6911      	ldr	r1, [r2, #16]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68d2      	ldr	r2, [r2, #12]
 800238e:	4311      	orrs	r1, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	430b      	orrs	r3, r1
 8002396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695a      	ldr	r2, [r3, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	000186a0 	.word	0x000186a0
 80023f0:	001e847f 	.word	0x001e847f
 80023f4:	003d08ff 	.word	0x003d08ff
 80023f8:	431bde83 	.word	0x431bde83
 80023fc:	10624dd3 	.word	0x10624dd3

08002400 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	461a      	mov	r2, r3
 800240c:	460b      	mov	r3, r1
 800240e:	817b      	strh	r3, [r7, #10]
 8002410:	4613      	mov	r3, r2
 8002412:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff f86a 	bl	80014ec <HAL_GetTick>
 8002418:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b20      	cmp	r3, #32
 8002424:	f040 820b 	bne.w	800283e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2319      	movs	r3, #25
 800242e:	2201      	movs	r2, #1
 8002430:	497c      	ldr	r1, [pc, #496]	; (8002624 <HAL_I2C_Master_Receive+0x224>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fad8 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800243e:	2302      	movs	r3, #2
 8002440:	e1fe      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_I2C_Master_Receive+0x50>
 800244c:	2302      	movs	r3, #2
 800244e:	e1f7      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d007      	beq.n	8002476 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002484:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2222      	movs	r2, #34	; 0x22
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2210      	movs	r2, #16
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	893a      	ldrh	r2, [r7, #8]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4a5c      	ldr	r2, [pc, #368]	; (8002628 <HAL_I2C_Master_Receive+0x228>)
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024b8:	8979      	ldrh	r1, [r7, #10]
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f9c4 	bl	800284c <I2C_MasterRequestRead>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e1b8      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d113      	bne.n	80024fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e18c      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002502:	2b01      	cmp	r3, #1
 8002504:	d11b      	bne.n	800253e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e16c      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b02      	cmp	r3, #2
 8002544:	d11b      	bne.n	800257e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002554:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	e14c      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800258c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025a4:	e138      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	f200 80f1 	bhi.w	8002792 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d123      	bne.n	8002600 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fae9 	bl	8002b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e139      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025fe:	e10b      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	2b02      	cmp	r3, #2
 8002606:	d14e      	bne.n	80026a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	2200      	movs	r2, #0
 8002610:	4906      	ldr	r1, [pc, #24]	; (800262c <HAL_I2C_Master_Receive+0x22c>)
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f9e8 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e10e      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
 8002622:	bf00      	nop
 8002624:	00100002 	.word	0x00100002
 8002628:	ffff0000 	.word	0xffff0000
 800262c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a4:	e0b8      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	2200      	movs	r2, #0
 80026ae:	4966      	ldr	r1, [pc, #408]	; (8002848 <HAL_I2C_Master_Receive+0x448>)
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f999 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0bf      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	2200      	movs	r2, #0
 800270a:	494f      	ldr	r1, [pc, #316]	; (8002848 <HAL_I2C_Master_Receive+0x448>)
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f96b 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e091      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002790:	e042      	b.n	8002818 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f9fc 	bl	8002b94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e04c      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d118      	bne.n	8002818 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	f47f aec2 	bne.w	80025a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	00010004 	.word	0x00010004

0800284c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	460b      	mov	r3, r1
 800285a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002870:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d006      	beq.n	8002886 <I2C_MasterRequestRead+0x3a>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d003      	beq.n	8002886 <I2C_MasterRequestRead+0x3a>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002884:	d108      	bne.n	8002898 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e00b      	b.n	80028b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	2b11      	cmp	r3, #17
 800289e:	d107      	bne.n	80028b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f893 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d6:	d103      	bne.n	80028e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e079      	b.n	80029d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ec:	d108      	bne.n	8002900 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028ee:	897b      	ldrh	r3, [r7, #10]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	611a      	str	r2, [r3, #16]
 80028fe:	e05f      	b.n	80029c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002900:	897b      	ldrh	r3, [r7, #10]
 8002902:	11db      	asrs	r3, r3, #7
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 0306 	and.w	r3, r3, #6
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f063 030f 	orn	r3, r3, #15
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4930      	ldr	r1, [pc, #192]	; (80029e0 <I2C_MasterRequestRead+0x194>)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8b9 	bl	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e054      	b.n	80029d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800292e:	897b      	ldrh	r3, [r7, #10]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4929      	ldr	r1, [pc, #164]	; (80029e4 <I2C_MasterRequestRead+0x198>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f8a9 	bl	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e044      	b.n	80029d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002972:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f831 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800299a:	d103      	bne.n	80029a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e017      	b.n	80029d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029a8:	897b      	ldrh	r3, [r7, #10]
 80029aa:	11db      	asrs	r3, r3, #7
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f003 0306 	and.w	r3, r3, #6
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f063 030e 	orn	r3, r3, #14
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <I2C_MasterRequestRead+0x198>)
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f865 	bl	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	00010008 	.word	0x00010008
 80029e4:	00010002 	.word	0x00010002

080029e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f8:	e025      	b.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a00:	d021      	beq.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe fd73 	bl	80014ec <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d116      	bne.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e023      	b.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10d      	bne.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	e00c      	b.n	8002a86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4013      	ands	r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	2300      	movne	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d0b6      	beq.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa4:	e051      	b.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab4:	d123      	bne.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ace:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0204 	orr.w	r2, r3, #4
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e046      	b.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b04:	d021      	beq.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe fcf1 	bl	80014ec <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d116      	bne.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e020      	b.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d10c      	bne.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e00b      	b.n	8002b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	43da      	mvns	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d18d      	bne.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ba0:	e042      	b.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d119      	bne.n	8002be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0210 	mvn.w	r2, #16
 8002bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e029      	b.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be4:	f7fe fc82 	bl	80014ec <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d302      	bcc.n	8002bfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e007      	b.n	8002c38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d1b5      	bne.n	8002ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0cc      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d90c      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0b8      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c94:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cac:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	494d      	ldr	r1, [pc, #308]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d044      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d119      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e07f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e06f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e067      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f023 0203 	bic.w	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4934      	ldr	r1, [pc, #208]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d30:	f7fe fbdc 	bl	80014ec <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d38:	f7fe fbd8 	bl	80014ec <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e04f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 020c 	and.w	r2, r3, #12
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1eb      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d20c      	bcs.n	8002d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e032      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4916      	ldr	r1, [pc, #88]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	490e      	ldr	r1, [pc, #56]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dc6:	f000 f855 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	490a      	ldr	r1, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	5ccb      	ldrb	r3, [r1, r3]
 8002dda:	fa22 f303 	lsr.w	r3, r2, r3
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1c8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fb3c 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023c00 	.word	0x40023c00
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08005a18 	.word	0x08005a18
 8002e04:	20000000 	.word	0x20000000
 8002e08:	20000004 	.word	0x20000004

08002e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000000 	.word	0x20000000

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e28:	f7ff fff0 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08005a28 	.word	0x08005a28

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e50:	f7ff ffdc 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0b5b      	lsrs	r3, r3, #13
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08005a28 	.word	0x08005a28

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b0ae      	sub	sp, #184	; 0xb8
 8002e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9a:	4bcb      	ldr	r3, [pc, #812]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	f200 8206 	bhi.w	80032b4 <HAL_RCC_GetSysClockFreq+0x440>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	080032b5 	.word	0x080032b5
 8002eb8:	080032b5 	.word	0x080032b5
 8002ebc:	080032b5 	.word	0x080032b5
 8002ec0:	08002eed 	.word	0x08002eed
 8002ec4:	080032b5 	.word	0x080032b5
 8002ec8:	080032b5 	.word	0x080032b5
 8002ecc:	080032b5 	.word	0x080032b5
 8002ed0:	08002ef5 	.word	0x08002ef5
 8002ed4:	080032b5 	.word	0x080032b5
 8002ed8:	080032b5 	.word	0x080032b5
 8002edc:	080032b5 	.word	0x080032b5
 8002ee0:	080030e5 	.word	0x080030e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4bb9      	ldr	r3, [pc, #740]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002eea:	e1e7      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eec:	4bb8      	ldr	r3, [pc, #736]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ef2:	e1e3      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef4:	4bb4      	ldr	r3, [pc, #720]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f00:	4bb1      	ldr	r3, [pc, #708]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d071      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0c:	4bae      	ldr	r3, [pc, #696]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f18:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	f04f 0000 	mov.w	r0, #0
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	0159      	lsls	r1, r3, #5
 8002f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f44:	0150      	lsls	r0, r2, #5
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	1a51      	subs	r1, r2, r1
 8002f4e:	6439      	str	r1, [r7, #64]	; 0x40
 8002f50:	4629      	mov	r1, r5
 8002f52:	eb63 0301 	sbc.w	r3, r3, r1
 8002f56:	647b      	str	r3, [r7, #68]	; 0x44
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f64:	4649      	mov	r1, r9
 8002f66:	018b      	lsls	r3, r1, #6
 8002f68:	4641      	mov	r1, r8
 8002f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f6e:	4641      	mov	r1, r8
 8002f70:	018a      	lsls	r2, r1, #6
 8002f72:	4641      	mov	r1, r8
 8002f74:	1a51      	subs	r1, r2, r1
 8002f76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f78:	4649      	mov	r1, r9
 8002f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	00cb      	lsls	r3, r1, #3
 8002f90:	4641      	mov	r1, r8
 8002f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f96:	4641      	mov	r1, r8
 8002f98:	00ca      	lsls	r2, r1, #3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	189b      	adds	r3, r3, r2
 8002fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	460a      	mov	r2, r1
 8002faa:	eb42 0303 	adc.w	r3, r2, r3
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	024b      	lsls	r3, r1, #9
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	024a      	lsls	r2, r1, #9
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fe0:	f7fd f966 	bl	80002b0 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fee:	e067      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff0:	4b75      	ldr	r3, [pc, #468]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ffc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003000:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003008:	67bb      	str	r3, [r7, #120]	; 0x78
 800300a:	2300      	movs	r3, #0
 800300c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800300e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003012:	4622      	mov	r2, r4
 8003014:	462b      	mov	r3, r5
 8003016:	f04f 0000 	mov.w	r0, #0
 800301a:	f04f 0100 	mov.w	r1, #0
 800301e:	0159      	lsls	r1, r3, #5
 8003020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003024:	0150      	lsls	r0, r2, #5
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4621      	mov	r1, r4
 800302c:	1a51      	subs	r1, r2, r1
 800302e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003030:	4629      	mov	r1, r5
 8003032:	eb63 0301 	sbc.w	r3, r3, r1
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003044:	4649      	mov	r1, r9
 8003046:	018b      	lsls	r3, r1, #6
 8003048:	4641      	mov	r1, r8
 800304a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800304e:	4641      	mov	r1, r8
 8003050:	018a      	lsls	r2, r1, #6
 8003052:	4641      	mov	r1, r8
 8003054:	ebb2 0a01 	subs.w	sl, r2, r1
 8003058:	4649      	mov	r1, r9
 800305a:	eb63 0b01 	sbc.w	fp, r3, r1
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800306a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800306e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003072:	4692      	mov	sl, r2
 8003074:	469b      	mov	fp, r3
 8003076:	4623      	mov	r3, r4
 8003078:	eb1a 0303 	adds.w	r3, sl, r3
 800307c:	623b      	str	r3, [r7, #32]
 800307e:	462b      	mov	r3, r5
 8003080:	eb4b 0303 	adc.w	r3, fp, r3
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003092:	4629      	mov	r1, r5
 8003094:	028b      	lsls	r3, r1, #10
 8003096:	4621      	mov	r1, r4
 8003098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800309c:	4621      	mov	r1, r4
 800309e:	028a      	lsls	r2, r1, #10
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030a8:	2200      	movs	r2, #0
 80030aa:	673b      	str	r3, [r7, #112]	; 0x70
 80030ac:	677a      	str	r2, [r7, #116]	; 0x74
 80030ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80030b2:	f7fd f8fd 	bl	80002b0 <__aeabi_uldivmod>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4613      	mov	r3, r2
 80030bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c0:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	3301      	adds	r3, #1
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80030d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030e2:	e0eb      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e4:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d06b      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	2200      	movs	r2, #0
 8003104:	66bb      	str	r3, [r7, #104]	; 0x68
 8003106:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	663b      	str	r3, [r7, #96]	; 0x60
 8003110:	2300      	movs	r3, #0
 8003112:	667b      	str	r3, [r7, #100]	; 0x64
 8003114:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003118:	4622      	mov	r2, r4
 800311a:	462b      	mov	r3, r5
 800311c:	f04f 0000 	mov.w	r0, #0
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	0159      	lsls	r1, r3, #5
 8003126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800312a:	0150      	lsls	r0, r2, #5
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4621      	mov	r1, r4
 8003132:	1a51      	subs	r1, r2, r1
 8003134:	61b9      	str	r1, [r7, #24]
 8003136:	4629      	mov	r1, r5
 8003138:	eb63 0301 	sbc.w	r3, r3, r1
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800314a:	4659      	mov	r1, fp
 800314c:	018b      	lsls	r3, r1, #6
 800314e:	4651      	mov	r1, sl
 8003150:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003154:	4651      	mov	r1, sl
 8003156:	018a      	lsls	r2, r1, #6
 8003158:	4651      	mov	r1, sl
 800315a:	ebb2 0801 	subs.w	r8, r2, r1
 800315e:	4659      	mov	r1, fp
 8003160:	eb63 0901 	sbc.w	r9, r3, r1
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003170:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003174:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003178:	4690      	mov	r8, r2
 800317a:	4699      	mov	r9, r3
 800317c:	4623      	mov	r3, r4
 800317e:	eb18 0303 	adds.w	r3, r8, r3
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	462b      	mov	r3, r5
 8003186:	eb49 0303 	adc.w	r3, r9, r3
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003198:	4629      	mov	r1, r5
 800319a:	024b      	lsls	r3, r1, #9
 800319c:	4621      	mov	r1, r4
 800319e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031a2:	4621      	mov	r1, r4
 80031a4:	024a      	lsls	r2, r1, #9
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031ae:	2200      	movs	r2, #0
 80031b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80031b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031b8:	f7fd f87a 	bl	80002b0 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4613      	mov	r3, r2
 80031c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031c6:	e065      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x420>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d4:	4b3d      	ldr	r3, [pc, #244]	; (80032cc <HAL_RCC_GetSysClockFreq+0x458>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	2200      	movs	r2, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	4611      	mov	r1, r2
 80031e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031e4:	653b      	str	r3, [r7, #80]	; 0x50
 80031e6:	2300      	movs	r3, #0
 80031e8:	657b      	str	r3, [r7, #84]	; 0x54
 80031ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031ee:	4642      	mov	r2, r8
 80031f0:	464b      	mov	r3, r9
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	0159      	lsls	r1, r3, #5
 80031fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003200:	0150      	lsls	r0, r2, #5
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4641      	mov	r1, r8
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	4649      	mov	r1, r9
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003220:	4659      	mov	r1, fp
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800322a:	4651      	mov	r1, sl
 800322c:	018a      	lsls	r2, r1, #6
 800322e:	4651      	mov	r1, sl
 8003230:	1a54      	subs	r4, r2, r1
 8003232:	4659      	mov	r1, fp
 8003234:	eb63 0501 	sbc.w	r5, r3, r1
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	00eb      	lsls	r3, r5, #3
 8003242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003246:	00e2      	lsls	r2, r4, #3
 8003248:	4614      	mov	r4, r2
 800324a:	461d      	mov	r5, r3
 800324c:	4643      	mov	r3, r8
 800324e:	18e3      	adds	r3, r4, r3
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	464b      	mov	r3, r9
 8003254:	eb45 0303 	adc.w	r3, r5, r3
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003266:	4629      	mov	r1, r5
 8003268:	028b      	lsls	r3, r1, #10
 800326a:	4621      	mov	r1, r4
 800326c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003270:	4621      	mov	r1, r4
 8003272:	028a      	lsls	r2, r1, #10
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800327c:	2200      	movs	r2, #0
 800327e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003280:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003282:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003286:	f7fd f813 	bl	80002b0 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4613      	mov	r3, r2
 8003290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003294:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_RCC_GetSysClockFreq+0x458>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	0f1b      	lsrs	r3, r3, #28
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80032a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032b2:	e003      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	37b8      	adds	r7, #184	; 0xb8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800
 80032d0:	00f42400 	.word	0x00f42400

080032d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e28d      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8083 	beq.w	80033fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032f4:	4b94      	ldr	r3, [pc, #592]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d019      	beq.n	8003334 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003300:	4b91      	ldr	r3, [pc, #580]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003308:	2b08      	cmp	r3, #8
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800330c:	4b8e      	ldr	r3, [pc, #568]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003318:	d00c      	beq.n	8003334 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d112      	bne.n	800334c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003332:	d10b      	bne.n	800334c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	4b84      	ldr	r3, [pc, #528]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d05b      	beq.n	80033f8 <HAL_RCC_OscConfig+0x124>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d157      	bne.n	80033f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e25a      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d106      	bne.n	8003364 <HAL_RCC_OscConfig+0x90>
 8003356:	4b7c      	ldr	r3, [pc, #496]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7b      	ldr	r2, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e01d      	b.n	80033a0 <HAL_RCC_OscConfig+0xcc>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0xb4>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b73      	ldr	r3, [pc, #460]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a72      	ldr	r2, [pc, #456]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e00b      	b.n	80033a0 <HAL_RCC_OscConfig+0xcc>
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800338e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6b      	ldr	r2, [pc, #428]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800339a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fe f8a0 	bl	80014ec <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b0:	f7fe f89c 	bl	80014ec <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e21f      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0xdc>
 80033ce:	e014      	b.n	80033fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f88c 	bl	80014ec <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fe f888 	bl	80014ec <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e20b      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ea:	4b57      	ldr	r3, [pc, #348]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x104>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d06f      	beq.n	80034e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003406:	4b50      	ldr	r3, [pc, #320]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b00      	cmp	r3, #0
 8003410:	d017      	beq.n	8003442 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003412:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800341a:	2b08      	cmp	r3, #8
 800341c:	d105      	bne.n	800342a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x186>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1d3      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x278>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe f835 	bl	80014ec <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7fe f831 	bl	80014ec <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1b4      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x278>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe f814 	bl	80014ec <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe f810 	bl	80014ec <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e193      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d036      	beq.n	8003560 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x27c>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fd fff4 	bl	80014ec <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7fd fff0 	bl	80014ec <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e173      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x234>
 8003526:	e01b      	b.n	8003560 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x27c>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fd ffdd 	bl	80014ec <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00e      	b.n	8003554 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fd ffd9 	bl	80014ec <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d907      	bls.n	8003554 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e15c      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b8a      	ldr	r3, [pc, #552]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ea      	bne.n	8003536 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8097 	beq.w	800369c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b83      	ldr	r3, [pc, #524]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b7f      	ldr	r3, [pc, #508]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7e      	ldr	r2, [pc, #504]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b7c      	ldr	r3, [pc, #496]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b79      	ldr	r3, [pc, #484]	; (8003784 <HAL_RCC_OscConfig+0x4b0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b76      	ldr	r3, [pc, #472]	; (8003784 <HAL_RCC_OscConfig+0x4b0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a75      	ldr	r2, [pc, #468]	; (8003784 <HAL_RCC_OscConfig+0x4b0>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fd ff99 	bl	80014ec <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fd ff95 	bl	80014ec <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e118      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b6c      	ldr	r3, [pc, #432]	; (8003784 <HAL_RCC_OscConfig+0x4b0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x31e>
 80035e4:	4b66      	ldr	r3, [pc, #408]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a65      	ldr	r2, [pc, #404]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x358>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x340>
 80035fa:	4b61      	ldr	r3, [pc, #388]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a60      	ldr	r2, [pc, #384]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b5e      	ldr	r3, [pc, #376]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a5d      	ldr	r2, [pc, #372]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x358>
 8003614:	4b5a      	ldr	r3, [pc, #360]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a59      	ldr	r2, [pc, #356]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a56      	ldr	r2, [pc, #344]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fd ff5a 	bl	80014ec <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fd ff56 	bl	80014ec <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0d7      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <HAL_RCC_OscConfig+0x368>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fd ff44 	bl	80014ec <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fd ff40 	bl	80014ec <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0c1      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	4b40      	ldr	r3, [pc, #256]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a3a      	ldr	r2, [pc, #232]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80ad 	beq.w	8003800 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d060      	beq.n	8003774 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d145      	bne.n	8003746 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b33      	ldr	r3, [pc, #204]	; (8003788 <HAL_RCC_OscConfig+0x4b4>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fd ff14 	bl	80014ec <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fd ff10 	bl	80014ec <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e093      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b29      	ldr	r3, [pc, #164]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	071b      	lsls	r3, r3, #28
 8003712:	491b      	ldr	r1, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x4b4>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fd fee5 	bl	80014ec <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd fee1 	bl	80014ec <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e064      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x452>
 8003744:	e05c      	b.n	8003800 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_RCC_OscConfig+0x4b4>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fd fece 	bl	80014ec <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003754:	f7fd feca 	bl	80014ec <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e04d      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x480>
 8003772:	e045      	b.n	8003800 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e040      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
 8003780:	40023800 	.word	0x40023800
 8003784:	40007000 	.word	0x40007000
 8003788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800378c:	4b1f      	ldr	r3, [pc, #124]	; (800380c <HAL_RCC_OscConfig+0x538>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d030      	beq.n	80037fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d129      	bne.n	80037fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d122      	bne.n	80037fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d119      	bne.n	80037fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	3b01      	subs	r3, #1
 80037d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d10f      	bne.n	80037fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d107      	bne.n	80037fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800

08003810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e041      	b.n	80038a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd fc68 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3304      	adds	r3, #4
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f000 fca8 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e04e      	b.n	8003966 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a23      	ldr	r2, [pc, #140]	; (8003974 <HAL_TIM_Base_Start_IT+0xc4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f2:	d01d      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1f      	ldr	r2, [pc, #124]	; (8003978 <HAL_TIM_Base_Start_IT+0xc8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1e      	ldr	r2, [pc, #120]	; (800397c <HAL_TIM_Base_Start_IT+0xcc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <HAL_TIM_Base_Start_IT+0xd0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <HAL_TIM_Base_Start_IT+0xd4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <HAL_TIM_Base_Start_IT+0xd8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x80>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_TIM_Base_Start_IT+0xdc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d111      	bne.n	8003954 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b06      	cmp	r3, #6
 8003940:	d010      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003952:	e007      	b.n	8003964 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40010400 	.word	0x40010400
 8003988:	40014000 	.word	0x40014000
 800398c:	40001800 	.word	0x40001800

08003990 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10f      	bne.n	80039d8 <HAL_TIM_Base_Stop_IT+0x48>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6a1a      	ldr	r2, [r3, #32]
 80039be:	f240 4344 	movw	r3, #1092	; 0x444
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d107      	bne.n	80039d8 <HAL_TIM_Base_Stop_IT+0x48>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e041      	b.n	8003a84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f839 	bl	8003a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f000 fbb9 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_TIM_PWM_Start+0x24>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e022      	b.n	8003b0a <HAL_TIM_PWM_Start+0x6a>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d109      	bne.n	8003ade <HAL_TIM_PWM_Start+0x3e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e015      	b.n	8003b0a <HAL_TIM_PWM_Start+0x6a>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d109      	bne.n	8003af8 <HAL_TIM_PWM_Start+0x58>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e008      	b.n	8003b0a <HAL_TIM_PWM_Start+0x6a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	bf14      	ite	ne
 8003b04:	2301      	movne	r3, #1
 8003b06:	2300      	moveq	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e07c      	b.n	8003c0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x82>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b20:	e013      	b.n	8003b4a <HAL_TIM_PWM_Start+0xaa>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_PWM_Start+0x92>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b30:	e00b      	b.n	8003b4a <HAL_TIM_PWM_Start+0xaa>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_PWM_Start+0xa2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b40:	e003      	b.n	8003b4a <HAL_TIM_PWM_Start+0xaa>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	6839      	ldr	r1, [r7, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fe10 	bl	8004778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <HAL_TIM_PWM_Start+0x174>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_TIM_PWM_Start+0xcc>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2c      	ldr	r2, [pc, #176]	; (8003c18 <HAL_TIM_PWM_Start+0x178>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_PWM_Start+0xd0>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_TIM_PWM_Start+0xd2>
 8003b70:	2300      	movs	r3, #0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <HAL_TIM_PWM_Start+0x174>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d022      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d01d      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <HAL_TIM_PWM_Start+0x17c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d018      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <HAL_TIM_PWM_Start+0x180>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_TIM_PWM_Start+0x184>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <HAL_TIM_PWM_Start+0x178>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_TIM_PWM_Start+0x188>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x136>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_TIM_PWM_Start+0x18c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d111      	bne.n	8003bfa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b06      	cmp	r3, #6
 8003be6:	d010      	beq.n	8003c0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf8:	e007      	b.n	8003c0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40010400 	.word	0x40010400
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40001800 	.word	0x40001800

08003c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d122      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d11b      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0202 	mvn.w	r2, #2
 8003c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fa77 	bl	8004166 <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa69 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fa7a 	bl	800417a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d122      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0204 	mvn.w	r2, #4
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa4d 	bl	8004166 <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa3f 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fa50 	bl	800417a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d122      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0208 	mvn.w	r2, #8
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fa23 	bl	8004166 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa15 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fa26 	bl	800417a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d122      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d11b      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0210 	mvn.w	r2, #16
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f9f9 	bl	8004166 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9eb 	bl	8004152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f9fc 	bl	800417a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d10e      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d107      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0201 	mvn.w	r2, #1
 8003dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd f8c4 	bl	8000f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b80      	cmp	r3, #128	; 0x80
 8003dc0:	d10e      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b80      	cmp	r3, #128	; 0x80
 8003dce:	d107      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fd78 	bl	80048d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d107      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f9c1 	bl	800418e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d10e      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d107      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0220 	mvn.w	r2, #32
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fd42 	bl	80048bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0ae      	b.n	8003fbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	f200 809f 	bhi.w	8003fac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003fad 	.word	0x08003fad
 8003e7c:	08003fad 	.word	0x08003fad
 8003e80:	08003fad 	.word	0x08003fad
 8003e84:	08003ee9 	.word	0x08003ee9
 8003e88:	08003fad 	.word	0x08003fad
 8003e8c:	08003fad 	.word	0x08003fad
 8003e90:	08003fad 	.word	0x08003fad
 8003e94:	08003f2b 	.word	0x08003f2b
 8003e98:	08003fad 	.word	0x08003fad
 8003e9c:	08003fad 	.word	0x08003fad
 8003ea0:	08003fad 	.word	0x08003fad
 8003ea4:	08003f6b 	.word	0x08003f6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fa18 	bl	80042e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0208 	orr.w	r2, r2, #8
 8003ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6999      	ldr	r1, [r3, #24]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	619a      	str	r2, [r3, #24]
      break;
 8003ee6:	e064      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa68 	bl	80043c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	619a      	str	r2, [r3, #24]
      break;
 8003f28:	e043      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68b9      	ldr	r1, [r7, #8]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fabd 	bl	80044b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0208 	orr.w	r2, r2, #8
 8003f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0204 	bic.w	r2, r2, #4
 8003f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69d9      	ldr	r1, [r3, #28]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	61da      	str	r2, [r3, #28]
      break;
 8003f68:	e023      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fb11 	bl	8004598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69d9      	ldr	r1, [r3, #28]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	021a      	lsls	r2, r3, #8
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	61da      	str	r2, [r3, #28]
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIM_ConfigClockSource+0x1c>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e0b4      	b.n	800414a <HAL_TIM_ConfigClockSource+0x186>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004018:	d03e      	beq.n	8004098 <HAL_TIM_ConfigClockSource+0xd4>
 800401a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401e:	f200 8087 	bhi.w	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	f000 8086 	beq.w	8004136 <HAL_TIM_ConfigClockSource+0x172>
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402e:	d87f      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b70      	cmp	r3, #112	; 0x70
 8004032:	d01a      	beq.n	800406a <HAL_TIM_ConfigClockSource+0xa6>
 8004034:	2b70      	cmp	r3, #112	; 0x70
 8004036:	d87b      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b60      	cmp	r3, #96	; 0x60
 800403a:	d050      	beq.n	80040de <HAL_TIM_ConfigClockSource+0x11a>
 800403c:	2b60      	cmp	r3, #96	; 0x60
 800403e:	d877      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b50      	cmp	r3, #80	; 0x50
 8004042:	d03c      	beq.n	80040be <HAL_TIM_ConfigClockSource+0xfa>
 8004044:	2b50      	cmp	r3, #80	; 0x50
 8004046:	d873      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d058      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x13a>
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d86f      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b30      	cmp	r3, #48	; 0x30
 8004052:	d064      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004054:	2b30      	cmp	r3, #48	; 0x30
 8004056:	d86b      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b20      	cmp	r3, #32
 800405a:	d060      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 800405c:	2b20      	cmp	r3, #32
 800405e:	d867      	bhi.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05c      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004064:	2b10      	cmp	r3, #16
 8004066:	d05a      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x15a>
 8004068:	e062      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6899      	ldr	r1, [r3, #8]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f000 fb5d 	bl	8004738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800408c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	609a      	str	r2, [r3, #8]
      break;
 8004096:	e04f      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6899      	ldr	r1, [r3, #8]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f000 fb46 	bl	8004738 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ba:	609a      	str	r2, [r3, #8]
      break;
 80040bc:	e03c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6859      	ldr	r1, [r3, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f000 faba 	bl	8004644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2150      	movs	r1, #80	; 0x50
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fb13 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80040dc:	e02c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f000 fad9 	bl	80046a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2160      	movs	r1, #96	; 0x60
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fb03 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80040fc:	e01c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	461a      	mov	r2, r3
 800410c:	f000 fa9a 	bl	8004644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	4618      	mov	r0, r3
 8004118:	f000 faf3 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 800411c:	e00c      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f000 faea 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 800412e:	e003      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      break;
 8004134:	e000      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a40      	ldr	r2, [pc, #256]	; (80042b8 <TIM_Base_SetConfig+0x114>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3d      	ldr	r2, [pc, #244]	; (80042bc <TIM_Base_SetConfig+0x118>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a3c      	ldr	r2, [pc, #240]	; (80042c0 <TIM_Base_SetConfig+0x11c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3b      	ldr	r2, [pc, #236]	; (80042c4 <TIM_Base_SetConfig+0x120>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3a      	ldr	r2, [pc, #232]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d108      	bne.n	80041f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2f      	ldr	r2, [pc, #188]	; (80042b8 <TIM_Base_SetConfig+0x114>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02b      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d027      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <TIM_Base_SetConfig+0x118>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d023      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <TIM_Base_SetConfig+0x11c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d01f      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <TIM_Base_SetConfig+0x120>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01b      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d017      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a28      	ldr	r2, [pc, #160]	; (80042cc <TIM_Base_SetConfig+0x128>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <TIM_Base_SetConfig+0x12c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00f      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <TIM_Base_SetConfig+0x130>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <TIM_Base_SetConfig+0x134>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a24      	ldr	r2, [pc, #144]	; (80042dc <TIM_Base_SetConfig+0x138>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <TIM_Base_SetConfig+0x13c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d108      	bne.n	8004268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <TIM_Base_SetConfig+0x114>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_Base_SetConfig+0xf8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <TIM_Base_SetConfig+0x124>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d103      	bne.n	80042a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	615a      	str	r2, [r3, #20]
}
 80042aa:	bf00      	nop
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40000c00 	.word	0x40000c00
 80042c8:	40010400 	.word	0x40010400
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800
 80042d8:	40001800 	.word	0x40001800
 80042dc:	40001c00 	.word	0x40001c00
 80042e0:	40002000 	.word	0x40002000

080042e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f023 0201 	bic.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 0302 	bic.w	r3, r3, #2
 800432c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a20      	ldr	r2, [pc, #128]	; (80043bc <TIM_OC1_SetConfig+0xd8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC1_SetConfig+0x64>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a1f      	ldr	r2, [pc, #124]	; (80043c0 <TIM_OC1_SetConfig+0xdc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10c      	bne.n	8004362 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0308 	bic.w	r3, r3, #8
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 0304 	bic.w	r3, r3, #4
 8004360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a15      	ldr	r2, [pc, #84]	; (80043bc <TIM_OC1_SetConfig+0xd8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC1_SetConfig+0x8e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <TIM_OC1_SetConfig+0xdc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d111      	bne.n	8004396 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40010000 	.word	0x40010000
 80043c0:	40010400 	.word	0x40010400

080043c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f023 0210 	bic.w	r2, r3, #16
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0320 	bic.w	r3, r3, #32
 800440e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <TIM_OC2_SetConfig+0xe4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_OC2_SetConfig+0x68>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a21      	ldr	r2, [pc, #132]	; (80044ac <TIM_OC2_SetConfig+0xe8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d10d      	bne.n	8004448 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <TIM_OC2_SetConfig+0xe4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_OC2_SetConfig+0x94>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <TIM_OC2_SetConfig+0xe8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d113      	bne.n	8004480 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800445e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40010400 	.word	0x40010400

080044b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a21      	ldr	r2, [pc, #132]	; (8004590 <TIM_OC3_SetConfig+0xe0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_OC3_SetConfig+0x66>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a20      	ldr	r2, [pc, #128]	; (8004594 <TIM_OC3_SetConfig+0xe4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10d      	bne.n	8004532 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800451c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a16      	ldr	r2, [pc, #88]	; (8004590 <TIM_OC3_SetConfig+0xe0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_OC3_SetConfig+0x92>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a15      	ldr	r2, [pc, #84]	; (8004594 <TIM_OC3_SetConfig+0xe4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d113      	bne.n	800456a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	621a      	str	r2, [r3, #32]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400

08004598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <TIM_OC4_SetConfig+0xa4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_OC4_SetConfig+0x68>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a11      	ldr	r2, [pc, #68]	; (8004640 <TIM_OC4_SetConfig+0xa8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d109      	bne.n	8004614 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	019b      	lsls	r3, r3, #6
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40010400 	.word	0x40010400

08004644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 030a 	bic.w	r3, r3, #10
 8004680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b087      	sub	sp, #28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f023 0210 	bic.w	r2, r3, #16
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	031b      	lsls	r3, r3, #12
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	f043 0307 	orr.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	431a      	orrs	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4313      	orrs	r3, r2
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2201      	movs	r2, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	43db      	mvns	r3, r3
 800479a:	401a      	ands	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d8:	2302      	movs	r3, #2
 80047da:	e05a      	b.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004828:	d01d      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1b      	ldr	r2, [pc, #108]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1a      	ldr	r2, [pc, #104]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10c      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40001800 	.word	0x40001800

080048bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e03f      	b.n	8004976 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc fc90 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2224      	movs	r2, #36	; 0x24
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f929 	bl	8004b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800493c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800494c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800495c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b08a      	sub	sp, #40	; 0x28
 8004982:	af02      	add	r7, sp, #8
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	d17c      	bne.n	8004a98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_UART_Transmit+0x2c>
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e075      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_UART_Transmit+0x3e>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e06e      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2221      	movs	r2, #33	; 0x21
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049d2:	f7fc fd8b 	bl	80014ec <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ec:	d108      	bne.n	8004a00 <HAL_UART_Transmit+0x82>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e003      	b.n	8004a08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a10:	e02a      	b.n	8004a68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f840 	bl	8004aa2 <UART_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e036      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	3302      	adds	r3, #2
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	e007      	b.n	8004a5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1cf      	bne.n	8004a12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2140      	movs	r1, #64	; 0x40
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f810 	bl	8004aa2 <UART_WaitOnFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e006      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b090      	sub	sp, #64	; 0x40
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab2:	e050      	b.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aba:	d04c      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ac2:	f7fc fd13 	bl	80014ec <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d241      	bcs.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004af2:	637a      	str	r2, [r7, #52]	; 0x34
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e5      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	613b      	str	r3, [r7, #16]
   return(result);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b26:	623a      	str	r2, [r7, #32]
 8004b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	69f9      	ldr	r1, [r7, #28]
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e5      	bne.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e00f      	b.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d09f      	beq.n	8004ab4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3740      	adds	r7, #64	; 0x40
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b84:	b0c0      	sub	sp, #256	; 0x100
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	68d9      	ldr	r1, [r3, #12]
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	ea40 0301 	orr.w	r3, r0, r1
 8004ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bd8:	f021 010c 	bic.w	r1, r1, #12
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004be6:	430b      	orrs	r3, r1
 8004be8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	6999      	ldr	r1, [r3, #24]
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	ea40 0301 	orr.w	r3, r0, r1
 8004c06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b8f      	ldr	r3, [pc, #572]	; (8004e4c <UART_SetConfig+0x2cc>)
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d005      	beq.n	8004c20 <UART_SetConfig+0xa0>
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b8d      	ldr	r3, [pc, #564]	; (8004e50 <UART_SetConfig+0x2d0>)
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d104      	bne.n	8004c2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7fe f914 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8004c24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c28:	e003      	b.n	8004c32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c2a:	f7fe f8fb 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8004c2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c3c:	f040 810c 	bne.w	8004e58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c52:	4622      	mov	r2, r4
 8004c54:	462b      	mov	r3, r5
 8004c56:	1891      	adds	r1, r2, r2
 8004c58:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c5a:	415b      	adcs	r3, r3
 8004c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c62:	4621      	mov	r1, r4
 8004c64:	eb12 0801 	adds.w	r8, r2, r1
 8004c68:	4629      	mov	r1, r5
 8004c6a:	eb43 0901 	adc.w	r9, r3, r1
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c82:	4690      	mov	r8, r2
 8004c84:	4699      	mov	r9, r3
 8004c86:	4623      	mov	r3, r4
 8004c88:	eb18 0303 	adds.w	r3, r8, r3
 8004c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c90:	462b      	mov	r3, r5
 8004c92:	eb49 0303 	adc.w	r3, r9, r3
 8004c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ca6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cae:	460b      	mov	r3, r1
 8004cb0:	18db      	adds	r3, r3, r3
 8004cb2:	653b      	str	r3, [r7, #80]	; 0x50
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	eb42 0303 	adc.w	r3, r2, r3
 8004cba:	657b      	str	r3, [r7, #84]	; 0x54
 8004cbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cc4:	f7fb faf4 	bl	80002b0 <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <UART_SetConfig+0x2d4>)
 8004cce:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	011c      	lsls	r4, r3, #4
 8004cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ce0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ce4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	1891      	adds	r1, r2, r2
 8004cee:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cf0:	415b      	adcs	r3, r3
 8004cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	eb12 0a01 	adds.w	sl, r2, r1
 8004cfe:	4649      	mov	r1, r9
 8004d00:	eb43 0b01 	adc.w	fp, r3, r1
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d18:	4692      	mov	sl, r2
 8004d1a:	469b      	mov	fp, r3
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d26:	464b      	mov	r3, r9
 8004d28:	eb4b 0303 	adc.w	r3, fp, r3
 8004d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d44:	460b      	mov	r3, r1
 8004d46:	18db      	adds	r3, r3, r3
 8004d48:	643b      	str	r3, [r7, #64]	; 0x40
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	eb42 0303 	adc.w	r3, r2, r3
 8004d50:	647b      	str	r3, [r7, #68]	; 0x44
 8004d52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d5a:	f7fb faa9 	bl	80002b0 <__aeabi_uldivmod>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <UART_SetConfig+0x2d4>)
 8004d66:	fba3 2301 	umull	r2, r3, r3, r1
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2264      	movs	r2, #100	; 0x64
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	1acb      	subs	r3, r1, r3
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d7a:	4b36      	ldr	r3, [pc, #216]	; (8004e54 <UART_SetConfig+0x2d4>)
 8004d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d88:	441c      	add	r4, r3
 8004d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	1891      	adds	r1, r2, r2
 8004da2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004da4:	415b      	adcs	r3, r3
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dac:	4641      	mov	r1, r8
 8004dae:	1851      	adds	r1, r2, r1
 8004db0:	6339      	str	r1, [r7, #48]	; 0x30
 8004db2:	4649      	mov	r1, r9
 8004db4:	414b      	adcs	r3, r1
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	00cb      	lsls	r3, r1, #3
 8004dc8:	4651      	mov	r1, sl
 8004dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dce:	4651      	mov	r1, sl
 8004dd0:	00ca      	lsls	r2, r1, #3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4642      	mov	r2, r8
 8004dda:	189b      	adds	r3, r3, r2
 8004ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004de0:	464b      	mov	r3, r9
 8004de2:	460a      	mov	r2, r1
 8004de4:	eb42 0303 	adc.w	r3, r2, r3
 8004de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004df8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e00:	460b      	mov	r3, r1
 8004e02:	18db      	adds	r3, r3, r3
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e06:	4613      	mov	r3, r2
 8004e08:	eb42 0303 	adc.w	r3, r2, r3
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e16:	f7fb fa4b 	bl	80002b0 <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <UART_SetConfig+0x2d4>)
 8004e20:	fba3 1302 	umull	r1, r3, r3, r2
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	2164      	movs	r1, #100	; 0x64
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	3332      	adds	r3, #50	; 0x32
 8004e32:	4a08      	ldr	r2, [pc, #32]	; (8004e54 <UART_SetConfig+0x2d4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	f003 0207 	and.w	r2, r3, #7
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4422      	add	r2, r4
 8004e46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e48:	e105      	b.n	8005056 <UART_SetConfig+0x4d6>
 8004e4a:	bf00      	nop
 8004e4c:	40011000 	.word	0x40011000
 8004e50:	40011400 	.word	0x40011400
 8004e54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e6a:	4642      	mov	r2, r8
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	1891      	adds	r1, r2, r2
 8004e70:	6239      	str	r1, [r7, #32]
 8004e72:	415b      	adcs	r3, r3
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
 8004e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	1854      	adds	r4, r2, r1
 8004e7e:	4649      	mov	r1, r9
 8004e80:	eb43 0501 	adc.w	r5, r3, r1
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	00eb      	lsls	r3, r5, #3
 8004e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e92:	00e2      	lsls	r2, r4, #3
 8004e94:	4614      	mov	r4, r2
 8004e96:	461d      	mov	r5, r3
 8004e98:	4643      	mov	r3, r8
 8004e9a:	18e3      	adds	r3, r4, r3
 8004e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	eb45 0303 	adc.w	r3, r5, r3
 8004ea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	008b      	lsls	r3, r1, #2
 8004eca:	4621      	mov	r1, r4
 8004ecc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	008a      	lsls	r2, r1, #2
 8004ed4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ed8:	f7fb f9ea 	bl	80002b0 <__aeabi_uldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4b60      	ldr	r3, [pc, #384]	; (8005064 <UART_SetConfig+0x4e4>)
 8004ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	011c      	lsls	r4, r3, #4
 8004eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ef4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ef8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004efc:	4642      	mov	r2, r8
 8004efe:	464b      	mov	r3, r9
 8004f00:	1891      	adds	r1, r2, r2
 8004f02:	61b9      	str	r1, [r7, #24]
 8004f04:	415b      	adcs	r3, r3
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	1851      	adds	r1, r2, r1
 8004f10:	6139      	str	r1, [r7, #16]
 8004f12:	4649      	mov	r1, r9
 8004f14:	414b      	adcs	r3, r1
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f24:	4659      	mov	r1, fp
 8004f26:	00cb      	lsls	r3, r1, #3
 8004f28:	4651      	mov	r1, sl
 8004f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2e:	4651      	mov	r1, sl
 8004f30:	00ca      	lsls	r2, r1, #3
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	4642      	mov	r2, r8
 8004f3a:	189b      	adds	r3, r3, r2
 8004f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f40:	464b      	mov	r3, r9
 8004f42:	460a      	mov	r2, r1
 8004f44:	eb42 0303 	adc.w	r3, r2, r3
 8004f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f64:	4649      	mov	r1, r9
 8004f66:	008b      	lsls	r3, r1, #2
 8004f68:	4641      	mov	r1, r8
 8004f6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f6e:	4641      	mov	r1, r8
 8004f70:	008a      	lsls	r2, r1, #2
 8004f72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f76:	f7fb f99b 	bl	80002b0 <__aeabi_uldivmod>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4b39      	ldr	r3, [pc, #228]	; (8005064 <UART_SetConfig+0x4e4>)
 8004f80:	fba3 1302 	umull	r1, r3, r3, r2
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	2164      	movs	r1, #100	; 0x64
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	3332      	adds	r3, #50	; 0x32
 8004f92:	4a34      	ldr	r2, [pc, #208]	; (8005064 <UART_SetConfig+0x4e4>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f9e:	441c      	add	r4, r3
 8004fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8004fa8:	677a      	str	r2, [r7, #116]	; 0x74
 8004faa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fae:	4642      	mov	r2, r8
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	1891      	adds	r1, r2, r2
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	415b      	adcs	r3, r3
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	1851      	adds	r1, r2, r1
 8004fc2:	6039      	str	r1, [r7, #0]
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	414b      	adcs	r3, r1
 8004fc8:	607b      	str	r3, [r7, #4]
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fd6:	4659      	mov	r1, fp
 8004fd8:	00cb      	lsls	r3, r1, #3
 8004fda:	4651      	mov	r1, sl
 8004fdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	00ca      	lsls	r2, r1, #3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4642      	mov	r2, r8
 8004fec:	189b      	adds	r3, r3, r2
 8004fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	663b      	str	r3, [r7, #96]	; 0x60
 8005004:	667a      	str	r2, [r7, #100]	; 0x64
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005012:	4649      	mov	r1, r9
 8005014:	008b      	lsls	r3, r1, #2
 8005016:	4641      	mov	r1, r8
 8005018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501c:	4641      	mov	r1, r8
 800501e:	008a      	lsls	r2, r1, #2
 8005020:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005024:	f7fb f944 	bl	80002b0 <__aeabi_uldivmod>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <UART_SetConfig+0x4e4>)
 800502e:	fba3 1302 	umull	r1, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2164      	movs	r1, #100	; 0x64
 8005036:	fb01 f303 	mul.w	r3, r1, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	3332      	adds	r3, #50	; 0x32
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <UART_SetConfig+0x4e4>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	f003 020f 	and.w	r2, r3, #15
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4422      	add	r2, r4
 8005054:	609a      	str	r2, [r3, #8]
}
 8005056:	bf00      	nop
 8005058:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop
 8005064:	51eb851f 	.word	0x51eb851f

08005068 <__errno>:
 8005068:	4b01      	ldr	r3, [pc, #4]	; (8005070 <__errno+0x8>)
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	2000000c 	.word	0x2000000c

08005074 <__libc_init_array>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4d0d      	ldr	r5, [pc, #52]	; (80050ac <__libc_init_array+0x38>)
 8005078:	4c0d      	ldr	r4, [pc, #52]	; (80050b0 <__libc_init_array+0x3c>)
 800507a:	1b64      	subs	r4, r4, r5
 800507c:	10a4      	asrs	r4, r4, #2
 800507e:	2600      	movs	r6, #0
 8005080:	42a6      	cmp	r6, r4
 8005082:	d109      	bne.n	8005098 <__libc_init_array+0x24>
 8005084:	4d0b      	ldr	r5, [pc, #44]	; (80050b4 <__libc_init_array+0x40>)
 8005086:	4c0c      	ldr	r4, [pc, #48]	; (80050b8 <__libc_init_array+0x44>)
 8005088:	f000 fc8e 	bl	80059a8 <_init>
 800508c:	1b64      	subs	r4, r4, r5
 800508e:	10a4      	asrs	r4, r4, #2
 8005090:	2600      	movs	r6, #0
 8005092:	42a6      	cmp	r6, r4
 8005094:	d105      	bne.n	80050a2 <__libc_init_array+0x2e>
 8005096:	bd70      	pop	{r4, r5, r6, pc}
 8005098:	f855 3b04 	ldr.w	r3, [r5], #4
 800509c:	4798      	blx	r3
 800509e:	3601      	adds	r6, #1
 80050a0:	e7ee      	b.n	8005080 <__libc_init_array+0xc>
 80050a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a6:	4798      	blx	r3
 80050a8:	3601      	adds	r6, #1
 80050aa:	e7f2      	b.n	8005092 <__libc_init_array+0x1e>
 80050ac:	08005a6c 	.word	0x08005a6c
 80050b0:	08005a6c 	.word	0x08005a6c
 80050b4:	08005a6c 	.word	0x08005a6c
 80050b8:	08005a70 	.word	0x08005a70

080050bc <memcpy>:
 80050bc:	440a      	add	r2, r1
 80050be:	4291      	cmp	r1, r2
 80050c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80050c4:	d100      	bne.n	80050c8 <memcpy+0xc>
 80050c6:	4770      	bx	lr
 80050c8:	b510      	push	{r4, lr}
 80050ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d2:	4291      	cmp	r1, r2
 80050d4:	d1f9      	bne.n	80050ca <memcpy+0xe>
 80050d6:	bd10      	pop	{r4, pc}

080050d8 <memset>:
 80050d8:	4402      	add	r2, r0
 80050da:	4603      	mov	r3, r0
 80050dc:	4293      	cmp	r3, r2
 80050de:	d100      	bne.n	80050e2 <memset+0xa>
 80050e0:	4770      	bx	lr
 80050e2:	f803 1b01 	strb.w	r1, [r3], #1
 80050e6:	e7f9      	b.n	80050dc <memset+0x4>

080050e8 <siprintf>:
 80050e8:	b40e      	push	{r1, r2, r3}
 80050ea:	b500      	push	{lr}
 80050ec:	b09c      	sub	sp, #112	; 0x70
 80050ee:	ab1d      	add	r3, sp, #116	; 0x74
 80050f0:	9002      	str	r0, [sp, #8]
 80050f2:	9006      	str	r0, [sp, #24]
 80050f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050f8:	4809      	ldr	r0, [pc, #36]	; (8005120 <siprintf+0x38>)
 80050fa:	9107      	str	r1, [sp, #28]
 80050fc:	9104      	str	r1, [sp, #16]
 80050fe:	4909      	ldr	r1, [pc, #36]	; (8005124 <siprintf+0x3c>)
 8005100:	f853 2b04 	ldr.w	r2, [r3], #4
 8005104:	9105      	str	r1, [sp, #20]
 8005106:	6800      	ldr	r0, [r0, #0]
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	a902      	add	r1, sp, #8
 800510c:	f000 f868 	bl	80051e0 <_svfiprintf_r>
 8005110:	9b02      	ldr	r3, [sp, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	b01c      	add	sp, #112	; 0x70
 8005118:	f85d eb04 	ldr.w	lr, [sp], #4
 800511c:	b003      	add	sp, #12
 800511e:	4770      	bx	lr
 8005120:	2000000c 	.word	0x2000000c
 8005124:	ffff0208 	.word	0xffff0208

08005128 <__ssputs_r>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	688e      	ldr	r6, [r1, #8]
 800512e:	429e      	cmp	r6, r3
 8005130:	4682      	mov	sl, r0
 8005132:	460c      	mov	r4, r1
 8005134:	4690      	mov	r8, r2
 8005136:	461f      	mov	r7, r3
 8005138:	d838      	bhi.n	80051ac <__ssputs_r+0x84>
 800513a:	898a      	ldrh	r2, [r1, #12]
 800513c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005140:	d032      	beq.n	80051a8 <__ssputs_r+0x80>
 8005142:	6825      	ldr	r5, [r4, #0]
 8005144:	6909      	ldr	r1, [r1, #16]
 8005146:	eba5 0901 	sub.w	r9, r5, r1
 800514a:	6965      	ldr	r5, [r4, #20]
 800514c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005154:	3301      	adds	r3, #1
 8005156:	444b      	add	r3, r9
 8005158:	106d      	asrs	r5, r5, #1
 800515a:	429d      	cmp	r5, r3
 800515c:	bf38      	it	cc
 800515e:	461d      	movcc	r5, r3
 8005160:	0553      	lsls	r3, r2, #21
 8005162:	d531      	bpl.n	80051c8 <__ssputs_r+0xa0>
 8005164:	4629      	mov	r1, r5
 8005166:	f000 fb55 	bl	8005814 <_malloc_r>
 800516a:	4606      	mov	r6, r0
 800516c:	b950      	cbnz	r0, 8005184 <__ssputs_r+0x5c>
 800516e:	230c      	movs	r3, #12
 8005170:	f8ca 3000 	str.w	r3, [sl]
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517a:	81a3      	strh	r3, [r4, #12]
 800517c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005184:	6921      	ldr	r1, [r4, #16]
 8005186:	464a      	mov	r2, r9
 8005188:	f7ff ff98 	bl	80050bc <memcpy>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	6126      	str	r6, [r4, #16]
 800519a:	6165      	str	r5, [r4, #20]
 800519c:	444e      	add	r6, r9
 800519e:	eba5 0509 	sub.w	r5, r5, r9
 80051a2:	6026      	str	r6, [r4, #0]
 80051a4:	60a5      	str	r5, [r4, #8]
 80051a6:	463e      	mov	r6, r7
 80051a8:	42be      	cmp	r6, r7
 80051aa:	d900      	bls.n	80051ae <__ssputs_r+0x86>
 80051ac:	463e      	mov	r6, r7
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	4632      	mov	r2, r6
 80051b2:	4641      	mov	r1, r8
 80051b4:	f000 faa8 	bl	8005708 <memmove>
 80051b8:	68a3      	ldr	r3, [r4, #8]
 80051ba:	1b9b      	subs	r3, r3, r6
 80051bc:	60a3      	str	r3, [r4, #8]
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	4433      	add	r3, r6
 80051c2:	6023      	str	r3, [r4, #0]
 80051c4:	2000      	movs	r0, #0
 80051c6:	e7db      	b.n	8005180 <__ssputs_r+0x58>
 80051c8:	462a      	mov	r2, r5
 80051ca:	f000 fb97 	bl	80058fc <_realloc_r>
 80051ce:	4606      	mov	r6, r0
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d1e1      	bne.n	8005198 <__ssputs_r+0x70>
 80051d4:	6921      	ldr	r1, [r4, #16]
 80051d6:	4650      	mov	r0, sl
 80051d8:	f000 fab0 	bl	800573c <_free_r>
 80051dc:	e7c7      	b.n	800516e <__ssputs_r+0x46>
	...

080051e0 <_svfiprintf_r>:
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	4698      	mov	r8, r3
 80051e6:	898b      	ldrh	r3, [r1, #12]
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	b09d      	sub	sp, #116	; 0x74
 80051ec:	4607      	mov	r7, r0
 80051ee:	460d      	mov	r5, r1
 80051f0:	4614      	mov	r4, r2
 80051f2:	d50e      	bpl.n	8005212 <_svfiprintf_r+0x32>
 80051f4:	690b      	ldr	r3, [r1, #16]
 80051f6:	b963      	cbnz	r3, 8005212 <_svfiprintf_r+0x32>
 80051f8:	2140      	movs	r1, #64	; 0x40
 80051fa:	f000 fb0b 	bl	8005814 <_malloc_r>
 80051fe:	6028      	str	r0, [r5, #0]
 8005200:	6128      	str	r0, [r5, #16]
 8005202:	b920      	cbnz	r0, 800520e <_svfiprintf_r+0x2e>
 8005204:	230c      	movs	r3, #12
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800520c:	e0d1      	b.n	80053b2 <_svfiprintf_r+0x1d2>
 800520e:	2340      	movs	r3, #64	; 0x40
 8005210:	616b      	str	r3, [r5, #20]
 8005212:	2300      	movs	r3, #0
 8005214:	9309      	str	r3, [sp, #36]	; 0x24
 8005216:	2320      	movs	r3, #32
 8005218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800521c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005220:	2330      	movs	r3, #48	; 0x30
 8005222:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80053cc <_svfiprintf_r+0x1ec>
 8005226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800522a:	f04f 0901 	mov.w	r9, #1
 800522e:	4623      	mov	r3, r4
 8005230:	469a      	mov	sl, r3
 8005232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005236:	b10a      	cbz	r2, 800523c <_svfiprintf_r+0x5c>
 8005238:	2a25      	cmp	r2, #37	; 0x25
 800523a:	d1f9      	bne.n	8005230 <_svfiprintf_r+0x50>
 800523c:	ebba 0b04 	subs.w	fp, sl, r4
 8005240:	d00b      	beq.n	800525a <_svfiprintf_r+0x7a>
 8005242:	465b      	mov	r3, fp
 8005244:	4622      	mov	r2, r4
 8005246:	4629      	mov	r1, r5
 8005248:	4638      	mov	r0, r7
 800524a:	f7ff ff6d 	bl	8005128 <__ssputs_r>
 800524e:	3001      	adds	r0, #1
 8005250:	f000 80aa 	beq.w	80053a8 <_svfiprintf_r+0x1c8>
 8005254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005256:	445a      	add	r2, fp
 8005258:	9209      	str	r2, [sp, #36]	; 0x24
 800525a:	f89a 3000 	ldrb.w	r3, [sl]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80a2 	beq.w	80053a8 <_svfiprintf_r+0x1c8>
 8005264:	2300      	movs	r3, #0
 8005266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800526a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800526e:	f10a 0a01 	add.w	sl, sl, #1
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	9307      	str	r3, [sp, #28]
 8005276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800527a:	931a      	str	r3, [sp, #104]	; 0x68
 800527c:	4654      	mov	r4, sl
 800527e:	2205      	movs	r2, #5
 8005280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005284:	4851      	ldr	r0, [pc, #324]	; (80053cc <_svfiprintf_r+0x1ec>)
 8005286:	f7fa ffc3 	bl	8000210 <memchr>
 800528a:	9a04      	ldr	r2, [sp, #16]
 800528c:	b9d8      	cbnz	r0, 80052c6 <_svfiprintf_r+0xe6>
 800528e:	06d0      	lsls	r0, r2, #27
 8005290:	bf44      	itt	mi
 8005292:	2320      	movmi	r3, #32
 8005294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005298:	0711      	lsls	r1, r2, #28
 800529a:	bf44      	itt	mi
 800529c:	232b      	movmi	r3, #43	; 0x2b
 800529e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a2:	f89a 3000 	ldrb.w	r3, [sl]
 80052a6:	2b2a      	cmp	r3, #42	; 0x2a
 80052a8:	d015      	beq.n	80052d6 <_svfiprintf_r+0xf6>
 80052aa:	9a07      	ldr	r2, [sp, #28]
 80052ac:	4654      	mov	r4, sl
 80052ae:	2000      	movs	r0, #0
 80052b0:	f04f 0c0a 	mov.w	ip, #10
 80052b4:	4621      	mov	r1, r4
 80052b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ba:	3b30      	subs	r3, #48	; 0x30
 80052bc:	2b09      	cmp	r3, #9
 80052be:	d94e      	bls.n	800535e <_svfiprintf_r+0x17e>
 80052c0:	b1b0      	cbz	r0, 80052f0 <_svfiprintf_r+0x110>
 80052c2:	9207      	str	r2, [sp, #28]
 80052c4:	e014      	b.n	80052f0 <_svfiprintf_r+0x110>
 80052c6:	eba0 0308 	sub.w	r3, r0, r8
 80052ca:	fa09 f303 	lsl.w	r3, r9, r3
 80052ce:	4313      	orrs	r3, r2
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	46a2      	mov	sl, r4
 80052d4:	e7d2      	b.n	800527c <_svfiprintf_r+0x9c>
 80052d6:	9b03      	ldr	r3, [sp, #12]
 80052d8:	1d19      	adds	r1, r3, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	9103      	str	r1, [sp, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	bfbb      	ittet	lt
 80052e2:	425b      	neglt	r3, r3
 80052e4:	f042 0202 	orrlt.w	r2, r2, #2
 80052e8:	9307      	strge	r3, [sp, #28]
 80052ea:	9307      	strlt	r3, [sp, #28]
 80052ec:	bfb8      	it	lt
 80052ee:	9204      	strlt	r2, [sp, #16]
 80052f0:	7823      	ldrb	r3, [r4, #0]
 80052f2:	2b2e      	cmp	r3, #46	; 0x2e
 80052f4:	d10c      	bne.n	8005310 <_svfiprintf_r+0x130>
 80052f6:	7863      	ldrb	r3, [r4, #1]
 80052f8:	2b2a      	cmp	r3, #42	; 0x2a
 80052fa:	d135      	bne.n	8005368 <_svfiprintf_r+0x188>
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	9203      	str	r2, [sp, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	bfb8      	it	lt
 8005308:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800530c:	3402      	adds	r4, #2
 800530e:	9305      	str	r3, [sp, #20]
 8005310:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053dc <_svfiprintf_r+0x1fc>
 8005314:	7821      	ldrb	r1, [r4, #0]
 8005316:	2203      	movs	r2, #3
 8005318:	4650      	mov	r0, sl
 800531a:	f7fa ff79 	bl	8000210 <memchr>
 800531e:	b140      	cbz	r0, 8005332 <_svfiprintf_r+0x152>
 8005320:	2340      	movs	r3, #64	; 0x40
 8005322:	eba0 000a 	sub.w	r0, r0, sl
 8005326:	fa03 f000 	lsl.w	r0, r3, r0
 800532a:	9b04      	ldr	r3, [sp, #16]
 800532c:	4303      	orrs	r3, r0
 800532e:	3401      	adds	r4, #1
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005336:	4826      	ldr	r0, [pc, #152]	; (80053d0 <_svfiprintf_r+0x1f0>)
 8005338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800533c:	2206      	movs	r2, #6
 800533e:	f7fa ff67 	bl	8000210 <memchr>
 8005342:	2800      	cmp	r0, #0
 8005344:	d038      	beq.n	80053b8 <_svfiprintf_r+0x1d8>
 8005346:	4b23      	ldr	r3, [pc, #140]	; (80053d4 <_svfiprintf_r+0x1f4>)
 8005348:	bb1b      	cbnz	r3, 8005392 <_svfiprintf_r+0x1b2>
 800534a:	9b03      	ldr	r3, [sp, #12]
 800534c:	3307      	adds	r3, #7
 800534e:	f023 0307 	bic.w	r3, r3, #7
 8005352:	3308      	adds	r3, #8
 8005354:	9303      	str	r3, [sp, #12]
 8005356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005358:	4433      	add	r3, r6
 800535a:	9309      	str	r3, [sp, #36]	; 0x24
 800535c:	e767      	b.n	800522e <_svfiprintf_r+0x4e>
 800535e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005362:	460c      	mov	r4, r1
 8005364:	2001      	movs	r0, #1
 8005366:	e7a5      	b.n	80052b4 <_svfiprintf_r+0xd4>
 8005368:	2300      	movs	r3, #0
 800536a:	3401      	adds	r4, #1
 800536c:	9305      	str	r3, [sp, #20]
 800536e:	4619      	mov	r1, r3
 8005370:	f04f 0c0a 	mov.w	ip, #10
 8005374:	4620      	mov	r0, r4
 8005376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800537a:	3a30      	subs	r2, #48	; 0x30
 800537c:	2a09      	cmp	r2, #9
 800537e:	d903      	bls.n	8005388 <_svfiprintf_r+0x1a8>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0c5      	beq.n	8005310 <_svfiprintf_r+0x130>
 8005384:	9105      	str	r1, [sp, #20]
 8005386:	e7c3      	b.n	8005310 <_svfiprintf_r+0x130>
 8005388:	fb0c 2101 	mla	r1, ip, r1, r2
 800538c:	4604      	mov	r4, r0
 800538e:	2301      	movs	r3, #1
 8005390:	e7f0      	b.n	8005374 <_svfiprintf_r+0x194>
 8005392:	ab03      	add	r3, sp, #12
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	462a      	mov	r2, r5
 8005398:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <_svfiprintf_r+0x1f8>)
 800539a:	a904      	add	r1, sp, #16
 800539c:	4638      	mov	r0, r7
 800539e:	f3af 8000 	nop.w
 80053a2:	1c42      	adds	r2, r0, #1
 80053a4:	4606      	mov	r6, r0
 80053a6:	d1d6      	bne.n	8005356 <_svfiprintf_r+0x176>
 80053a8:	89ab      	ldrh	r3, [r5, #12]
 80053aa:	065b      	lsls	r3, r3, #25
 80053ac:	f53f af2c 	bmi.w	8005208 <_svfiprintf_r+0x28>
 80053b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053b2:	b01d      	add	sp, #116	; 0x74
 80053b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b8:	ab03      	add	r3, sp, #12
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	462a      	mov	r2, r5
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <_svfiprintf_r+0x1f8>)
 80053c0:	a904      	add	r1, sp, #16
 80053c2:	4638      	mov	r0, r7
 80053c4:	f000 f87a 	bl	80054bc <_printf_i>
 80053c8:	e7eb      	b.n	80053a2 <_svfiprintf_r+0x1c2>
 80053ca:	bf00      	nop
 80053cc:	08005a30 	.word	0x08005a30
 80053d0:	08005a3a 	.word	0x08005a3a
 80053d4:	00000000 	.word	0x00000000
 80053d8:	08005129 	.word	0x08005129
 80053dc:	08005a36 	.word	0x08005a36

080053e0 <_printf_common>:
 80053e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	4616      	mov	r6, r2
 80053e6:	4699      	mov	r9, r3
 80053e8:	688a      	ldr	r2, [r1, #8]
 80053ea:	690b      	ldr	r3, [r1, #16]
 80053ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053f0:	4293      	cmp	r3, r2
 80053f2:	bfb8      	it	lt
 80053f4:	4613      	movlt	r3, r2
 80053f6:	6033      	str	r3, [r6, #0]
 80053f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053fc:	4607      	mov	r7, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	b10a      	cbz	r2, 8005406 <_printf_common+0x26>
 8005402:	3301      	adds	r3, #1
 8005404:	6033      	str	r3, [r6, #0]
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	0699      	lsls	r1, r3, #26
 800540a:	bf42      	ittt	mi
 800540c:	6833      	ldrmi	r3, [r6, #0]
 800540e:	3302      	addmi	r3, #2
 8005410:	6033      	strmi	r3, [r6, #0]
 8005412:	6825      	ldr	r5, [r4, #0]
 8005414:	f015 0506 	ands.w	r5, r5, #6
 8005418:	d106      	bne.n	8005428 <_printf_common+0x48>
 800541a:	f104 0a19 	add.w	sl, r4, #25
 800541e:	68e3      	ldr	r3, [r4, #12]
 8005420:	6832      	ldr	r2, [r6, #0]
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	42ab      	cmp	r3, r5
 8005426:	dc26      	bgt.n	8005476 <_printf_common+0x96>
 8005428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800542c:	1e13      	subs	r3, r2, #0
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	bf18      	it	ne
 8005432:	2301      	movne	r3, #1
 8005434:	0692      	lsls	r2, r2, #26
 8005436:	d42b      	bmi.n	8005490 <_printf_common+0xb0>
 8005438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800543c:	4649      	mov	r1, r9
 800543e:	4638      	mov	r0, r7
 8005440:	47c0      	blx	r8
 8005442:	3001      	adds	r0, #1
 8005444:	d01e      	beq.n	8005484 <_printf_common+0xa4>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	68e5      	ldr	r5, [r4, #12]
 800544a:	6832      	ldr	r2, [r6, #0]
 800544c:	f003 0306 	and.w	r3, r3, #6
 8005450:	2b04      	cmp	r3, #4
 8005452:	bf08      	it	eq
 8005454:	1aad      	subeq	r5, r5, r2
 8005456:	68a3      	ldr	r3, [r4, #8]
 8005458:	6922      	ldr	r2, [r4, #16]
 800545a:	bf0c      	ite	eq
 800545c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005460:	2500      	movne	r5, #0
 8005462:	4293      	cmp	r3, r2
 8005464:	bfc4      	itt	gt
 8005466:	1a9b      	subgt	r3, r3, r2
 8005468:	18ed      	addgt	r5, r5, r3
 800546a:	2600      	movs	r6, #0
 800546c:	341a      	adds	r4, #26
 800546e:	42b5      	cmp	r5, r6
 8005470:	d11a      	bne.n	80054a8 <_printf_common+0xc8>
 8005472:	2000      	movs	r0, #0
 8005474:	e008      	b.n	8005488 <_printf_common+0xa8>
 8005476:	2301      	movs	r3, #1
 8005478:	4652      	mov	r2, sl
 800547a:	4649      	mov	r1, r9
 800547c:	4638      	mov	r0, r7
 800547e:	47c0      	blx	r8
 8005480:	3001      	adds	r0, #1
 8005482:	d103      	bne.n	800548c <_printf_common+0xac>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548c:	3501      	adds	r5, #1
 800548e:	e7c6      	b.n	800541e <_printf_common+0x3e>
 8005490:	18e1      	adds	r1, r4, r3
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	2030      	movs	r0, #48	; 0x30
 8005496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800549a:	4422      	add	r2, r4
 800549c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054a4:	3302      	adds	r3, #2
 80054a6:	e7c7      	b.n	8005438 <_printf_common+0x58>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4622      	mov	r2, r4
 80054ac:	4649      	mov	r1, r9
 80054ae:	4638      	mov	r0, r7
 80054b0:	47c0      	blx	r8
 80054b2:	3001      	adds	r0, #1
 80054b4:	d0e6      	beq.n	8005484 <_printf_common+0xa4>
 80054b6:	3601      	adds	r6, #1
 80054b8:	e7d9      	b.n	800546e <_printf_common+0x8e>
	...

080054bc <_printf_i>:
 80054bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	7e0f      	ldrb	r7, [r1, #24]
 80054c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054c4:	2f78      	cmp	r7, #120	; 0x78
 80054c6:	4691      	mov	r9, r2
 80054c8:	4680      	mov	r8, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	469a      	mov	sl, r3
 80054ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054d2:	d807      	bhi.n	80054e4 <_printf_i+0x28>
 80054d4:	2f62      	cmp	r7, #98	; 0x62
 80054d6:	d80a      	bhi.n	80054ee <_printf_i+0x32>
 80054d8:	2f00      	cmp	r7, #0
 80054da:	f000 80d8 	beq.w	800568e <_printf_i+0x1d2>
 80054de:	2f58      	cmp	r7, #88	; 0x58
 80054e0:	f000 80a3 	beq.w	800562a <_printf_i+0x16e>
 80054e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054ec:	e03a      	b.n	8005564 <_printf_i+0xa8>
 80054ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054f2:	2b15      	cmp	r3, #21
 80054f4:	d8f6      	bhi.n	80054e4 <_printf_i+0x28>
 80054f6:	a101      	add	r1, pc, #4	; (adr r1, 80054fc <_printf_i+0x40>)
 80054f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054fc:	08005555 	.word	0x08005555
 8005500:	08005569 	.word	0x08005569
 8005504:	080054e5 	.word	0x080054e5
 8005508:	080054e5 	.word	0x080054e5
 800550c:	080054e5 	.word	0x080054e5
 8005510:	080054e5 	.word	0x080054e5
 8005514:	08005569 	.word	0x08005569
 8005518:	080054e5 	.word	0x080054e5
 800551c:	080054e5 	.word	0x080054e5
 8005520:	080054e5 	.word	0x080054e5
 8005524:	080054e5 	.word	0x080054e5
 8005528:	08005675 	.word	0x08005675
 800552c:	08005599 	.word	0x08005599
 8005530:	08005657 	.word	0x08005657
 8005534:	080054e5 	.word	0x080054e5
 8005538:	080054e5 	.word	0x080054e5
 800553c:	08005697 	.word	0x08005697
 8005540:	080054e5 	.word	0x080054e5
 8005544:	08005599 	.word	0x08005599
 8005548:	080054e5 	.word	0x080054e5
 800554c:	080054e5 	.word	0x080054e5
 8005550:	0800565f 	.word	0x0800565f
 8005554:	682b      	ldr	r3, [r5, #0]
 8005556:	1d1a      	adds	r2, r3, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	602a      	str	r2, [r5, #0]
 800555c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005564:	2301      	movs	r3, #1
 8005566:	e0a3      	b.n	80056b0 <_printf_i+0x1f4>
 8005568:	6820      	ldr	r0, [r4, #0]
 800556a:	6829      	ldr	r1, [r5, #0]
 800556c:	0606      	lsls	r6, r0, #24
 800556e:	f101 0304 	add.w	r3, r1, #4
 8005572:	d50a      	bpl.n	800558a <_printf_i+0xce>
 8005574:	680e      	ldr	r6, [r1, #0]
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	2e00      	cmp	r6, #0
 800557a:	da03      	bge.n	8005584 <_printf_i+0xc8>
 800557c:	232d      	movs	r3, #45	; 0x2d
 800557e:	4276      	negs	r6, r6
 8005580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005584:	485e      	ldr	r0, [pc, #376]	; (8005700 <_printf_i+0x244>)
 8005586:	230a      	movs	r3, #10
 8005588:	e019      	b.n	80055be <_printf_i+0x102>
 800558a:	680e      	ldr	r6, [r1, #0]
 800558c:	602b      	str	r3, [r5, #0]
 800558e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005592:	bf18      	it	ne
 8005594:	b236      	sxthne	r6, r6
 8005596:	e7ef      	b.n	8005578 <_printf_i+0xbc>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	6820      	ldr	r0, [r4, #0]
 800559c:	1d19      	adds	r1, r3, #4
 800559e:	6029      	str	r1, [r5, #0]
 80055a0:	0601      	lsls	r1, r0, #24
 80055a2:	d501      	bpl.n	80055a8 <_printf_i+0xec>
 80055a4:	681e      	ldr	r6, [r3, #0]
 80055a6:	e002      	b.n	80055ae <_printf_i+0xf2>
 80055a8:	0646      	lsls	r6, r0, #25
 80055aa:	d5fb      	bpl.n	80055a4 <_printf_i+0xe8>
 80055ac:	881e      	ldrh	r6, [r3, #0]
 80055ae:	4854      	ldr	r0, [pc, #336]	; (8005700 <_printf_i+0x244>)
 80055b0:	2f6f      	cmp	r7, #111	; 0x6f
 80055b2:	bf0c      	ite	eq
 80055b4:	2308      	moveq	r3, #8
 80055b6:	230a      	movne	r3, #10
 80055b8:	2100      	movs	r1, #0
 80055ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055be:	6865      	ldr	r5, [r4, #4]
 80055c0:	60a5      	str	r5, [r4, #8]
 80055c2:	2d00      	cmp	r5, #0
 80055c4:	bfa2      	ittt	ge
 80055c6:	6821      	ldrge	r1, [r4, #0]
 80055c8:	f021 0104 	bicge.w	r1, r1, #4
 80055cc:	6021      	strge	r1, [r4, #0]
 80055ce:	b90e      	cbnz	r6, 80055d4 <_printf_i+0x118>
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	d04d      	beq.n	8005670 <_printf_i+0x1b4>
 80055d4:	4615      	mov	r5, r2
 80055d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80055da:	fb03 6711 	mls	r7, r3, r1, r6
 80055de:	5dc7      	ldrb	r7, [r0, r7]
 80055e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055e4:	4637      	mov	r7, r6
 80055e6:	42bb      	cmp	r3, r7
 80055e8:	460e      	mov	r6, r1
 80055ea:	d9f4      	bls.n	80055d6 <_printf_i+0x11a>
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d10b      	bne.n	8005608 <_printf_i+0x14c>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	07de      	lsls	r6, r3, #31
 80055f4:	d508      	bpl.n	8005608 <_printf_i+0x14c>
 80055f6:	6923      	ldr	r3, [r4, #16]
 80055f8:	6861      	ldr	r1, [r4, #4]
 80055fa:	4299      	cmp	r1, r3
 80055fc:	bfde      	ittt	le
 80055fe:	2330      	movle	r3, #48	; 0x30
 8005600:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005604:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005608:	1b52      	subs	r2, r2, r5
 800560a:	6122      	str	r2, [r4, #16]
 800560c:	f8cd a000 	str.w	sl, [sp]
 8005610:	464b      	mov	r3, r9
 8005612:	aa03      	add	r2, sp, #12
 8005614:	4621      	mov	r1, r4
 8005616:	4640      	mov	r0, r8
 8005618:	f7ff fee2 	bl	80053e0 <_printf_common>
 800561c:	3001      	adds	r0, #1
 800561e:	d14c      	bne.n	80056ba <_printf_i+0x1fe>
 8005620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005624:	b004      	add	sp, #16
 8005626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562a:	4835      	ldr	r0, [pc, #212]	; (8005700 <_printf_i+0x244>)
 800562c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005630:	6829      	ldr	r1, [r5, #0]
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	f851 6b04 	ldr.w	r6, [r1], #4
 8005638:	6029      	str	r1, [r5, #0]
 800563a:	061d      	lsls	r5, r3, #24
 800563c:	d514      	bpl.n	8005668 <_printf_i+0x1ac>
 800563e:	07df      	lsls	r7, r3, #31
 8005640:	bf44      	itt	mi
 8005642:	f043 0320 	orrmi.w	r3, r3, #32
 8005646:	6023      	strmi	r3, [r4, #0]
 8005648:	b91e      	cbnz	r6, 8005652 <_printf_i+0x196>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	f023 0320 	bic.w	r3, r3, #32
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	2310      	movs	r3, #16
 8005654:	e7b0      	b.n	80055b8 <_printf_i+0xfc>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	f043 0320 	orr.w	r3, r3, #32
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	2378      	movs	r3, #120	; 0x78
 8005660:	4828      	ldr	r0, [pc, #160]	; (8005704 <_printf_i+0x248>)
 8005662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005666:	e7e3      	b.n	8005630 <_printf_i+0x174>
 8005668:	0659      	lsls	r1, r3, #25
 800566a:	bf48      	it	mi
 800566c:	b2b6      	uxthmi	r6, r6
 800566e:	e7e6      	b.n	800563e <_printf_i+0x182>
 8005670:	4615      	mov	r5, r2
 8005672:	e7bb      	b.n	80055ec <_printf_i+0x130>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	6826      	ldr	r6, [r4, #0]
 8005678:	6961      	ldr	r1, [r4, #20]
 800567a:	1d18      	adds	r0, r3, #4
 800567c:	6028      	str	r0, [r5, #0]
 800567e:	0635      	lsls	r5, r6, #24
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	d501      	bpl.n	8005688 <_printf_i+0x1cc>
 8005684:	6019      	str	r1, [r3, #0]
 8005686:	e002      	b.n	800568e <_printf_i+0x1d2>
 8005688:	0670      	lsls	r0, r6, #25
 800568a:	d5fb      	bpl.n	8005684 <_printf_i+0x1c8>
 800568c:	8019      	strh	r1, [r3, #0]
 800568e:	2300      	movs	r3, #0
 8005690:	6123      	str	r3, [r4, #16]
 8005692:	4615      	mov	r5, r2
 8005694:	e7ba      	b.n	800560c <_printf_i+0x150>
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	1d1a      	adds	r2, r3, #4
 800569a:	602a      	str	r2, [r5, #0]
 800569c:	681d      	ldr	r5, [r3, #0]
 800569e:	6862      	ldr	r2, [r4, #4]
 80056a0:	2100      	movs	r1, #0
 80056a2:	4628      	mov	r0, r5
 80056a4:	f7fa fdb4 	bl	8000210 <memchr>
 80056a8:	b108      	cbz	r0, 80056ae <_printf_i+0x1f2>
 80056aa:	1b40      	subs	r0, r0, r5
 80056ac:	6060      	str	r0, [r4, #4]
 80056ae:	6863      	ldr	r3, [r4, #4]
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	2300      	movs	r3, #0
 80056b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b8:	e7a8      	b.n	800560c <_printf_i+0x150>
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	462a      	mov	r2, r5
 80056be:	4649      	mov	r1, r9
 80056c0:	4640      	mov	r0, r8
 80056c2:	47d0      	blx	sl
 80056c4:	3001      	adds	r0, #1
 80056c6:	d0ab      	beq.n	8005620 <_printf_i+0x164>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	079b      	lsls	r3, r3, #30
 80056cc:	d413      	bmi.n	80056f6 <_printf_i+0x23a>
 80056ce:	68e0      	ldr	r0, [r4, #12]
 80056d0:	9b03      	ldr	r3, [sp, #12]
 80056d2:	4298      	cmp	r0, r3
 80056d4:	bfb8      	it	lt
 80056d6:	4618      	movlt	r0, r3
 80056d8:	e7a4      	b.n	8005624 <_printf_i+0x168>
 80056da:	2301      	movs	r3, #1
 80056dc:	4632      	mov	r2, r6
 80056de:	4649      	mov	r1, r9
 80056e0:	4640      	mov	r0, r8
 80056e2:	47d0      	blx	sl
 80056e4:	3001      	adds	r0, #1
 80056e6:	d09b      	beq.n	8005620 <_printf_i+0x164>
 80056e8:	3501      	adds	r5, #1
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	9903      	ldr	r1, [sp, #12]
 80056ee:	1a5b      	subs	r3, r3, r1
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dcf2      	bgt.n	80056da <_printf_i+0x21e>
 80056f4:	e7eb      	b.n	80056ce <_printf_i+0x212>
 80056f6:	2500      	movs	r5, #0
 80056f8:	f104 0619 	add.w	r6, r4, #25
 80056fc:	e7f5      	b.n	80056ea <_printf_i+0x22e>
 80056fe:	bf00      	nop
 8005700:	08005a41 	.word	0x08005a41
 8005704:	08005a52 	.word	0x08005a52

08005708 <memmove>:
 8005708:	4288      	cmp	r0, r1
 800570a:	b510      	push	{r4, lr}
 800570c:	eb01 0402 	add.w	r4, r1, r2
 8005710:	d902      	bls.n	8005718 <memmove+0x10>
 8005712:	4284      	cmp	r4, r0
 8005714:	4623      	mov	r3, r4
 8005716:	d807      	bhi.n	8005728 <memmove+0x20>
 8005718:	1e43      	subs	r3, r0, #1
 800571a:	42a1      	cmp	r1, r4
 800571c:	d008      	beq.n	8005730 <memmove+0x28>
 800571e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005726:	e7f8      	b.n	800571a <memmove+0x12>
 8005728:	4402      	add	r2, r0
 800572a:	4601      	mov	r1, r0
 800572c:	428a      	cmp	r2, r1
 800572e:	d100      	bne.n	8005732 <memmove+0x2a>
 8005730:	bd10      	pop	{r4, pc}
 8005732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800573a:	e7f7      	b.n	800572c <memmove+0x24>

0800573c <_free_r>:
 800573c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800573e:	2900      	cmp	r1, #0
 8005740:	d044      	beq.n	80057cc <_free_r+0x90>
 8005742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005746:	9001      	str	r0, [sp, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	f1a1 0404 	sub.w	r4, r1, #4
 800574e:	bfb8      	it	lt
 8005750:	18e4      	addlt	r4, r4, r3
 8005752:	f000 f913 	bl	800597c <__malloc_lock>
 8005756:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <_free_r+0x94>)
 8005758:	9801      	ldr	r0, [sp, #4]
 800575a:	6813      	ldr	r3, [r2, #0]
 800575c:	b933      	cbnz	r3, 800576c <_free_r+0x30>
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	6014      	str	r4, [r2, #0]
 8005762:	b003      	add	sp, #12
 8005764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005768:	f000 b90e 	b.w	8005988 <__malloc_unlock>
 800576c:	42a3      	cmp	r3, r4
 800576e:	d908      	bls.n	8005782 <_free_r+0x46>
 8005770:	6825      	ldr	r5, [r4, #0]
 8005772:	1961      	adds	r1, r4, r5
 8005774:	428b      	cmp	r3, r1
 8005776:	bf01      	itttt	eq
 8005778:	6819      	ldreq	r1, [r3, #0]
 800577a:	685b      	ldreq	r3, [r3, #4]
 800577c:	1949      	addeq	r1, r1, r5
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	e7ed      	b.n	800575e <_free_r+0x22>
 8005782:	461a      	mov	r2, r3
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	b10b      	cbz	r3, 800578c <_free_r+0x50>
 8005788:	42a3      	cmp	r3, r4
 800578a:	d9fa      	bls.n	8005782 <_free_r+0x46>
 800578c:	6811      	ldr	r1, [r2, #0]
 800578e:	1855      	adds	r5, r2, r1
 8005790:	42a5      	cmp	r5, r4
 8005792:	d10b      	bne.n	80057ac <_free_r+0x70>
 8005794:	6824      	ldr	r4, [r4, #0]
 8005796:	4421      	add	r1, r4
 8005798:	1854      	adds	r4, r2, r1
 800579a:	42a3      	cmp	r3, r4
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	d1e0      	bne.n	8005762 <_free_r+0x26>
 80057a0:	681c      	ldr	r4, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	6053      	str	r3, [r2, #4]
 80057a6:	4421      	add	r1, r4
 80057a8:	6011      	str	r1, [r2, #0]
 80057aa:	e7da      	b.n	8005762 <_free_r+0x26>
 80057ac:	d902      	bls.n	80057b4 <_free_r+0x78>
 80057ae:	230c      	movs	r3, #12
 80057b0:	6003      	str	r3, [r0, #0]
 80057b2:	e7d6      	b.n	8005762 <_free_r+0x26>
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	1961      	adds	r1, r4, r5
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf04      	itt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	6063      	str	r3, [r4, #4]
 80057c2:	bf04      	itt	eq
 80057c4:	1949      	addeq	r1, r1, r5
 80057c6:	6021      	streq	r1, [r4, #0]
 80057c8:	6054      	str	r4, [r2, #4]
 80057ca:	e7ca      	b.n	8005762 <_free_r+0x26>
 80057cc:	b003      	add	sp, #12
 80057ce:	bd30      	pop	{r4, r5, pc}
 80057d0:	20000254 	.word	0x20000254

080057d4 <sbrk_aligned>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4e0e      	ldr	r6, [pc, #56]	; (8005810 <sbrk_aligned+0x3c>)
 80057d8:	460c      	mov	r4, r1
 80057da:	6831      	ldr	r1, [r6, #0]
 80057dc:	4605      	mov	r5, r0
 80057de:	b911      	cbnz	r1, 80057e6 <sbrk_aligned+0x12>
 80057e0:	f000 f8bc 	bl	800595c <_sbrk_r>
 80057e4:	6030      	str	r0, [r6, #0]
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f000 f8b7 	bl	800595c <_sbrk_r>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	d00a      	beq.n	8005808 <sbrk_aligned+0x34>
 80057f2:	1cc4      	adds	r4, r0, #3
 80057f4:	f024 0403 	bic.w	r4, r4, #3
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	d007      	beq.n	800580c <sbrk_aligned+0x38>
 80057fc:	1a21      	subs	r1, r4, r0
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 f8ac 	bl	800595c <_sbrk_r>
 8005804:	3001      	adds	r0, #1
 8005806:	d101      	bne.n	800580c <sbrk_aligned+0x38>
 8005808:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800580c:	4620      	mov	r0, r4
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	20000258 	.word	0x20000258

08005814 <_malloc_r>:
 8005814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005818:	1ccd      	adds	r5, r1, #3
 800581a:	f025 0503 	bic.w	r5, r5, #3
 800581e:	3508      	adds	r5, #8
 8005820:	2d0c      	cmp	r5, #12
 8005822:	bf38      	it	cc
 8005824:	250c      	movcc	r5, #12
 8005826:	2d00      	cmp	r5, #0
 8005828:	4607      	mov	r7, r0
 800582a:	db01      	blt.n	8005830 <_malloc_r+0x1c>
 800582c:	42a9      	cmp	r1, r5
 800582e:	d905      	bls.n	800583c <_malloc_r+0x28>
 8005830:	230c      	movs	r3, #12
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	2600      	movs	r6, #0
 8005836:	4630      	mov	r0, r6
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583c:	4e2e      	ldr	r6, [pc, #184]	; (80058f8 <_malloc_r+0xe4>)
 800583e:	f000 f89d 	bl	800597c <__malloc_lock>
 8005842:	6833      	ldr	r3, [r6, #0]
 8005844:	461c      	mov	r4, r3
 8005846:	bb34      	cbnz	r4, 8005896 <_malloc_r+0x82>
 8005848:	4629      	mov	r1, r5
 800584a:	4638      	mov	r0, r7
 800584c:	f7ff ffc2 	bl	80057d4 <sbrk_aligned>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	4604      	mov	r4, r0
 8005854:	d14d      	bne.n	80058f2 <_malloc_r+0xde>
 8005856:	6834      	ldr	r4, [r6, #0]
 8005858:	4626      	mov	r6, r4
 800585a:	2e00      	cmp	r6, #0
 800585c:	d140      	bne.n	80058e0 <_malloc_r+0xcc>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	4631      	mov	r1, r6
 8005862:	4638      	mov	r0, r7
 8005864:	eb04 0803 	add.w	r8, r4, r3
 8005868:	f000 f878 	bl	800595c <_sbrk_r>
 800586c:	4580      	cmp	r8, r0
 800586e:	d13a      	bne.n	80058e6 <_malloc_r+0xd2>
 8005870:	6821      	ldr	r1, [r4, #0]
 8005872:	3503      	adds	r5, #3
 8005874:	1a6d      	subs	r5, r5, r1
 8005876:	f025 0503 	bic.w	r5, r5, #3
 800587a:	3508      	adds	r5, #8
 800587c:	2d0c      	cmp	r5, #12
 800587e:	bf38      	it	cc
 8005880:	250c      	movcc	r5, #12
 8005882:	4629      	mov	r1, r5
 8005884:	4638      	mov	r0, r7
 8005886:	f7ff ffa5 	bl	80057d4 <sbrk_aligned>
 800588a:	3001      	adds	r0, #1
 800588c:	d02b      	beq.n	80058e6 <_malloc_r+0xd2>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	442b      	add	r3, r5
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	e00e      	b.n	80058b4 <_malloc_r+0xa0>
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	1b52      	subs	r2, r2, r5
 800589a:	d41e      	bmi.n	80058da <_malloc_r+0xc6>
 800589c:	2a0b      	cmp	r2, #11
 800589e:	d916      	bls.n	80058ce <_malloc_r+0xba>
 80058a0:	1961      	adds	r1, r4, r5
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	6025      	str	r5, [r4, #0]
 80058a6:	bf18      	it	ne
 80058a8:	6059      	strne	r1, [r3, #4]
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	bf08      	it	eq
 80058ae:	6031      	streq	r1, [r6, #0]
 80058b0:	5162      	str	r2, [r4, r5]
 80058b2:	604b      	str	r3, [r1, #4]
 80058b4:	4638      	mov	r0, r7
 80058b6:	f104 060b 	add.w	r6, r4, #11
 80058ba:	f000 f865 	bl	8005988 <__malloc_unlock>
 80058be:	f026 0607 	bic.w	r6, r6, #7
 80058c2:	1d23      	adds	r3, r4, #4
 80058c4:	1af2      	subs	r2, r6, r3
 80058c6:	d0b6      	beq.n	8005836 <_malloc_r+0x22>
 80058c8:	1b9b      	subs	r3, r3, r6
 80058ca:	50a3      	str	r3, [r4, r2]
 80058cc:	e7b3      	b.n	8005836 <_malloc_r+0x22>
 80058ce:	6862      	ldr	r2, [r4, #4]
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	bf0c      	ite	eq
 80058d4:	6032      	streq	r2, [r6, #0]
 80058d6:	605a      	strne	r2, [r3, #4]
 80058d8:	e7ec      	b.n	80058b4 <_malloc_r+0xa0>
 80058da:	4623      	mov	r3, r4
 80058dc:	6864      	ldr	r4, [r4, #4]
 80058de:	e7b2      	b.n	8005846 <_malloc_r+0x32>
 80058e0:	4634      	mov	r4, r6
 80058e2:	6876      	ldr	r6, [r6, #4]
 80058e4:	e7b9      	b.n	800585a <_malloc_r+0x46>
 80058e6:	230c      	movs	r3, #12
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	4638      	mov	r0, r7
 80058ec:	f000 f84c 	bl	8005988 <__malloc_unlock>
 80058f0:	e7a1      	b.n	8005836 <_malloc_r+0x22>
 80058f2:	6025      	str	r5, [r4, #0]
 80058f4:	e7de      	b.n	80058b4 <_malloc_r+0xa0>
 80058f6:	bf00      	nop
 80058f8:	20000254 	.word	0x20000254

080058fc <_realloc_r>:
 80058fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005900:	4680      	mov	r8, r0
 8005902:	4614      	mov	r4, r2
 8005904:	460e      	mov	r6, r1
 8005906:	b921      	cbnz	r1, 8005912 <_realloc_r+0x16>
 8005908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	4611      	mov	r1, r2
 800590e:	f7ff bf81 	b.w	8005814 <_malloc_r>
 8005912:	b92a      	cbnz	r2, 8005920 <_realloc_r+0x24>
 8005914:	f7ff ff12 	bl	800573c <_free_r>
 8005918:	4625      	mov	r5, r4
 800591a:	4628      	mov	r0, r5
 800591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005920:	f000 f838 	bl	8005994 <_malloc_usable_size_r>
 8005924:	4284      	cmp	r4, r0
 8005926:	4607      	mov	r7, r0
 8005928:	d802      	bhi.n	8005930 <_realloc_r+0x34>
 800592a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800592e:	d812      	bhi.n	8005956 <_realloc_r+0x5a>
 8005930:	4621      	mov	r1, r4
 8005932:	4640      	mov	r0, r8
 8005934:	f7ff ff6e 	bl	8005814 <_malloc_r>
 8005938:	4605      	mov	r5, r0
 800593a:	2800      	cmp	r0, #0
 800593c:	d0ed      	beq.n	800591a <_realloc_r+0x1e>
 800593e:	42bc      	cmp	r4, r7
 8005940:	4622      	mov	r2, r4
 8005942:	4631      	mov	r1, r6
 8005944:	bf28      	it	cs
 8005946:	463a      	movcs	r2, r7
 8005948:	f7ff fbb8 	bl	80050bc <memcpy>
 800594c:	4631      	mov	r1, r6
 800594e:	4640      	mov	r0, r8
 8005950:	f7ff fef4 	bl	800573c <_free_r>
 8005954:	e7e1      	b.n	800591a <_realloc_r+0x1e>
 8005956:	4635      	mov	r5, r6
 8005958:	e7df      	b.n	800591a <_realloc_r+0x1e>
	...

0800595c <_sbrk_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d06      	ldr	r5, [pc, #24]	; (8005978 <_sbrk_r+0x1c>)
 8005960:	2300      	movs	r3, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	f7fb fce8 	bl	800133c <_sbrk>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_sbrk_r+0x1a>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_sbrk_r+0x1a>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	2000025c 	.word	0x2000025c

0800597c <__malloc_lock>:
 800597c:	4801      	ldr	r0, [pc, #4]	; (8005984 <__malloc_lock+0x8>)
 800597e:	f000 b811 	b.w	80059a4 <__retarget_lock_acquire_recursive>
 8005982:	bf00      	nop
 8005984:	20000260 	.word	0x20000260

08005988 <__malloc_unlock>:
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__malloc_unlock+0x8>)
 800598a:	f000 b80c 	b.w	80059a6 <__retarget_lock_release_recursive>
 800598e:	bf00      	nop
 8005990:	20000260 	.word	0x20000260

08005994 <_malloc_usable_size_r>:
 8005994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005998:	1f18      	subs	r0, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	bfbc      	itt	lt
 800599e:	580b      	ldrlt	r3, [r1, r0]
 80059a0:	18c0      	addlt	r0, r0, r3
 80059a2:	4770      	bx	lr

080059a4 <__retarget_lock_acquire_recursive>:
 80059a4:	4770      	bx	lr

080059a6 <__retarget_lock_release_recursive>:
 80059a6:	4770      	bx	lr

080059a8 <_init>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr

080059b4 <_fini>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr
