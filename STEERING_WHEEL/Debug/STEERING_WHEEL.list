
STEERING_WHEEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008804  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  080089d8  080089d8  000189d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e14  08008e14  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e14  08008e14  00018e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e1c  08008e1c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e1c  08008e1c  00018e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001dc  08009000  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08009000  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e0a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229e  00000000  00000000  00033016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  000352b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  000363f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023671  00000000  00000000  00037468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141d9  00000000  00000000  0005aad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7727  00000000  00000000  0006ecb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001463d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c10  00000000  00000000  0014642c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080089bc 	.word	0x080089bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080089bc 	.word	0x080089bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <assign_filter_array>:
const FilterArrayLength APPS_RX_NUM = 2;

const AddressIdType LVPDB_RX_ID[] = {SW_ID, APPS_ID};
const FilterArrayLength LVPDB_RX_NUM = 2;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d813      	bhi.n	8000f24 <assign_filter_array+0x38>
 8000efc:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <assign_filter_array+0x18>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	08000f15 	.word	0x08000f15
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f21 	.word	0x08000f21
        case BMS_ID:
            return BMS_RX_ID;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <assign_filter_array+0x48>)
 8000f16:	e006      	b.n	8000f26 <assign_filter_array+0x3a>
            break;
        case SW_ID:
            return SW_RX_ID;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <assign_filter_array+0x4c>)
 8000f1a:	e004      	b.n	8000f26 <assign_filter_array+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <assign_filter_array+0x50>)
 8000f1e:	e002      	b.n	8000f26 <assign_filter_array+0x3a>
            break;
        case LVPDB_ID:
            return LVPDB_RX_ID;
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <assign_filter_array+0x54>)
 8000f22:	e000      	b.n	8000f26 <assign_filter_array+0x3a>
            break;
    }
    return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	08008a0c 	.word	0x08008a0c
 8000f38:	08008a10 	.word	0x08008a10
 8000f3c:	08008a14 	.word	0x08008a14
 8000f40:	08008a1c 	.word	0x08008a1c

08000f44 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d813      	bhi.n	8000f7c <assign_filter_array_legnth+0x38>
 8000f54:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <assign_filter_array_legnth+0x18>)
 8000f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5a:	bf00      	nop
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000f75 	.word	0x08000f75
 8000f68:	08000f79 	.word	0x08000f79
        case BMS_ID:
            return BMS_RX_NUM;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e006      	b.n	8000f7e <assign_filter_array_legnth+0x3a>
            break;
        case SW_ID:
            return SW_RX_NUM;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e004      	b.n	8000f7e <assign_filter_array_legnth+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <assign_filter_array_legnth+0x3a>
            break;
        case LVPDB_ID:
            return LVPDB_RX_NUM;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	e000      	b.n	8000f7e <assign_filter_array_legnth+0x3a>
            break;
    }
    return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <FEB_CAN_Filter_Config>:
uint8_t RxData[8];
uint32_t TxMailbox;
float HV_Voltage = 0.0;
extern UART_HandleTypeDef huart2;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09a      	sub	sp, #104	; 0x68
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8000fa6:	e027      	b.n	8000ff8 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8000fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8000fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	4413      	add	r3, r2
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 8000fc6:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000fca:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 8000fd8:	231b      	movs	r3, #27
 8000fda:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f001 f944 	bl	8002270 <HAL_CAN_ConfigFilter>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 8000fee:	f000 fcd5 	bl	800199c <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 8000ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	667b      	str	r3, [r7, #100]	; 0x64
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbd3      	blt.n	8000fa8 <FEB_CAN_Filter_Config+0x1c>
		}
	}

	CAN_FilterTypeDef filter_config;

	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001000:	2301      	movs	r3, #1
 8001002:	65fb      	str	r3, [r7, #92]	; 0x5c
	filter_config.FilterBank = filter_array_len;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
	filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
	filter_config.FilterIdHigh = 0xA7 << 5;
 800100c:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
	filter_config.FilterIdLow = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
	filter_config.FilterMaskIdHigh = 0x7FF << 5;
 8001016:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
	filter_config.FilterMaskIdLow = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001020:	2300      	movs	r3, #0
 8001022:	657b      	str	r3, [r7, #84]	; 0x54
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001024:	2301      	movs	r3, #1
 8001026:	65bb      	str	r3, [r7, #88]	; 0x58
	filter_config.SlaveStartFilterBank = 27;
 8001028:	231b      	movs	r3, #27
 800102a:	663b      	str	r3, [r7, #96]	; 0x60

	if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 800102c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001030:	4619      	mov	r1, r3
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f001 f91c 	bl	8002270 <HAL_CAN_ConfigFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <FEB_CAN_Filter_Config+0xb6>
	{
	  Error_Handler();
 800103e:	f000 fcad 	bl	800199c <Error_Handler>
	}
}
 8001042:	bf00      	nop
 8001044:	3768      	adds	r7, #104	; 0x68
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <FEB_CAN_Init+0x80>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d104      	bne.n	800106a <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 8001060:	2300      	movs	r3, #0
 8001062:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e008      	b.n	800107c <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <FEB_CAN_Init+0x84>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d103      	bne.n	800107c <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 8001074:	2301      	movs	r3, #1
 8001076:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8001078:	2310      	movs	r3, #16
 800107a:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <FEB_CAN_Init+0x88>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <FEB_CAN_Init+0x88>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <FEB_CAN_Init+0x88>)
 800108a:	2200      	movs	r2, #0
 800108c:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 800108e:	6838      	ldr	r0, [r7, #0]
 8001090:	f7ff ff2c 	bl	8000eec <assign_filter_array>
 8001094:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 8001096:	6838      	ldr	r0, [r7, #0]
 8001098:	f7ff ff54 	bl	8000f44 <assign_filter_array_legnth>
 800109c:	4603      	mov	r3, r0
 800109e:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	7afa      	ldrb	r2, [r7, #11]
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff70 	bl	8000f8c <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f001 f9bf 	bl	8002430 <HAL_CAN_Start>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <FEB_CAN_Init+0x70>
	  Error_Handler();
 80010b8:	f000 fc70 	bl	800199c <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 80010bc:	6939      	ldr	r1, [r7, #16]
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f001 fb0a 	bl	80026d8 <HAL_CAN_ActivateNotification>

}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40006400 	.word	0x40006400
 80010d0:	40006800 	.word	0x40006800
 80010d4:	20000208 	.word	0x20000208

080010d8 <FEB_CAN_Transmit>:
	} else {
		store_msg(&RxHeader, RxData);
	}
}

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	461a      	mov	r2, r3
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <FEB_CAN_Transmit+0x54>)
 80010ee:	f004 fd7b 	bl	8005be8 <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <FEB_CAN_Transmit+0x58>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <FEB_CAN_Transmit+0x58>)
 80010fc:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 80010fe:	bf00      	nop
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f001 fab4 	bl	800266e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f9      	beq.n	8001100 <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <FEB_CAN_Transmit+0x5c>)
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <FEB_CAN_Transmit+0x54>)
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <FEB_CAN_Transmit+0x58>)
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f001 f9d0 	bl	80024b8 <HAL_CAN_AddTxMessage>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 800111e:	f000 fc3d 	bl	800199c <Error_Handler>
	}
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000220 	.word	0x20000220
 8001130:	20000208 	.word	0x20000208
 8001134:	20000228 	.word	0x20000228

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b0ab      	sub	sp, #172	; 0xac
 800113c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f000 ff05 	bl	8001f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f9dd 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 fb91 	bl	800186c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800114a:	f000 fb65 	bl	8001818 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800114e:	f000 fa79 	bl	8001644 <MX_I2C1_Init>
  MX_TIM14_Init();
 8001152:	f000 fb3d 	bl	80017d0 <MX_TIM14_Init>
  MX_TIM2_Init();
 8001156:	f000 faa3 	bl	80016a0 <MX_TIM2_Init>
  MX_CAN1_Init();
 800115a:	f000 fa3d 	bl	80015d8 <MX_CAN1_Init>
  MX_TIM13_Init();
 800115e:	f000 fb13 	bl	8001788 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  bool ready_to_drive = false;
 8001162:	2300      	movs	r3, #0
 8001164:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  bool last_button_state = false;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool lock = false;
 800116e:	2300      	movs	r3, #0
 8001170:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

  bool lastButton_4 = 0; // coolant pump
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
  bool lastButton_5 = 0; // acumulator fans
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  bool lastButton_6 = 0; // extra
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  bool lock_4 = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  bool lock_5 = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  bool lock_6 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  bool coolant_pump = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  bool accumulator_fans = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  bool extra = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  int buf_len;
  //uint8_t data1;
  uint8_t data2;
  HAL_StatusTypeDef ret;

  HAL_TIM_Base_Start_IT(&htim13);
 80011aa:	489d      	ldr	r0, [pc, #628]	; (8001420 <main+0x2e8>)
 80011ac:	f003 f916 	bl	80043dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim13);
 80011b0:	489b      	ldr	r0, [pc, #620]	; (8001420 <main+0x2e8>)
 80011b2:	f003 f983 	bl	80044bc <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80011b6:	489b      	ldr	r0, [pc, #620]	; (8001424 <main+0x2ec>)
 80011b8:	f003 f910 	bl	80043dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim14);
 80011bc:	4899      	ldr	r0, [pc, #612]	; (8001424 <main+0x2ec>)
 80011be:	f003 f97d 	bl	80044bc <HAL_TIM_Base_Stop_IT>
  Button_Checking = false;
 80011c2:	4b99      	ldr	r3, [pc, #612]	; (8001428 <main+0x2f0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
  Button_Timer_Flag = false;
 80011c8:	4b98      	ldr	r3, [pc, #608]	; (800142c <main+0x2f4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
  // 0% PWM cycle to turnoff buzzer
  htim2.Instance->CCR2 = 0;
 80011ce:	4b98      	ldr	r3, [pc, #608]	; (8001430 <main+0x2f8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011d6:	2104      	movs	r1, #4
 80011d8:	4895      	ldr	r0, [pc, #596]	; (8001430 <main+0x2f8>)
 80011da:	f003 f9f7 	bl	80045cc <HAL_TIM_PWM_Start>


  FEB_CAN_Init(&hcan1, SW_ID);
 80011de:	2102      	movs	r1, #2
 80011e0:	4894      	ldr	r0, [pc, #592]	; (8001434 <main+0x2fc>)
 80011e2:	f7ff ff33 	bl	800104c <FEB_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f000 ff22 	bl	8002030 <HAL_Delay>
	  // read both IOexpanders
//	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP1_ADDR, &data1, 1, HAL_MAX_DELAY);
//	  if ( ret != HAL_OK ) {
//		  buf_len = sprintf((char*)buf, "IO_1 Error\r\n");
//	  }
	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP2_ADDR, &data2, 1, HAL_MAX_DELAY);
 80011ec:	2342      	movs	r3, #66	; 0x42
 80011ee:	b299      	uxth	r1, r3
 80011f0:	1cfa      	adds	r2, r7, #3
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	488f      	ldr	r0, [pc, #572]	; (8001438 <main+0x300>)
 80011fc:	f001 fe96 	bl	8002f2c <HAL_I2C_Master_Receive>
 8001200:	4603      	mov	r3, r0
 8001202:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  if ( ret != HAL_OK ) {
 8001206:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <main+0xe4>
		  buf_len = sprintf((char*)buf, "IO_2 Error\r\n");
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	498a      	ldr	r1, [pc, #552]	; (800143c <main+0x304>)
 8001212:	4618      	mov	r0, r3
 8001214:	f005 f968 	bl	80064e8 <siprintf>
 8001218:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
//		  HAL_TIM_Base_Start_IT(&htim14);
//		  // turn on buzzer with 30% PWM cycle
//		  htim2.Instance->CCR2 = VOLUME;
//	  }

	  if (!(data2 & (1<<1))) { // BUT_4 -> IO2 P1, coolant pump
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d123      	bne.n	800126e <main+0x136>
		  if (!lastButton_4) {
 8001226:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800122a:	f083 0301 	eor.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d018      	beq.n	8001266 <main+0x12e>
			  lock_4 = true;
 8001234:	2301      	movs	r3, #1
 8001236:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  coolant_pump = !coolant_pump;
 800123a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f083 0301 	eor.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			  FEB_CAN_Transmit(&hcan1, SW_COOLANT_PUMP, (uint8_t *) &coolant_pump, 1);
 8001258:	f107 0286 	add.w	r2, r7, #134	; 0x86
 800125c:	2301      	movs	r3, #1
 800125e:	2121      	movs	r1, #33	; 0x21
 8001260:	4874      	ldr	r0, [pc, #464]	; (8001434 <main+0x2fc>)
 8001262:	f7ff ff39 	bl	80010d8 <FEB_CAN_Transmit>
		  }
		  lastButton_4 = true;
 8001266:	2301      	movs	r3, #1
 8001268:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800126c:	e009      	b.n	8001282 <main+0x14a>
	  } else {
		  if (lastButton_4) {
 800126e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <main+0x144>
			  lock_4 = false;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		  }
		  lastButton_4 = false;
 800127c:	2300      	movs	r3, #0
 800127e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	  }

	  if (!(data2 & (1<<2))) { // BUT_5 -> IO2 P2, accumulator fans
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d123      	bne.n	80012d4 <main+0x19c>
		  if (!lastButton_5) {
 800128c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001290:	f083 0301 	eor.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d018      	beq.n	80012cc <main+0x194>
			  lock_5 = true;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  accumulator_fans = !accumulator_fans;
 80012a0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf14      	ite	ne
 80012a8:	2301      	movne	r3, #1
 80012aa:	2300      	moveq	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f083 0301 	eor.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			  FEB_CAN_Transmit(&hcan1, SW_ACUMULATOR_FANS, (uint8_t *) &accumulator_fans, 1);
 80012be:	f107 0285 	add.w	r2, r7, #133	; 0x85
 80012c2:	2301      	movs	r3, #1
 80012c4:	2122      	movs	r1, #34	; 0x22
 80012c6:	485b      	ldr	r0, [pc, #364]	; (8001434 <main+0x2fc>)
 80012c8:	f7ff ff06 	bl	80010d8 <FEB_CAN_Transmit>
		  }
		  lastButton_5 = true;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 80012d2:	e009      	b.n	80012e8 <main+0x1b0>
	  } else {
		  if (lastButton_5) {
 80012d4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <main+0x1aa>
			  lock_5 = false;
 80012dc:	2300      	movs	r3, #0
 80012de:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		  }
		  lastButton_5 = false;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	  }

	  if (!(data2 & (1<<3))) { // BUT_6 -> IO2 P3, extra
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d123      	bne.n	800133a <main+0x202>
		  if (!lastButton_6) {
 80012f2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d018      	beq.n	8001332 <main+0x1fa>
			  lock_6 = true;
 8001300:	2301      	movs	r3, #1
 8001302:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  extra = !extra;
 8001306:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			  FEB_CAN_Transmit(&hcan1, SW_EXTRA, (uint8_t *) &extra, 1);
 8001324:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001328:	2301      	movs	r3, #1
 800132a:	2123      	movs	r1, #35	; 0x23
 800132c:	4841      	ldr	r0, [pc, #260]	; (8001434 <main+0x2fc>)
 800132e:	f7ff fed3 	bl	80010d8 <FEB_CAN_Transmit>
		  }
		  lastButton_6 = true;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8001338:	e009      	b.n	800134e <main+0x216>
	  } else {
		  if (lastButton_6) {
 800133a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <main+0x210>
			  lock_6 = false;
 8001342:	2300      	movs	r3, #0
 8001344:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
		  }
		  lastButton_6 = false;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  }

	  if (!(data2 & (1<<0))) { // BUT_3 -> IO2 P0, ready to drive
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d179      	bne.n	800144c <main+0x314>
//		  buf_len = sprintf((char*)buf, "BUT_3\r\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);

		  // if the system is not checking a button, start the timer to check the timer
		  // also check if brake is pressed and Tractive System is on
		  if (!Button_Checking && (last_button_state == false) && !lock && APPS_MESSAGE.brake_pedal > 0.2 && HV_Voltage > 60.0) {
 8001358:	4b33      	ldr	r3, [pc, #204]	; (8001428 <main+0x2f0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f083 0301 	eor.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d02a      	beq.n	80013bc <main+0x284>
 8001366:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d023      	beq.n	80013bc <main+0x284>
 8001374:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001378:	f083 0301 	eor.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01c      	beq.n	80013bc <main+0x284>
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <main+0x308>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8fe 	bl	8000588 <__aeabi_f2d>
 800138c:	a322      	add	r3, pc, #136	; (adr r3, 8001418 <main+0x2e0>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff fbe1 	bl	8000b58 <__aeabi_dcmpgt>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00f      	beq.n	80013bc <main+0x284>
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <main+0x30c>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001448 <main+0x310>
 80013a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	dd05      	ble.n	80013bc <main+0x284>
			  // Start timer to count 1 sec hold time
			  HAL_TIM_Base_Start_IT(&htim13);
 80013b0:	481b      	ldr	r0, [pc, #108]	; (8001420 <main+0x2e8>)
 80013b2:	f003 f813 	bl	80043dc <HAL_TIM_Base_Start_IT>
			  Button_Checking = true;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <main+0x2f0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "starting timer 13\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }
		  // if 1 sec has elapsed, and this button is still pressed, it is a valid action
		  // turn on buzzer and send CAN msg, reset states
		  if (Button_Timer_Flag) {
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <main+0x2f4>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d022      	beq.n	800140a <main+0x2d2>
			  ready_to_drive = !ready_to_drive;
 80013c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f083 0301 	eor.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			  // when the ready_to_drive state is just changed, lock from changing again
			  lock = true;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

			  // start timer for buzzer
			  HAL_TIM_Base_Start_IT(&htim14);
 80013e8:	480e      	ldr	r0, [pc, #56]	; (8001424 <main+0x2ec>)
 80013ea:	f002 fff7 	bl	80043dc <HAL_TIM_Base_Start_IT>
			  // turn on buzzer at VOLUME
			  htim2.Instance->CCR2 = VOLUME;
 80013ee:	2264      	movs	r2, #100	; 0x64
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <main+0x2f8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38

			  FEB_CAN_Transmit(&hcan1, SW_READY_TO_DRIVE, (uint8_t *) &ready_to_drive, 1);
 80013f6:	f107 0287 	add.w	r2, r7, #135	; 0x87
 80013fa:	2301      	movs	r3, #1
 80013fc:	2120      	movs	r1, #32
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <main+0x2fc>)
 8001400:	f7ff fe6a 	bl	80010d8 <FEB_CAN_Transmit>

			  Button_Timer_Flag = false;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <main+0x2f4>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "staring timer 14\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }

		  //record button state
		  last_button_state = true;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001410:	e029      	b.n	8001466 <main+0x32e>
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	9999999a 	.word	0x9999999a
 800141c:	3fc99999 	.word	0x3fc99999
 8001420:	200002f4 	.word	0x200002f4
 8001424:	2000033c 	.word	0x2000033c
 8001428:	200003c8 	.word	0x200003c8
 800142c:	200003c9 	.word	0x200003c9
 8001430:	200002ac 	.word	0x200002ac
 8001434:	20000230 	.word	0x20000230
 8001438:	20000258 	.word	0x20000258
 800143c:	080089d8 	.word	0x080089d8
 8001440:	200001f8 	.word	0x200001f8
 8001444:	2000022c 	.word	0x2000022c
 8001448:	42700000 	.word	0x42700000

	  } else {
		  Button_Timer_Flag = false;
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <main+0x3ac>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]

		  // allow ready_to_drive to change when button is released.
		  if (last_button_state) {
 8001452:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <main+0x32e>
			  last_button_state = false;
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  lock = false;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		  }
	  }

	  // if at sometime Tractive System falls below 60V (not enough battery or E-Stop), disable ready_to_drive
	  if (HV_Voltage < 60.0 && ready_to_drive) {
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <main+0x3b0>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80014ec <main+0x3b4>
 8001470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001478:	d50d      	bpl.n	8001496 <main+0x35e>
 800147a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <main+0x35e>
		  ready_to_drive = false;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  FEB_CAN_Transmit(&hcan1, SW_READY_TO_DRIVE, (uint8_t *) &ready_to_drive, 1);
 8001488:	f107 0287 	add.w	r2, r7, #135	; 0x87
 800148c:	2301      	movs	r3, #1
 800148e:	2120      	movs	r1, #32
 8001490:	4817      	ldr	r0, [pc, #92]	; (80014f0 <main+0x3b8>)
 8001492:	f7ff fe21 	bl	80010d8 <FEB_CAN_Transmit>
	  }

//	  buf_len = sprintf((char*)buf, "check:%d flag:%d\r\n", Button_Checking, Button_Timer_Flag);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	  buf_len = sprintf((char*)buf, "ready:%d voltage:%.1f brake:%.1f\r\n", ready_to_drive, HV_Voltage, APPS_MESSAGE.brake_pedal);
 8001496:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800149a:	461e      	mov	r6, r3
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <main+0x3b0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f871 	bl	8000588 <__aeabi_f2d>
 80014a6:	4604      	mov	r4, r0
 80014a8:	460d      	mov	r5, r1
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <main+0x3bc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f86a 	bl	8000588 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	1d38      	adds	r0, r7, #4
 80014ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014be:	e9cd 4500 	strd	r4, r5, [sp]
 80014c2:	4632      	mov	r2, r6
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <main+0x3c0>)
 80014c6:	f005 f80f 	bl	80064e8 <siprintf>
 80014ca:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 1000);
 80014ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	1d39      	adds	r1, r7, #4
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	4808      	ldr	r0, [pc, #32]	; (80014fc <main+0x3c4>)
 80014dc:	f003 ffe5 	bl	80054aa <HAL_UART_Transmit>
	  HAL_Delay(10);
 80014e0:	e681      	b.n	80011e6 <main+0xae>
 80014e2:	bf00      	nop
 80014e4:	200003c9 	.word	0x200003c9
 80014e8:	2000022c 	.word	0x2000022c
 80014ec:	42700000 	.word	0x42700000
 80014f0:	20000230 	.word	0x20000230
 80014f4:	200001f8 	.word	0x200001f8
 80014f8:	080089e8 	.word	0x080089e8
 80014fc:	20000384 	.word	0x20000384

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	; 0x50
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	2234      	movs	r2, #52	; 0x34
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f004 fb78 	bl	8005c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <SystemClock_Config+0xd0>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <SystemClock_Config+0xd0>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <SystemClock_Config+0xd0>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <SystemClock_Config+0xd4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <SystemClock_Config+0xd4>)
 800154a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <SystemClock_Config+0xd4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001570:	2304      	movs	r3, #4
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001574:	23a0      	movs	r3, #160	; 0xa0
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001580:	2302      	movs	r3, #2
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fc39 	bl	8003e00 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001594:	f000 fa02 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	2105      	movs	r1, #5
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 f8d8 	bl	800376c <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015c2:	f000 f9eb 	bl	800199c <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3750      	adds	r7, #80	; 0x50
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_CAN1_Init+0x64>)
 80015de:	4a18      	ldr	r2, [pc, #96]	; (8001640 <MX_CAN1_Init+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_CAN1_Init+0x64>)
 80015e4:	2210      	movs	r2, #16
 80015e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_CAN1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_CAN1_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_CAN1_Init+0x64>)
 80015f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_CAN1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_CAN1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_CAN1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_CAN1_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_CAN1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_CAN1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_CAN1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_CAN1_Init+0x64>)
 8001628:	f000 fd26 	bl	8002078 <HAL_CAN_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001632:	f000 f9b3 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000230 	.word	0x20000230
 8001640:	40006400 	.word	0x40006400

08001644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x50>)
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <MX_I2C1_Init+0x54>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2C1_Init+0x50>)
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_I2C1_Init+0x58>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_I2C1_Init+0x50>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2C1_Init+0x50>)
 8001682:	f001 fb0f 	bl	8002ca4 <HAL_I2C_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 f986 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000258 	.word	0x20000258
 8001698:	40005400 	.word	0x40005400
 800169c:	000186a0 	.word	0x000186a0

080016a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016da:	229f      	movs	r2, #159	; 0x9f
 80016dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016e6:	2263      	movs	r2, #99	; 0x63
 80016e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f6:	4823      	ldr	r0, [pc, #140]	; (8001784 <MX_TIM2_Init+0xe4>)
 80016f8:	f002 fe20 	bl	800433c <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001702:	f000 f94b 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001710:	4619      	mov	r1, r3
 8001712:	481c      	ldr	r0, [pc, #112]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001714:	f003 f9ec 	bl	8004af0 <HAL_TIM_ConfigClockSource>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800171e:	f000 f93d 	bl	800199c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001722:	4818      	ldr	r0, [pc, #96]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001724:	f002 fef9 	bl	800451a <HAL_TIM_PWM_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800172e:	f000 f935 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	4619      	mov	r1, r3
 8001740:	4810      	ldr	r0, [pc, #64]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001742:	f003 fdd5 	bl	80052f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800174c:	f000 f926 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001750:	2360      	movs	r3, #96	; 0x60
 8001752:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001754:	2364      	movs	r3, #100	; 0x64
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2204      	movs	r2, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001768:	f003 f900 	bl	800496c <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001772:	f000 f913 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <MX_TIM2_Init+0xe4>)
 8001778:	f000 fa28 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 800177c:	bf00      	nop
 800177e:	3738      	adds	r7, #56	; 0x38
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002ac 	.word	0x200002ac

08001788 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_TIM13_Init+0x40>)
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <MX_TIM13_Init+0x44>)
 8001790:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8000-1;
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <MX_TIM13_Init+0x40>)
 8001794:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001798:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_TIM13_Init+0x40>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_TIM13_Init+0x40>)
 80017a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80017a6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_TIM13_Init+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_TIM13_Init+0x40>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_TIM13_Init+0x40>)
 80017b6:	f002 fdc1 	bl	800433c <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80017c0:	f000 f8ec 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200002f4 	.word	0x200002f4
 80017cc:	40001c00 	.word	0x40001c00

080017d0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_TIM14_Init+0x40>)
 80017d6:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <MX_TIM14_Init+0x44>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <MX_TIM14_Init+0x40>)
 80017dc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017e0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_TIM14_Init+0x40>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 15000-1;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_TIM14_Init+0x40>)
 80017ea:	f643 2297 	movw	r2, #14999	; 0x3a97
 80017ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <MX_TIM14_Init+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_TIM14_Init+0x40>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_TIM14_Init+0x40>)
 80017fe:	f002 fd9d 	bl	800433c <HAL_TIM_Base_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001808:	f000 f8c8 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000033c 	.word	0x2000033c
 8001814:	40002000 	.word	0x40002000

08001818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <MX_USART2_UART_Init+0x50>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001850:	f003 fdde 	bl	8005410 <HAL_UART_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185a:	f000 f89f 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000384 	.word	0x20000384
 8001868:	40004400 	.word	0x40004400

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_GPIO_Init+0xd0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a2c      	ldr	r2, [pc, #176]	; (800193c <MX_GPIO_Init+0xd0>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <MX_GPIO_Init+0xd0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_GPIO_Init+0xd0>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a25      	ldr	r2, [pc, #148]	; (800193c <MX_GPIO_Init+0xd0>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <MX_GPIO_Init+0xd0>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_GPIO_Init+0xd0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <MX_GPIO_Init+0xd0>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_GPIO_Init+0xd0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_GPIO_Init+0xd0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a17      	ldr	r2, [pc, #92]	; (800193c <MX_GPIO_Init+0xd0>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_GPIO_Init+0xd0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2120      	movs	r1, #32
 80018f6:	4812      	ldr	r0, [pc, #72]	; (8001940 <MX_GPIO_Init+0xd4>)
 80018f8:	f001 f9ba 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001902:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_GPIO_Init+0xd8>)
 8001914:	f001 f818 	bl	8002948 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001918:	2320      	movs	r3, #32
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_GPIO_Init+0xd4>)
 8001930:	f001 f80a 	bl	8002948 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020800 	.word	0x40020800

08001948 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
//	char buf[10];
//	int buf_len;

	// timer for button
	// if 1 sec has passed since the first detection of button pressed, go back to not checking state
	if (htim == &htim13) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d108      	bne.n	800196a <HAL_TIM_PeriodElapsedCallback+0x22>
	  Button_Checking = false;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	  Button_Timer_Flag = true;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim13);
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001966:	f002 fda9 	bl	80044bc <HAL_TIM_Base_Stop_IT>
//	  buf_len = sprintf((char*)buf, "Timer13\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}

	// timer for buzzer
	if (htim == &htim14)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a09      	ldr	r2, [pc, #36]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d106      	bne.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
	  // turn off buzzer
	  htim2.Instance->CCR2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
	  // Stop timer
	  HAL_TIM_Base_Stop_IT(&htim14);
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800197c:	f002 fd9e 	bl	80044bc <HAL_TIM_Base_Stop_IT>

//	  buf_len = sprintf((char*)buf, "Timer14\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200002f4 	.word	0x200002f4
 800198c:	200003c8 	.word	0x200003c8
 8001990:	200003c9 	.word	0x200003c9
 8001994:	2000033c 	.word	0x2000033c
 8001998:	200002ac 	.word	0x200002ac

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>
	...

080019a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <HAL_MspInit+0x4c>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_MspInit+0x4c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_MspInit+0x4c>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_MspInit+0x4c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019e6:	2007      	movs	r0, #7
 80019e8:	f000 ff6c 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_CAN_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12c      	bne.n	8001a74 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_CAN_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a64:	2309      	movs	r3, #9
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_CAN_MspInit+0x8c>)
 8001a70:	f000 ff6a 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40006400 	.word	0x40006400
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <HAL_I2C_MspInit+0x84>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12c      	bne.n	8001b04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001acc:	2312      	movs	r3, #18
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <HAL_I2C_MspInit+0x8c>)
 8001ae4:	f000 ff30 	bl	8002948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400

08001b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d10e      	bne.n	8001b48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b46:	e036      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_TIM_Base_MspInit+0xac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d116      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	202c      	movs	r0, #44	; 0x2c
 8001b74:	f000 feb1 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001b78:	202c      	movs	r0, #44	; 0x2c
 8001b7a:	f000 feca 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 8001b7e:	e01a      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d115      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	202d      	movs	r0, #45	; 0x2d
 8001bac:	f000 fe95 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001bb0:	202d      	movs	r0, #45	; 0x2d
 8001bb2:	f000 feae 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40001c00 	.word	0x40001c00
 8001bc8:	40002000 	.word	0x40002000

08001bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d11d      	bne.n	8001c2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_TIM_MspPostInit+0x68>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_TIM_MspPostInit+0x68>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_TIM_MspPostInit+0x68>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4619      	mov	r1, r3
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <HAL_TIM_MspPostInit+0x6c>)
 8001c26:	f000 fe8f 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_UART_MspInit+0x84>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12b      	bne.n	8001cb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_UART_MspInit+0x88>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c96:	230c      	movs	r3, #12
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <HAL_UART_MspInit+0x8c>)
 8001cb2:	f000 fe49 	bl	8002948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40004400 	.word	0x40004400
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d18:	f000 f96a 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001d26:	f002 fd19 	bl	800475c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200002f4 	.word	0x200002f4

08001d34 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d3a:	f002 fd0f 	bl	800475c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000033c 	.word	0x2000033c

08001d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_kill>:

int _kill(int pid, int sig)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d62:	f003 ff17 	bl	8005b94 <__errno>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2216      	movs	r2, #22
 8001d6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_exit>:

void _exit (int status)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ffe7 	bl	8001d58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d8a:	e7fe      	b.n	8001d8a <_exit+0x12>

08001d8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e00a      	b.n	8001db4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d9e:	f3af 8000 	nop.w
 8001da2:	4601      	mov	r1, r0
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf0      	blt.n	8001d9e <_read+0x12>
  }

  return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e009      	b.n	8001dec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf1      	blt.n	8001dd8 <_write+0x12>
  }
  return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_close>:

int _close(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e26:	605a      	str	r2, [r3, #4]
  return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_isatty>:

int _isatty(int file)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f003 fe7c 	bl	8005b94 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20020000 	.word	0x20020000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	200003cc 	.word	0x200003cc
 8001ed0:	200003e8 	.word	0x200003e8

08001ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001efe:	490e      	ldr	r1, [pc, #56]	; (8001f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f14:	4c0b      	ldr	r4, [pc, #44]	; (8001f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f22:	f7ff ffd7 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f26:	f003 fe3b 	bl	8005ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2a:	f7ff f905 	bl	8001138 <main>
  bx  lr    
 8001f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f3c:	08008e24 	.word	0x08008e24
  ldr r2, =_sbss
 8001f40:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f44:	200003e4 	.word	0x200003e4

08001f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_Init+0x40>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_Init+0x40>)
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_Init+0x40>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 fca5 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f000 f808 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fd12 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fcbd 	bl	800292e <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fcc:	f000 fc85 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x20>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_IncTick+0x24>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008
 8002014:	200003d0 	.word	0x200003d0

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200003d0 	.word	0x200003d0

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002048:	d005      	beq.n	8002056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_Delay+0x44>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002056:	bf00      	nop
 8002058:	f7ff ffde 	bl	8002018 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8f7      	bhi.n	8002058 <HAL_Delay+0x28>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0ed      	b.n	8002266 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fcae 	bl	80019f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ac:	f7ff ffb4 	bl	8002018 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020b2:	e012      	b.n	80020da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b4:	f7ff ffb0 	bl	8002018 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b0a      	cmp	r3, #10
 80020c0:	d90b      	bls.n	80020da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2205      	movs	r2, #5
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0c5      	b.n	8002266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0e5      	beq.n	80020b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0202 	bic.w	r2, r2, #2
 80020f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f8:	f7ff ff8e 	bl	8002018 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020fe:	e012      	b.n	8002126 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002100:	f7ff ff8a 	bl	8002018 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b0a      	cmp	r3, #10
 800210c:	d90b      	bls.n	8002126 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2205      	movs	r2, #5
 800211e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e09f      	b.n	8002266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e5      	bne.n	8002100 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7e1b      	ldrb	r3, [r3, #24]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e007      	b.n	800215e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7e5b      	ldrb	r3, [r3, #25]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e007      	b.n	8002188 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7e9b      	ldrb	r3, [r3, #26]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d108      	bne.n	80021a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0220 	orr.w	r2, r2, #32
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e007      	b.n	80021b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0220 	bic.w	r2, r2, #32
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7edb      	ldrb	r3, [r3, #27]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0210 	bic.w	r2, r2, #16
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e007      	b.n	80021dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0210 	orr.w	r2, r2, #16
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7f1b      	ldrb	r3, [r3, #28]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0208 	orr.w	r2, r2, #8
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e007      	b.n	8002206 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0208 	bic.w	r2, r2, #8
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7f5b      	ldrb	r3, [r3, #29]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0204 	orr.w	r2, r2, #4
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e007      	b.n	8002230 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0204 	bic.w	r2, r2, #4
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	ea42 0103 	orr.w	r1, r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002286:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d003      	beq.n	8002296 <HAL_CAN_ConfigFilter+0x26>
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	2b02      	cmp	r3, #2
 8002292:	f040 80be 	bne.w	8002412 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002296:	4b65      	ldr	r3, [pc, #404]	; (800242c <HAL_CAN_ConfigFilter+0x1bc>)
 8002298:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	431a      	orrs	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2201      	movs	r2, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	401a      	ands	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d123      	bne.n	8002340 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43db      	mvns	r3, r3
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800231a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3248      	adds	r2, #72	; 0x48
 8002320:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002334:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002336:	6979      	ldr	r1, [r7, #20]
 8002338:	3348      	adds	r3, #72	; 0x48
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d122      	bne.n	800238e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	431a      	orrs	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002368:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3248      	adds	r2, #72	; 0x48
 800236e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002382:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002384:	6979      	ldr	r1, [r7, #20]
 8002386:	3348      	adds	r3, #72	; 0x48
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	43db      	mvns	r3, r3
 80023a0:	401a      	ands	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023a8:	e007      	b.n	80023ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	401a      	ands	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023d4:	e007      	b.n	80023e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	431a      	orrs	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002404:	f023 0201 	bic.w	r2, r3, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e006      	b.n	8002420 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40006400 	.word	0x40006400

08002430 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d12e      	bne.n	80024a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800245c:	f7ff fddc 	bl	8002018 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002462:	e012      	b.n	800248a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002464:	f7ff fdd8 	bl	8002018 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b0a      	cmp	r3, #10
 8002470:	d90b      	bls.n	800248a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2205      	movs	r2, #5
 8002482:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e012      	b.n	80024b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e5      	bne.n	8002464 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e006      	b.n	80024b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
  }
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024d6:	7ffb      	ldrb	r3, [r7, #31]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d003      	beq.n	80024e4 <HAL_CAN_AddTxMessage+0x2c>
 80024dc:	7ffb      	ldrb	r3, [r7, #31]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	f040 80b8 	bne.w	8002654 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a0 	beq.w	8002644 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	0e1b      	lsrs	r3, r3, #24
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d907      	bls.n	8002524 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e09e      	b.n	8002662 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002524:	2201      	movs	r2, #1
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	409a      	lsls	r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10d      	bne.n	8002552 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	6809      	ldr	r1, [r1, #0]
 8002544:	431a      	orrs	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3318      	adds	r3, #24
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	440b      	add	r3, r1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e00f      	b.n	8002572 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800255c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002562:	68f9      	ldr	r1, [r7, #12]
 8002564:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002566:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3318      	adds	r3, #24
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	440b      	add	r3, r1
 8002570:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3318      	adds	r3, #24
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	440b      	add	r3, r1
 8002582:	3304      	adds	r3, #4
 8002584:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	7d1b      	ldrb	r3, [r3, #20]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d111      	bne.n	80025b2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3318      	adds	r3, #24
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	4413      	add	r3, r2
 800259a:	3304      	adds	r3, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	6811      	ldr	r1, [r2, #0]
 80025a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3318      	adds	r3, #24
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	440b      	add	r3, r1
 80025ae:	3304      	adds	r3, #4
 80025b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3307      	adds	r3, #7
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	061a      	lsls	r2, r3, #24
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3306      	adds	r3, #6
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3305      	adds	r3, #5
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	4313      	orrs	r3, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	3204      	adds	r2, #4
 80025d2:	7812      	ldrb	r2, [r2, #0]
 80025d4:	4610      	mov	r0, r2
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6811      	ldr	r1, [r2, #0]
 80025da:	ea43 0200 	orr.w	r2, r3, r0
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3303      	adds	r3, #3
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	061a      	lsls	r2, r3, #24
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3302      	adds	r3, #2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3301      	adds	r3, #1
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	4313      	orrs	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	4610      	mov	r0, r2
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	6811      	ldr	r1, [r2, #0]
 8002610:	ea43 0200 	orr.w	r2, r3, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	440b      	add	r3, r1
 800261a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800261e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3318      	adds	r3, #24
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	4413      	add	r3, r2
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	6811      	ldr	r1, [r2, #0]
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3318      	adds	r3, #24
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	440b      	add	r3, r1
 800263e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e00e      	b.n	8002662 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e006      	b.n	8002662 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002680:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002682:	7afb      	ldrb	r3, [r7, #11]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d002      	beq.n	800268e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002688:	7afb      	ldrb	r3, [r7, #11]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d11d      	bne.n	80026ca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3301      	adds	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3301      	adds	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d002      	beq.n	80026f6 <HAL_CAN_ActivateNotification+0x1e>
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d109      	bne.n	800270a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6959      	ldr	r1, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e006      	b.n	8002718 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
  }
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800274c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	; (80027c0 <__NVIC_EnableIRQ+0x38>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	; (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	; (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff29 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff3e 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff8e 	bl	8002818 <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5d 	bl	80027c4 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff31 	bl	8002788 <__NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffa2 	bl	8002880 <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e165      	b.n	8002c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	f040 8154 	bne.w	8002c2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d005      	beq.n	800299a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	2b02      	cmp	r3, #2
 8002998:	d130      	bne.n	80029fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d017      	beq.n	8002a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80ae 	beq.w	8002c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_GPIO_Init+0x300>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4a5c      	ldr	r2, [pc, #368]	; (8002c48 <HAL_GPIO_Init+0x300>)
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <HAL_GPIO_Init+0x300>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aea:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	3302      	adds	r3, #2
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	220f      	movs	r2, #15
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4f      	ldr	r2, [pc, #316]	; (8002c50 <HAL_GPIO_Init+0x308>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d025      	beq.n	8002b62 <HAL_GPIO_Init+0x21a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4e      	ldr	r2, [pc, #312]	; (8002c54 <HAL_GPIO_Init+0x30c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <HAL_GPIO_Init+0x216>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4d      	ldr	r2, [pc, #308]	; (8002c58 <HAL_GPIO_Init+0x310>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x212>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4c      	ldr	r2, [pc, #304]	; (8002c5c <HAL_GPIO_Init+0x314>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x20e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4b      	ldr	r2, [pc, #300]	; (8002c60 <HAL_GPIO_Init+0x318>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x20a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_GPIO_Init+0x31c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x206>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <HAL_GPIO_Init+0x320>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x202>
 8002b46:	2306      	movs	r3, #6
 8002b48:	e00c      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e00a      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x21c>
 8002b62:	2300      	movs	r3, #0
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b74:	4935      	ldr	r1, [pc, #212]	; (8002c4c <HAL_GPIO_Init+0x304>)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b82:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba6:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bac:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c24:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <HAL_GPIO_Init+0x324>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f67f ae96 	bls.w	8002964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40021800 	.word	0x40021800
 8002c6c:	40013c00 	.word	0x40013c00

08002c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	807b      	strh	r3, [r7, #2]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c80:	787b      	ldrb	r3, [r7, #1]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c8c:	e003      	b.n	8002c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	041a      	lsls	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e12b      	b.n	8002f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe fedc 	bl	8001a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2224      	movs	r2, #36	; 0x24
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d08:	f000 fe22 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8002d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4a81      	ldr	r2, [pc, #516]	; (8002f18 <HAL_I2C_Init+0x274>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d807      	bhi.n	8002d28 <HAL_I2C_Init+0x84>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a80      	ldr	r2, [pc, #512]	; (8002f1c <HAL_I2C_Init+0x278>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	bf94      	ite	ls
 8002d20:	2301      	movls	r3, #1
 8002d22:	2300      	movhi	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e006      	b.n	8002d36 <HAL_I2C_Init+0x92>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4a7d      	ldr	r2, [pc, #500]	; (8002f20 <HAL_I2C_Init+0x27c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	bf94      	ite	ls
 8002d30:	2301      	movls	r3, #1
 8002d32:	2300      	movhi	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0e7      	b.n	8002f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a78      	ldr	r2, [pc, #480]	; (8002f24 <HAL_I2C_Init+0x280>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	0c9b      	lsrs	r3, r3, #18
 8002d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a6a      	ldr	r2, [pc, #424]	; (8002f18 <HAL_I2C_Init+0x274>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d802      	bhi.n	8002d78 <HAL_I2C_Init+0xd4>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	3301      	adds	r3, #1
 8002d76:	e009      	b.n	8002d8c <HAL_I2C_Init+0xe8>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	4a69      	ldr	r2, [pc, #420]	; (8002f28 <HAL_I2C_Init+0x284>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	495c      	ldr	r1, [pc, #368]	; (8002f18 <HAL_I2C_Init+0x274>)
 8002da8:	428b      	cmp	r3, r1
 8002daa:	d819      	bhi.n	8002de0 <HAL_I2C_Init+0x13c>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e59      	subs	r1, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dba:	1c59      	adds	r1, r3, #1
 8002dbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dc0:	400b      	ands	r3, r1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_I2C_Init+0x138>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1e59      	subs	r1, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dda:	e051      	b.n	8002e80 <HAL_I2C_Init+0x1dc>
 8002ddc:	2304      	movs	r3, #4
 8002dde:	e04f      	b.n	8002e80 <HAL_I2C_Init+0x1dc>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d111      	bne.n	8002e0c <HAL_I2C_Init+0x168>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	440b      	add	r3, r1
 8002df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e012      	b.n	8002e32 <HAL_I2C_Init+0x18e>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	0099      	lsls	r1, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e22:	3301      	adds	r3, #1
 8002e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Init+0x196>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e022      	b.n	8002e80 <HAL_I2C_Init+0x1dc>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10e      	bne.n	8002e60 <HAL_I2C_Init+0x1bc>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1e58      	subs	r0, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	440b      	add	r3, r1
 8002e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e5e:	e00f      	b.n	8002e80 <HAL_I2C_Init+0x1dc>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1e58      	subs	r0, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	0099      	lsls	r1, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	6809      	ldr	r1, [r1, #0]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6911      	ldr	r1, [r2, #16]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68d2      	ldr	r2, [r2, #12]
 8002eba:	4311      	orrs	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	000186a0 	.word	0x000186a0
 8002f1c:	001e847f 	.word	0x001e847f
 8002f20:	003d08ff 	.word	0x003d08ff
 8002f24:	431bde83 	.word	0x431bde83
 8002f28:	10624dd3 	.word	0x10624dd3

08002f2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	461a      	mov	r2, r3
 8002f38:	460b      	mov	r3, r1
 8002f3a:	817b      	strh	r3, [r7, #10]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f40:	f7ff f86a 	bl	8002018 <HAL_GetTick>
 8002f44:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	f040 820b 	bne.w	800336a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2319      	movs	r3, #25
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	497c      	ldr	r1, [pc, #496]	; (8003150 <HAL_I2C_Master_Receive+0x224>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fad8 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e1fe      	b.n	800336c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_I2C_Master_Receive+0x50>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e1f7      	b.n	800336c <HAL_I2C_Master_Receive+0x440>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d007      	beq.n	8002fa2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2222      	movs	r2, #34	; 0x22
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	893a      	ldrh	r2, [r7, #8]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4a5c      	ldr	r2, [pc, #368]	; (8003154 <HAL_I2C_Master_Receive+0x228>)
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fe4:	8979      	ldrh	r1, [r7, #10]
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f9c4 	bl	8003378 <I2C_MasterRequestRead>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1b8      	b.n	800336c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d113      	bne.n	800302a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	623b      	str	r3, [r7, #32]
 8003016:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e18c      	b.n	8003344 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	2b01      	cmp	r3, #1
 8003030:	d11b      	bne.n	800306a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e16c      	b.n	8003344 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	2b02      	cmp	r3, #2
 8003070:	d11b      	bne.n	80030aa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003080:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	e14c      	b.n	8003344 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030d0:	e138      	b.n	8003344 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	f200 80f1 	bhi.w	80032be <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d123      	bne.n	800312c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fae9 	bl	80036c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e139      	b.n	800336c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a
 800312a:	e10b      	b.n	8003344 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b02      	cmp	r3, #2
 8003132:	d14e      	bne.n	80031d2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	2200      	movs	r2, #0
 800313c:	4906      	ldr	r1, [pc, #24]	; (8003158 <HAL_I2C_Master_Receive+0x22c>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f9e8 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e10e      	b.n	800336c <HAL_I2C_Master_Receive+0x440>
 800314e:	bf00      	nop
 8003150:	00100002 	.word	0x00100002
 8003154:	ffff0000 	.word	0xffff0000
 8003158:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031d0:	e0b8      	b.n	8003344 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	2200      	movs	r2, #0
 80031da:	4966      	ldr	r1, [pc, #408]	; (8003374 <HAL_I2C_Master_Receive+0x448>)
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f999 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0bf      	b.n	800336c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	2200      	movs	r2, #0
 8003236:	494f      	ldr	r1, [pc, #316]	; (8003374 <HAL_I2C_Master_Receive+0x448>)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f96b 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e091      	b.n	800336c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032bc:	e042      	b.n	8003344 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f9fc 	bl	80036c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e04c      	b.n	800336c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b04      	cmp	r3, #4
 8003310:	d118      	bne.n	8003344 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	f47f aec2 	bne.w	80030d2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3728      	adds	r7, #40	; 0x28
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	00010004 	.word	0x00010004

08003378 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	460b      	mov	r3, r1
 8003386:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d006      	beq.n	80033b2 <I2C_MasterRequestRead+0x3a>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d003      	beq.n	80033b2 <I2C_MasterRequestRead+0x3a>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033b0:	d108      	bne.n	80033c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e00b      	b.n	80033dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	2b11      	cmp	r3, #17
 80033ca:	d107      	bne.n	80033dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f893 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d103      	bne.n	800340c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e079      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003418:	d108      	bne.n	800342c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	e05f      	b.n	80034ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800342c:	897b      	ldrh	r3, [r7, #10]
 800342e:	11db      	asrs	r3, r3, #7
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f003 0306 	and.w	r3, r3, #6
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f063 030f 	orn	r3, r3, #15
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4930      	ldr	r1, [pc, #192]	; (800350c <I2C_MasterRequestRead+0x194>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8b9 	bl	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e054      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4929      	ldr	r1, [pc, #164]	; (8003510 <I2C_MasterRequestRead+0x198>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8a9 	bl	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e044      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800349e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f831 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c6:	d103      	bne.n	80034d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e017      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	11db      	asrs	r3, r3, #7
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	f003 0306 	and.w	r3, r3, #6
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f063 030e 	orn	r3, r3, #14
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <I2C_MasterRequestRead+0x198>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f865 	bl	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00010008 	.word	0x00010008
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003524:	e025      	b.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800352c:	d021      	beq.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fe fd73 	bl	8002018 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d116      	bne.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e023      	b.n	80035ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d10d      	bne.n	8003598 <I2C_WaitOnFlagUntilTimeout+0x84>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	e00c      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d0b6      	beq.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d0:	e051      	b.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d123      	bne.n	800362a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e046      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003630:	d021      	beq.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe fcf1 	bl	8002018 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d116      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e020      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10c      	bne.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4013      	ands	r3, r2
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e00b      	b.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d18d      	bne.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036cc:	e042      	b.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d119      	bne.n	8003710 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0210 	mvn.w	r2, #16
 80036e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e029      	b.n	8003764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003710:	f7fe fc82 	bl	8002018 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	d302      	bcc.n	8003726 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d116      	bne.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d1b5      	bne.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0cc      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003780:	4b68      	ldr	r3, [pc, #416]	; (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d90c      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b65      	ldr	r3, [pc, #404]	; (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0b8      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4a58      	ldr	r2, [pc, #352]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d8:	4b53      	ldr	r3, [pc, #332]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e4:	4b50      	ldr	r3, [pc, #320]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	494d      	ldr	r1, [pc, #308]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d044      	beq.n	800388c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d119      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e07f      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d003      	beq.n	800382a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003826:	2b03      	cmp	r3, #3
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382a:	4b3f      	ldr	r3, [pc, #252]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e06f      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383a:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e067      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800384a:	4b37      	ldr	r3, [pc, #220]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 0203 	bic.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4934      	ldr	r1, [pc, #208]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800385c:	f7fe fbdc 	bl	8002018 <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003862:	e00a      	b.n	800387a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003864:	f7fe fbd8 	bl	8002018 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e04f      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 020c 	and.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	429a      	cmp	r2, r3
 800388a:	d1eb      	bne.n	8003864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800388c:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d20c      	bcs.n	80038b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b22      	ldr	r3, [pc, #136]	; (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b20      	ldr	r3, [pc, #128]	; (8003924 <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e032      	b.n	800391a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4916      	ldr	r1, [pc, #88]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	490e      	ldr	r1, [pc, #56]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038f2:	f000 f855 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	490a      	ldr	r1, [pc, #40]	; (800392c <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	5ccb      	ldrb	r3, [r1, r3]
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	4a09      	ldr	r2, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_ClockConfig+0x1c8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fb3c 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023c00 	.word	0x40023c00
 8003928:	40023800 	.word	0x40023800
 800392c:	08008a24 	.word	0x08008a24
 8003930:	20000000 	.word	0x20000000
 8003934:	20000004 	.word	0x20000004

08003938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_RCC_GetHCLKFreq+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003954:	f7ff fff0 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0a9b      	lsrs	r3, r3, #10
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4903      	ldr	r1, [pc, #12]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40023800 	.word	0x40023800
 8003974:	08008a34 	.word	0x08008a34

08003978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800397c:	f7ff ffdc 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0b5b      	lsrs	r3, r3, #13
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	; (800399c <HAL_RCC_GetPCLK2Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	08008a34 	.word	0x08008a34

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b0ae      	sub	sp, #184	; 0xb8
 80039a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c6:	4bcb      	ldr	r3, [pc, #812]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	f200 8206 	bhi.w	8003de0 <HAL_RCC_GetSysClockFreq+0x440>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003de1 	.word	0x08003de1
 80039e4:	08003de1 	.word	0x08003de1
 80039e8:	08003de1 	.word	0x08003de1
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003de1 	.word	0x08003de1
 80039f4:	08003de1 	.word	0x08003de1
 80039f8:	08003de1 	.word	0x08003de1
 80039fc:	08003a21 	.word	0x08003a21
 8003a00:	08003de1 	.word	0x08003de1
 8003a04:	08003de1 	.word	0x08003de1
 8003a08:	08003de1 	.word	0x08003de1
 8003a0c:	08003c11 	.word	0x08003c11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4bb9      	ldr	r3, [pc, #740]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003a16:	e1e7      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a18:	4bb8      	ldr	r3, [pc, #736]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a1e:	e1e3      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4bb4      	ldr	r3, [pc, #720]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2c:	4bb1      	ldr	r3, [pc, #708]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d071      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a38:	4bae      	ldr	r3, [pc, #696]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a44:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a5e:	4622      	mov	r2, r4
 8003a60:	462b      	mov	r3, r5
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	0159      	lsls	r1, r3, #5
 8003a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a70:	0150      	lsls	r0, r2, #5
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4621      	mov	r1, r4
 8003a78:	1a51      	subs	r1, r2, r1
 8003a7a:	6439      	str	r1, [r7, #64]	; 0x40
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a82:	647b      	str	r3, [r7, #68]	; 0x44
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a90:	4649      	mov	r1, r9
 8003a92:	018b      	lsls	r3, r1, #6
 8003a94:	4641      	mov	r1, r8
 8003a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	018a      	lsls	r2, r1, #6
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1a51      	subs	r1, r2, r1
 8003aa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ab8:	4649      	mov	r1, r9
 8003aba:	00cb      	lsls	r3, r1, #3
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	00ca      	lsls	r2, r1, #3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	4622      	mov	r2, r4
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	eb42 0303 	adc.w	r3, r2, r3
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ae8:	4629      	mov	r1, r5
 8003aea:	024b      	lsls	r3, r1, #9
 8003aec:	4621      	mov	r1, r4
 8003aee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003af2:	4621      	mov	r1, r4
 8003af4:	024a      	lsls	r2, r1, #9
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003b0c:	f7fd f86c 	bl	8000be8 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4613      	mov	r3, r2
 8003b16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b1a:	e067      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1c:	4b75      	ldr	r3, [pc, #468]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b28:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b36:	2300      	movs	r3, #0
 8003b38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b50:	0150      	lsls	r0, r2, #5
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4621      	mov	r1, r4
 8003b58:	1a51      	subs	r1, r2, r1
 8003b5a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b70:	4649      	mov	r1, r9
 8003b72:	018b      	lsls	r3, r1, #6
 8003b74:	4641      	mov	r1, r8
 8003b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	018a      	lsls	r2, r1, #6
 8003b7e:	4641      	mov	r1, r8
 8003b80:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b84:	4649      	mov	r1, r9
 8003b86:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b9e:	4692      	mov	sl, r2
 8003ba0:	469b      	mov	fp, r3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	eb1a 0303 	adds.w	r3, sl, r3
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	462b      	mov	r3, r5
 8003bac:	eb4b 0303 	adc.w	r3, fp, r3
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	028b      	lsls	r3, r1, #10
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bc8:	4621      	mov	r1, r4
 8003bca:	028a      	lsls	r2, r1, #10
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8003bd8:	677a      	str	r2, [r7, #116]	; 0x74
 8003bda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003bde:	f7fd f803 	bl	8000be8 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4613      	mov	r3, r2
 8003be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bec:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c0e:	e0eb      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c10:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1c:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d06b      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	099b      	lsrs	r3, r3, #6
 8003c2e:	2200      	movs	r2, #0
 8003c30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c44:	4622      	mov	r2, r4
 8003c46:	462b      	mov	r3, r5
 8003c48:	f04f 0000 	mov.w	r0, #0
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	0159      	lsls	r1, r3, #5
 8003c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c56:	0150      	lsls	r0, r2, #5
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	1a51      	subs	r1, r2, r1
 8003c60:	61b9      	str	r1, [r7, #24]
 8003c62:	4629      	mov	r1, r5
 8003c64:	eb63 0301 	sbc.w	r3, r3, r1
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c76:	4659      	mov	r1, fp
 8003c78:	018b      	lsls	r3, r1, #6
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c80:	4651      	mov	r1, sl
 8003c82:	018a      	lsls	r2, r1, #6
 8003c84:	4651      	mov	r1, sl
 8003c86:	ebb2 0801 	subs.w	r8, r2, r1
 8003c8a:	4659      	mov	r1, fp
 8003c8c:	eb63 0901 	sbc.w	r9, r3, r1
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ca0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca4:	4690      	mov	r8, r2
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	4623      	mov	r3, r4
 8003caa:	eb18 0303 	adds.w	r3, r8, r3
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	eb49 0303 	adc.w	r3, r9, r3
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	024b      	lsls	r3, r1, #9
 8003cc8:	4621      	mov	r1, r4
 8003cca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cce:	4621      	mov	r1, r4
 8003cd0:	024a      	lsls	r2, r1, #9
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cda:	2200      	movs	r2, #0
 8003cdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ce0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ce4:	f7fc ff80 	bl	8000be8 <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4613      	mov	r3, r2
 8003cee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cf2:	e065      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x420>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d00:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	2200      	movs	r2, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
 8003d12:	2300      	movs	r3, #0
 8003d14:	657b      	str	r3, [r7, #84]	; 0x54
 8003d16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d1a:	4642      	mov	r2, r8
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	0159      	lsls	r1, r3, #5
 8003d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2c:	0150      	lsls	r0, r2, #5
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4641      	mov	r1, r8
 8003d34:	1a51      	subs	r1, r2, r1
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	4649      	mov	r1, r9
 8003d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	018b      	lsls	r3, r1, #6
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d56:	4651      	mov	r1, sl
 8003d58:	018a      	lsls	r2, r1, #6
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	1a54      	subs	r4, r2, r1
 8003d5e:	4659      	mov	r1, fp
 8003d60:	eb63 0501 	sbc.w	r5, r3, r1
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	00eb      	lsls	r3, r5, #3
 8003d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d72:	00e2      	lsls	r2, r4, #3
 8003d74:	4614      	mov	r4, r2
 8003d76:	461d      	mov	r5, r3
 8003d78:	4643      	mov	r3, r8
 8003d7a:	18e3      	adds	r3, r4, r3
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	464b      	mov	r3, r9
 8003d80:	eb45 0303 	adc.w	r3, r5, r3
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d92:	4629      	mov	r1, r5
 8003d94:	028b      	lsls	r3, r1, #10
 8003d96:	4621      	mov	r1, r4
 8003d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	028a      	lsls	r2, r1, #10
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003da8:	2200      	movs	r2, #0
 8003daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dac:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003dae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003db2:	f7fc ff19 	bl	8000be8 <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4613      	mov	r3, r2
 8003dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	0f1b      	lsrs	r3, r3, #28
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003dde:	e003      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003de6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	37b8      	adds	r7, #184	; 0xb8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	00f42400 	.word	0x00f42400

08003e00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e28d      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8083 	beq.w	8003f26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e20:	4b94      	ldr	r3, [pc, #592]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d019      	beq.n	8003e60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e2c:	4b91      	ldr	r3, [pc, #580]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e38:	4b8e      	ldr	r3, [pc, #568]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e44:	d00c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e46:	4b8b      	ldr	r3, [pc, #556]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e4e:	2b0c      	cmp	r3, #12
 8003e50:	d112      	bne.n	8003e78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e52:	4b88      	ldr	r3, [pc, #544]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5e:	d10b      	bne.n	8003e78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	4b84      	ldr	r3, [pc, #528]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05b      	beq.n	8003f24 <HAL_RCC_OscConfig+0x124>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d157      	bne.n	8003f24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e25a      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x90>
 8003e82:	4b7c      	ldr	r3, [pc, #496]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7b      	ldr	r2, [pc, #492]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e01d      	b.n	8003ecc <HAL_RCC_OscConfig+0xcc>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0xb4>
 8003e9a:	4b76      	ldr	r3, [pc, #472]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a75      	ldr	r2, [pc, #468]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b73      	ldr	r3, [pc, #460]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a72      	ldr	r2, [pc, #456]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCC_OscConfig+0xcc>
 8003eb4:	4b6f      	ldr	r3, [pc, #444]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6e      	ldr	r2, [pc, #440]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a6b      	ldr	r2, [pc, #428]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f8a0 	bl	8002018 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fe f89c 	bl	8002018 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e21f      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b61      	ldr	r3, [pc, #388]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0xdc>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f88c 	bl	8002018 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fe f888 	bl	8002018 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e20b      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	4b57      	ldr	r3, [pc, #348]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x104>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d06f      	beq.n	8004012 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f32:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d017      	beq.n	8003f6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f3e:	4b4d      	ldr	r3, [pc, #308]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d105      	bne.n	8003f56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d11c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f62:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d116      	bne.n	8003f9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6e:	4b41      	ldr	r3, [pc, #260]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_RCC_OscConfig+0x186>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d001      	beq.n	8003f86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e1d3      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f86:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4937      	ldr	r1, [pc, #220]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9a:	e03a      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d020      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa4:	4b34      	ldr	r3, [pc, #208]	; (8004078 <HAL_RCC_OscConfig+0x278>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fe f835 	bl	8002018 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb2:	f7fe f831 	bl	8002018 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e1b4      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd0:	4b28      	ldr	r3, [pc, #160]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4925      	ldr	r1, [pc, #148]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]
 8003fe4:	e015      	b.n	8004012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_RCC_OscConfig+0x278>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fe f814 	bl	8002018 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff4:	f7fe f810 	bl	8002018 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e193      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004006:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d036      	beq.n	800408c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd fff4 	bl	8002018 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004034:	f7fd fff0 	bl	8002018 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e173      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCC_OscConfig+0x274>)
 8004048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x234>
 8004052:	e01b      	b.n	800408c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCC_OscConfig+0x27c>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fd ffdd 	bl	8002018 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004060:	e00e      	b.n	8004080 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004062:	f7fd ffd9 	bl	8002018 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d907      	bls.n	8004080 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e15c      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
 8004074:	40023800 	.word	0x40023800
 8004078:	42470000 	.word	0x42470000
 800407c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004080:	4b8a      	ldr	r3, [pc, #552]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1ea      	bne.n	8004062 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8097 	beq.w	80041c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409e:	4b83      	ldr	r3, [pc, #524]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10f      	bne.n	80040ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	4b7f      	ldr	r3, [pc, #508]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	4a7e      	ldr	r2, [pc, #504]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ba:	4b7c      	ldr	r3, [pc, #496]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c6:	2301      	movs	r3, #1
 80040c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ca:	4b79      	ldr	r3, [pc, #484]	; (80042b0 <HAL_RCC_OscConfig+0x4b0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d118      	bne.n	8004108 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d6:	4b76      	ldr	r3, [pc, #472]	; (80042b0 <HAL_RCC_OscConfig+0x4b0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a75      	ldr	r2, [pc, #468]	; (80042b0 <HAL_RCC_OscConfig+0x4b0>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e2:	f7fd ff99 	bl	8002018 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ea:	f7fd ff95 	bl	8002018 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e118      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fc:	4b6c      	ldr	r3, [pc, #432]	; (80042b0 <HAL_RCC_OscConfig+0x4b0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d106      	bne.n	800411e <HAL_RCC_OscConfig+0x31e>
 8004110:	4b66      	ldr	r3, [pc, #408]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	4a65      	ldr	r2, [pc, #404]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	6713      	str	r3, [r2, #112]	; 0x70
 800411c:	e01c      	b.n	8004158 <HAL_RCC_OscConfig+0x358>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b05      	cmp	r3, #5
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0x340>
 8004126:	4b61      	ldr	r3, [pc, #388]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4a60      	ldr	r2, [pc, #384]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 800412c:	f043 0304 	orr.w	r3, r3, #4
 8004130:	6713      	str	r3, [r2, #112]	; 0x70
 8004132:	4b5e      	ldr	r3, [pc, #376]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	4a5d      	ldr	r2, [pc, #372]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6713      	str	r3, [r2, #112]	; 0x70
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0x358>
 8004140:	4b5a      	ldr	r3, [pc, #360]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	4a59      	ldr	r2, [pc, #356]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	6713      	str	r3, [r2, #112]	; 0x70
 800414c:	4b57      	ldr	r3, [pc, #348]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	4a56      	ldr	r2, [pc, #344]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004152:	f023 0304 	bic.w	r3, r3, #4
 8004156:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d015      	beq.n	800418c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fd ff5a 	bl	8002018 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004166:	e00a      	b.n	800417e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fd ff56 	bl	8002018 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	; 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e0d7      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417e:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0ee      	beq.n	8004168 <HAL_RCC_OscConfig+0x368>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd ff44 	bl	8002018 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004192:	e00a      	b.n	80041aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fd ff40 	bl	8002018 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0c1      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041aa:	4b40      	ldr	r3, [pc, #256]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1ee      	bne.n	8004194 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d105      	bne.n	80041c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	4a3a      	ldr	r2, [pc, #232]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80041c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80ad 	beq.w	800432c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d060      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d145      	bne.n	8004272 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e6:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <HAL_RCC_OscConfig+0x4b4>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fd ff14 	bl	8002018 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fd ff10 	bl	8002018 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e093      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	4b29      	ldr	r3, [pc, #164]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	019b      	lsls	r3, r3, #6
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	3b01      	subs	r3, #1
 800422c:	041b      	lsls	r3, r3, #16
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	061b      	lsls	r3, r3, #24
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	071b      	lsls	r3, r3, #28
 800423e:	491b      	ldr	r1, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_RCC_OscConfig+0x4b4>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424a:	f7fd fee5 	bl	8002018 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004252:	f7fd fee1 	bl	8002018 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e064      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x452>
 8004270:	e05c      	b.n	800432c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_RCC_OscConfig+0x4b4>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd fece 	bl	8002018 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004280:	f7fd feca 	bl	8002018 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e04d      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_RCC_OscConfig+0x4ac>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x480>
 800429e:	e045      	b.n	800432c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e040      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40007000 	.word	0x40007000
 80042b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042b8:	4b1f      	ldr	r3, [pc, #124]	; (8004338 <HAL_RCC_OscConfig+0x538>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d030      	beq.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d129      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d122      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d119      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	3b01      	subs	r3, #1
 8004302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004304:	429a      	cmp	r2, r3
 8004306:	d10f      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e041      	b.n	80043d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fd fbd8 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 fca8 	bl	8004cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e04e      	b.n	8004492 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a23      	ldr	r2, [pc, #140]	; (80044a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441e:	d01d      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1f      	ldr	r2, [pc, #124]	; (80044a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <HAL_TIM_Base_Start_IT+0xd0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a19      	ldr	r2, [pc, #100]	; (80044b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d111      	bne.n	8004480 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b06      	cmp	r3, #6
 800446c:	d010      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447e:	e007      	b.n	8004490 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40010400 	.word	0x40010400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40001800 	.word	0x40001800

080044bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	f241 1311 	movw	r3, #4369	; 0x1111
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10f      	bne.n	8004504 <HAL_TIM_Base_Stop_IT+0x48>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	f240 4344 	movw	r3, #1092	; 0x444
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_Base_Stop_IT+0x48>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e041      	b.n	80045b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f839 	bl	80045b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f000 fbb9 	bl	8004cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <HAL_TIM_PWM_Start+0x24>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e022      	b.n	8004636 <HAL_TIM_PWM_Start+0x6a>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d109      	bne.n	800460a <HAL_TIM_PWM_Start+0x3e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	bf14      	ite	ne
 8004602:	2301      	movne	r3, #1
 8004604:	2300      	moveq	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	e015      	b.n	8004636 <HAL_TIM_PWM_Start+0x6a>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d109      	bne.n	8004624 <HAL_TIM_PWM_Start+0x58>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	e008      	b.n	8004636 <HAL_TIM_PWM_Start+0x6a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e07c      	b.n	8004738 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d104      	bne.n	800464e <HAL_TIM_PWM_Start+0x82>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800464c:	e013      	b.n	8004676 <HAL_TIM_PWM_Start+0xaa>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0x92>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465c:	e00b      	b.n	8004676 <HAL_TIM_PWM_Start+0xaa>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0xa2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800466c:	e003      	b.n	8004676 <HAL_TIM_PWM_Start+0xaa>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2201      	movs	r2, #1
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fe10 	bl	80052a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2d      	ldr	r2, [pc, #180]	; (8004740 <HAL_TIM_PWM_Start+0x174>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d004      	beq.n	8004698 <HAL_TIM_PWM_Start+0xcc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2c      	ldr	r2, [pc, #176]	; (8004744 <HAL_TIM_PWM_Start+0x178>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d101      	bne.n	800469c <HAL_TIM_PWM_Start+0xd0>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <HAL_TIM_PWM_Start+0xd2>
 800469c:	2300      	movs	r3, #0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a22      	ldr	r2, [pc, #136]	; (8004740 <HAL_TIM_PWM_Start+0x174>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_TIM_PWM_Start+0x136>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c4:	d01d      	beq.n	8004702 <HAL_TIM_PWM_Start+0x136>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1f      	ldr	r2, [pc, #124]	; (8004748 <HAL_TIM_PWM_Start+0x17c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_TIM_PWM_Start+0x136>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_TIM_PWM_Start+0x180>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_TIM_PWM_Start+0x136>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <HAL_TIM_PWM_Start+0x184>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_TIM_PWM_Start+0x136>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a16      	ldr	r2, [pc, #88]	; (8004744 <HAL_TIM_PWM_Start+0x178>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_TIM_PWM_Start+0x136>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_TIM_PWM_Start+0x188>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_TIM_PWM_Start+0x136>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a16      	ldr	r2, [pc, #88]	; (8004758 <HAL_TIM_PWM_Start+0x18c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d111      	bne.n	8004726 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b06      	cmp	r3, #6
 8004712:	d010      	beq.n	8004736 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004724:	e007      	b.n	8004736 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40010000 	.word	0x40010000
 8004744:	40010400 	.word	0x40010400
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40014000 	.word	0x40014000
 8004758:	40001800 	.word	0x40001800

0800475c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b02      	cmp	r3, #2
 8004770:	d122      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b02      	cmp	r3, #2
 800477e:	d11b      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0202 	mvn.w	r2, #2
 8004788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa77 	bl	8004c92 <HAL_TIM_IC_CaptureCallback>
 80047a4:	e005      	b.n	80047b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fa69 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fa7a 	bl	8004ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d122      	bne.n	800480c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d11b      	bne.n	800480c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0204 	mvn.w	r2, #4
 80047dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fa4d 	bl	8004c92 <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fa3f 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fa50 	bl	8004ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b08      	cmp	r3, #8
 8004818:	d122      	bne.n	8004860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b08      	cmp	r3, #8
 8004826:	d11b      	bne.n	8004860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0208 	mvn.w	r2, #8
 8004830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2204      	movs	r2, #4
 8004836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fa23 	bl	8004c92 <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fa15 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fa26 	bl	8004ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b10      	cmp	r3, #16
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b10      	cmp	r3, #16
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0210 	mvn.w	r2, #16
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2208      	movs	r2, #8
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f9f9 	bl	8004c92 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f9eb 	bl	8004c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f9fc 	bl	8004ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10e      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0201 	mvn.w	r2, #1
 80048d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd f834 	bl	8001948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ea:	2b80      	cmp	r3, #128	; 0x80
 80048ec:	d10e      	bne.n	800490c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f8:	2b80      	cmp	r3, #128	; 0x80
 80048fa:	d107      	bne.n	800490c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fd78 	bl	80053fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d10e      	bne.n	8004938 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b40      	cmp	r3, #64	; 0x40
 8004926:	d107      	bne.n	8004938 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9c1 	bl	8004cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b20      	cmp	r3, #32
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b20      	cmp	r3, #32
 8004952:	d107      	bne.n	8004964 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0220 	mvn.w	r2, #32
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fd42 	bl	80053e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004964:	bf00      	nop
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004986:	2302      	movs	r3, #2
 8004988:	e0ae      	b.n	8004ae8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b0c      	cmp	r3, #12
 8004996:	f200 809f 	bhi.w	8004ad8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800499a:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049d5 	.word	0x080049d5
 80049a4:	08004ad9 	.word	0x08004ad9
 80049a8:	08004ad9 	.word	0x08004ad9
 80049ac:	08004ad9 	.word	0x08004ad9
 80049b0:	08004a15 	.word	0x08004a15
 80049b4:	08004ad9 	.word	0x08004ad9
 80049b8:	08004ad9 	.word	0x08004ad9
 80049bc:	08004ad9 	.word	0x08004ad9
 80049c0:	08004a57 	.word	0x08004a57
 80049c4:	08004ad9 	.word	0x08004ad9
 80049c8:	08004ad9 	.word	0x08004ad9
 80049cc:	08004ad9 	.word	0x08004ad9
 80049d0:	08004a97 	.word	0x08004a97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fa18 	bl	8004e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0204 	bic.w	r2, r2, #4
 80049fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6999      	ldr	r1, [r3, #24]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	619a      	str	r2, [r3, #24]
      break;
 8004a12:	e064      	b.n	8004ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fa68 	bl	8004ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6999      	ldr	r1, [r3, #24]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	021a      	lsls	r2, r3, #8
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	619a      	str	r2, [r3, #24]
      break;
 8004a54:	e043      	b.n	8004ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fabd 	bl	8004fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0208 	orr.w	r2, r2, #8
 8004a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0204 	bic.w	r2, r2, #4
 8004a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69d9      	ldr	r1, [r3, #28]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	61da      	str	r2, [r3, #28]
      break;
 8004a94:	e023      	b.n	8004ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fb11 	bl	80050c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69d9      	ldr	r1, [r3, #28]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	021a      	lsls	r2, r3, #8
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	61da      	str	r2, [r3, #28]
      break;
 8004ad6:	e002      	b.n	8004ade <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
      break;
 8004adc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d101      	bne.n	8004b0c <HAL_TIM_ConfigClockSource+0x1c>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	e0b4      	b.n	8004c76 <HAL_TIM_ConfigClockSource+0x186>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b44:	d03e      	beq.n	8004bc4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4a:	f200 8087 	bhi.w	8004c5c <HAL_TIM_ConfigClockSource+0x16c>
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	f000 8086 	beq.w	8004c62 <HAL_TIM_ConfigClockSource+0x172>
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5a:	d87f      	bhi.n	8004c5c <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b70      	cmp	r3, #112	; 0x70
 8004b5e:	d01a      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0xa6>
 8004b60:	2b70      	cmp	r3, #112	; 0x70
 8004b62:	d87b      	bhi.n	8004c5c <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b60      	cmp	r3, #96	; 0x60
 8004b66:	d050      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x11a>
 8004b68:	2b60      	cmp	r3, #96	; 0x60
 8004b6a:	d877      	bhi.n	8004c5c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b50      	cmp	r3, #80	; 0x50
 8004b6e:	d03c      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0xfa>
 8004b70:	2b50      	cmp	r3, #80	; 0x50
 8004b72:	d873      	bhi.n	8004c5c <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d058      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x13a>
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d86f      	bhi.n	8004c5c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b30      	cmp	r3, #48	; 0x30
 8004b7e:	d064      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x15a>
 8004b80:	2b30      	cmp	r3, #48	; 0x30
 8004b82:	d86b      	bhi.n	8004c5c <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d060      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x15a>
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	d867      	bhi.n	8004c5c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d05c      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x15a>
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d05a      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x15a>
 8004b94:	e062      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6899      	ldr	r1, [r3, #8]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f000 fb5d 	bl	8005264 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	609a      	str	r2, [r3, #8]
      break;
 8004bc2:	e04f      	b.n	8004c64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6899      	ldr	r1, [r3, #8]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f000 fb46 	bl	8005264 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be6:	609a      	str	r2, [r3, #8]
      break;
 8004be8:	e03c      	b.n	8004c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f000 faba 	bl	8005170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2150      	movs	r1, #80	; 0x50
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fb13 	bl	800522e <TIM_ITRx_SetConfig>
      break;
 8004c08:	e02c      	b.n	8004c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 fad9 	bl	80051ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2160      	movs	r1, #96	; 0x60
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fb03 	bl	800522e <TIM_ITRx_SetConfig>
      break;
 8004c28:	e01c      	b.n	8004c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 fa9a 	bl	8005170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2140      	movs	r1, #64	; 0x40
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 faf3 	bl	800522e <TIM_ITRx_SetConfig>
      break;
 8004c48:	e00c      	b.n	8004c64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f000 faea 	bl	800522e <TIM_ITRx_SetConfig>
      break;
 8004c5a:	e003      	b.n	8004c64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c60:	e000      	b.n	8004c64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a40      	ldr	r2, [pc, #256]	; (8004de4 <TIM_Base_SetConfig+0x114>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cee:	d00f      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a3d      	ldr	r2, [pc, #244]	; (8004de8 <TIM_Base_SetConfig+0x118>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00b      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a3c      	ldr	r2, [pc, #240]	; (8004dec <TIM_Base_SetConfig+0x11c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a3b      	ldr	r2, [pc, #236]	; (8004df0 <TIM_Base_SetConfig+0x120>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0x40>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a3a      	ldr	r2, [pc, #232]	; (8004df4 <TIM_Base_SetConfig+0x124>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d108      	bne.n	8004d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2f      	ldr	r2, [pc, #188]	; (8004de4 <TIM_Base_SetConfig+0x114>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d02b      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d30:	d027      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <TIM_Base_SetConfig+0x118>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d023      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2b      	ldr	r2, [pc, #172]	; (8004dec <TIM_Base_SetConfig+0x11c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01f      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2a      	ldr	r2, [pc, #168]	; (8004df0 <TIM_Base_SetConfig+0x120>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01b      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <TIM_Base_SetConfig+0x124>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d017      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <TIM_Base_SetConfig+0x128>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a27      	ldr	r2, [pc, #156]	; (8004dfc <TIM_Base_SetConfig+0x12c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <TIM_Base_SetConfig+0x130>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a25      	ldr	r2, [pc, #148]	; (8004e04 <TIM_Base_SetConfig+0x134>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a24      	ldr	r2, [pc, #144]	; (8004e08 <TIM_Base_SetConfig+0x138>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a23      	ldr	r2, [pc, #140]	; (8004e0c <TIM_Base_SetConfig+0x13c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d108      	bne.n	8004d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <TIM_Base_SetConfig+0x114>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_Base_SetConfig+0xf8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a0c      	ldr	r2, [pc, #48]	; (8004df4 <TIM_Base_SetConfig+0x124>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d103      	bne.n	8004dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	615a      	str	r2, [r3, #20]
}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40010400 	.word	0x40010400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40014400 	.word	0x40014400
 8004e00:	40014800 	.word	0x40014800
 8004e04:	40001800 	.word	0x40001800
 8004e08:	40001c00 	.word	0x40001c00
 8004e0c:	40002000 	.word	0x40002000

08004e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f023 0201 	bic.w	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f023 0302 	bic.w	r3, r3, #2
 8004e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <TIM_OC1_SetConfig+0xd8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_OC1_SetConfig+0x64>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1f      	ldr	r2, [pc, #124]	; (8004eec <TIM_OC1_SetConfig+0xdc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d10c      	bne.n	8004e8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0308 	bic.w	r3, r3, #8
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f023 0304 	bic.w	r3, r3, #4
 8004e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <TIM_OC1_SetConfig+0xd8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d003      	beq.n	8004e9e <TIM_OC1_SetConfig+0x8e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a14      	ldr	r2, [pc, #80]	; (8004eec <TIM_OC1_SetConfig+0xdc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d111      	bne.n	8004ec2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	621a      	str	r2, [r3, #32]
}
 8004edc:	bf00      	nop
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40010400 	.word	0x40010400

08004ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0210 	bic.w	r2, r3, #16
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0320 	bic.w	r3, r3, #32
 8004f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a22      	ldr	r2, [pc, #136]	; (8004fd4 <TIM_OC2_SetConfig+0xe4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_OC2_SetConfig+0x68>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a21      	ldr	r2, [pc, #132]	; (8004fd8 <TIM_OC2_SetConfig+0xe8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d10d      	bne.n	8004f74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <TIM_OC2_SetConfig+0xe4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_OC2_SetConfig+0x94>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <TIM_OC2_SetConfig+0xe8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d113      	bne.n	8004fac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40010400 	.word	0x40010400

08004fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a21      	ldr	r2, [pc, #132]	; (80050bc <TIM_OC3_SetConfig+0xe0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_OC3_SetConfig+0x66>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a20      	ldr	r2, [pc, #128]	; (80050c0 <TIM_OC3_SetConfig+0xe4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d10d      	bne.n	800505e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a16      	ldr	r2, [pc, #88]	; (80050bc <TIM_OC3_SetConfig+0xe0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC3_SetConfig+0x92>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a15      	ldr	r2, [pc, #84]	; (80050c0 <TIM_OC3_SetConfig+0xe4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d113      	bne.n	8005096 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800507c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	621a      	str	r2, [r3, #32]
}
 80050b0:	bf00      	nop
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40010000 	.word	0x40010000
 80050c0:	40010400 	.word	0x40010400

080050c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	031b      	lsls	r3, r3, #12
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a12      	ldr	r2, [pc, #72]	; (8005168 <TIM_OC4_SetConfig+0xa4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_OC4_SetConfig+0x68>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a11      	ldr	r2, [pc, #68]	; (800516c <TIM_OC4_SetConfig+0xa8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d109      	bne.n	8005140 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40010400 	.word	0x40010400

08005170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800519a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f023 030a 	bic.w	r3, r3, #10
 80051ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b087      	sub	sp, #28
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0210 	bic.w	r2, r3, #16
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	031b      	lsls	r3, r3, #12
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800520a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	f043 0307 	orr.w	r3, r3, #7
 8005250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	609a      	str	r2, [r3, #8]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800527e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	021a      	lsls	r2, r3, #8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	431a      	orrs	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4313      	orrs	r3, r2
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	609a      	str	r2, [r3, #8]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	2201      	movs	r2, #1
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1a      	ldr	r2, [r3, #32]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	401a      	ands	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	431a      	orrs	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005304:	2302      	movs	r3, #2
 8005306:	e05a      	b.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a21      	ldr	r2, [pc, #132]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d022      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d01d      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d018      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d013      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00e      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a18      	ldr	r2, [pc, #96]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d009      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d004      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10c      	bne.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	40010400 	.word	0x40010400
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40001800 	.word	0x40001800

080053e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e03f      	b.n	80054a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fc fc00 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2224      	movs	r2, #36	; 0x24
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f929 	bl	80056ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b08a      	sub	sp, #40	; 0x28
 80054ae:	af02      	add	r7, sp, #8
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d17c      	bne.n	80055c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_UART_Transmit+0x2c>
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e075      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_UART_Transmit+0x3e>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e06e      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2221      	movs	r2, #33	; 0x21
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054fe:	f7fc fd8b 	bl	8002018 <HAL_GetTick>
 8005502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005518:	d108      	bne.n	800552c <HAL_UART_Transmit+0x82>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	e003      	b.n	8005534 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800553c:	e02a      	b.n	8005594 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2200      	movs	r2, #0
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f840 	bl	80055ce <UART_WaitOnFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e036      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800556c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	3302      	adds	r3, #2
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	e007      	b.n	8005586 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	3301      	adds	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1cf      	bne.n	800553e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2200      	movs	r2, #0
 80055a6:	2140      	movs	r1, #64	; 0x40
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f810 	bl	80055ce <UART_WaitOnFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e006      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e000      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b090      	sub	sp, #64	; 0x40
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4613      	mov	r3, r2
 80055dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055de:	e050      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e6:	d04c      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0x30>
 80055ee:	f7fc fd13 	bl	8002018 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d241      	bcs.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800561e:	637a      	str	r2, [r7, #52]	; 0x34
 8005620:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e5      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3314      	adds	r3, #20
 8005638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	613b      	str	r3, [r7, #16]
   return(result);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	63bb      	str	r3, [r7, #56]	; 0x38
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3314      	adds	r3, #20
 8005650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005652:	623a      	str	r2, [r7, #32]
 8005654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	69f9      	ldr	r1, [r7, #28]
 8005658:	6a3a      	ldr	r2, [r7, #32]
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e00f      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4013      	ands	r3, r2
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	bf0c      	ite	eq
 8005692:	2301      	moveq	r3, #1
 8005694:	2300      	movne	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	429a      	cmp	r2, r3
 800569e:	d09f      	beq.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3740      	adds	r7, #64	; 0x40
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b0:	b0c0      	sub	sp, #256	; 0x100
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	68d9      	ldr	r1, [r3, #12]
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	ea40 0301 	orr.w	r3, r0, r1
 80056d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005704:	f021 010c 	bic.w	r1, r1, #12
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005712:	430b      	orrs	r3, r1
 8005714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	6999      	ldr	r1, [r3, #24]
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	ea40 0301 	orr.w	r3, r0, r1
 8005732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4b8f      	ldr	r3, [pc, #572]	; (8005978 <UART_SetConfig+0x2cc>)
 800573c:	429a      	cmp	r2, r3
 800573e:	d005      	beq.n	800574c <UART_SetConfig+0xa0>
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b8d      	ldr	r3, [pc, #564]	; (800597c <UART_SetConfig+0x2d0>)
 8005748:	429a      	cmp	r2, r3
 800574a:	d104      	bne.n	8005756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800574c:	f7fe f914 	bl	8003978 <HAL_RCC_GetPCLK2Freq>
 8005750:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005754:	e003      	b.n	800575e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005756:	f7fe f8fb 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 800575a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005768:	f040 810c 	bne.w	8005984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800576c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005770:	2200      	movs	r2, #0
 8005772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005776:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800577a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800577e:	4622      	mov	r2, r4
 8005780:	462b      	mov	r3, r5
 8005782:	1891      	adds	r1, r2, r2
 8005784:	65b9      	str	r1, [r7, #88]	; 0x58
 8005786:	415b      	adcs	r3, r3
 8005788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800578a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800578e:	4621      	mov	r1, r4
 8005790:	eb12 0801 	adds.w	r8, r2, r1
 8005794:	4629      	mov	r1, r5
 8005796:	eb43 0901 	adc.w	r9, r3, r1
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057ae:	4690      	mov	r8, r2
 80057b0:	4699      	mov	r9, r3
 80057b2:	4623      	mov	r3, r4
 80057b4:	eb18 0303 	adds.w	r3, r8, r3
 80057b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057bc:	462b      	mov	r3, r5
 80057be:	eb49 0303 	adc.w	r3, r9, r3
 80057c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057da:	460b      	mov	r3, r1
 80057dc:	18db      	adds	r3, r3, r3
 80057de:	653b      	str	r3, [r7, #80]	; 0x50
 80057e0:	4613      	mov	r3, r2
 80057e2:	eb42 0303 	adc.w	r3, r2, r3
 80057e6:	657b      	str	r3, [r7, #84]	; 0x54
 80057e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057f0:	f7fb f9fa 	bl	8000be8 <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4b61      	ldr	r3, [pc, #388]	; (8005980 <UART_SetConfig+0x2d4>)
 80057fa:	fba3 2302 	umull	r2, r3, r3, r2
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	011c      	lsls	r4, r3, #4
 8005802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800580c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005814:	4642      	mov	r2, r8
 8005816:	464b      	mov	r3, r9
 8005818:	1891      	adds	r1, r2, r2
 800581a:	64b9      	str	r1, [r7, #72]	; 0x48
 800581c:	415b      	adcs	r3, r3
 800581e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005824:	4641      	mov	r1, r8
 8005826:	eb12 0a01 	adds.w	sl, r2, r1
 800582a:	4649      	mov	r1, r9
 800582c:	eb43 0b01 	adc.w	fp, r3, r1
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800583c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005844:	4692      	mov	sl, r2
 8005846:	469b      	mov	fp, r3
 8005848:	4643      	mov	r3, r8
 800584a:	eb1a 0303 	adds.w	r3, sl, r3
 800584e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005852:	464b      	mov	r3, r9
 8005854:	eb4b 0303 	adc.w	r3, fp, r3
 8005858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005868:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800586c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005870:	460b      	mov	r3, r1
 8005872:	18db      	adds	r3, r3, r3
 8005874:	643b      	str	r3, [r7, #64]	; 0x40
 8005876:	4613      	mov	r3, r2
 8005878:	eb42 0303 	adc.w	r3, r2, r3
 800587c:	647b      	str	r3, [r7, #68]	; 0x44
 800587e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005886:	f7fb f9af 	bl	8000be8 <__aeabi_uldivmod>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4611      	mov	r1, r2
 8005890:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <UART_SetConfig+0x2d4>)
 8005892:	fba3 2301 	umull	r2, r3, r3, r1
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2264      	movs	r2, #100	; 0x64
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	1acb      	subs	r3, r1, r3
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058a6:	4b36      	ldr	r3, [pc, #216]	; (8005980 <UART_SetConfig+0x2d4>)
 80058a8:	fba3 2302 	umull	r2, r3, r3, r2
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058b4:	441c      	add	r4, r3
 80058b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058c8:	4642      	mov	r2, r8
 80058ca:	464b      	mov	r3, r9
 80058cc:	1891      	adds	r1, r2, r2
 80058ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80058d0:	415b      	adcs	r3, r3
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058d8:	4641      	mov	r1, r8
 80058da:	1851      	adds	r1, r2, r1
 80058dc:	6339      	str	r1, [r7, #48]	; 0x30
 80058de:	4649      	mov	r1, r9
 80058e0:	414b      	adcs	r3, r1
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058f0:	4659      	mov	r1, fp
 80058f2:	00cb      	lsls	r3, r1, #3
 80058f4:	4651      	mov	r1, sl
 80058f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058fa:	4651      	mov	r1, sl
 80058fc:	00ca      	lsls	r2, r1, #3
 80058fe:	4610      	mov	r0, r2
 8005900:	4619      	mov	r1, r3
 8005902:	4603      	mov	r3, r0
 8005904:	4642      	mov	r2, r8
 8005906:	189b      	adds	r3, r3, r2
 8005908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800590c:	464b      	mov	r3, r9
 800590e:	460a      	mov	r2, r1
 8005910:	eb42 0303 	adc.w	r3, r2, r3
 8005914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005924:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800592c:	460b      	mov	r3, r1
 800592e:	18db      	adds	r3, r3, r3
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
 8005932:	4613      	mov	r3, r2
 8005934:	eb42 0303 	adc.w	r3, r2, r3
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800593e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005942:	f7fb f951 	bl	8000be8 <__aeabi_uldivmod>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <UART_SetConfig+0x2d4>)
 800594c:	fba3 1302 	umull	r1, r3, r3, r2
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	2164      	movs	r1, #100	; 0x64
 8005954:	fb01 f303 	mul.w	r3, r1, r3
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	3332      	adds	r3, #50	; 0x32
 800595e:	4a08      	ldr	r2, [pc, #32]	; (8005980 <UART_SetConfig+0x2d4>)
 8005960:	fba2 2303 	umull	r2, r3, r2, r3
 8005964:	095b      	lsrs	r3, r3, #5
 8005966:	f003 0207 	and.w	r2, r3, #7
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4422      	add	r2, r4
 8005972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005974:	e105      	b.n	8005b82 <UART_SetConfig+0x4d6>
 8005976:	bf00      	nop
 8005978:	40011000 	.word	0x40011000
 800597c:	40011400 	.word	0x40011400
 8005980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005988:	2200      	movs	r2, #0
 800598a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800598e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005996:	4642      	mov	r2, r8
 8005998:	464b      	mov	r3, r9
 800599a:	1891      	adds	r1, r2, r2
 800599c:	6239      	str	r1, [r7, #32]
 800599e:	415b      	adcs	r3, r3
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
 80059a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059a6:	4641      	mov	r1, r8
 80059a8:	1854      	adds	r4, r2, r1
 80059aa:	4649      	mov	r1, r9
 80059ac:	eb43 0501 	adc.w	r5, r3, r1
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	00eb      	lsls	r3, r5, #3
 80059ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059be:	00e2      	lsls	r2, r4, #3
 80059c0:	4614      	mov	r4, r2
 80059c2:	461d      	mov	r5, r3
 80059c4:	4643      	mov	r3, r8
 80059c6:	18e3      	adds	r3, r4, r3
 80059c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059cc:	464b      	mov	r3, r9
 80059ce:	eb45 0303 	adc.w	r3, r5, r3
 80059d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059f2:	4629      	mov	r1, r5
 80059f4:	008b      	lsls	r3, r1, #2
 80059f6:	4621      	mov	r1, r4
 80059f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059fc:	4621      	mov	r1, r4
 80059fe:	008a      	lsls	r2, r1, #2
 8005a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a04:	f7fb f8f0 	bl	8000be8 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4b60      	ldr	r3, [pc, #384]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	011c      	lsls	r4, r3, #4
 8005a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a28:	4642      	mov	r2, r8
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	1891      	adds	r1, r2, r2
 8005a2e:	61b9      	str	r1, [r7, #24]
 8005a30:	415b      	adcs	r3, r3
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a38:	4641      	mov	r1, r8
 8005a3a:	1851      	adds	r1, r2, r1
 8005a3c:	6139      	str	r1, [r7, #16]
 8005a3e:	4649      	mov	r1, r9
 8005a40:	414b      	adcs	r3, r1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a50:	4659      	mov	r1, fp
 8005a52:	00cb      	lsls	r3, r1, #3
 8005a54:	4651      	mov	r1, sl
 8005a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a5a:	4651      	mov	r1, sl
 8005a5c:	00ca      	lsls	r2, r1, #3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	4619      	mov	r1, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	4642      	mov	r2, r8
 8005a66:	189b      	adds	r3, r3, r2
 8005a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a6c:	464b      	mov	r3, r9
 8005a6e:	460a      	mov	r2, r1
 8005a70:	eb42 0303 	adc.w	r3, r2, r3
 8005a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a90:	4649      	mov	r1, r9
 8005a92:	008b      	lsls	r3, r1, #2
 8005a94:	4641      	mov	r1, r8
 8005a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a9a:	4641      	mov	r1, r8
 8005a9c:	008a      	lsls	r2, r1, #2
 8005a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aa2:	f7fb f8a1 	bl	8000be8 <__aeabi_uldivmod>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005aac:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	2164      	movs	r1, #100	; 0x64
 8005ab4:	fb01 f303 	mul.w	r3, r1, r3
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	3332      	adds	r3, #50	; 0x32
 8005abe:	4a34      	ldr	r2, [pc, #208]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aca:	441c      	add	r4, r3
 8005acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	673b      	str	r3, [r7, #112]	; 0x70
 8005ad4:	677a      	str	r2, [r7, #116]	; 0x74
 8005ad6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ada:	4642      	mov	r2, r8
 8005adc:	464b      	mov	r3, r9
 8005ade:	1891      	adds	r1, r2, r2
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	415b      	adcs	r3, r3
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aea:	4641      	mov	r1, r8
 8005aec:	1851      	adds	r1, r2, r1
 8005aee:	6039      	str	r1, [r7, #0]
 8005af0:	4649      	mov	r1, r9
 8005af2:	414b      	adcs	r3, r1
 8005af4:	607b      	str	r3, [r7, #4]
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b02:	4659      	mov	r1, fp
 8005b04:	00cb      	lsls	r3, r1, #3
 8005b06:	4651      	mov	r1, sl
 8005b08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b0c:	4651      	mov	r1, sl
 8005b0e:	00ca      	lsls	r2, r1, #3
 8005b10:	4610      	mov	r0, r2
 8005b12:	4619      	mov	r1, r3
 8005b14:	4603      	mov	r3, r0
 8005b16:	4642      	mov	r2, r8
 8005b18:	189b      	adds	r3, r3, r2
 8005b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	460a      	mov	r2, r1
 8005b20:	eb42 0303 	adc.w	r3, r2, r3
 8005b24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b30:	667a      	str	r2, [r7, #100]	; 0x64
 8005b32:	f04f 0200 	mov.w	r2, #0
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b3e:	4649      	mov	r1, r9
 8005b40:	008b      	lsls	r3, r1, #2
 8005b42:	4641      	mov	r1, r8
 8005b44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b48:	4641      	mov	r1, r8
 8005b4a:	008a      	lsls	r2, r1, #2
 8005b4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b50:	f7fb f84a 	bl	8000be8 <__aeabi_uldivmod>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	2164      	movs	r1, #100	; 0x64
 8005b62:	fb01 f303 	mul.w	r3, r1, r3
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	3332      	adds	r3, #50	; 0x32
 8005b6c:	4a08      	ldr	r2, [pc, #32]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4422      	add	r2, r4
 8005b80:	609a      	str	r2, [r3, #8]
}
 8005b82:	bf00      	nop
 8005b84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b8e:	bf00      	nop
 8005b90:	51eb851f 	.word	0x51eb851f

08005b94 <__errno>:
 8005b94:	4b01      	ldr	r3, [pc, #4]	; (8005b9c <__errno+0x8>)
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	2000000c 	.word	0x2000000c

08005ba0 <__libc_init_array>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	4d0d      	ldr	r5, [pc, #52]	; (8005bd8 <__libc_init_array+0x38>)
 8005ba4:	4c0d      	ldr	r4, [pc, #52]	; (8005bdc <__libc_init_array+0x3c>)
 8005ba6:	1b64      	subs	r4, r4, r5
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	2600      	movs	r6, #0
 8005bac:	42a6      	cmp	r6, r4
 8005bae:	d109      	bne.n	8005bc4 <__libc_init_array+0x24>
 8005bb0:	4d0b      	ldr	r5, [pc, #44]	; (8005be0 <__libc_init_array+0x40>)
 8005bb2:	4c0c      	ldr	r4, [pc, #48]	; (8005be4 <__libc_init_array+0x44>)
 8005bb4:	f002 ff02 	bl	80089bc <_init>
 8005bb8:	1b64      	subs	r4, r4, r5
 8005bba:	10a4      	asrs	r4, r4, #2
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	42a6      	cmp	r6, r4
 8005bc0:	d105      	bne.n	8005bce <__libc_init_array+0x2e>
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc8:	4798      	blx	r3
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7ee      	b.n	8005bac <__libc_init_array+0xc>
 8005bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd2:	4798      	blx	r3
 8005bd4:	3601      	adds	r6, #1
 8005bd6:	e7f2      	b.n	8005bbe <__libc_init_array+0x1e>
 8005bd8:	08008e1c 	.word	0x08008e1c
 8005bdc:	08008e1c 	.word	0x08008e1c
 8005be0:	08008e1c 	.word	0x08008e1c
 8005be4:	08008e20 	.word	0x08008e20

08005be8 <memcpy>:
 8005be8:	440a      	add	r2, r1
 8005bea:	4291      	cmp	r1, r2
 8005bec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005bf0:	d100      	bne.n	8005bf4 <memcpy+0xc>
 8005bf2:	4770      	bx	lr
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	d1f9      	bne.n	8005bf6 <memcpy+0xe>
 8005c02:	bd10      	pop	{r4, pc}

08005c04 <memset>:
 8005c04:	4402      	add	r2, r0
 8005c06:	4603      	mov	r3, r0
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d100      	bne.n	8005c0e <memset+0xa>
 8005c0c:	4770      	bx	lr
 8005c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c12:	e7f9      	b.n	8005c08 <memset+0x4>

08005c14 <__cvt>:
 8005c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	ec55 4b10 	vmov	r4, r5, d0
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	460e      	mov	r6, r1
 8005c20:	4619      	mov	r1, r3
 8005c22:	462b      	mov	r3, r5
 8005c24:	bfbb      	ittet	lt
 8005c26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c2a:	461d      	movlt	r5, r3
 8005c2c:	2300      	movge	r3, #0
 8005c2e:	232d      	movlt	r3, #45	; 0x2d
 8005c30:	700b      	strb	r3, [r1, #0]
 8005c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c38:	4691      	mov	r9, r2
 8005c3a:	f023 0820 	bic.w	r8, r3, #32
 8005c3e:	bfbc      	itt	lt
 8005c40:	4622      	movlt	r2, r4
 8005c42:	4614      	movlt	r4, r2
 8005c44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c48:	d005      	beq.n	8005c56 <__cvt+0x42>
 8005c4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c4e:	d100      	bne.n	8005c52 <__cvt+0x3e>
 8005c50:	3601      	adds	r6, #1
 8005c52:	2102      	movs	r1, #2
 8005c54:	e000      	b.n	8005c58 <__cvt+0x44>
 8005c56:	2103      	movs	r1, #3
 8005c58:	ab03      	add	r3, sp, #12
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	ab02      	add	r3, sp, #8
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	ec45 4b10 	vmov	d0, r4, r5
 8005c64:	4653      	mov	r3, sl
 8005c66:	4632      	mov	r2, r6
 8005c68:	f000 fcea 	bl	8006640 <_dtoa_r>
 8005c6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c70:	4607      	mov	r7, r0
 8005c72:	d102      	bne.n	8005c7a <__cvt+0x66>
 8005c74:	f019 0f01 	tst.w	r9, #1
 8005c78:	d022      	beq.n	8005cc0 <__cvt+0xac>
 8005c7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c7e:	eb07 0906 	add.w	r9, r7, r6
 8005c82:	d110      	bne.n	8005ca6 <__cvt+0x92>
 8005c84:	783b      	ldrb	r3, [r7, #0]
 8005c86:	2b30      	cmp	r3, #48	; 0x30
 8005c88:	d10a      	bne.n	8005ca0 <__cvt+0x8c>
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa ff39 	bl	8000b08 <__aeabi_dcmpeq>
 8005c96:	b918      	cbnz	r0, 8005ca0 <__cvt+0x8c>
 8005c98:	f1c6 0601 	rsb	r6, r6, #1
 8005c9c:	f8ca 6000 	str.w	r6, [sl]
 8005ca0:	f8da 3000 	ldr.w	r3, [sl]
 8005ca4:	4499      	add	r9, r3
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4620      	mov	r0, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	f7fa ff2b 	bl	8000b08 <__aeabi_dcmpeq>
 8005cb2:	b108      	cbz	r0, 8005cb8 <__cvt+0xa4>
 8005cb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cb8:	2230      	movs	r2, #48	; 0x30
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	454b      	cmp	r3, r9
 8005cbe:	d307      	bcc.n	8005cd0 <__cvt+0xbc>
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cc4:	1bdb      	subs	r3, r3, r7
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	b004      	add	sp, #16
 8005ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd0:	1c59      	adds	r1, r3, #1
 8005cd2:	9103      	str	r1, [sp, #12]
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	e7f0      	b.n	8005cba <__cvt+0xa6>

08005cd8 <__exponent>:
 8005cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	bfb8      	it	lt
 8005ce0:	4249      	neglt	r1, r1
 8005ce2:	f803 2b02 	strb.w	r2, [r3], #2
 8005ce6:	bfb4      	ite	lt
 8005ce8:	222d      	movlt	r2, #45	; 0x2d
 8005cea:	222b      	movge	r2, #43	; 0x2b
 8005cec:	2909      	cmp	r1, #9
 8005cee:	7042      	strb	r2, [r0, #1]
 8005cf0:	dd2a      	ble.n	8005d48 <__exponent+0x70>
 8005cf2:	f10d 0407 	add.w	r4, sp, #7
 8005cf6:	46a4      	mov	ip, r4
 8005cf8:	270a      	movs	r7, #10
 8005cfa:	46a6      	mov	lr, r4
 8005cfc:	460a      	mov	r2, r1
 8005cfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d02:	fb07 1516 	mls	r5, r7, r6, r1
 8005d06:	3530      	adds	r5, #48	; 0x30
 8005d08:	2a63      	cmp	r2, #99	; 0x63
 8005d0a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005d0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d12:	4631      	mov	r1, r6
 8005d14:	dcf1      	bgt.n	8005cfa <__exponent+0x22>
 8005d16:	3130      	adds	r1, #48	; 0x30
 8005d18:	f1ae 0502 	sub.w	r5, lr, #2
 8005d1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d20:	1c44      	adds	r4, r0, #1
 8005d22:	4629      	mov	r1, r5
 8005d24:	4561      	cmp	r1, ip
 8005d26:	d30a      	bcc.n	8005d3e <__exponent+0x66>
 8005d28:	f10d 0209 	add.w	r2, sp, #9
 8005d2c:	eba2 020e 	sub.w	r2, r2, lr
 8005d30:	4565      	cmp	r5, ip
 8005d32:	bf88      	it	hi
 8005d34:	2200      	movhi	r2, #0
 8005d36:	4413      	add	r3, r2
 8005d38:	1a18      	subs	r0, r3, r0
 8005d3a:	b003      	add	sp, #12
 8005d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d46:	e7ed      	b.n	8005d24 <__exponent+0x4c>
 8005d48:	2330      	movs	r3, #48	; 0x30
 8005d4a:	3130      	adds	r1, #48	; 0x30
 8005d4c:	7083      	strb	r3, [r0, #2]
 8005d4e:	70c1      	strb	r1, [r0, #3]
 8005d50:	1d03      	adds	r3, r0, #4
 8005d52:	e7f1      	b.n	8005d38 <__exponent+0x60>

08005d54 <_printf_float>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	ed2d 8b02 	vpush	{d8}
 8005d5c:	b08d      	sub	sp, #52	; 0x34
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d64:	4616      	mov	r6, r2
 8005d66:	461f      	mov	r7, r3
 8005d68:	4605      	mov	r5, r0
 8005d6a:	f001 fa57 	bl	800721c <_localeconv_r>
 8005d6e:	f8d0 a000 	ldr.w	sl, [r0]
 8005d72:	4650      	mov	r0, sl
 8005d74:	f7fa fa4c 	bl	8000210 <strlen>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	9305      	str	r3, [sp, #20]
 8005d80:	f8d8 3000 	ldr.w	r3, [r8]
 8005d84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d88:	3307      	adds	r3, #7
 8005d8a:	f023 0307 	bic.w	r3, r3, #7
 8005d8e:	f103 0208 	add.w	r2, r3, #8
 8005d92:	f8c8 2000 	str.w	r2, [r8]
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005da2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005da6:	9307      	str	r3, [sp, #28]
 8005da8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005dac:	ee08 0a10 	vmov	s16, r0
 8005db0:	4b9f      	ldr	r3, [pc, #636]	; (8006030 <_printf_float+0x2dc>)
 8005db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dba:	f7fa fed7 	bl	8000b6c <__aeabi_dcmpun>
 8005dbe:	bb88      	cbnz	r0, 8005e24 <_printf_float+0xd0>
 8005dc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dc4:	4b9a      	ldr	r3, [pc, #616]	; (8006030 <_printf_float+0x2dc>)
 8005dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dca:	f7fa feb1 	bl	8000b30 <__aeabi_dcmple>
 8005dce:	bb48      	cbnz	r0, 8005e24 <_printf_float+0xd0>
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa fea0 	bl	8000b1c <__aeabi_dcmplt>
 8005ddc:	b110      	cbz	r0, 8005de4 <_printf_float+0x90>
 8005dde:	232d      	movs	r3, #45	; 0x2d
 8005de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de4:	4b93      	ldr	r3, [pc, #588]	; (8006034 <_printf_float+0x2e0>)
 8005de6:	4894      	ldr	r0, [pc, #592]	; (8006038 <_printf_float+0x2e4>)
 8005de8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005dec:	bf94      	ite	ls
 8005dee:	4698      	movls	r8, r3
 8005df0:	4680      	movhi	r8, r0
 8005df2:	2303      	movs	r3, #3
 8005df4:	6123      	str	r3, [r4, #16]
 8005df6:	9b05      	ldr	r3, [sp, #20]
 8005df8:	f023 0204 	bic.w	r2, r3, #4
 8005dfc:	6022      	str	r2, [r4, #0]
 8005dfe:	f04f 0900 	mov.w	r9, #0
 8005e02:	9700      	str	r7, [sp, #0]
 8005e04:	4633      	mov	r3, r6
 8005e06:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f000 f9d8 	bl	80061c0 <_printf_common>
 8005e10:	3001      	adds	r0, #1
 8005e12:	f040 8090 	bne.w	8005f36 <_printf_float+0x1e2>
 8005e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e1a:	b00d      	add	sp, #52	; 0x34
 8005e1c:	ecbd 8b02 	vpop	{d8}
 8005e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e24:	4642      	mov	r2, r8
 8005e26:	464b      	mov	r3, r9
 8005e28:	4640      	mov	r0, r8
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	f7fa fe9e 	bl	8000b6c <__aeabi_dcmpun>
 8005e30:	b140      	cbz	r0, 8005e44 <_printf_float+0xf0>
 8005e32:	464b      	mov	r3, r9
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	bfbc      	itt	lt
 8005e38:	232d      	movlt	r3, #45	; 0x2d
 8005e3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e3e:	487f      	ldr	r0, [pc, #508]	; (800603c <_printf_float+0x2e8>)
 8005e40:	4b7f      	ldr	r3, [pc, #508]	; (8006040 <_printf_float+0x2ec>)
 8005e42:	e7d1      	b.n	8005de8 <_printf_float+0x94>
 8005e44:	6863      	ldr	r3, [r4, #4]
 8005e46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e4a:	9206      	str	r2, [sp, #24]
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	d13f      	bne.n	8005ed0 <_printf_float+0x17c>
 8005e50:	2306      	movs	r3, #6
 8005e52:	6063      	str	r3, [r4, #4]
 8005e54:	9b05      	ldr	r3, [sp, #20]
 8005e56:	6861      	ldr	r1, [r4, #4]
 8005e58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	9303      	str	r3, [sp, #12]
 8005e60:	ab0a      	add	r3, sp, #40	; 0x28
 8005e62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e66:	ab09      	add	r3, sp, #36	; 0x24
 8005e68:	ec49 8b10 	vmov	d0, r8, r9
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	6022      	str	r2, [r4, #0]
 8005e70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e74:	4628      	mov	r0, r5
 8005e76:	f7ff fecd 	bl	8005c14 <__cvt>
 8005e7a:	9b06      	ldr	r3, [sp, #24]
 8005e7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e7e:	2b47      	cmp	r3, #71	; 0x47
 8005e80:	4680      	mov	r8, r0
 8005e82:	d108      	bne.n	8005e96 <_printf_float+0x142>
 8005e84:	1cc8      	adds	r0, r1, #3
 8005e86:	db02      	blt.n	8005e8e <_printf_float+0x13a>
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	4299      	cmp	r1, r3
 8005e8c:	dd41      	ble.n	8005f12 <_printf_float+0x1be>
 8005e8e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e92:	fa5f fb8b 	uxtb.w	fp, fp
 8005e96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e9a:	d820      	bhi.n	8005ede <_printf_float+0x18a>
 8005e9c:	3901      	subs	r1, #1
 8005e9e:	465a      	mov	r2, fp
 8005ea0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ea4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ea6:	f7ff ff17 	bl	8005cd8 <__exponent>
 8005eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eac:	1813      	adds	r3, r2, r0
 8005eae:	2a01      	cmp	r2, #1
 8005eb0:	4681      	mov	r9, r0
 8005eb2:	6123      	str	r3, [r4, #16]
 8005eb4:	dc02      	bgt.n	8005ebc <_printf_float+0x168>
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	07d2      	lsls	r2, r2, #31
 8005eba:	d501      	bpl.n	8005ec0 <_printf_float+0x16c>
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d09c      	beq.n	8005e02 <_printf_float+0xae>
 8005ec8:	232d      	movs	r3, #45	; 0x2d
 8005eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ece:	e798      	b.n	8005e02 <_printf_float+0xae>
 8005ed0:	9a06      	ldr	r2, [sp, #24]
 8005ed2:	2a47      	cmp	r2, #71	; 0x47
 8005ed4:	d1be      	bne.n	8005e54 <_printf_float+0x100>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1bc      	bne.n	8005e54 <_printf_float+0x100>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e7b9      	b.n	8005e52 <_printf_float+0xfe>
 8005ede:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ee2:	d118      	bne.n	8005f16 <_printf_float+0x1c2>
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	6863      	ldr	r3, [r4, #4]
 8005ee8:	dd0b      	ble.n	8005f02 <_printf_float+0x1ae>
 8005eea:	6121      	str	r1, [r4, #16]
 8005eec:	b913      	cbnz	r3, 8005ef4 <_printf_float+0x1a0>
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	07d0      	lsls	r0, r2, #31
 8005ef2:	d502      	bpl.n	8005efa <_printf_float+0x1a6>
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	440b      	add	r3, r1
 8005ef8:	6123      	str	r3, [r4, #16]
 8005efa:	65a1      	str	r1, [r4, #88]	; 0x58
 8005efc:	f04f 0900 	mov.w	r9, #0
 8005f00:	e7de      	b.n	8005ec0 <_printf_float+0x16c>
 8005f02:	b913      	cbnz	r3, 8005f0a <_printf_float+0x1b6>
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	07d2      	lsls	r2, r2, #31
 8005f08:	d501      	bpl.n	8005f0e <_printf_float+0x1ba>
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	e7f4      	b.n	8005ef8 <_printf_float+0x1a4>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e7f2      	b.n	8005ef8 <_printf_float+0x1a4>
 8005f12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f18:	4299      	cmp	r1, r3
 8005f1a:	db05      	blt.n	8005f28 <_printf_float+0x1d4>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	6121      	str	r1, [r4, #16]
 8005f20:	07d8      	lsls	r0, r3, #31
 8005f22:	d5ea      	bpl.n	8005efa <_printf_float+0x1a6>
 8005f24:	1c4b      	adds	r3, r1, #1
 8005f26:	e7e7      	b.n	8005ef8 <_printf_float+0x1a4>
 8005f28:	2900      	cmp	r1, #0
 8005f2a:	bfd4      	ite	le
 8005f2c:	f1c1 0202 	rsble	r2, r1, #2
 8005f30:	2201      	movgt	r2, #1
 8005f32:	4413      	add	r3, r2
 8005f34:	e7e0      	b.n	8005ef8 <_printf_float+0x1a4>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	055a      	lsls	r2, r3, #21
 8005f3a:	d407      	bmi.n	8005f4c <_printf_float+0x1f8>
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	4642      	mov	r2, r8
 8005f40:	4631      	mov	r1, r6
 8005f42:	4628      	mov	r0, r5
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	d12c      	bne.n	8005fa4 <_printf_float+0x250>
 8005f4a:	e764      	b.n	8005e16 <_printf_float+0xc2>
 8005f4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f50:	f240 80e0 	bls.w	8006114 <_printf_float+0x3c0>
 8005f54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f7fa fdd4 	bl	8000b08 <__aeabi_dcmpeq>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d034      	beq.n	8005fce <_printf_float+0x27a>
 8005f64:	4a37      	ldr	r2, [pc, #220]	; (8006044 <_printf_float+0x2f0>)
 8005f66:	2301      	movs	r3, #1
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b8      	blx	r7
 8005f6e:	3001      	adds	r0, #1
 8005f70:	f43f af51 	beq.w	8005e16 <_printf_float+0xc2>
 8005f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	db02      	blt.n	8005f82 <_printf_float+0x22e>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	07d8      	lsls	r0, r3, #31
 8005f80:	d510      	bpl.n	8005fa4 <_printf_float+0x250>
 8005f82:	ee18 3a10 	vmov	r3, s16
 8005f86:	4652      	mov	r2, sl
 8005f88:	4631      	mov	r1, r6
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	47b8      	blx	r7
 8005f8e:	3001      	adds	r0, #1
 8005f90:	f43f af41 	beq.w	8005e16 <_printf_float+0xc2>
 8005f94:	f04f 0800 	mov.w	r8, #0
 8005f98:	f104 091a 	add.w	r9, r4, #26
 8005f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	4543      	cmp	r3, r8
 8005fa2:	dc09      	bgt.n	8005fb8 <_printf_float+0x264>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	079b      	lsls	r3, r3, #30
 8005fa8:	f100 8105 	bmi.w	80061b6 <_printf_float+0x462>
 8005fac:	68e0      	ldr	r0, [r4, #12]
 8005fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fb0:	4298      	cmp	r0, r3
 8005fb2:	bfb8      	it	lt
 8005fb4:	4618      	movlt	r0, r3
 8005fb6:	e730      	b.n	8005e1a <_printf_float+0xc6>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	464a      	mov	r2, r9
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f af27 	beq.w	8005e16 <_printf_float+0xc2>
 8005fc8:	f108 0801 	add.w	r8, r8, #1
 8005fcc:	e7e6      	b.n	8005f9c <_printf_float+0x248>
 8005fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	dc39      	bgt.n	8006048 <_printf_float+0x2f4>
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	; (8006044 <_printf_float+0x2f0>)
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4628      	mov	r0, r5
 8005fdc:	47b8      	blx	r7
 8005fde:	3001      	adds	r0, #1
 8005fe0:	f43f af19 	beq.w	8005e16 <_printf_float+0xc2>
 8005fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d102      	bne.n	8005ff2 <_printf_float+0x29e>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	07d9      	lsls	r1, r3, #31
 8005ff0:	d5d8      	bpl.n	8005fa4 <_printf_float+0x250>
 8005ff2:	ee18 3a10 	vmov	r3, s16
 8005ff6:	4652      	mov	r2, sl
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b8      	blx	r7
 8005ffe:	3001      	adds	r0, #1
 8006000:	f43f af09 	beq.w	8005e16 <_printf_float+0xc2>
 8006004:	f04f 0900 	mov.w	r9, #0
 8006008:	f104 0a1a 	add.w	sl, r4, #26
 800600c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600e:	425b      	negs	r3, r3
 8006010:	454b      	cmp	r3, r9
 8006012:	dc01      	bgt.n	8006018 <_printf_float+0x2c4>
 8006014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006016:	e792      	b.n	8005f3e <_printf_float+0x1ea>
 8006018:	2301      	movs	r3, #1
 800601a:	4652      	mov	r2, sl
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	f43f aef7 	beq.w	8005e16 <_printf_float+0xc2>
 8006028:	f109 0901 	add.w	r9, r9, #1
 800602c:	e7ee      	b.n	800600c <_printf_float+0x2b8>
 800602e:	bf00      	nop
 8006030:	7fefffff 	.word	0x7fefffff
 8006034:	08008a40 	.word	0x08008a40
 8006038:	08008a44 	.word	0x08008a44
 800603c:	08008a4c 	.word	0x08008a4c
 8006040:	08008a48 	.word	0x08008a48
 8006044:	08008a50 	.word	0x08008a50
 8006048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800604a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800604c:	429a      	cmp	r2, r3
 800604e:	bfa8      	it	ge
 8006050:	461a      	movge	r2, r3
 8006052:	2a00      	cmp	r2, #0
 8006054:	4691      	mov	r9, r2
 8006056:	dc37      	bgt.n	80060c8 <_printf_float+0x374>
 8006058:	f04f 0b00 	mov.w	fp, #0
 800605c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006060:	f104 021a 	add.w	r2, r4, #26
 8006064:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006066:	9305      	str	r3, [sp, #20]
 8006068:	eba3 0309 	sub.w	r3, r3, r9
 800606c:	455b      	cmp	r3, fp
 800606e:	dc33      	bgt.n	80060d8 <_printf_float+0x384>
 8006070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006074:	429a      	cmp	r2, r3
 8006076:	db3b      	blt.n	80060f0 <_printf_float+0x39c>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	07da      	lsls	r2, r3, #31
 800607c:	d438      	bmi.n	80060f0 <_printf_float+0x39c>
 800607e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006080:	9a05      	ldr	r2, [sp, #20]
 8006082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006084:	1a9a      	subs	r2, r3, r2
 8006086:	eba3 0901 	sub.w	r9, r3, r1
 800608a:	4591      	cmp	r9, r2
 800608c:	bfa8      	it	ge
 800608e:	4691      	movge	r9, r2
 8006090:	f1b9 0f00 	cmp.w	r9, #0
 8006094:	dc35      	bgt.n	8006102 <_printf_float+0x3ae>
 8006096:	f04f 0800 	mov.w	r8, #0
 800609a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800609e:	f104 0a1a 	add.w	sl, r4, #26
 80060a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	eba3 0309 	sub.w	r3, r3, r9
 80060ac:	4543      	cmp	r3, r8
 80060ae:	f77f af79 	ble.w	8005fa4 <_printf_float+0x250>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4652      	mov	r2, sl
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	f43f aeaa 	beq.w	8005e16 <_printf_float+0xc2>
 80060c2:	f108 0801 	add.w	r8, r8, #1
 80060c6:	e7ec      	b.n	80060a2 <_printf_float+0x34e>
 80060c8:	4613      	mov	r3, r2
 80060ca:	4631      	mov	r1, r6
 80060cc:	4642      	mov	r2, r8
 80060ce:	4628      	mov	r0, r5
 80060d0:	47b8      	blx	r7
 80060d2:	3001      	adds	r0, #1
 80060d4:	d1c0      	bne.n	8006058 <_printf_float+0x304>
 80060d6:	e69e      	b.n	8005e16 <_printf_float+0xc2>
 80060d8:	2301      	movs	r3, #1
 80060da:	4631      	mov	r1, r6
 80060dc:	4628      	mov	r0, r5
 80060de:	9205      	str	r2, [sp, #20]
 80060e0:	47b8      	blx	r7
 80060e2:	3001      	adds	r0, #1
 80060e4:	f43f ae97 	beq.w	8005e16 <_printf_float+0xc2>
 80060e8:	9a05      	ldr	r2, [sp, #20]
 80060ea:	f10b 0b01 	add.w	fp, fp, #1
 80060ee:	e7b9      	b.n	8006064 <_printf_float+0x310>
 80060f0:	ee18 3a10 	vmov	r3, s16
 80060f4:	4652      	mov	r2, sl
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1be      	bne.n	800607e <_printf_float+0x32a>
 8006100:	e689      	b.n	8005e16 <_printf_float+0xc2>
 8006102:	9a05      	ldr	r2, [sp, #20]
 8006104:	464b      	mov	r3, r9
 8006106:	4442      	add	r2, r8
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	d1c1      	bne.n	8006096 <_printf_float+0x342>
 8006112:	e680      	b.n	8005e16 <_printf_float+0xc2>
 8006114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006116:	2a01      	cmp	r2, #1
 8006118:	dc01      	bgt.n	800611e <_printf_float+0x3ca>
 800611a:	07db      	lsls	r3, r3, #31
 800611c:	d538      	bpl.n	8006190 <_printf_float+0x43c>
 800611e:	2301      	movs	r3, #1
 8006120:	4642      	mov	r2, r8
 8006122:	4631      	mov	r1, r6
 8006124:	4628      	mov	r0, r5
 8006126:	47b8      	blx	r7
 8006128:	3001      	adds	r0, #1
 800612a:	f43f ae74 	beq.w	8005e16 <_printf_float+0xc2>
 800612e:	ee18 3a10 	vmov	r3, s16
 8006132:	4652      	mov	r2, sl
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	f43f ae6b 	beq.w	8005e16 <_printf_float+0xc2>
 8006140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006144:	2200      	movs	r2, #0
 8006146:	2300      	movs	r3, #0
 8006148:	f7fa fcde 	bl	8000b08 <__aeabi_dcmpeq>
 800614c:	b9d8      	cbnz	r0, 8006186 <_printf_float+0x432>
 800614e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006150:	f108 0201 	add.w	r2, r8, #1
 8006154:	3b01      	subs	r3, #1
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	d10e      	bne.n	800617e <_printf_float+0x42a>
 8006160:	e659      	b.n	8005e16 <_printf_float+0xc2>
 8006162:	2301      	movs	r3, #1
 8006164:	4652      	mov	r2, sl
 8006166:	4631      	mov	r1, r6
 8006168:	4628      	mov	r0, r5
 800616a:	47b8      	blx	r7
 800616c:	3001      	adds	r0, #1
 800616e:	f43f ae52 	beq.w	8005e16 <_printf_float+0xc2>
 8006172:	f108 0801 	add.w	r8, r8, #1
 8006176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006178:	3b01      	subs	r3, #1
 800617a:	4543      	cmp	r3, r8
 800617c:	dcf1      	bgt.n	8006162 <_printf_float+0x40e>
 800617e:	464b      	mov	r3, r9
 8006180:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006184:	e6dc      	b.n	8005f40 <_printf_float+0x1ec>
 8006186:	f04f 0800 	mov.w	r8, #0
 800618a:	f104 0a1a 	add.w	sl, r4, #26
 800618e:	e7f2      	b.n	8006176 <_printf_float+0x422>
 8006190:	2301      	movs	r3, #1
 8006192:	4642      	mov	r2, r8
 8006194:	e7df      	b.n	8006156 <_printf_float+0x402>
 8006196:	2301      	movs	r3, #1
 8006198:	464a      	mov	r2, r9
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	f43f ae38 	beq.w	8005e16 <_printf_float+0xc2>
 80061a6:	f108 0801 	add.w	r8, r8, #1
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061ae:	1a5b      	subs	r3, r3, r1
 80061b0:	4543      	cmp	r3, r8
 80061b2:	dcf0      	bgt.n	8006196 <_printf_float+0x442>
 80061b4:	e6fa      	b.n	8005fac <_printf_float+0x258>
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	f104 0919 	add.w	r9, r4, #25
 80061be:	e7f4      	b.n	80061aa <_printf_float+0x456>

080061c0 <_printf_common>:
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	4699      	mov	r9, r3
 80061c8:	688a      	ldr	r2, [r1, #8]
 80061ca:	690b      	ldr	r3, [r1, #16]
 80061cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bfb8      	it	lt
 80061d4:	4613      	movlt	r3, r2
 80061d6:	6033      	str	r3, [r6, #0]
 80061d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061dc:	4607      	mov	r7, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	b10a      	cbz	r2, 80061e6 <_printf_common+0x26>
 80061e2:	3301      	adds	r3, #1
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	0699      	lsls	r1, r3, #26
 80061ea:	bf42      	ittt	mi
 80061ec:	6833      	ldrmi	r3, [r6, #0]
 80061ee:	3302      	addmi	r3, #2
 80061f0:	6033      	strmi	r3, [r6, #0]
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	f015 0506 	ands.w	r5, r5, #6
 80061f8:	d106      	bne.n	8006208 <_printf_common+0x48>
 80061fa:	f104 0a19 	add.w	sl, r4, #25
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	6832      	ldr	r2, [r6, #0]
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	42ab      	cmp	r3, r5
 8006206:	dc26      	bgt.n	8006256 <_printf_common+0x96>
 8006208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800620c:	1e13      	subs	r3, r2, #0
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	bf18      	it	ne
 8006212:	2301      	movne	r3, #1
 8006214:	0692      	lsls	r2, r2, #26
 8006216:	d42b      	bmi.n	8006270 <_printf_common+0xb0>
 8006218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800621c:	4649      	mov	r1, r9
 800621e:	4638      	mov	r0, r7
 8006220:	47c0      	blx	r8
 8006222:	3001      	adds	r0, #1
 8006224:	d01e      	beq.n	8006264 <_printf_common+0xa4>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	68e5      	ldr	r5, [r4, #12]
 800622a:	6832      	ldr	r2, [r6, #0]
 800622c:	f003 0306 	and.w	r3, r3, #6
 8006230:	2b04      	cmp	r3, #4
 8006232:	bf08      	it	eq
 8006234:	1aad      	subeq	r5, r5, r2
 8006236:	68a3      	ldr	r3, [r4, #8]
 8006238:	6922      	ldr	r2, [r4, #16]
 800623a:	bf0c      	ite	eq
 800623c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006240:	2500      	movne	r5, #0
 8006242:	4293      	cmp	r3, r2
 8006244:	bfc4      	itt	gt
 8006246:	1a9b      	subgt	r3, r3, r2
 8006248:	18ed      	addgt	r5, r5, r3
 800624a:	2600      	movs	r6, #0
 800624c:	341a      	adds	r4, #26
 800624e:	42b5      	cmp	r5, r6
 8006250:	d11a      	bne.n	8006288 <_printf_common+0xc8>
 8006252:	2000      	movs	r0, #0
 8006254:	e008      	b.n	8006268 <_printf_common+0xa8>
 8006256:	2301      	movs	r3, #1
 8006258:	4652      	mov	r2, sl
 800625a:	4649      	mov	r1, r9
 800625c:	4638      	mov	r0, r7
 800625e:	47c0      	blx	r8
 8006260:	3001      	adds	r0, #1
 8006262:	d103      	bne.n	800626c <_printf_common+0xac>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	3501      	adds	r5, #1
 800626e:	e7c6      	b.n	80061fe <_printf_common+0x3e>
 8006270:	18e1      	adds	r1, r4, r3
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	2030      	movs	r0, #48	; 0x30
 8006276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800627a:	4422      	add	r2, r4
 800627c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006284:	3302      	adds	r3, #2
 8006286:	e7c7      	b.n	8006218 <_printf_common+0x58>
 8006288:	2301      	movs	r3, #1
 800628a:	4622      	mov	r2, r4
 800628c:	4649      	mov	r1, r9
 800628e:	4638      	mov	r0, r7
 8006290:	47c0      	blx	r8
 8006292:	3001      	adds	r0, #1
 8006294:	d0e6      	beq.n	8006264 <_printf_common+0xa4>
 8006296:	3601      	adds	r6, #1
 8006298:	e7d9      	b.n	800624e <_printf_common+0x8e>
	...

0800629c <_printf_i>:
 800629c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	7e0f      	ldrb	r7, [r1, #24]
 80062a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062a4:	2f78      	cmp	r7, #120	; 0x78
 80062a6:	4691      	mov	r9, r2
 80062a8:	4680      	mov	r8, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	469a      	mov	sl, r3
 80062ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062b2:	d807      	bhi.n	80062c4 <_printf_i+0x28>
 80062b4:	2f62      	cmp	r7, #98	; 0x62
 80062b6:	d80a      	bhi.n	80062ce <_printf_i+0x32>
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	f000 80d8 	beq.w	800646e <_printf_i+0x1d2>
 80062be:	2f58      	cmp	r7, #88	; 0x58
 80062c0:	f000 80a3 	beq.w	800640a <_printf_i+0x16e>
 80062c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062cc:	e03a      	b.n	8006344 <_printf_i+0xa8>
 80062ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062d2:	2b15      	cmp	r3, #21
 80062d4:	d8f6      	bhi.n	80062c4 <_printf_i+0x28>
 80062d6:	a101      	add	r1, pc, #4	; (adr r1, 80062dc <_printf_i+0x40>)
 80062d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062dc:	08006335 	.word	0x08006335
 80062e0:	08006349 	.word	0x08006349
 80062e4:	080062c5 	.word	0x080062c5
 80062e8:	080062c5 	.word	0x080062c5
 80062ec:	080062c5 	.word	0x080062c5
 80062f0:	080062c5 	.word	0x080062c5
 80062f4:	08006349 	.word	0x08006349
 80062f8:	080062c5 	.word	0x080062c5
 80062fc:	080062c5 	.word	0x080062c5
 8006300:	080062c5 	.word	0x080062c5
 8006304:	080062c5 	.word	0x080062c5
 8006308:	08006455 	.word	0x08006455
 800630c:	08006379 	.word	0x08006379
 8006310:	08006437 	.word	0x08006437
 8006314:	080062c5 	.word	0x080062c5
 8006318:	080062c5 	.word	0x080062c5
 800631c:	08006477 	.word	0x08006477
 8006320:	080062c5 	.word	0x080062c5
 8006324:	08006379 	.word	0x08006379
 8006328:	080062c5 	.word	0x080062c5
 800632c:	080062c5 	.word	0x080062c5
 8006330:	0800643f 	.word	0x0800643f
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	1d1a      	adds	r2, r3, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	602a      	str	r2, [r5, #0]
 800633c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006344:	2301      	movs	r3, #1
 8006346:	e0a3      	b.n	8006490 <_printf_i+0x1f4>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	6829      	ldr	r1, [r5, #0]
 800634c:	0606      	lsls	r6, r0, #24
 800634e:	f101 0304 	add.w	r3, r1, #4
 8006352:	d50a      	bpl.n	800636a <_printf_i+0xce>
 8006354:	680e      	ldr	r6, [r1, #0]
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	2e00      	cmp	r6, #0
 800635a:	da03      	bge.n	8006364 <_printf_i+0xc8>
 800635c:	232d      	movs	r3, #45	; 0x2d
 800635e:	4276      	negs	r6, r6
 8006360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006364:	485e      	ldr	r0, [pc, #376]	; (80064e0 <_printf_i+0x244>)
 8006366:	230a      	movs	r3, #10
 8006368:	e019      	b.n	800639e <_printf_i+0x102>
 800636a:	680e      	ldr	r6, [r1, #0]
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006372:	bf18      	it	ne
 8006374:	b236      	sxthne	r6, r6
 8006376:	e7ef      	b.n	8006358 <_printf_i+0xbc>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	6820      	ldr	r0, [r4, #0]
 800637c:	1d19      	adds	r1, r3, #4
 800637e:	6029      	str	r1, [r5, #0]
 8006380:	0601      	lsls	r1, r0, #24
 8006382:	d501      	bpl.n	8006388 <_printf_i+0xec>
 8006384:	681e      	ldr	r6, [r3, #0]
 8006386:	e002      	b.n	800638e <_printf_i+0xf2>
 8006388:	0646      	lsls	r6, r0, #25
 800638a:	d5fb      	bpl.n	8006384 <_printf_i+0xe8>
 800638c:	881e      	ldrh	r6, [r3, #0]
 800638e:	4854      	ldr	r0, [pc, #336]	; (80064e0 <_printf_i+0x244>)
 8006390:	2f6f      	cmp	r7, #111	; 0x6f
 8006392:	bf0c      	ite	eq
 8006394:	2308      	moveq	r3, #8
 8006396:	230a      	movne	r3, #10
 8006398:	2100      	movs	r1, #0
 800639a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800639e:	6865      	ldr	r5, [r4, #4]
 80063a0:	60a5      	str	r5, [r4, #8]
 80063a2:	2d00      	cmp	r5, #0
 80063a4:	bfa2      	ittt	ge
 80063a6:	6821      	ldrge	r1, [r4, #0]
 80063a8:	f021 0104 	bicge.w	r1, r1, #4
 80063ac:	6021      	strge	r1, [r4, #0]
 80063ae:	b90e      	cbnz	r6, 80063b4 <_printf_i+0x118>
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	d04d      	beq.n	8006450 <_printf_i+0x1b4>
 80063b4:	4615      	mov	r5, r2
 80063b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80063ba:	fb03 6711 	mls	r7, r3, r1, r6
 80063be:	5dc7      	ldrb	r7, [r0, r7]
 80063c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063c4:	4637      	mov	r7, r6
 80063c6:	42bb      	cmp	r3, r7
 80063c8:	460e      	mov	r6, r1
 80063ca:	d9f4      	bls.n	80063b6 <_printf_i+0x11a>
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d10b      	bne.n	80063e8 <_printf_i+0x14c>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	07de      	lsls	r6, r3, #31
 80063d4:	d508      	bpl.n	80063e8 <_printf_i+0x14c>
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	6861      	ldr	r1, [r4, #4]
 80063da:	4299      	cmp	r1, r3
 80063dc:	bfde      	ittt	le
 80063de:	2330      	movle	r3, #48	; 0x30
 80063e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80063e8:	1b52      	subs	r2, r2, r5
 80063ea:	6122      	str	r2, [r4, #16]
 80063ec:	f8cd a000 	str.w	sl, [sp]
 80063f0:	464b      	mov	r3, r9
 80063f2:	aa03      	add	r2, sp, #12
 80063f4:	4621      	mov	r1, r4
 80063f6:	4640      	mov	r0, r8
 80063f8:	f7ff fee2 	bl	80061c0 <_printf_common>
 80063fc:	3001      	adds	r0, #1
 80063fe:	d14c      	bne.n	800649a <_printf_i+0x1fe>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006404:	b004      	add	sp, #16
 8006406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640a:	4835      	ldr	r0, [pc, #212]	; (80064e0 <_printf_i+0x244>)
 800640c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006410:	6829      	ldr	r1, [r5, #0]
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	f851 6b04 	ldr.w	r6, [r1], #4
 8006418:	6029      	str	r1, [r5, #0]
 800641a:	061d      	lsls	r5, r3, #24
 800641c:	d514      	bpl.n	8006448 <_printf_i+0x1ac>
 800641e:	07df      	lsls	r7, r3, #31
 8006420:	bf44      	itt	mi
 8006422:	f043 0320 	orrmi.w	r3, r3, #32
 8006426:	6023      	strmi	r3, [r4, #0]
 8006428:	b91e      	cbnz	r6, 8006432 <_printf_i+0x196>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	f023 0320 	bic.w	r3, r3, #32
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	2310      	movs	r3, #16
 8006434:	e7b0      	b.n	8006398 <_printf_i+0xfc>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	f043 0320 	orr.w	r3, r3, #32
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	2378      	movs	r3, #120	; 0x78
 8006440:	4828      	ldr	r0, [pc, #160]	; (80064e4 <_printf_i+0x248>)
 8006442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006446:	e7e3      	b.n	8006410 <_printf_i+0x174>
 8006448:	0659      	lsls	r1, r3, #25
 800644a:	bf48      	it	mi
 800644c:	b2b6      	uxthmi	r6, r6
 800644e:	e7e6      	b.n	800641e <_printf_i+0x182>
 8006450:	4615      	mov	r5, r2
 8006452:	e7bb      	b.n	80063cc <_printf_i+0x130>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	6826      	ldr	r6, [r4, #0]
 8006458:	6961      	ldr	r1, [r4, #20]
 800645a:	1d18      	adds	r0, r3, #4
 800645c:	6028      	str	r0, [r5, #0]
 800645e:	0635      	lsls	r5, r6, #24
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	d501      	bpl.n	8006468 <_printf_i+0x1cc>
 8006464:	6019      	str	r1, [r3, #0]
 8006466:	e002      	b.n	800646e <_printf_i+0x1d2>
 8006468:	0670      	lsls	r0, r6, #25
 800646a:	d5fb      	bpl.n	8006464 <_printf_i+0x1c8>
 800646c:	8019      	strh	r1, [r3, #0]
 800646e:	2300      	movs	r3, #0
 8006470:	6123      	str	r3, [r4, #16]
 8006472:	4615      	mov	r5, r2
 8006474:	e7ba      	b.n	80063ec <_printf_i+0x150>
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	1d1a      	adds	r2, r3, #4
 800647a:	602a      	str	r2, [r5, #0]
 800647c:	681d      	ldr	r5, [r3, #0]
 800647e:	6862      	ldr	r2, [r4, #4]
 8006480:	2100      	movs	r1, #0
 8006482:	4628      	mov	r0, r5
 8006484:	f7f9 fecc 	bl	8000220 <memchr>
 8006488:	b108      	cbz	r0, 800648e <_printf_i+0x1f2>
 800648a:	1b40      	subs	r0, r0, r5
 800648c:	6060      	str	r0, [r4, #4]
 800648e:	6863      	ldr	r3, [r4, #4]
 8006490:	6123      	str	r3, [r4, #16]
 8006492:	2300      	movs	r3, #0
 8006494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006498:	e7a8      	b.n	80063ec <_printf_i+0x150>
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	462a      	mov	r2, r5
 800649e:	4649      	mov	r1, r9
 80064a0:	4640      	mov	r0, r8
 80064a2:	47d0      	blx	sl
 80064a4:	3001      	adds	r0, #1
 80064a6:	d0ab      	beq.n	8006400 <_printf_i+0x164>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	079b      	lsls	r3, r3, #30
 80064ac:	d413      	bmi.n	80064d6 <_printf_i+0x23a>
 80064ae:	68e0      	ldr	r0, [r4, #12]
 80064b0:	9b03      	ldr	r3, [sp, #12]
 80064b2:	4298      	cmp	r0, r3
 80064b4:	bfb8      	it	lt
 80064b6:	4618      	movlt	r0, r3
 80064b8:	e7a4      	b.n	8006404 <_printf_i+0x168>
 80064ba:	2301      	movs	r3, #1
 80064bc:	4632      	mov	r2, r6
 80064be:	4649      	mov	r1, r9
 80064c0:	4640      	mov	r0, r8
 80064c2:	47d0      	blx	sl
 80064c4:	3001      	adds	r0, #1
 80064c6:	d09b      	beq.n	8006400 <_printf_i+0x164>
 80064c8:	3501      	adds	r5, #1
 80064ca:	68e3      	ldr	r3, [r4, #12]
 80064cc:	9903      	ldr	r1, [sp, #12]
 80064ce:	1a5b      	subs	r3, r3, r1
 80064d0:	42ab      	cmp	r3, r5
 80064d2:	dcf2      	bgt.n	80064ba <_printf_i+0x21e>
 80064d4:	e7eb      	b.n	80064ae <_printf_i+0x212>
 80064d6:	2500      	movs	r5, #0
 80064d8:	f104 0619 	add.w	r6, r4, #25
 80064dc:	e7f5      	b.n	80064ca <_printf_i+0x22e>
 80064de:	bf00      	nop
 80064e0:	08008a52 	.word	0x08008a52
 80064e4:	08008a63 	.word	0x08008a63

080064e8 <siprintf>:
 80064e8:	b40e      	push	{r1, r2, r3}
 80064ea:	b500      	push	{lr}
 80064ec:	b09c      	sub	sp, #112	; 0x70
 80064ee:	ab1d      	add	r3, sp, #116	; 0x74
 80064f0:	9002      	str	r0, [sp, #8]
 80064f2:	9006      	str	r0, [sp, #24]
 80064f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064f8:	4809      	ldr	r0, [pc, #36]	; (8006520 <siprintf+0x38>)
 80064fa:	9107      	str	r1, [sp, #28]
 80064fc:	9104      	str	r1, [sp, #16]
 80064fe:	4909      	ldr	r1, [pc, #36]	; (8006524 <siprintf+0x3c>)
 8006500:	f853 2b04 	ldr.w	r2, [r3], #4
 8006504:	9105      	str	r1, [sp, #20]
 8006506:	6800      	ldr	r0, [r0, #0]
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	a902      	add	r1, sp, #8
 800650c:	f001 fb68 	bl	8007be0 <_svfiprintf_r>
 8006510:	9b02      	ldr	r3, [sp, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	b01c      	add	sp, #112	; 0x70
 8006518:	f85d eb04 	ldr.w	lr, [sp], #4
 800651c:	b003      	add	sp, #12
 800651e:	4770      	bx	lr
 8006520:	2000000c 	.word	0x2000000c
 8006524:	ffff0208 	.word	0xffff0208

08006528 <quorem>:
 8006528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	6903      	ldr	r3, [r0, #16]
 800652e:	690c      	ldr	r4, [r1, #16]
 8006530:	42a3      	cmp	r3, r4
 8006532:	4607      	mov	r7, r0
 8006534:	f2c0 8081 	blt.w	800663a <quorem+0x112>
 8006538:	3c01      	subs	r4, #1
 800653a:	f101 0814 	add.w	r8, r1, #20
 800653e:	f100 0514 	add.w	r5, r0, #20
 8006542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800654c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006550:	3301      	adds	r3, #1
 8006552:	429a      	cmp	r2, r3
 8006554:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006558:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800655c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006560:	d331      	bcc.n	80065c6 <quorem+0x9e>
 8006562:	f04f 0e00 	mov.w	lr, #0
 8006566:	4640      	mov	r0, r8
 8006568:	46ac      	mov	ip, r5
 800656a:	46f2      	mov	sl, lr
 800656c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006570:	b293      	uxth	r3, r2
 8006572:	fb06 e303 	mla	r3, r6, r3, lr
 8006576:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800657a:	b29b      	uxth	r3, r3
 800657c:	ebaa 0303 	sub.w	r3, sl, r3
 8006580:	f8dc a000 	ldr.w	sl, [ip]
 8006584:	0c12      	lsrs	r2, r2, #16
 8006586:	fa13 f38a 	uxtah	r3, r3, sl
 800658a:	fb06 e202 	mla	r2, r6, r2, lr
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	9b00      	ldr	r3, [sp, #0]
 8006592:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006596:	b292      	uxth	r2, r2
 8006598:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800659c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80065a4:	4581      	cmp	r9, r0
 80065a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065aa:	f84c 3b04 	str.w	r3, [ip], #4
 80065ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065b2:	d2db      	bcs.n	800656c <quorem+0x44>
 80065b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80065b8:	b92b      	cbnz	r3, 80065c6 <quorem+0x9e>
 80065ba:	9b01      	ldr	r3, [sp, #4]
 80065bc:	3b04      	subs	r3, #4
 80065be:	429d      	cmp	r5, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	d32e      	bcc.n	8006622 <quorem+0xfa>
 80065c4:	613c      	str	r4, [r7, #16]
 80065c6:	4638      	mov	r0, r7
 80065c8:	f001 f8b6 	bl	8007738 <__mcmp>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	db24      	blt.n	800661a <quorem+0xf2>
 80065d0:	3601      	adds	r6, #1
 80065d2:	4628      	mov	r0, r5
 80065d4:	f04f 0c00 	mov.w	ip, #0
 80065d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80065dc:	f8d0 e000 	ldr.w	lr, [r0]
 80065e0:	b293      	uxth	r3, r2
 80065e2:	ebac 0303 	sub.w	r3, ip, r3
 80065e6:	0c12      	lsrs	r2, r2, #16
 80065e8:	fa13 f38e 	uxtah	r3, r3, lr
 80065ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065fa:	45c1      	cmp	r9, r8
 80065fc:	f840 3b04 	str.w	r3, [r0], #4
 8006600:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006604:	d2e8      	bcs.n	80065d8 <quorem+0xb0>
 8006606:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800660a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800660e:	b922      	cbnz	r2, 800661a <quorem+0xf2>
 8006610:	3b04      	subs	r3, #4
 8006612:	429d      	cmp	r5, r3
 8006614:	461a      	mov	r2, r3
 8006616:	d30a      	bcc.n	800662e <quorem+0x106>
 8006618:	613c      	str	r4, [r7, #16]
 800661a:	4630      	mov	r0, r6
 800661c:	b003      	add	sp, #12
 800661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	3b04      	subs	r3, #4
 8006626:	2a00      	cmp	r2, #0
 8006628:	d1cc      	bne.n	80065c4 <quorem+0x9c>
 800662a:	3c01      	subs	r4, #1
 800662c:	e7c7      	b.n	80065be <quorem+0x96>
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	3b04      	subs	r3, #4
 8006632:	2a00      	cmp	r2, #0
 8006634:	d1f0      	bne.n	8006618 <quorem+0xf0>
 8006636:	3c01      	subs	r4, #1
 8006638:	e7eb      	b.n	8006612 <quorem+0xea>
 800663a:	2000      	movs	r0, #0
 800663c:	e7ee      	b.n	800661c <quorem+0xf4>
	...

08006640 <_dtoa_r>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	ed2d 8b04 	vpush	{d8-d9}
 8006648:	ec57 6b10 	vmov	r6, r7, d0
 800664c:	b093      	sub	sp, #76	; 0x4c
 800664e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006650:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006654:	9106      	str	r1, [sp, #24]
 8006656:	ee10 aa10 	vmov	sl, s0
 800665a:	4604      	mov	r4, r0
 800665c:	9209      	str	r2, [sp, #36]	; 0x24
 800665e:	930c      	str	r3, [sp, #48]	; 0x30
 8006660:	46bb      	mov	fp, r7
 8006662:	b975      	cbnz	r5, 8006682 <_dtoa_r+0x42>
 8006664:	2010      	movs	r0, #16
 8006666:	f000 fddd 	bl	8007224 <malloc>
 800666a:	4602      	mov	r2, r0
 800666c:	6260      	str	r0, [r4, #36]	; 0x24
 800666e:	b920      	cbnz	r0, 800667a <_dtoa_r+0x3a>
 8006670:	4ba7      	ldr	r3, [pc, #668]	; (8006910 <_dtoa_r+0x2d0>)
 8006672:	21ea      	movs	r1, #234	; 0xea
 8006674:	48a7      	ldr	r0, [pc, #668]	; (8006914 <_dtoa_r+0x2d4>)
 8006676:	f001 fbc3 	bl	8007e00 <__assert_func>
 800667a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800667e:	6005      	str	r5, [r0, #0]
 8006680:	60c5      	str	r5, [r0, #12]
 8006682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006684:	6819      	ldr	r1, [r3, #0]
 8006686:	b151      	cbz	r1, 800669e <_dtoa_r+0x5e>
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	604a      	str	r2, [r1, #4]
 800668c:	2301      	movs	r3, #1
 800668e:	4093      	lsls	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
 8006692:	4620      	mov	r0, r4
 8006694:	f000 fe0e 	bl	80072b4 <_Bfree>
 8006698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	1e3b      	subs	r3, r7, #0
 80066a0:	bfaa      	itet	ge
 80066a2:	2300      	movge	r3, #0
 80066a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80066a8:	f8c8 3000 	strge.w	r3, [r8]
 80066ac:	4b9a      	ldr	r3, [pc, #616]	; (8006918 <_dtoa_r+0x2d8>)
 80066ae:	bfbc      	itt	lt
 80066b0:	2201      	movlt	r2, #1
 80066b2:	f8c8 2000 	strlt.w	r2, [r8]
 80066b6:	ea33 030b 	bics.w	r3, r3, fp
 80066ba:	d11b      	bne.n	80066f4 <_dtoa_r+0xb4>
 80066bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066be:	f242 730f 	movw	r3, #9999	; 0x270f
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066c8:	4333      	orrs	r3, r6
 80066ca:	f000 8592 	beq.w	80071f2 <_dtoa_r+0xbb2>
 80066ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066d0:	b963      	cbnz	r3, 80066ec <_dtoa_r+0xac>
 80066d2:	4b92      	ldr	r3, [pc, #584]	; (800691c <_dtoa_r+0x2dc>)
 80066d4:	e022      	b.n	800671c <_dtoa_r+0xdc>
 80066d6:	4b92      	ldr	r3, [pc, #584]	; (8006920 <_dtoa_r+0x2e0>)
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	3308      	adds	r3, #8
 80066dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	9801      	ldr	r0, [sp, #4]
 80066e2:	b013      	add	sp, #76	; 0x4c
 80066e4:	ecbd 8b04 	vpop	{d8-d9}
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	4b8b      	ldr	r3, [pc, #556]	; (800691c <_dtoa_r+0x2dc>)
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	3303      	adds	r3, #3
 80066f2:	e7f3      	b.n	80066dc <_dtoa_r+0x9c>
 80066f4:	2200      	movs	r2, #0
 80066f6:	2300      	movs	r3, #0
 80066f8:	4650      	mov	r0, sl
 80066fa:	4659      	mov	r1, fp
 80066fc:	f7fa fa04 	bl	8000b08 <__aeabi_dcmpeq>
 8006700:	ec4b ab19 	vmov	d9, sl, fp
 8006704:	4680      	mov	r8, r0
 8006706:	b158      	cbz	r0, 8006720 <_dtoa_r+0xe0>
 8006708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800670a:	2301      	movs	r3, #1
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 856b 	beq.w	80071ec <_dtoa_r+0xbac>
 8006716:	4883      	ldr	r0, [pc, #524]	; (8006924 <_dtoa_r+0x2e4>)
 8006718:	6018      	str	r0, [r3, #0]
 800671a:	1e43      	subs	r3, r0, #1
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	e7df      	b.n	80066e0 <_dtoa_r+0xa0>
 8006720:	ec4b ab10 	vmov	d0, sl, fp
 8006724:	aa10      	add	r2, sp, #64	; 0x40
 8006726:	a911      	add	r1, sp, #68	; 0x44
 8006728:	4620      	mov	r0, r4
 800672a:	f001 f8ab 	bl	8007884 <__d2b>
 800672e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006732:	ee08 0a10 	vmov	s16, r0
 8006736:	2d00      	cmp	r5, #0
 8006738:	f000 8084 	beq.w	8006844 <_dtoa_r+0x204>
 800673c:	ee19 3a90 	vmov	r3, s19
 8006740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006744:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006748:	4656      	mov	r6, sl
 800674a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800674e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006752:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006756:	4b74      	ldr	r3, [pc, #464]	; (8006928 <_dtoa_r+0x2e8>)
 8006758:	2200      	movs	r2, #0
 800675a:	4630      	mov	r0, r6
 800675c:	4639      	mov	r1, r7
 800675e:	f7f9 fdb3 	bl	80002c8 <__aeabi_dsub>
 8006762:	a365      	add	r3, pc, #404	; (adr r3, 80068f8 <_dtoa_r+0x2b8>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f7f9 ff66 	bl	8000638 <__aeabi_dmul>
 800676c:	a364      	add	r3, pc, #400	; (adr r3, 8006900 <_dtoa_r+0x2c0>)
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f7f9 fdab 	bl	80002cc <__adddf3>
 8006776:	4606      	mov	r6, r0
 8006778:	4628      	mov	r0, r5
 800677a:	460f      	mov	r7, r1
 800677c:	f7f9 fef2 	bl	8000564 <__aeabi_i2d>
 8006780:	a361      	add	r3, pc, #388	; (adr r3, 8006908 <_dtoa_r+0x2c8>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f7f9 ff57 	bl	8000638 <__aeabi_dmul>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4630      	mov	r0, r6
 8006790:	4639      	mov	r1, r7
 8006792:	f7f9 fd9b 	bl	80002cc <__adddf3>
 8006796:	4606      	mov	r6, r0
 8006798:	460f      	mov	r7, r1
 800679a:	f7fa f9fd 	bl	8000b98 <__aeabi_d2iz>
 800679e:	2200      	movs	r2, #0
 80067a0:	9000      	str	r0, [sp, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	4630      	mov	r0, r6
 80067a6:	4639      	mov	r1, r7
 80067a8:	f7fa f9b8 	bl	8000b1c <__aeabi_dcmplt>
 80067ac:	b150      	cbz	r0, 80067c4 <_dtoa_r+0x184>
 80067ae:	9800      	ldr	r0, [sp, #0]
 80067b0:	f7f9 fed8 	bl	8000564 <__aeabi_i2d>
 80067b4:	4632      	mov	r2, r6
 80067b6:	463b      	mov	r3, r7
 80067b8:	f7fa f9a6 	bl	8000b08 <__aeabi_dcmpeq>
 80067bc:	b910      	cbnz	r0, 80067c4 <_dtoa_r+0x184>
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	2b16      	cmp	r3, #22
 80067c8:	d85a      	bhi.n	8006880 <_dtoa_r+0x240>
 80067ca:	9a00      	ldr	r2, [sp, #0]
 80067cc:	4b57      	ldr	r3, [pc, #348]	; (800692c <_dtoa_r+0x2ec>)
 80067ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	ec51 0b19 	vmov	r0, r1, d9
 80067da:	f7fa f99f 	bl	8000b1c <__aeabi_dcmplt>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d050      	beq.n	8006884 <_dtoa_r+0x244>
 80067e2:	9b00      	ldr	r3, [sp, #0]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	2300      	movs	r3, #0
 80067ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80067ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ee:	1b5d      	subs	r5, r3, r5
 80067f0:	1e6b      	subs	r3, r5, #1
 80067f2:	9305      	str	r3, [sp, #20]
 80067f4:	bf45      	ittet	mi
 80067f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80067fa:	9304      	strmi	r3, [sp, #16]
 80067fc:	2300      	movpl	r3, #0
 80067fe:	2300      	movmi	r3, #0
 8006800:	bf4c      	ite	mi
 8006802:	9305      	strmi	r3, [sp, #20]
 8006804:	9304      	strpl	r3, [sp, #16]
 8006806:	9b00      	ldr	r3, [sp, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	db3d      	blt.n	8006888 <_dtoa_r+0x248>
 800680c:	9b05      	ldr	r3, [sp, #20]
 800680e:	9a00      	ldr	r2, [sp, #0]
 8006810:	920a      	str	r2, [sp, #40]	; 0x28
 8006812:	4413      	add	r3, r2
 8006814:	9305      	str	r3, [sp, #20]
 8006816:	2300      	movs	r3, #0
 8006818:	9307      	str	r3, [sp, #28]
 800681a:	9b06      	ldr	r3, [sp, #24]
 800681c:	2b09      	cmp	r3, #9
 800681e:	f200 8089 	bhi.w	8006934 <_dtoa_r+0x2f4>
 8006822:	2b05      	cmp	r3, #5
 8006824:	bfc4      	itt	gt
 8006826:	3b04      	subgt	r3, #4
 8006828:	9306      	strgt	r3, [sp, #24]
 800682a:	9b06      	ldr	r3, [sp, #24]
 800682c:	f1a3 0302 	sub.w	r3, r3, #2
 8006830:	bfcc      	ite	gt
 8006832:	2500      	movgt	r5, #0
 8006834:	2501      	movle	r5, #1
 8006836:	2b03      	cmp	r3, #3
 8006838:	f200 8087 	bhi.w	800694a <_dtoa_r+0x30a>
 800683c:	e8df f003 	tbb	[pc, r3]
 8006840:	59383a2d 	.word	0x59383a2d
 8006844:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006848:	441d      	add	r5, r3
 800684a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800684e:	2b20      	cmp	r3, #32
 8006850:	bfc1      	itttt	gt
 8006852:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006856:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800685a:	fa0b f303 	lslgt.w	r3, fp, r3
 800685e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006862:	bfda      	itte	le
 8006864:	f1c3 0320 	rsble	r3, r3, #32
 8006868:	fa06 f003 	lslle.w	r0, r6, r3
 800686c:	4318      	orrgt	r0, r3
 800686e:	f7f9 fe69 	bl	8000544 <__aeabi_ui2d>
 8006872:	2301      	movs	r3, #1
 8006874:	4606      	mov	r6, r0
 8006876:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800687a:	3d01      	subs	r5, #1
 800687c:	930e      	str	r3, [sp, #56]	; 0x38
 800687e:	e76a      	b.n	8006756 <_dtoa_r+0x116>
 8006880:	2301      	movs	r3, #1
 8006882:	e7b2      	b.n	80067ea <_dtoa_r+0x1aa>
 8006884:	900b      	str	r0, [sp, #44]	; 0x2c
 8006886:	e7b1      	b.n	80067ec <_dtoa_r+0x1ac>
 8006888:	9b04      	ldr	r3, [sp, #16]
 800688a:	9a00      	ldr	r2, [sp, #0]
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	4253      	negs	r3, r2
 8006892:	9307      	str	r3, [sp, #28]
 8006894:	2300      	movs	r3, #0
 8006896:	930a      	str	r3, [sp, #40]	; 0x28
 8006898:	e7bf      	b.n	800681a <_dtoa_r+0x1da>
 800689a:	2300      	movs	r3, #0
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dc55      	bgt.n	8006950 <_dtoa_r+0x310>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068aa:	461a      	mov	r2, r3
 80068ac:	9209      	str	r2, [sp, #36]	; 0x24
 80068ae:	e00c      	b.n	80068ca <_dtoa_r+0x28a>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e7f3      	b.n	800689c <_dtoa_r+0x25c>
 80068b4:	2300      	movs	r3, #0
 80068b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b8:	9308      	str	r3, [sp, #32]
 80068ba:	9b00      	ldr	r3, [sp, #0]
 80068bc:	4413      	add	r3, r2
 80068be:	9302      	str	r3, [sp, #8]
 80068c0:	3301      	adds	r3, #1
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	9303      	str	r3, [sp, #12]
 80068c6:	bfb8      	it	lt
 80068c8:	2301      	movlt	r3, #1
 80068ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068cc:	2200      	movs	r2, #0
 80068ce:	6042      	str	r2, [r0, #4]
 80068d0:	2204      	movs	r2, #4
 80068d2:	f102 0614 	add.w	r6, r2, #20
 80068d6:	429e      	cmp	r6, r3
 80068d8:	6841      	ldr	r1, [r0, #4]
 80068da:	d93d      	bls.n	8006958 <_dtoa_r+0x318>
 80068dc:	4620      	mov	r0, r4
 80068de:	f000 fca9 	bl	8007234 <_Balloc>
 80068e2:	9001      	str	r0, [sp, #4]
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d13b      	bne.n	8006960 <_dtoa_r+0x320>
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <_dtoa_r+0x2f0>)
 80068ea:	4602      	mov	r2, r0
 80068ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068f0:	e6c0      	b.n	8006674 <_dtoa_r+0x34>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e7df      	b.n	80068b6 <_dtoa_r+0x276>
 80068f6:	bf00      	nop
 80068f8:	636f4361 	.word	0x636f4361
 80068fc:	3fd287a7 	.word	0x3fd287a7
 8006900:	8b60c8b3 	.word	0x8b60c8b3
 8006904:	3fc68a28 	.word	0x3fc68a28
 8006908:	509f79fb 	.word	0x509f79fb
 800690c:	3fd34413 	.word	0x3fd34413
 8006910:	08008a81 	.word	0x08008a81
 8006914:	08008a98 	.word	0x08008a98
 8006918:	7ff00000 	.word	0x7ff00000
 800691c:	08008a7d 	.word	0x08008a7d
 8006920:	08008a74 	.word	0x08008a74
 8006924:	08008a51 	.word	0x08008a51
 8006928:	3ff80000 	.word	0x3ff80000
 800692c:	08008b88 	.word	0x08008b88
 8006930:	08008af3 	.word	0x08008af3
 8006934:	2501      	movs	r5, #1
 8006936:	2300      	movs	r3, #0
 8006938:	9306      	str	r3, [sp, #24]
 800693a:	9508      	str	r5, [sp, #32]
 800693c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006940:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	2312      	movs	r3, #18
 8006948:	e7b0      	b.n	80068ac <_dtoa_r+0x26c>
 800694a:	2301      	movs	r3, #1
 800694c:	9308      	str	r3, [sp, #32]
 800694e:	e7f5      	b.n	800693c <_dtoa_r+0x2fc>
 8006950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006952:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006956:	e7b8      	b.n	80068ca <_dtoa_r+0x28a>
 8006958:	3101      	adds	r1, #1
 800695a:	6041      	str	r1, [r0, #4]
 800695c:	0052      	lsls	r2, r2, #1
 800695e:	e7b8      	b.n	80068d2 <_dtoa_r+0x292>
 8006960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006962:	9a01      	ldr	r2, [sp, #4]
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	2b0e      	cmp	r3, #14
 800696a:	f200 809d 	bhi.w	8006aa8 <_dtoa_r+0x468>
 800696e:	2d00      	cmp	r5, #0
 8006970:	f000 809a 	beq.w	8006aa8 <_dtoa_r+0x468>
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dd32      	ble.n	80069e0 <_dtoa_r+0x3a0>
 800697a:	4ab7      	ldr	r2, [pc, #732]	; (8006c58 <_dtoa_r+0x618>)
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006984:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006988:	9b00      	ldr	r3, [sp, #0]
 800698a:	05d8      	lsls	r0, r3, #23
 800698c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006990:	d516      	bpl.n	80069c0 <_dtoa_r+0x380>
 8006992:	4bb2      	ldr	r3, [pc, #712]	; (8006c5c <_dtoa_r+0x61c>)
 8006994:	ec51 0b19 	vmov	r0, r1, d9
 8006998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800699c:	f7f9 ff76 	bl	800088c <__aeabi_ddiv>
 80069a0:	f007 070f 	and.w	r7, r7, #15
 80069a4:	4682      	mov	sl, r0
 80069a6:	468b      	mov	fp, r1
 80069a8:	2503      	movs	r5, #3
 80069aa:	4eac      	ldr	r6, [pc, #688]	; (8006c5c <_dtoa_r+0x61c>)
 80069ac:	b957      	cbnz	r7, 80069c4 <_dtoa_r+0x384>
 80069ae:	4642      	mov	r2, r8
 80069b0:	464b      	mov	r3, r9
 80069b2:	4650      	mov	r0, sl
 80069b4:	4659      	mov	r1, fp
 80069b6:	f7f9 ff69 	bl	800088c <__aeabi_ddiv>
 80069ba:	4682      	mov	sl, r0
 80069bc:	468b      	mov	fp, r1
 80069be:	e028      	b.n	8006a12 <_dtoa_r+0x3d2>
 80069c0:	2502      	movs	r5, #2
 80069c2:	e7f2      	b.n	80069aa <_dtoa_r+0x36a>
 80069c4:	07f9      	lsls	r1, r7, #31
 80069c6:	d508      	bpl.n	80069da <_dtoa_r+0x39a>
 80069c8:	4640      	mov	r0, r8
 80069ca:	4649      	mov	r1, r9
 80069cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069d0:	f7f9 fe32 	bl	8000638 <__aeabi_dmul>
 80069d4:	3501      	adds	r5, #1
 80069d6:	4680      	mov	r8, r0
 80069d8:	4689      	mov	r9, r1
 80069da:	107f      	asrs	r7, r7, #1
 80069dc:	3608      	adds	r6, #8
 80069de:	e7e5      	b.n	80069ac <_dtoa_r+0x36c>
 80069e0:	f000 809b 	beq.w	8006b1a <_dtoa_r+0x4da>
 80069e4:	9b00      	ldr	r3, [sp, #0]
 80069e6:	4f9d      	ldr	r7, [pc, #628]	; (8006c5c <_dtoa_r+0x61c>)
 80069e8:	425e      	negs	r6, r3
 80069ea:	4b9b      	ldr	r3, [pc, #620]	; (8006c58 <_dtoa_r+0x618>)
 80069ec:	f006 020f 	and.w	r2, r6, #15
 80069f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	ec51 0b19 	vmov	r0, r1, d9
 80069fc:	f7f9 fe1c 	bl	8000638 <__aeabi_dmul>
 8006a00:	1136      	asrs	r6, r6, #4
 8006a02:	4682      	mov	sl, r0
 8006a04:	468b      	mov	fp, r1
 8006a06:	2300      	movs	r3, #0
 8006a08:	2502      	movs	r5, #2
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	d17a      	bne.n	8006b04 <_dtoa_r+0x4c4>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1d3      	bne.n	80069ba <_dtoa_r+0x37a>
 8006a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8082 	beq.w	8006b1e <_dtoa_r+0x4de>
 8006a1a:	4b91      	ldr	r3, [pc, #580]	; (8006c60 <_dtoa_r+0x620>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4650      	mov	r0, sl
 8006a20:	4659      	mov	r1, fp
 8006a22:	f7fa f87b 	bl	8000b1c <__aeabi_dcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d079      	beq.n	8006b1e <_dtoa_r+0x4de>
 8006a2a:	9b03      	ldr	r3, [sp, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d076      	beq.n	8006b1e <_dtoa_r+0x4de>
 8006a30:	9b02      	ldr	r3, [sp, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	dd36      	ble.n	8006aa4 <_dtoa_r+0x464>
 8006a36:	9b00      	ldr	r3, [sp, #0]
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	1e5f      	subs	r7, r3, #1
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4b88      	ldr	r3, [pc, #544]	; (8006c64 <_dtoa_r+0x624>)
 8006a42:	f7f9 fdf9 	bl	8000638 <__aeabi_dmul>
 8006a46:	9e02      	ldr	r6, [sp, #8]
 8006a48:	4682      	mov	sl, r0
 8006a4a:	468b      	mov	fp, r1
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7f9 fd88 	bl	8000564 <__aeabi_i2d>
 8006a54:	4652      	mov	r2, sl
 8006a56:	465b      	mov	r3, fp
 8006a58:	f7f9 fdee 	bl	8000638 <__aeabi_dmul>
 8006a5c:	4b82      	ldr	r3, [pc, #520]	; (8006c68 <_dtoa_r+0x628>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f7f9 fc34 	bl	80002cc <__adddf3>
 8006a64:	46d0      	mov	r8, sl
 8006a66:	46d9      	mov	r9, fp
 8006a68:	4682      	mov	sl, r0
 8006a6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a6e:	2e00      	cmp	r6, #0
 8006a70:	d158      	bne.n	8006b24 <_dtoa_r+0x4e4>
 8006a72:	4b7e      	ldr	r3, [pc, #504]	; (8006c6c <_dtoa_r+0x62c>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	4640      	mov	r0, r8
 8006a78:	4649      	mov	r1, r9
 8006a7a:	f7f9 fc25 	bl	80002c8 <__aeabi_dsub>
 8006a7e:	4652      	mov	r2, sl
 8006a80:	465b      	mov	r3, fp
 8006a82:	4680      	mov	r8, r0
 8006a84:	4689      	mov	r9, r1
 8006a86:	f7fa f867 	bl	8000b58 <__aeabi_dcmpgt>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f040 8295 	bne.w	8006fba <_dtoa_r+0x97a>
 8006a90:	4652      	mov	r2, sl
 8006a92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a96:	4640      	mov	r0, r8
 8006a98:	4649      	mov	r1, r9
 8006a9a:	f7fa f83f 	bl	8000b1c <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f040 8289 	bne.w	8006fb6 <_dtoa_r+0x976>
 8006aa4:	ec5b ab19 	vmov	sl, fp, d9
 8006aa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f2c0 8148 	blt.w	8006d40 <_dtoa_r+0x700>
 8006ab0:	9a00      	ldr	r2, [sp, #0]
 8006ab2:	2a0e      	cmp	r2, #14
 8006ab4:	f300 8144 	bgt.w	8006d40 <_dtoa_r+0x700>
 8006ab8:	4b67      	ldr	r3, [pc, #412]	; (8006c58 <_dtoa_r+0x618>)
 8006aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006abe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f280 80d5 	bge.w	8006c74 <_dtoa_r+0x634>
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f300 80d1 	bgt.w	8006c74 <_dtoa_r+0x634>
 8006ad2:	f040 826f 	bne.w	8006fb4 <_dtoa_r+0x974>
 8006ad6:	4b65      	ldr	r3, [pc, #404]	; (8006c6c <_dtoa_r+0x62c>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4640      	mov	r0, r8
 8006adc:	4649      	mov	r1, r9
 8006ade:	f7f9 fdab 	bl	8000638 <__aeabi_dmul>
 8006ae2:	4652      	mov	r2, sl
 8006ae4:	465b      	mov	r3, fp
 8006ae6:	f7fa f82d 	bl	8000b44 <__aeabi_dcmpge>
 8006aea:	9e03      	ldr	r6, [sp, #12]
 8006aec:	4637      	mov	r7, r6
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f040 8245 	bne.w	8006f7e <_dtoa_r+0x93e>
 8006af4:	9d01      	ldr	r5, [sp, #4]
 8006af6:	2331      	movs	r3, #49	; 0x31
 8006af8:	f805 3b01 	strb.w	r3, [r5], #1
 8006afc:	9b00      	ldr	r3, [sp, #0]
 8006afe:	3301      	adds	r3, #1
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	e240      	b.n	8006f86 <_dtoa_r+0x946>
 8006b04:	07f2      	lsls	r2, r6, #31
 8006b06:	d505      	bpl.n	8006b14 <_dtoa_r+0x4d4>
 8006b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0c:	f7f9 fd94 	bl	8000638 <__aeabi_dmul>
 8006b10:	3501      	adds	r5, #1
 8006b12:	2301      	movs	r3, #1
 8006b14:	1076      	asrs	r6, r6, #1
 8006b16:	3708      	adds	r7, #8
 8006b18:	e777      	b.n	8006a0a <_dtoa_r+0x3ca>
 8006b1a:	2502      	movs	r5, #2
 8006b1c:	e779      	b.n	8006a12 <_dtoa_r+0x3d2>
 8006b1e:	9f00      	ldr	r7, [sp, #0]
 8006b20:	9e03      	ldr	r6, [sp, #12]
 8006b22:	e794      	b.n	8006a4e <_dtoa_r+0x40e>
 8006b24:	9901      	ldr	r1, [sp, #4]
 8006b26:	4b4c      	ldr	r3, [pc, #304]	; (8006c58 <_dtoa_r+0x618>)
 8006b28:	4431      	add	r1, r6
 8006b2a:	910d      	str	r1, [sp, #52]	; 0x34
 8006b2c:	9908      	ldr	r1, [sp, #32]
 8006b2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b36:	2900      	cmp	r1, #0
 8006b38:	d043      	beq.n	8006bc2 <_dtoa_r+0x582>
 8006b3a:	494d      	ldr	r1, [pc, #308]	; (8006c70 <_dtoa_r+0x630>)
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	f7f9 fea5 	bl	800088c <__aeabi_ddiv>
 8006b42:	4652      	mov	r2, sl
 8006b44:	465b      	mov	r3, fp
 8006b46:	f7f9 fbbf 	bl	80002c8 <__aeabi_dsub>
 8006b4a:	9d01      	ldr	r5, [sp, #4]
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	468b      	mov	fp, r1
 8006b50:	4649      	mov	r1, r9
 8006b52:	4640      	mov	r0, r8
 8006b54:	f7fa f820 	bl	8000b98 <__aeabi_d2iz>
 8006b58:	4606      	mov	r6, r0
 8006b5a:	f7f9 fd03 	bl	8000564 <__aeabi_i2d>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4640      	mov	r0, r8
 8006b64:	4649      	mov	r1, r9
 8006b66:	f7f9 fbaf 	bl	80002c8 <__aeabi_dsub>
 8006b6a:	3630      	adds	r6, #48	; 0x30
 8006b6c:	f805 6b01 	strb.w	r6, [r5], #1
 8006b70:	4652      	mov	r2, sl
 8006b72:	465b      	mov	r3, fp
 8006b74:	4680      	mov	r8, r0
 8006b76:	4689      	mov	r9, r1
 8006b78:	f7f9 ffd0 	bl	8000b1c <__aeabi_dcmplt>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d163      	bne.n	8006c48 <_dtoa_r+0x608>
 8006b80:	4642      	mov	r2, r8
 8006b82:	464b      	mov	r3, r9
 8006b84:	4936      	ldr	r1, [pc, #216]	; (8006c60 <_dtoa_r+0x620>)
 8006b86:	2000      	movs	r0, #0
 8006b88:	f7f9 fb9e 	bl	80002c8 <__aeabi_dsub>
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	465b      	mov	r3, fp
 8006b90:	f7f9 ffc4 	bl	8000b1c <__aeabi_dcmplt>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f040 80b5 	bne.w	8006d04 <_dtoa_r+0x6c4>
 8006b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b9c:	429d      	cmp	r5, r3
 8006b9e:	d081      	beq.n	8006aa4 <_dtoa_r+0x464>
 8006ba0:	4b30      	ldr	r3, [pc, #192]	; (8006c64 <_dtoa_r+0x624>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	f7f9 fd46 	bl	8000638 <__aeabi_dmul>
 8006bac:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <_dtoa_r+0x624>)
 8006bae:	4682      	mov	sl, r0
 8006bb0:	468b      	mov	fp, r1
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f7f9 fd3e 	bl	8000638 <__aeabi_dmul>
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	4689      	mov	r9, r1
 8006bc0:	e7c6      	b.n	8006b50 <_dtoa_r+0x510>
 8006bc2:	4650      	mov	r0, sl
 8006bc4:	4659      	mov	r1, fp
 8006bc6:	f7f9 fd37 	bl	8000638 <__aeabi_dmul>
 8006bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bcc:	9d01      	ldr	r5, [sp, #4]
 8006bce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bd0:	4682      	mov	sl, r0
 8006bd2:	468b      	mov	fp, r1
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	f7f9 ffde 	bl	8000b98 <__aeabi_d2iz>
 8006bdc:	4606      	mov	r6, r0
 8006bde:	f7f9 fcc1 	bl	8000564 <__aeabi_i2d>
 8006be2:	3630      	adds	r6, #48	; 0x30
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4640      	mov	r0, r8
 8006bea:	4649      	mov	r1, r9
 8006bec:	f7f9 fb6c 	bl	80002c8 <__aeabi_dsub>
 8006bf0:	f805 6b01 	strb.w	r6, [r5], #1
 8006bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bf6:	429d      	cmp	r5, r3
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	4689      	mov	r9, r1
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	d124      	bne.n	8006c4c <_dtoa_r+0x60c>
 8006c02:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <_dtoa_r+0x630>)
 8006c04:	4650      	mov	r0, sl
 8006c06:	4659      	mov	r1, fp
 8006c08:	f7f9 fb60 	bl	80002cc <__adddf3>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	f7f9 ffa0 	bl	8000b58 <__aeabi_dcmpgt>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d173      	bne.n	8006d04 <_dtoa_r+0x6c4>
 8006c1c:	4652      	mov	r2, sl
 8006c1e:	465b      	mov	r3, fp
 8006c20:	4913      	ldr	r1, [pc, #76]	; (8006c70 <_dtoa_r+0x630>)
 8006c22:	2000      	movs	r0, #0
 8006c24:	f7f9 fb50 	bl	80002c8 <__aeabi_dsub>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	4649      	mov	r1, r9
 8006c30:	f7f9 ff74 	bl	8000b1c <__aeabi_dcmplt>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f43f af35 	beq.w	8006aa4 <_dtoa_r+0x464>
 8006c3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c3c:	1e6b      	subs	r3, r5, #1
 8006c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c44:	2b30      	cmp	r3, #48	; 0x30
 8006c46:	d0f8      	beq.n	8006c3a <_dtoa_r+0x5fa>
 8006c48:	9700      	str	r7, [sp, #0]
 8006c4a:	e049      	b.n	8006ce0 <_dtoa_r+0x6a0>
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <_dtoa_r+0x624>)
 8006c4e:	f7f9 fcf3 	bl	8000638 <__aeabi_dmul>
 8006c52:	4680      	mov	r8, r0
 8006c54:	4689      	mov	r9, r1
 8006c56:	e7bd      	b.n	8006bd4 <_dtoa_r+0x594>
 8006c58:	08008b88 	.word	0x08008b88
 8006c5c:	08008b60 	.word	0x08008b60
 8006c60:	3ff00000 	.word	0x3ff00000
 8006c64:	40240000 	.word	0x40240000
 8006c68:	401c0000 	.word	0x401c0000
 8006c6c:	40140000 	.word	0x40140000
 8006c70:	3fe00000 	.word	0x3fe00000
 8006c74:	9d01      	ldr	r5, [sp, #4]
 8006c76:	4656      	mov	r6, sl
 8006c78:	465f      	mov	r7, fp
 8006c7a:	4642      	mov	r2, r8
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	4630      	mov	r0, r6
 8006c80:	4639      	mov	r1, r7
 8006c82:	f7f9 fe03 	bl	800088c <__aeabi_ddiv>
 8006c86:	f7f9 ff87 	bl	8000b98 <__aeabi_d2iz>
 8006c8a:	4682      	mov	sl, r0
 8006c8c:	f7f9 fc6a 	bl	8000564 <__aeabi_i2d>
 8006c90:	4642      	mov	r2, r8
 8006c92:	464b      	mov	r3, r9
 8006c94:	f7f9 fcd0 	bl	8000638 <__aeabi_dmul>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ca4:	f7f9 fb10 	bl	80002c8 <__aeabi_dsub>
 8006ca8:	f805 6b01 	strb.w	r6, [r5], #1
 8006cac:	9e01      	ldr	r6, [sp, #4]
 8006cae:	9f03      	ldr	r7, [sp, #12]
 8006cb0:	1bae      	subs	r6, r5, r6
 8006cb2:	42b7      	cmp	r7, r6
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	d135      	bne.n	8006d26 <_dtoa_r+0x6e6>
 8006cba:	f7f9 fb07 	bl	80002cc <__adddf3>
 8006cbe:	4642      	mov	r2, r8
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	460f      	mov	r7, r1
 8006cc6:	f7f9 ff47 	bl	8000b58 <__aeabi_dcmpgt>
 8006cca:	b9d0      	cbnz	r0, 8006d02 <_dtoa_r+0x6c2>
 8006ccc:	4642      	mov	r2, r8
 8006cce:	464b      	mov	r3, r9
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	f7f9 ff18 	bl	8000b08 <__aeabi_dcmpeq>
 8006cd8:	b110      	cbz	r0, 8006ce0 <_dtoa_r+0x6a0>
 8006cda:	f01a 0f01 	tst.w	sl, #1
 8006cde:	d110      	bne.n	8006d02 <_dtoa_r+0x6c2>
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	ee18 1a10 	vmov	r1, s16
 8006ce6:	f000 fae5 	bl	80072b4 <_Bfree>
 8006cea:	2300      	movs	r3, #0
 8006cec:	9800      	ldr	r0, [sp, #0]
 8006cee:	702b      	strb	r3, [r5, #0]
 8006cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	6018      	str	r0, [r3, #0]
 8006cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f43f acf1 	beq.w	80066e0 <_dtoa_r+0xa0>
 8006cfe:	601d      	str	r5, [r3, #0]
 8006d00:	e4ee      	b.n	80066e0 <_dtoa_r+0xa0>
 8006d02:	9f00      	ldr	r7, [sp, #0]
 8006d04:	462b      	mov	r3, r5
 8006d06:	461d      	mov	r5, r3
 8006d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d0c:	2a39      	cmp	r2, #57	; 0x39
 8006d0e:	d106      	bne.n	8006d1e <_dtoa_r+0x6de>
 8006d10:	9a01      	ldr	r2, [sp, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d1f7      	bne.n	8006d06 <_dtoa_r+0x6c6>
 8006d16:	9901      	ldr	r1, [sp, #4]
 8006d18:	2230      	movs	r2, #48	; 0x30
 8006d1a:	3701      	adds	r7, #1
 8006d1c:	700a      	strb	r2, [r1, #0]
 8006d1e:	781a      	ldrb	r2, [r3, #0]
 8006d20:	3201      	adds	r2, #1
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	e790      	b.n	8006c48 <_dtoa_r+0x608>
 8006d26:	4ba6      	ldr	r3, [pc, #664]	; (8006fc0 <_dtoa_r+0x980>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f7f9 fc85 	bl	8000638 <__aeabi_dmul>
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2300      	movs	r3, #0
 8006d32:	4606      	mov	r6, r0
 8006d34:	460f      	mov	r7, r1
 8006d36:	f7f9 fee7 	bl	8000b08 <__aeabi_dcmpeq>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d09d      	beq.n	8006c7a <_dtoa_r+0x63a>
 8006d3e:	e7cf      	b.n	8006ce0 <_dtoa_r+0x6a0>
 8006d40:	9a08      	ldr	r2, [sp, #32]
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	f000 80d7 	beq.w	8006ef6 <_dtoa_r+0x8b6>
 8006d48:	9a06      	ldr	r2, [sp, #24]
 8006d4a:	2a01      	cmp	r2, #1
 8006d4c:	f300 80ba 	bgt.w	8006ec4 <_dtoa_r+0x884>
 8006d50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	f000 80b2 	beq.w	8006ebc <_dtoa_r+0x87c>
 8006d58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d5c:	9e07      	ldr	r6, [sp, #28]
 8006d5e:	9d04      	ldr	r5, [sp, #16]
 8006d60:	9a04      	ldr	r2, [sp, #16]
 8006d62:	441a      	add	r2, r3
 8006d64:	9204      	str	r2, [sp, #16]
 8006d66:	9a05      	ldr	r2, [sp, #20]
 8006d68:	2101      	movs	r1, #1
 8006d6a:	441a      	add	r2, r3
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	9205      	str	r2, [sp, #20]
 8006d70:	f000 fb58 	bl	8007424 <__i2b>
 8006d74:	4607      	mov	r7, r0
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	dd0c      	ble.n	8006d94 <_dtoa_r+0x754>
 8006d7a:	9b05      	ldr	r3, [sp, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dd09      	ble.n	8006d94 <_dtoa_r+0x754>
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	9a04      	ldr	r2, [sp, #16]
 8006d84:	bfa8      	it	ge
 8006d86:	462b      	movge	r3, r5
 8006d88:	1ad2      	subs	r2, r2, r3
 8006d8a:	9204      	str	r2, [sp, #16]
 8006d8c:	9a05      	ldr	r2, [sp, #20]
 8006d8e:	1aed      	subs	r5, r5, r3
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	9305      	str	r3, [sp, #20]
 8006d94:	9b07      	ldr	r3, [sp, #28]
 8006d96:	b31b      	cbz	r3, 8006de0 <_dtoa_r+0x7a0>
 8006d98:	9b08      	ldr	r3, [sp, #32]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80af 	beq.w	8006efe <_dtoa_r+0x8be>
 8006da0:	2e00      	cmp	r6, #0
 8006da2:	dd13      	ble.n	8006dcc <_dtoa_r+0x78c>
 8006da4:	4639      	mov	r1, r7
 8006da6:	4632      	mov	r2, r6
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fbfb 	bl	80075a4 <__pow5mult>
 8006dae:	ee18 2a10 	vmov	r2, s16
 8006db2:	4601      	mov	r1, r0
 8006db4:	4607      	mov	r7, r0
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 fb4a 	bl	8007450 <__multiply>
 8006dbc:	ee18 1a10 	vmov	r1, s16
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fa76 	bl	80072b4 <_Bfree>
 8006dc8:	ee08 8a10 	vmov	s16, r8
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	1b9a      	subs	r2, r3, r6
 8006dd0:	d006      	beq.n	8006de0 <_dtoa_r+0x7a0>
 8006dd2:	ee18 1a10 	vmov	r1, s16
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 fbe4 	bl	80075a4 <__pow5mult>
 8006ddc:	ee08 0a10 	vmov	s16, r0
 8006de0:	2101      	movs	r1, #1
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fb1e 	bl	8007424 <__i2b>
 8006de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	4606      	mov	r6, r0
 8006dee:	f340 8088 	ble.w	8006f02 <_dtoa_r+0x8c2>
 8006df2:	461a      	mov	r2, r3
 8006df4:	4601      	mov	r1, r0
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fbd4 	bl	80075a4 <__pow5mult>
 8006dfc:	9b06      	ldr	r3, [sp, #24]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	4606      	mov	r6, r0
 8006e02:	f340 8081 	ble.w	8006f08 <_dtoa_r+0x8c8>
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	6933      	ldr	r3, [r6, #16]
 8006e0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e10:	6918      	ldr	r0, [r3, #16]
 8006e12:	f000 fab7 	bl	8007384 <__hi0bits>
 8006e16:	f1c0 0020 	rsb	r0, r0, #32
 8006e1a:	9b05      	ldr	r3, [sp, #20]
 8006e1c:	4418      	add	r0, r3
 8006e1e:	f010 001f 	ands.w	r0, r0, #31
 8006e22:	f000 8092 	beq.w	8006f4a <_dtoa_r+0x90a>
 8006e26:	f1c0 0320 	rsb	r3, r0, #32
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	f340 808a 	ble.w	8006f44 <_dtoa_r+0x904>
 8006e30:	f1c0 001c 	rsb	r0, r0, #28
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	4403      	add	r3, r0
 8006e38:	9304      	str	r3, [sp, #16]
 8006e3a:	9b05      	ldr	r3, [sp, #20]
 8006e3c:	4403      	add	r3, r0
 8006e3e:	4405      	add	r5, r0
 8006e40:	9305      	str	r3, [sp, #20]
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd07      	ble.n	8006e58 <_dtoa_r+0x818>
 8006e48:	ee18 1a10 	vmov	r1, s16
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 fc02 	bl	8007658 <__lshift>
 8006e54:	ee08 0a10 	vmov	s16, r0
 8006e58:	9b05      	ldr	r3, [sp, #20]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd05      	ble.n	8006e6a <_dtoa_r+0x82a>
 8006e5e:	4631      	mov	r1, r6
 8006e60:	461a      	mov	r2, r3
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fbf8 	bl	8007658 <__lshift>
 8006e68:	4606      	mov	r6, r0
 8006e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d06e      	beq.n	8006f4e <_dtoa_r+0x90e>
 8006e70:	ee18 0a10 	vmov	r0, s16
 8006e74:	4631      	mov	r1, r6
 8006e76:	f000 fc5f 	bl	8007738 <__mcmp>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	da67      	bge.n	8006f4e <_dtoa_r+0x90e>
 8006e7e:	9b00      	ldr	r3, [sp, #0]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	ee18 1a10 	vmov	r1, s16
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	220a      	movs	r2, #10
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f000 fa33 	bl	80072f8 <__multadd>
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	ee08 0a10 	vmov	s16, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 81b1 	beq.w	8007200 <_dtoa_r+0xbc0>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	220a      	movs	r2, #10
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f000 fa27 	bl	80072f8 <__multadd>
 8006eaa:	9b02      	ldr	r3, [sp, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	4607      	mov	r7, r0
 8006eb0:	f300 808e 	bgt.w	8006fd0 <_dtoa_r+0x990>
 8006eb4:	9b06      	ldr	r3, [sp, #24]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	dc51      	bgt.n	8006f5e <_dtoa_r+0x91e>
 8006eba:	e089      	b.n	8006fd0 <_dtoa_r+0x990>
 8006ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ec2:	e74b      	b.n	8006d5c <_dtoa_r+0x71c>
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	1e5e      	subs	r6, r3, #1
 8006ec8:	9b07      	ldr	r3, [sp, #28]
 8006eca:	42b3      	cmp	r3, r6
 8006ecc:	bfbf      	itttt	lt
 8006ece:	9b07      	ldrlt	r3, [sp, #28]
 8006ed0:	9607      	strlt	r6, [sp, #28]
 8006ed2:	1af2      	sublt	r2, r6, r3
 8006ed4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ed6:	bfb6      	itet	lt
 8006ed8:	189b      	addlt	r3, r3, r2
 8006eda:	1b9e      	subge	r6, r3, r6
 8006edc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ede:	9b03      	ldr	r3, [sp, #12]
 8006ee0:	bfb8      	it	lt
 8006ee2:	2600      	movlt	r6, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bfb7      	itett	lt
 8006ee8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006eec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ef0:	1a9d      	sublt	r5, r3, r2
 8006ef2:	2300      	movlt	r3, #0
 8006ef4:	e734      	b.n	8006d60 <_dtoa_r+0x720>
 8006ef6:	9e07      	ldr	r6, [sp, #28]
 8006ef8:	9d04      	ldr	r5, [sp, #16]
 8006efa:	9f08      	ldr	r7, [sp, #32]
 8006efc:	e73b      	b.n	8006d76 <_dtoa_r+0x736>
 8006efe:	9a07      	ldr	r2, [sp, #28]
 8006f00:	e767      	b.n	8006dd2 <_dtoa_r+0x792>
 8006f02:	9b06      	ldr	r3, [sp, #24]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	dc18      	bgt.n	8006f3a <_dtoa_r+0x8fa>
 8006f08:	f1ba 0f00 	cmp.w	sl, #0
 8006f0c:	d115      	bne.n	8006f3a <_dtoa_r+0x8fa>
 8006f0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f12:	b993      	cbnz	r3, 8006f3a <_dtoa_r+0x8fa>
 8006f14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f18:	0d1b      	lsrs	r3, r3, #20
 8006f1a:	051b      	lsls	r3, r3, #20
 8006f1c:	b183      	cbz	r3, 8006f40 <_dtoa_r+0x900>
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	3301      	adds	r3, #1
 8006f22:	9304      	str	r3, [sp, #16]
 8006f24:	9b05      	ldr	r3, [sp, #20]
 8006f26:	3301      	adds	r3, #1
 8006f28:	9305      	str	r3, [sp, #20]
 8006f2a:	f04f 0801 	mov.w	r8, #1
 8006f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f47f af6a 	bne.w	8006e0a <_dtoa_r+0x7ca>
 8006f36:	2001      	movs	r0, #1
 8006f38:	e76f      	b.n	8006e1a <_dtoa_r+0x7da>
 8006f3a:	f04f 0800 	mov.w	r8, #0
 8006f3e:	e7f6      	b.n	8006f2e <_dtoa_r+0x8ee>
 8006f40:	4698      	mov	r8, r3
 8006f42:	e7f4      	b.n	8006f2e <_dtoa_r+0x8ee>
 8006f44:	f43f af7d 	beq.w	8006e42 <_dtoa_r+0x802>
 8006f48:	4618      	mov	r0, r3
 8006f4a:	301c      	adds	r0, #28
 8006f4c:	e772      	b.n	8006e34 <_dtoa_r+0x7f4>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	dc37      	bgt.n	8006fc4 <_dtoa_r+0x984>
 8006f54:	9b06      	ldr	r3, [sp, #24]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	dd34      	ble.n	8006fc4 <_dtoa_r+0x984>
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	9302      	str	r3, [sp, #8]
 8006f5e:	9b02      	ldr	r3, [sp, #8]
 8006f60:	b96b      	cbnz	r3, 8006f7e <_dtoa_r+0x93e>
 8006f62:	4631      	mov	r1, r6
 8006f64:	2205      	movs	r2, #5
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 f9c6 	bl	80072f8 <__multadd>
 8006f6c:	4601      	mov	r1, r0
 8006f6e:	4606      	mov	r6, r0
 8006f70:	ee18 0a10 	vmov	r0, s16
 8006f74:	f000 fbe0 	bl	8007738 <__mcmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	f73f adbb 	bgt.w	8006af4 <_dtoa_r+0x4b4>
 8006f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f80:	9d01      	ldr	r5, [sp, #4]
 8006f82:	43db      	mvns	r3, r3
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	f04f 0800 	mov.w	r8, #0
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 f991 	bl	80072b4 <_Bfree>
 8006f92:	2f00      	cmp	r7, #0
 8006f94:	f43f aea4 	beq.w	8006ce0 <_dtoa_r+0x6a0>
 8006f98:	f1b8 0f00 	cmp.w	r8, #0
 8006f9c:	d005      	beq.n	8006faa <_dtoa_r+0x96a>
 8006f9e:	45b8      	cmp	r8, r7
 8006fa0:	d003      	beq.n	8006faa <_dtoa_r+0x96a>
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 f985 	bl	80072b4 <_Bfree>
 8006faa:	4639      	mov	r1, r7
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 f981 	bl	80072b4 <_Bfree>
 8006fb2:	e695      	b.n	8006ce0 <_dtoa_r+0x6a0>
 8006fb4:	2600      	movs	r6, #0
 8006fb6:	4637      	mov	r7, r6
 8006fb8:	e7e1      	b.n	8006f7e <_dtoa_r+0x93e>
 8006fba:	9700      	str	r7, [sp, #0]
 8006fbc:	4637      	mov	r7, r6
 8006fbe:	e599      	b.n	8006af4 <_dtoa_r+0x4b4>
 8006fc0:	40240000 	.word	0x40240000
 8006fc4:	9b08      	ldr	r3, [sp, #32]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80ca 	beq.w	8007160 <_dtoa_r+0xb20>
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	9302      	str	r3, [sp, #8]
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	dd05      	ble.n	8006fe0 <_dtoa_r+0x9a0>
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	462a      	mov	r2, r5
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fb3d 	bl	8007658 <__lshift>
 8006fde:	4607      	mov	r7, r0
 8006fe0:	f1b8 0f00 	cmp.w	r8, #0
 8006fe4:	d05b      	beq.n	800709e <_dtoa_r+0xa5e>
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 f923 	bl	8007234 <_Balloc>
 8006fee:	4605      	mov	r5, r0
 8006ff0:	b928      	cbnz	r0, 8006ffe <_dtoa_r+0x9be>
 8006ff2:	4b87      	ldr	r3, [pc, #540]	; (8007210 <_dtoa_r+0xbd0>)
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ffa:	f7ff bb3b 	b.w	8006674 <_dtoa_r+0x34>
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	3202      	adds	r2, #2
 8007002:	0092      	lsls	r2, r2, #2
 8007004:	f107 010c 	add.w	r1, r7, #12
 8007008:	300c      	adds	r0, #12
 800700a:	f7fe fded 	bl	8005be8 <memcpy>
 800700e:	2201      	movs	r2, #1
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f000 fb20 	bl	8007658 <__lshift>
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	f103 0901 	add.w	r9, r3, #1
 800701e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007022:	4413      	add	r3, r2
 8007024:	9305      	str	r3, [sp, #20]
 8007026:	f00a 0301 	and.w	r3, sl, #1
 800702a:	46b8      	mov	r8, r7
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	4607      	mov	r7, r0
 8007030:	4631      	mov	r1, r6
 8007032:	ee18 0a10 	vmov	r0, s16
 8007036:	f7ff fa77 	bl	8006528 <quorem>
 800703a:	4641      	mov	r1, r8
 800703c:	9002      	str	r0, [sp, #8]
 800703e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007042:	ee18 0a10 	vmov	r0, s16
 8007046:	f000 fb77 	bl	8007738 <__mcmp>
 800704a:	463a      	mov	r2, r7
 800704c:	9003      	str	r0, [sp, #12]
 800704e:	4631      	mov	r1, r6
 8007050:	4620      	mov	r0, r4
 8007052:	f000 fb8d 	bl	8007770 <__mdiff>
 8007056:	68c2      	ldr	r2, [r0, #12]
 8007058:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800705c:	4605      	mov	r5, r0
 800705e:	bb02      	cbnz	r2, 80070a2 <_dtoa_r+0xa62>
 8007060:	4601      	mov	r1, r0
 8007062:	ee18 0a10 	vmov	r0, s16
 8007066:	f000 fb67 	bl	8007738 <__mcmp>
 800706a:	4602      	mov	r2, r0
 800706c:	4629      	mov	r1, r5
 800706e:	4620      	mov	r0, r4
 8007070:	9207      	str	r2, [sp, #28]
 8007072:	f000 f91f 	bl	80072b4 <_Bfree>
 8007076:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800707a:	ea43 0102 	orr.w	r1, r3, r2
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	430b      	orrs	r3, r1
 8007082:	464d      	mov	r5, r9
 8007084:	d10f      	bne.n	80070a6 <_dtoa_r+0xa66>
 8007086:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800708a:	d02a      	beq.n	80070e2 <_dtoa_r+0xaa2>
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	dd02      	ble.n	8007098 <_dtoa_r+0xa58>
 8007092:	9b02      	ldr	r3, [sp, #8]
 8007094:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007098:	f88b a000 	strb.w	sl, [fp]
 800709c:	e775      	b.n	8006f8a <_dtoa_r+0x94a>
 800709e:	4638      	mov	r0, r7
 80070a0:	e7ba      	b.n	8007018 <_dtoa_r+0x9d8>
 80070a2:	2201      	movs	r2, #1
 80070a4:	e7e2      	b.n	800706c <_dtoa_r+0xa2c>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	db04      	blt.n	80070b6 <_dtoa_r+0xa76>
 80070ac:	9906      	ldr	r1, [sp, #24]
 80070ae:	430b      	orrs	r3, r1
 80070b0:	9904      	ldr	r1, [sp, #16]
 80070b2:	430b      	orrs	r3, r1
 80070b4:	d122      	bne.n	80070fc <_dtoa_r+0xabc>
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	ddee      	ble.n	8007098 <_dtoa_r+0xa58>
 80070ba:	ee18 1a10 	vmov	r1, s16
 80070be:	2201      	movs	r2, #1
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fac9 	bl	8007658 <__lshift>
 80070c6:	4631      	mov	r1, r6
 80070c8:	ee08 0a10 	vmov	s16, r0
 80070cc:	f000 fb34 	bl	8007738 <__mcmp>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	dc03      	bgt.n	80070dc <_dtoa_r+0xa9c>
 80070d4:	d1e0      	bne.n	8007098 <_dtoa_r+0xa58>
 80070d6:	f01a 0f01 	tst.w	sl, #1
 80070da:	d0dd      	beq.n	8007098 <_dtoa_r+0xa58>
 80070dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070e0:	d1d7      	bne.n	8007092 <_dtoa_r+0xa52>
 80070e2:	2339      	movs	r3, #57	; 0x39
 80070e4:	f88b 3000 	strb.w	r3, [fp]
 80070e8:	462b      	mov	r3, r5
 80070ea:	461d      	mov	r5, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070f2:	2a39      	cmp	r2, #57	; 0x39
 80070f4:	d071      	beq.n	80071da <_dtoa_r+0xb9a>
 80070f6:	3201      	adds	r2, #1
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	e746      	b.n	8006f8a <_dtoa_r+0x94a>
 80070fc:	2a00      	cmp	r2, #0
 80070fe:	dd07      	ble.n	8007110 <_dtoa_r+0xad0>
 8007100:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007104:	d0ed      	beq.n	80070e2 <_dtoa_r+0xaa2>
 8007106:	f10a 0301 	add.w	r3, sl, #1
 800710a:	f88b 3000 	strb.w	r3, [fp]
 800710e:	e73c      	b.n	8006f8a <_dtoa_r+0x94a>
 8007110:	9b05      	ldr	r3, [sp, #20]
 8007112:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007116:	4599      	cmp	r9, r3
 8007118:	d047      	beq.n	80071aa <_dtoa_r+0xb6a>
 800711a:	ee18 1a10 	vmov	r1, s16
 800711e:	2300      	movs	r3, #0
 8007120:	220a      	movs	r2, #10
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f8e8 	bl	80072f8 <__multadd>
 8007128:	45b8      	cmp	r8, r7
 800712a:	ee08 0a10 	vmov	s16, r0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	f04f 020a 	mov.w	r2, #10
 8007136:	4641      	mov	r1, r8
 8007138:	4620      	mov	r0, r4
 800713a:	d106      	bne.n	800714a <_dtoa_r+0xb0a>
 800713c:	f000 f8dc 	bl	80072f8 <__multadd>
 8007140:	4680      	mov	r8, r0
 8007142:	4607      	mov	r7, r0
 8007144:	f109 0901 	add.w	r9, r9, #1
 8007148:	e772      	b.n	8007030 <_dtoa_r+0x9f0>
 800714a:	f000 f8d5 	bl	80072f8 <__multadd>
 800714e:	4639      	mov	r1, r7
 8007150:	4680      	mov	r8, r0
 8007152:	2300      	movs	r3, #0
 8007154:	220a      	movs	r2, #10
 8007156:	4620      	mov	r0, r4
 8007158:	f000 f8ce 	bl	80072f8 <__multadd>
 800715c:	4607      	mov	r7, r0
 800715e:	e7f1      	b.n	8007144 <_dtoa_r+0xb04>
 8007160:	9b03      	ldr	r3, [sp, #12]
 8007162:	9302      	str	r3, [sp, #8]
 8007164:	9d01      	ldr	r5, [sp, #4]
 8007166:	ee18 0a10 	vmov	r0, s16
 800716a:	4631      	mov	r1, r6
 800716c:	f7ff f9dc 	bl	8006528 <quorem>
 8007170:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007174:	9b01      	ldr	r3, [sp, #4]
 8007176:	f805 ab01 	strb.w	sl, [r5], #1
 800717a:	1aea      	subs	r2, r5, r3
 800717c:	9b02      	ldr	r3, [sp, #8]
 800717e:	4293      	cmp	r3, r2
 8007180:	dd09      	ble.n	8007196 <_dtoa_r+0xb56>
 8007182:	ee18 1a10 	vmov	r1, s16
 8007186:	2300      	movs	r3, #0
 8007188:	220a      	movs	r2, #10
 800718a:	4620      	mov	r0, r4
 800718c:	f000 f8b4 	bl	80072f8 <__multadd>
 8007190:	ee08 0a10 	vmov	s16, r0
 8007194:	e7e7      	b.n	8007166 <_dtoa_r+0xb26>
 8007196:	9b02      	ldr	r3, [sp, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	bfc8      	it	gt
 800719c:	461d      	movgt	r5, r3
 800719e:	9b01      	ldr	r3, [sp, #4]
 80071a0:	bfd8      	it	le
 80071a2:	2501      	movle	r5, #1
 80071a4:	441d      	add	r5, r3
 80071a6:	f04f 0800 	mov.w	r8, #0
 80071aa:	ee18 1a10 	vmov	r1, s16
 80071ae:	2201      	movs	r2, #1
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fa51 	bl	8007658 <__lshift>
 80071b6:	4631      	mov	r1, r6
 80071b8:	ee08 0a10 	vmov	s16, r0
 80071bc:	f000 fabc 	bl	8007738 <__mcmp>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	dc91      	bgt.n	80070e8 <_dtoa_r+0xaa8>
 80071c4:	d102      	bne.n	80071cc <_dtoa_r+0xb8c>
 80071c6:	f01a 0f01 	tst.w	sl, #1
 80071ca:	d18d      	bne.n	80070e8 <_dtoa_r+0xaa8>
 80071cc:	462b      	mov	r3, r5
 80071ce:	461d      	mov	r5, r3
 80071d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071d4:	2a30      	cmp	r2, #48	; 0x30
 80071d6:	d0fa      	beq.n	80071ce <_dtoa_r+0xb8e>
 80071d8:	e6d7      	b.n	8006f8a <_dtoa_r+0x94a>
 80071da:	9a01      	ldr	r2, [sp, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d184      	bne.n	80070ea <_dtoa_r+0xaaa>
 80071e0:	9b00      	ldr	r3, [sp, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	2331      	movs	r3, #49	; 0x31
 80071e8:	7013      	strb	r3, [r2, #0]
 80071ea:	e6ce      	b.n	8006f8a <_dtoa_r+0x94a>
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <_dtoa_r+0xbd4>)
 80071ee:	f7ff ba95 	b.w	800671c <_dtoa_r+0xdc>
 80071f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f47f aa6e 	bne.w	80066d6 <_dtoa_r+0x96>
 80071fa:	4b07      	ldr	r3, [pc, #28]	; (8007218 <_dtoa_r+0xbd8>)
 80071fc:	f7ff ba8e 	b.w	800671c <_dtoa_r+0xdc>
 8007200:	9b02      	ldr	r3, [sp, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dcae      	bgt.n	8007164 <_dtoa_r+0xb24>
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	2b02      	cmp	r3, #2
 800720a:	f73f aea8 	bgt.w	8006f5e <_dtoa_r+0x91e>
 800720e:	e7a9      	b.n	8007164 <_dtoa_r+0xb24>
 8007210:	08008af3 	.word	0x08008af3
 8007214:	08008a50 	.word	0x08008a50
 8007218:	08008a74 	.word	0x08008a74

0800721c <_localeconv_r>:
 800721c:	4800      	ldr	r0, [pc, #0]	; (8007220 <_localeconv_r+0x4>)
 800721e:	4770      	bx	lr
 8007220:	20000160 	.word	0x20000160

08007224 <malloc>:
 8007224:	4b02      	ldr	r3, [pc, #8]	; (8007230 <malloc+0xc>)
 8007226:	4601      	mov	r1, r0
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	f000 bc09 	b.w	8007a40 <_malloc_r>
 800722e:	bf00      	nop
 8007230:	2000000c 	.word	0x2000000c

08007234 <_Balloc>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	b976      	cbnz	r6, 800725c <_Balloc+0x28>
 800723e:	2010      	movs	r0, #16
 8007240:	f7ff fff0 	bl	8007224 <malloc>
 8007244:	4602      	mov	r2, r0
 8007246:	6260      	str	r0, [r4, #36]	; 0x24
 8007248:	b920      	cbnz	r0, 8007254 <_Balloc+0x20>
 800724a:	4b18      	ldr	r3, [pc, #96]	; (80072ac <_Balloc+0x78>)
 800724c:	4818      	ldr	r0, [pc, #96]	; (80072b0 <_Balloc+0x7c>)
 800724e:	2166      	movs	r1, #102	; 0x66
 8007250:	f000 fdd6 	bl	8007e00 <__assert_func>
 8007254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007258:	6006      	str	r6, [r0, #0]
 800725a:	60c6      	str	r6, [r0, #12]
 800725c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800725e:	68f3      	ldr	r3, [r6, #12]
 8007260:	b183      	cbz	r3, 8007284 <_Balloc+0x50>
 8007262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800726a:	b9b8      	cbnz	r0, 800729c <_Balloc+0x68>
 800726c:	2101      	movs	r1, #1
 800726e:	fa01 f605 	lsl.w	r6, r1, r5
 8007272:	1d72      	adds	r2, r6, #5
 8007274:	0092      	lsls	r2, r2, #2
 8007276:	4620      	mov	r0, r4
 8007278:	f000 fb60 	bl	800793c <_calloc_r>
 800727c:	b160      	cbz	r0, 8007298 <_Balloc+0x64>
 800727e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007282:	e00e      	b.n	80072a2 <_Balloc+0x6e>
 8007284:	2221      	movs	r2, #33	; 0x21
 8007286:	2104      	movs	r1, #4
 8007288:	4620      	mov	r0, r4
 800728a:	f000 fb57 	bl	800793c <_calloc_r>
 800728e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007290:	60f0      	str	r0, [r6, #12]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e4      	bne.n	8007262 <_Balloc+0x2e>
 8007298:	2000      	movs	r0, #0
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	6802      	ldr	r2, [r0, #0]
 800729e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072a2:	2300      	movs	r3, #0
 80072a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072a8:	e7f7      	b.n	800729a <_Balloc+0x66>
 80072aa:	bf00      	nop
 80072ac:	08008a81 	.word	0x08008a81
 80072b0:	08008b04 	.word	0x08008b04

080072b4 <_Bfree>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072b8:	4605      	mov	r5, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b976      	cbnz	r6, 80072dc <_Bfree+0x28>
 80072be:	2010      	movs	r0, #16
 80072c0:	f7ff ffb0 	bl	8007224 <malloc>
 80072c4:	4602      	mov	r2, r0
 80072c6:	6268      	str	r0, [r5, #36]	; 0x24
 80072c8:	b920      	cbnz	r0, 80072d4 <_Bfree+0x20>
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <_Bfree+0x3c>)
 80072cc:	4809      	ldr	r0, [pc, #36]	; (80072f4 <_Bfree+0x40>)
 80072ce:	218a      	movs	r1, #138	; 0x8a
 80072d0:	f000 fd96 	bl	8007e00 <__assert_func>
 80072d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072d8:	6006      	str	r6, [r0, #0]
 80072da:	60c6      	str	r6, [r0, #12]
 80072dc:	b13c      	cbz	r4, 80072ee <_Bfree+0x3a>
 80072de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072e0:	6862      	ldr	r2, [r4, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e8:	6021      	str	r1, [r4, #0]
 80072ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	08008a81 	.word	0x08008a81
 80072f4:	08008b04 	.word	0x08008b04

080072f8 <__multadd>:
 80072f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fc:	690d      	ldr	r5, [r1, #16]
 80072fe:	4607      	mov	r7, r0
 8007300:	460c      	mov	r4, r1
 8007302:	461e      	mov	r6, r3
 8007304:	f101 0c14 	add.w	ip, r1, #20
 8007308:	2000      	movs	r0, #0
 800730a:	f8dc 3000 	ldr.w	r3, [ip]
 800730e:	b299      	uxth	r1, r3
 8007310:	fb02 6101 	mla	r1, r2, r1, r6
 8007314:	0c1e      	lsrs	r6, r3, #16
 8007316:	0c0b      	lsrs	r3, r1, #16
 8007318:	fb02 3306 	mla	r3, r2, r6, r3
 800731c:	b289      	uxth	r1, r1
 800731e:	3001      	adds	r0, #1
 8007320:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007324:	4285      	cmp	r5, r0
 8007326:	f84c 1b04 	str.w	r1, [ip], #4
 800732a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800732e:	dcec      	bgt.n	800730a <__multadd+0x12>
 8007330:	b30e      	cbz	r6, 8007376 <__multadd+0x7e>
 8007332:	68a3      	ldr	r3, [r4, #8]
 8007334:	42ab      	cmp	r3, r5
 8007336:	dc19      	bgt.n	800736c <__multadd+0x74>
 8007338:	6861      	ldr	r1, [r4, #4]
 800733a:	4638      	mov	r0, r7
 800733c:	3101      	adds	r1, #1
 800733e:	f7ff ff79 	bl	8007234 <_Balloc>
 8007342:	4680      	mov	r8, r0
 8007344:	b928      	cbnz	r0, 8007352 <__multadd+0x5a>
 8007346:	4602      	mov	r2, r0
 8007348:	4b0c      	ldr	r3, [pc, #48]	; (800737c <__multadd+0x84>)
 800734a:	480d      	ldr	r0, [pc, #52]	; (8007380 <__multadd+0x88>)
 800734c:	21b5      	movs	r1, #181	; 0xb5
 800734e:	f000 fd57 	bl	8007e00 <__assert_func>
 8007352:	6922      	ldr	r2, [r4, #16]
 8007354:	3202      	adds	r2, #2
 8007356:	f104 010c 	add.w	r1, r4, #12
 800735a:	0092      	lsls	r2, r2, #2
 800735c:	300c      	adds	r0, #12
 800735e:	f7fe fc43 	bl	8005be8 <memcpy>
 8007362:	4621      	mov	r1, r4
 8007364:	4638      	mov	r0, r7
 8007366:	f7ff ffa5 	bl	80072b4 <_Bfree>
 800736a:	4644      	mov	r4, r8
 800736c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007370:	3501      	adds	r5, #1
 8007372:	615e      	str	r6, [r3, #20]
 8007374:	6125      	str	r5, [r4, #16]
 8007376:	4620      	mov	r0, r4
 8007378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800737c:	08008af3 	.word	0x08008af3
 8007380:	08008b04 	.word	0x08008b04

08007384 <__hi0bits>:
 8007384:	0c03      	lsrs	r3, r0, #16
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	b9d3      	cbnz	r3, 80073c0 <__hi0bits+0x3c>
 800738a:	0400      	lsls	r0, r0, #16
 800738c:	2310      	movs	r3, #16
 800738e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007392:	bf04      	itt	eq
 8007394:	0200      	lsleq	r0, r0, #8
 8007396:	3308      	addeq	r3, #8
 8007398:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800739c:	bf04      	itt	eq
 800739e:	0100      	lsleq	r0, r0, #4
 80073a0:	3304      	addeq	r3, #4
 80073a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80073a6:	bf04      	itt	eq
 80073a8:	0080      	lsleq	r0, r0, #2
 80073aa:	3302      	addeq	r3, #2
 80073ac:	2800      	cmp	r0, #0
 80073ae:	db05      	blt.n	80073bc <__hi0bits+0x38>
 80073b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80073b4:	f103 0301 	add.w	r3, r3, #1
 80073b8:	bf08      	it	eq
 80073ba:	2320      	moveq	r3, #32
 80073bc:	4618      	mov	r0, r3
 80073be:	4770      	bx	lr
 80073c0:	2300      	movs	r3, #0
 80073c2:	e7e4      	b.n	800738e <__hi0bits+0xa>

080073c4 <__lo0bits>:
 80073c4:	6803      	ldr	r3, [r0, #0]
 80073c6:	f013 0207 	ands.w	r2, r3, #7
 80073ca:	4601      	mov	r1, r0
 80073cc:	d00b      	beq.n	80073e6 <__lo0bits+0x22>
 80073ce:	07da      	lsls	r2, r3, #31
 80073d0:	d423      	bmi.n	800741a <__lo0bits+0x56>
 80073d2:	0798      	lsls	r0, r3, #30
 80073d4:	bf49      	itett	mi
 80073d6:	085b      	lsrmi	r3, r3, #1
 80073d8:	089b      	lsrpl	r3, r3, #2
 80073da:	2001      	movmi	r0, #1
 80073dc:	600b      	strmi	r3, [r1, #0]
 80073de:	bf5c      	itt	pl
 80073e0:	600b      	strpl	r3, [r1, #0]
 80073e2:	2002      	movpl	r0, #2
 80073e4:	4770      	bx	lr
 80073e6:	b298      	uxth	r0, r3
 80073e8:	b9a8      	cbnz	r0, 8007416 <__lo0bits+0x52>
 80073ea:	0c1b      	lsrs	r3, r3, #16
 80073ec:	2010      	movs	r0, #16
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	b90a      	cbnz	r2, 80073f6 <__lo0bits+0x32>
 80073f2:	3008      	adds	r0, #8
 80073f4:	0a1b      	lsrs	r3, r3, #8
 80073f6:	071a      	lsls	r2, r3, #28
 80073f8:	bf04      	itt	eq
 80073fa:	091b      	lsreq	r3, r3, #4
 80073fc:	3004      	addeq	r0, #4
 80073fe:	079a      	lsls	r2, r3, #30
 8007400:	bf04      	itt	eq
 8007402:	089b      	lsreq	r3, r3, #2
 8007404:	3002      	addeq	r0, #2
 8007406:	07da      	lsls	r2, r3, #31
 8007408:	d403      	bmi.n	8007412 <__lo0bits+0x4e>
 800740a:	085b      	lsrs	r3, r3, #1
 800740c:	f100 0001 	add.w	r0, r0, #1
 8007410:	d005      	beq.n	800741e <__lo0bits+0x5a>
 8007412:	600b      	str	r3, [r1, #0]
 8007414:	4770      	bx	lr
 8007416:	4610      	mov	r0, r2
 8007418:	e7e9      	b.n	80073ee <__lo0bits+0x2a>
 800741a:	2000      	movs	r0, #0
 800741c:	4770      	bx	lr
 800741e:	2020      	movs	r0, #32
 8007420:	4770      	bx	lr
	...

08007424 <__i2b>:
 8007424:	b510      	push	{r4, lr}
 8007426:	460c      	mov	r4, r1
 8007428:	2101      	movs	r1, #1
 800742a:	f7ff ff03 	bl	8007234 <_Balloc>
 800742e:	4602      	mov	r2, r0
 8007430:	b928      	cbnz	r0, 800743e <__i2b+0x1a>
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <__i2b+0x24>)
 8007434:	4805      	ldr	r0, [pc, #20]	; (800744c <__i2b+0x28>)
 8007436:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800743a:	f000 fce1 	bl	8007e00 <__assert_func>
 800743e:	2301      	movs	r3, #1
 8007440:	6144      	str	r4, [r0, #20]
 8007442:	6103      	str	r3, [r0, #16]
 8007444:	bd10      	pop	{r4, pc}
 8007446:	bf00      	nop
 8007448:	08008af3 	.word	0x08008af3
 800744c:	08008b04 	.word	0x08008b04

08007450 <__multiply>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	4691      	mov	r9, r2
 8007456:	690a      	ldr	r2, [r1, #16]
 8007458:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800745c:	429a      	cmp	r2, r3
 800745e:	bfb8      	it	lt
 8007460:	460b      	movlt	r3, r1
 8007462:	460c      	mov	r4, r1
 8007464:	bfbc      	itt	lt
 8007466:	464c      	movlt	r4, r9
 8007468:	4699      	movlt	r9, r3
 800746a:	6927      	ldr	r7, [r4, #16]
 800746c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007470:	68a3      	ldr	r3, [r4, #8]
 8007472:	6861      	ldr	r1, [r4, #4]
 8007474:	eb07 060a 	add.w	r6, r7, sl
 8007478:	42b3      	cmp	r3, r6
 800747a:	b085      	sub	sp, #20
 800747c:	bfb8      	it	lt
 800747e:	3101      	addlt	r1, #1
 8007480:	f7ff fed8 	bl	8007234 <_Balloc>
 8007484:	b930      	cbnz	r0, 8007494 <__multiply+0x44>
 8007486:	4602      	mov	r2, r0
 8007488:	4b44      	ldr	r3, [pc, #272]	; (800759c <__multiply+0x14c>)
 800748a:	4845      	ldr	r0, [pc, #276]	; (80075a0 <__multiply+0x150>)
 800748c:	f240 115d 	movw	r1, #349	; 0x15d
 8007490:	f000 fcb6 	bl	8007e00 <__assert_func>
 8007494:	f100 0514 	add.w	r5, r0, #20
 8007498:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800749c:	462b      	mov	r3, r5
 800749e:	2200      	movs	r2, #0
 80074a0:	4543      	cmp	r3, r8
 80074a2:	d321      	bcc.n	80074e8 <__multiply+0x98>
 80074a4:	f104 0314 	add.w	r3, r4, #20
 80074a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074ac:	f109 0314 	add.w	r3, r9, #20
 80074b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074b4:	9202      	str	r2, [sp, #8]
 80074b6:	1b3a      	subs	r2, r7, r4
 80074b8:	3a15      	subs	r2, #21
 80074ba:	f022 0203 	bic.w	r2, r2, #3
 80074be:	3204      	adds	r2, #4
 80074c0:	f104 0115 	add.w	r1, r4, #21
 80074c4:	428f      	cmp	r7, r1
 80074c6:	bf38      	it	cc
 80074c8:	2204      	movcc	r2, #4
 80074ca:	9201      	str	r2, [sp, #4]
 80074cc:	9a02      	ldr	r2, [sp, #8]
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d80c      	bhi.n	80074ee <__multiply+0x9e>
 80074d4:	2e00      	cmp	r6, #0
 80074d6:	dd03      	ble.n	80074e0 <__multiply+0x90>
 80074d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d05a      	beq.n	8007596 <__multiply+0x146>
 80074e0:	6106      	str	r6, [r0, #16]
 80074e2:	b005      	add	sp, #20
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	f843 2b04 	str.w	r2, [r3], #4
 80074ec:	e7d8      	b.n	80074a0 <__multiply+0x50>
 80074ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80074f2:	f1ba 0f00 	cmp.w	sl, #0
 80074f6:	d024      	beq.n	8007542 <__multiply+0xf2>
 80074f8:	f104 0e14 	add.w	lr, r4, #20
 80074fc:	46a9      	mov	r9, r5
 80074fe:	f04f 0c00 	mov.w	ip, #0
 8007502:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007506:	f8d9 1000 	ldr.w	r1, [r9]
 800750a:	fa1f fb82 	uxth.w	fp, r2
 800750e:	b289      	uxth	r1, r1
 8007510:	fb0a 110b 	mla	r1, sl, fp, r1
 8007514:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007518:	f8d9 2000 	ldr.w	r2, [r9]
 800751c:	4461      	add	r1, ip
 800751e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007522:	fb0a c20b 	mla	r2, sl, fp, ip
 8007526:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800752a:	b289      	uxth	r1, r1
 800752c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007530:	4577      	cmp	r7, lr
 8007532:	f849 1b04 	str.w	r1, [r9], #4
 8007536:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800753a:	d8e2      	bhi.n	8007502 <__multiply+0xb2>
 800753c:	9a01      	ldr	r2, [sp, #4]
 800753e:	f845 c002 	str.w	ip, [r5, r2]
 8007542:	9a03      	ldr	r2, [sp, #12]
 8007544:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007548:	3304      	adds	r3, #4
 800754a:	f1b9 0f00 	cmp.w	r9, #0
 800754e:	d020      	beq.n	8007592 <__multiply+0x142>
 8007550:	6829      	ldr	r1, [r5, #0]
 8007552:	f104 0c14 	add.w	ip, r4, #20
 8007556:	46ae      	mov	lr, r5
 8007558:	f04f 0a00 	mov.w	sl, #0
 800755c:	f8bc b000 	ldrh.w	fp, [ip]
 8007560:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007564:	fb09 220b 	mla	r2, r9, fp, r2
 8007568:	4492      	add	sl, r2
 800756a:	b289      	uxth	r1, r1
 800756c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007570:	f84e 1b04 	str.w	r1, [lr], #4
 8007574:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007578:	f8be 1000 	ldrh.w	r1, [lr]
 800757c:	0c12      	lsrs	r2, r2, #16
 800757e:	fb09 1102 	mla	r1, r9, r2, r1
 8007582:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007586:	4567      	cmp	r7, ip
 8007588:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800758c:	d8e6      	bhi.n	800755c <__multiply+0x10c>
 800758e:	9a01      	ldr	r2, [sp, #4]
 8007590:	50a9      	str	r1, [r5, r2]
 8007592:	3504      	adds	r5, #4
 8007594:	e79a      	b.n	80074cc <__multiply+0x7c>
 8007596:	3e01      	subs	r6, #1
 8007598:	e79c      	b.n	80074d4 <__multiply+0x84>
 800759a:	bf00      	nop
 800759c:	08008af3 	.word	0x08008af3
 80075a0:	08008b04 	.word	0x08008b04

080075a4 <__pow5mult>:
 80075a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a8:	4615      	mov	r5, r2
 80075aa:	f012 0203 	ands.w	r2, r2, #3
 80075ae:	4606      	mov	r6, r0
 80075b0:	460f      	mov	r7, r1
 80075b2:	d007      	beq.n	80075c4 <__pow5mult+0x20>
 80075b4:	4c25      	ldr	r4, [pc, #148]	; (800764c <__pow5mult+0xa8>)
 80075b6:	3a01      	subs	r2, #1
 80075b8:	2300      	movs	r3, #0
 80075ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075be:	f7ff fe9b 	bl	80072f8 <__multadd>
 80075c2:	4607      	mov	r7, r0
 80075c4:	10ad      	asrs	r5, r5, #2
 80075c6:	d03d      	beq.n	8007644 <__pow5mult+0xa0>
 80075c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075ca:	b97c      	cbnz	r4, 80075ec <__pow5mult+0x48>
 80075cc:	2010      	movs	r0, #16
 80075ce:	f7ff fe29 	bl	8007224 <malloc>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6270      	str	r0, [r6, #36]	; 0x24
 80075d6:	b928      	cbnz	r0, 80075e4 <__pow5mult+0x40>
 80075d8:	4b1d      	ldr	r3, [pc, #116]	; (8007650 <__pow5mult+0xac>)
 80075da:	481e      	ldr	r0, [pc, #120]	; (8007654 <__pow5mult+0xb0>)
 80075dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075e0:	f000 fc0e 	bl	8007e00 <__assert_func>
 80075e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075e8:	6004      	str	r4, [r0, #0]
 80075ea:	60c4      	str	r4, [r0, #12]
 80075ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075f4:	b94c      	cbnz	r4, 800760a <__pow5mult+0x66>
 80075f6:	f240 2171 	movw	r1, #625	; 0x271
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7ff ff12 	bl	8007424 <__i2b>
 8007600:	2300      	movs	r3, #0
 8007602:	f8c8 0008 	str.w	r0, [r8, #8]
 8007606:	4604      	mov	r4, r0
 8007608:	6003      	str	r3, [r0, #0]
 800760a:	f04f 0900 	mov.w	r9, #0
 800760e:	07eb      	lsls	r3, r5, #31
 8007610:	d50a      	bpl.n	8007628 <__pow5mult+0x84>
 8007612:	4639      	mov	r1, r7
 8007614:	4622      	mov	r2, r4
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff ff1a 	bl	8007450 <__multiply>
 800761c:	4639      	mov	r1, r7
 800761e:	4680      	mov	r8, r0
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff fe47 	bl	80072b4 <_Bfree>
 8007626:	4647      	mov	r7, r8
 8007628:	106d      	asrs	r5, r5, #1
 800762a:	d00b      	beq.n	8007644 <__pow5mult+0xa0>
 800762c:	6820      	ldr	r0, [r4, #0]
 800762e:	b938      	cbnz	r0, 8007640 <__pow5mult+0x9c>
 8007630:	4622      	mov	r2, r4
 8007632:	4621      	mov	r1, r4
 8007634:	4630      	mov	r0, r6
 8007636:	f7ff ff0b 	bl	8007450 <__multiply>
 800763a:	6020      	str	r0, [r4, #0]
 800763c:	f8c0 9000 	str.w	r9, [r0]
 8007640:	4604      	mov	r4, r0
 8007642:	e7e4      	b.n	800760e <__pow5mult+0x6a>
 8007644:	4638      	mov	r0, r7
 8007646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800764a:	bf00      	nop
 800764c:	08008c50 	.word	0x08008c50
 8007650:	08008a81 	.word	0x08008a81
 8007654:	08008b04 	.word	0x08008b04

08007658 <__lshift>:
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	460c      	mov	r4, r1
 800765e:	6849      	ldr	r1, [r1, #4]
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007666:	68a3      	ldr	r3, [r4, #8]
 8007668:	4607      	mov	r7, r0
 800766a:	4691      	mov	r9, r2
 800766c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007670:	f108 0601 	add.w	r6, r8, #1
 8007674:	42b3      	cmp	r3, r6
 8007676:	db0b      	blt.n	8007690 <__lshift+0x38>
 8007678:	4638      	mov	r0, r7
 800767a:	f7ff fddb 	bl	8007234 <_Balloc>
 800767e:	4605      	mov	r5, r0
 8007680:	b948      	cbnz	r0, 8007696 <__lshift+0x3e>
 8007682:	4602      	mov	r2, r0
 8007684:	4b2a      	ldr	r3, [pc, #168]	; (8007730 <__lshift+0xd8>)
 8007686:	482b      	ldr	r0, [pc, #172]	; (8007734 <__lshift+0xdc>)
 8007688:	f240 11d9 	movw	r1, #473	; 0x1d9
 800768c:	f000 fbb8 	bl	8007e00 <__assert_func>
 8007690:	3101      	adds	r1, #1
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	e7ee      	b.n	8007674 <__lshift+0x1c>
 8007696:	2300      	movs	r3, #0
 8007698:	f100 0114 	add.w	r1, r0, #20
 800769c:	f100 0210 	add.w	r2, r0, #16
 80076a0:	4618      	mov	r0, r3
 80076a2:	4553      	cmp	r3, sl
 80076a4:	db37      	blt.n	8007716 <__lshift+0xbe>
 80076a6:	6920      	ldr	r0, [r4, #16]
 80076a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076ac:	f104 0314 	add.w	r3, r4, #20
 80076b0:	f019 091f 	ands.w	r9, r9, #31
 80076b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076bc:	d02f      	beq.n	800771e <__lshift+0xc6>
 80076be:	f1c9 0e20 	rsb	lr, r9, #32
 80076c2:	468a      	mov	sl, r1
 80076c4:	f04f 0c00 	mov.w	ip, #0
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	fa02 f209 	lsl.w	r2, r2, r9
 80076ce:	ea42 020c 	orr.w	r2, r2, ip
 80076d2:	f84a 2b04 	str.w	r2, [sl], #4
 80076d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076da:	4298      	cmp	r0, r3
 80076dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076e0:	d8f2      	bhi.n	80076c8 <__lshift+0x70>
 80076e2:	1b03      	subs	r3, r0, r4
 80076e4:	3b15      	subs	r3, #21
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	3304      	adds	r3, #4
 80076ec:	f104 0215 	add.w	r2, r4, #21
 80076f0:	4290      	cmp	r0, r2
 80076f2:	bf38      	it	cc
 80076f4:	2304      	movcc	r3, #4
 80076f6:	f841 c003 	str.w	ip, [r1, r3]
 80076fa:	f1bc 0f00 	cmp.w	ip, #0
 80076fe:	d001      	beq.n	8007704 <__lshift+0xac>
 8007700:	f108 0602 	add.w	r6, r8, #2
 8007704:	3e01      	subs	r6, #1
 8007706:	4638      	mov	r0, r7
 8007708:	612e      	str	r6, [r5, #16]
 800770a:	4621      	mov	r1, r4
 800770c:	f7ff fdd2 	bl	80072b4 <_Bfree>
 8007710:	4628      	mov	r0, r5
 8007712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007716:	f842 0f04 	str.w	r0, [r2, #4]!
 800771a:	3301      	adds	r3, #1
 800771c:	e7c1      	b.n	80076a2 <__lshift+0x4a>
 800771e:	3904      	subs	r1, #4
 8007720:	f853 2b04 	ldr.w	r2, [r3], #4
 8007724:	f841 2f04 	str.w	r2, [r1, #4]!
 8007728:	4298      	cmp	r0, r3
 800772a:	d8f9      	bhi.n	8007720 <__lshift+0xc8>
 800772c:	e7ea      	b.n	8007704 <__lshift+0xac>
 800772e:	bf00      	nop
 8007730:	08008af3 	.word	0x08008af3
 8007734:	08008b04 	.word	0x08008b04

08007738 <__mcmp>:
 8007738:	b530      	push	{r4, r5, lr}
 800773a:	6902      	ldr	r2, [r0, #16]
 800773c:	690c      	ldr	r4, [r1, #16]
 800773e:	1b12      	subs	r2, r2, r4
 8007740:	d10e      	bne.n	8007760 <__mcmp+0x28>
 8007742:	f100 0314 	add.w	r3, r0, #20
 8007746:	3114      	adds	r1, #20
 8007748:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800774c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007750:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007754:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007758:	42a5      	cmp	r5, r4
 800775a:	d003      	beq.n	8007764 <__mcmp+0x2c>
 800775c:	d305      	bcc.n	800776a <__mcmp+0x32>
 800775e:	2201      	movs	r2, #1
 8007760:	4610      	mov	r0, r2
 8007762:	bd30      	pop	{r4, r5, pc}
 8007764:	4283      	cmp	r3, r0
 8007766:	d3f3      	bcc.n	8007750 <__mcmp+0x18>
 8007768:	e7fa      	b.n	8007760 <__mcmp+0x28>
 800776a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800776e:	e7f7      	b.n	8007760 <__mcmp+0x28>

08007770 <__mdiff>:
 8007770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	460c      	mov	r4, r1
 8007776:	4606      	mov	r6, r0
 8007778:	4611      	mov	r1, r2
 800777a:	4620      	mov	r0, r4
 800777c:	4690      	mov	r8, r2
 800777e:	f7ff ffdb 	bl	8007738 <__mcmp>
 8007782:	1e05      	subs	r5, r0, #0
 8007784:	d110      	bne.n	80077a8 <__mdiff+0x38>
 8007786:	4629      	mov	r1, r5
 8007788:	4630      	mov	r0, r6
 800778a:	f7ff fd53 	bl	8007234 <_Balloc>
 800778e:	b930      	cbnz	r0, 800779e <__mdiff+0x2e>
 8007790:	4b3a      	ldr	r3, [pc, #232]	; (800787c <__mdiff+0x10c>)
 8007792:	4602      	mov	r2, r0
 8007794:	f240 2132 	movw	r1, #562	; 0x232
 8007798:	4839      	ldr	r0, [pc, #228]	; (8007880 <__mdiff+0x110>)
 800779a:	f000 fb31 	bl	8007e00 <__assert_func>
 800779e:	2301      	movs	r3, #1
 80077a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a8:	bfa4      	itt	ge
 80077aa:	4643      	movge	r3, r8
 80077ac:	46a0      	movge	r8, r4
 80077ae:	4630      	mov	r0, r6
 80077b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077b4:	bfa6      	itte	ge
 80077b6:	461c      	movge	r4, r3
 80077b8:	2500      	movge	r5, #0
 80077ba:	2501      	movlt	r5, #1
 80077bc:	f7ff fd3a 	bl	8007234 <_Balloc>
 80077c0:	b920      	cbnz	r0, 80077cc <__mdiff+0x5c>
 80077c2:	4b2e      	ldr	r3, [pc, #184]	; (800787c <__mdiff+0x10c>)
 80077c4:	4602      	mov	r2, r0
 80077c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077ca:	e7e5      	b.n	8007798 <__mdiff+0x28>
 80077cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80077d0:	6926      	ldr	r6, [r4, #16]
 80077d2:	60c5      	str	r5, [r0, #12]
 80077d4:	f104 0914 	add.w	r9, r4, #20
 80077d8:	f108 0514 	add.w	r5, r8, #20
 80077dc:	f100 0e14 	add.w	lr, r0, #20
 80077e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80077e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077e8:	f108 0210 	add.w	r2, r8, #16
 80077ec:	46f2      	mov	sl, lr
 80077ee:	2100      	movs	r1, #0
 80077f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80077f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80077f8:	fa1f f883 	uxth.w	r8, r3
 80077fc:	fa11 f18b 	uxtah	r1, r1, fp
 8007800:	0c1b      	lsrs	r3, r3, #16
 8007802:	eba1 0808 	sub.w	r8, r1, r8
 8007806:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800780a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800780e:	fa1f f888 	uxth.w	r8, r8
 8007812:	1419      	asrs	r1, r3, #16
 8007814:	454e      	cmp	r6, r9
 8007816:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800781a:	f84a 3b04 	str.w	r3, [sl], #4
 800781e:	d8e7      	bhi.n	80077f0 <__mdiff+0x80>
 8007820:	1b33      	subs	r3, r6, r4
 8007822:	3b15      	subs	r3, #21
 8007824:	f023 0303 	bic.w	r3, r3, #3
 8007828:	3304      	adds	r3, #4
 800782a:	3415      	adds	r4, #21
 800782c:	42a6      	cmp	r6, r4
 800782e:	bf38      	it	cc
 8007830:	2304      	movcc	r3, #4
 8007832:	441d      	add	r5, r3
 8007834:	4473      	add	r3, lr
 8007836:	469e      	mov	lr, r3
 8007838:	462e      	mov	r6, r5
 800783a:	4566      	cmp	r6, ip
 800783c:	d30e      	bcc.n	800785c <__mdiff+0xec>
 800783e:	f10c 0203 	add.w	r2, ip, #3
 8007842:	1b52      	subs	r2, r2, r5
 8007844:	f022 0203 	bic.w	r2, r2, #3
 8007848:	3d03      	subs	r5, #3
 800784a:	45ac      	cmp	ip, r5
 800784c:	bf38      	it	cc
 800784e:	2200      	movcc	r2, #0
 8007850:	441a      	add	r2, r3
 8007852:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007856:	b17b      	cbz	r3, 8007878 <__mdiff+0x108>
 8007858:	6107      	str	r7, [r0, #16]
 800785a:	e7a3      	b.n	80077a4 <__mdiff+0x34>
 800785c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007860:	fa11 f288 	uxtah	r2, r1, r8
 8007864:	1414      	asrs	r4, r2, #16
 8007866:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800786a:	b292      	uxth	r2, r2
 800786c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007870:	f84e 2b04 	str.w	r2, [lr], #4
 8007874:	1421      	asrs	r1, r4, #16
 8007876:	e7e0      	b.n	800783a <__mdiff+0xca>
 8007878:	3f01      	subs	r7, #1
 800787a:	e7ea      	b.n	8007852 <__mdiff+0xe2>
 800787c:	08008af3 	.word	0x08008af3
 8007880:	08008b04 	.word	0x08008b04

08007884 <__d2b>:
 8007884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007888:	4689      	mov	r9, r1
 800788a:	2101      	movs	r1, #1
 800788c:	ec57 6b10 	vmov	r6, r7, d0
 8007890:	4690      	mov	r8, r2
 8007892:	f7ff fccf 	bl	8007234 <_Balloc>
 8007896:	4604      	mov	r4, r0
 8007898:	b930      	cbnz	r0, 80078a8 <__d2b+0x24>
 800789a:	4602      	mov	r2, r0
 800789c:	4b25      	ldr	r3, [pc, #148]	; (8007934 <__d2b+0xb0>)
 800789e:	4826      	ldr	r0, [pc, #152]	; (8007938 <__d2b+0xb4>)
 80078a0:	f240 310a 	movw	r1, #778	; 0x30a
 80078a4:	f000 faac 	bl	8007e00 <__assert_func>
 80078a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80078ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078b0:	bb35      	cbnz	r5, 8007900 <__d2b+0x7c>
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	d028      	beq.n	800790a <__d2b+0x86>
 80078b8:	4668      	mov	r0, sp
 80078ba:	9600      	str	r6, [sp, #0]
 80078bc:	f7ff fd82 	bl	80073c4 <__lo0bits>
 80078c0:	9900      	ldr	r1, [sp, #0]
 80078c2:	b300      	cbz	r0, 8007906 <__d2b+0x82>
 80078c4:	9a01      	ldr	r2, [sp, #4]
 80078c6:	f1c0 0320 	rsb	r3, r0, #32
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	430b      	orrs	r3, r1
 80078d0:	40c2      	lsrs	r2, r0
 80078d2:	6163      	str	r3, [r4, #20]
 80078d4:	9201      	str	r2, [sp, #4]
 80078d6:	9b01      	ldr	r3, [sp, #4]
 80078d8:	61a3      	str	r3, [r4, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	bf14      	ite	ne
 80078de:	2202      	movne	r2, #2
 80078e0:	2201      	moveq	r2, #1
 80078e2:	6122      	str	r2, [r4, #16]
 80078e4:	b1d5      	cbz	r5, 800791c <__d2b+0x98>
 80078e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078ea:	4405      	add	r5, r0
 80078ec:	f8c9 5000 	str.w	r5, [r9]
 80078f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078f4:	f8c8 0000 	str.w	r0, [r8]
 80078f8:	4620      	mov	r0, r4
 80078fa:	b003      	add	sp, #12
 80078fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007904:	e7d5      	b.n	80078b2 <__d2b+0x2e>
 8007906:	6161      	str	r1, [r4, #20]
 8007908:	e7e5      	b.n	80078d6 <__d2b+0x52>
 800790a:	a801      	add	r0, sp, #4
 800790c:	f7ff fd5a 	bl	80073c4 <__lo0bits>
 8007910:	9b01      	ldr	r3, [sp, #4]
 8007912:	6163      	str	r3, [r4, #20]
 8007914:	2201      	movs	r2, #1
 8007916:	6122      	str	r2, [r4, #16]
 8007918:	3020      	adds	r0, #32
 800791a:	e7e3      	b.n	80078e4 <__d2b+0x60>
 800791c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007920:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007924:	f8c9 0000 	str.w	r0, [r9]
 8007928:	6918      	ldr	r0, [r3, #16]
 800792a:	f7ff fd2b 	bl	8007384 <__hi0bits>
 800792e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007932:	e7df      	b.n	80078f4 <__d2b+0x70>
 8007934:	08008af3 	.word	0x08008af3
 8007938:	08008b04 	.word	0x08008b04

0800793c <_calloc_r>:
 800793c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800793e:	fba1 2402 	umull	r2, r4, r1, r2
 8007942:	b94c      	cbnz	r4, 8007958 <_calloc_r+0x1c>
 8007944:	4611      	mov	r1, r2
 8007946:	9201      	str	r2, [sp, #4]
 8007948:	f000 f87a 	bl	8007a40 <_malloc_r>
 800794c:	9a01      	ldr	r2, [sp, #4]
 800794e:	4605      	mov	r5, r0
 8007950:	b930      	cbnz	r0, 8007960 <_calloc_r+0x24>
 8007952:	4628      	mov	r0, r5
 8007954:	b003      	add	sp, #12
 8007956:	bd30      	pop	{r4, r5, pc}
 8007958:	220c      	movs	r2, #12
 800795a:	6002      	str	r2, [r0, #0]
 800795c:	2500      	movs	r5, #0
 800795e:	e7f8      	b.n	8007952 <_calloc_r+0x16>
 8007960:	4621      	mov	r1, r4
 8007962:	f7fe f94f 	bl	8005c04 <memset>
 8007966:	e7f4      	b.n	8007952 <_calloc_r+0x16>

08007968 <_free_r>:
 8007968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800796a:	2900      	cmp	r1, #0
 800796c:	d044      	beq.n	80079f8 <_free_r+0x90>
 800796e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007972:	9001      	str	r0, [sp, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f1a1 0404 	sub.w	r4, r1, #4
 800797a:	bfb8      	it	lt
 800797c:	18e4      	addlt	r4, r4, r3
 800797e:	f000 fa9b 	bl	8007eb8 <__malloc_lock>
 8007982:	4a1e      	ldr	r2, [pc, #120]	; (80079fc <_free_r+0x94>)
 8007984:	9801      	ldr	r0, [sp, #4]
 8007986:	6813      	ldr	r3, [r2, #0]
 8007988:	b933      	cbnz	r3, 8007998 <_free_r+0x30>
 800798a:	6063      	str	r3, [r4, #4]
 800798c:	6014      	str	r4, [r2, #0]
 800798e:	b003      	add	sp, #12
 8007990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007994:	f000 ba96 	b.w	8007ec4 <__malloc_unlock>
 8007998:	42a3      	cmp	r3, r4
 800799a:	d908      	bls.n	80079ae <_free_r+0x46>
 800799c:	6825      	ldr	r5, [r4, #0]
 800799e:	1961      	adds	r1, r4, r5
 80079a0:	428b      	cmp	r3, r1
 80079a2:	bf01      	itttt	eq
 80079a4:	6819      	ldreq	r1, [r3, #0]
 80079a6:	685b      	ldreq	r3, [r3, #4]
 80079a8:	1949      	addeq	r1, r1, r5
 80079aa:	6021      	streq	r1, [r4, #0]
 80079ac:	e7ed      	b.n	800798a <_free_r+0x22>
 80079ae:	461a      	mov	r2, r3
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	b10b      	cbz	r3, 80079b8 <_free_r+0x50>
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	d9fa      	bls.n	80079ae <_free_r+0x46>
 80079b8:	6811      	ldr	r1, [r2, #0]
 80079ba:	1855      	adds	r5, r2, r1
 80079bc:	42a5      	cmp	r5, r4
 80079be:	d10b      	bne.n	80079d8 <_free_r+0x70>
 80079c0:	6824      	ldr	r4, [r4, #0]
 80079c2:	4421      	add	r1, r4
 80079c4:	1854      	adds	r4, r2, r1
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	6011      	str	r1, [r2, #0]
 80079ca:	d1e0      	bne.n	800798e <_free_r+0x26>
 80079cc:	681c      	ldr	r4, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	6053      	str	r3, [r2, #4]
 80079d2:	4421      	add	r1, r4
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	e7da      	b.n	800798e <_free_r+0x26>
 80079d8:	d902      	bls.n	80079e0 <_free_r+0x78>
 80079da:	230c      	movs	r3, #12
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	e7d6      	b.n	800798e <_free_r+0x26>
 80079e0:	6825      	ldr	r5, [r4, #0]
 80079e2:	1961      	adds	r1, r4, r5
 80079e4:	428b      	cmp	r3, r1
 80079e6:	bf04      	itt	eq
 80079e8:	6819      	ldreq	r1, [r3, #0]
 80079ea:	685b      	ldreq	r3, [r3, #4]
 80079ec:	6063      	str	r3, [r4, #4]
 80079ee:	bf04      	itt	eq
 80079f0:	1949      	addeq	r1, r1, r5
 80079f2:	6021      	streq	r1, [r4, #0]
 80079f4:	6054      	str	r4, [r2, #4]
 80079f6:	e7ca      	b.n	800798e <_free_r+0x26>
 80079f8:	b003      	add	sp, #12
 80079fa:	bd30      	pop	{r4, r5, pc}
 80079fc:	200003d4 	.word	0x200003d4

08007a00 <sbrk_aligned>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	4e0e      	ldr	r6, [pc, #56]	; (8007a3c <sbrk_aligned+0x3c>)
 8007a04:	460c      	mov	r4, r1
 8007a06:	6831      	ldr	r1, [r6, #0]
 8007a08:	4605      	mov	r5, r0
 8007a0a:	b911      	cbnz	r1, 8007a12 <sbrk_aligned+0x12>
 8007a0c:	f000 f9e8 	bl	8007de0 <_sbrk_r>
 8007a10:	6030      	str	r0, [r6, #0]
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 f9e3 	bl	8007de0 <_sbrk_r>
 8007a1a:	1c43      	adds	r3, r0, #1
 8007a1c:	d00a      	beq.n	8007a34 <sbrk_aligned+0x34>
 8007a1e:	1cc4      	adds	r4, r0, #3
 8007a20:	f024 0403 	bic.w	r4, r4, #3
 8007a24:	42a0      	cmp	r0, r4
 8007a26:	d007      	beq.n	8007a38 <sbrk_aligned+0x38>
 8007a28:	1a21      	subs	r1, r4, r0
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f000 f9d8 	bl	8007de0 <_sbrk_r>
 8007a30:	3001      	adds	r0, #1
 8007a32:	d101      	bne.n	8007a38 <sbrk_aligned+0x38>
 8007a34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a38:	4620      	mov	r0, r4
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	200003d8 	.word	0x200003d8

08007a40 <_malloc_r>:
 8007a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a44:	1ccd      	adds	r5, r1, #3
 8007a46:	f025 0503 	bic.w	r5, r5, #3
 8007a4a:	3508      	adds	r5, #8
 8007a4c:	2d0c      	cmp	r5, #12
 8007a4e:	bf38      	it	cc
 8007a50:	250c      	movcc	r5, #12
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	4607      	mov	r7, r0
 8007a56:	db01      	blt.n	8007a5c <_malloc_r+0x1c>
 8007a58:	42a9      	cmp	r1, r5
 8007a5a:	d905      	bls.n	8007a68 <_malloc_r+0x28>
 8007a5c:	230c      	movs	r3, #12
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	2600      	movs	r6, #0
 8007a62:	4630      	mov	r0, r6
 8007a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a68:	4e2e      	ldr	r6, [pc, #184]	; (8007b24 <_malloc_r+0xe4>)
 8007a6a:	f000 fa25 	bl	8007eb8 <__malloc_lock>
 8007a6e:	6833      	ldr	r3, [r6, #0]
 8007a70:	461c      	mov	r4, r3
 8007a72:	bb34      	cbnz	r4, 8007ac2 <_malloc_r+0x82>
 8007a74:	4629      	mov	r1, r5
 8007a76:	4638      	mov	r0, r7
 8007a78:	f7ff ffc2 	bl	8007a00 <sbrk_aligned>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	4604      	mov	r4, r0
 8007a80:	d14d      	bne.n	8007b1e <_malloc_r+0xde>
 8007a82:	6834      	ldr	r4, [r6, #0]
 8007a84:	4626      	mov	r6, r4
 8007a86:	2e00      	cmp	r6, #0
 8007a88:	d140      	bne.n	8007b0c <_malloc_r+0xcc>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4638      	mov	r0, r7
 8007a90:	eb04 0803 	add.w	r8, r4, r3
 8007a94:	f000 f9a4 	bl	8007de0 <_sbrk_r>
 8007a98:	4580      	cmp	r8, r0
 8007a9a:	d13a      	bne.n	8007b12 <_malloc_r+0xd2>
 8007a9c:	6821      	ldr	r1, [r4, #0]
 8007a9e:	3503      	adds	r5, #3
 8007aa0:	1a6d      	subs	r5, r5, r1
 8007aa2:	f025 0503 	bic.w	r5, r5, #3
 8007aa6:	3508      	adds	r5, #8
 8007aa8:	2d0c      	cmp	r5, #12
 8007aaa:	bf38      	it	cc
 8007aac:	250c      	movcc	r5, #12
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7ff ffa5 	bl	8007a00 <sbrk_aligned>
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d02b      	beq.n	8007b12 <_malloc_r+0xd2>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	442b      	add	r3, r5
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	e00e      	b.n	8007ae0 <_malloc_r+0xa0>
 8007ac2:	6822      	ldr	r2, [r4, #0]
 8007ac4:	1b52      	subs	r2, r2, r5
 8007ac6:	d41e      	bmi.n	8007b06 <_malloc_r+0xc6>
 8007ac8:	2a0b      	cmp	r2, #11
 8007aca:	d916      	bls.n	8007afa <_malloc_r+0xba>
 8007acc:	1961      	adds	r1, r4, r5
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	6025      	str	r5, [r4, #0]
 8007ad2:	bf18      	it	ne
 8007ad4:	6059      	strne	r1, [r3, #4]
 8007ad6:	6863      	ldr	r3, [r4, #4]
 8007ad8:	bf08      	it	eq
 8007ada:	6031      	streq	r1, [r6, #0]
 8007adc:	5162      	str	r2, [r4, r5]
 8007ade:	604b      	str	r3, [r1, #4]
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f104 060b 	add.w	r6, r4, #11
 8007ae6:	f000 f9ed 	bl	8007ec4 <__malloc_unlock>
 8007aea:	f026 0607 	bic.w	r6, r6, #7
 8007aee:	1d23      	adds	r3, r4, #4
 8007af0:	1af2      	subs	r2, r6, r3
 8007af2:	d0b6      	beq.n	8007a62 <_malloc_r+0x22>
 8007af4:	1b9b      	subs	r3, r3, r6
 8007af6:	50a3      	str	r3, [r4, r2]
 8007af8:	e7b3      	b.n	8007a62 <_malloc_r+0x22>
 8007afa:	6862      	ldr	r2, [r4, #4]
 8007afc:	42a3      	cmp	r3, r4
 8007afe:	bf0c      	ite	eq
 8007b00:	6032      	streq	r2, [r6, #0]
 8007b02:	605a      	strne	r2, [r3, #4]
 8007b04:	e7ec      	b.n	8007ae0 <_malloc_r+0xa0>
 8007b06:	4623      	mov	r3, r4
 8007b08:	6864      	ldr	r4, [r4, #4]
 8007b0a:	e7b2      	b.n	8007a72 <_malloc_r+0x32>
 8007b0c:	4634      	mov	r4, r6
 8007b0e:	6876      	ldr	r6, [r6, #4]
 8007b10:	e7b9      	b.n	8007a86 <_malloc_r+0x46>
 8007b12:	230c      	movs	r3, #12
 8007b14:	603b      	str	r3, [r7, #0]
 8007b16:	4638      	mov	r0, r7
 8007b18:	f000 f9d4 	bl	8007ec4 <__malloc_unlock>
 8007b1c:	e7a1      	b.n	8007a62 <_malloc_r+0x22>
 8007b1e:	6025      	str	r5, [r4, #0]
 8007b20:	e7de      	b.n	8007ae0 <_malloc_r+0xa0>
 8007b22:	bf00      	nop
 8007b24:	200003d4 	.word	0x200003d4

08007b28 <__ssputs_r>:
 8007b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b2c:	688e      	ldr	r6, [r1, #8]
 8007b2e:	429e      	cmp	r6, r3
 8007b30:	4682      	mov	sl, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4690      	mov	r8, r2
 8007b36:	461f      	mov	r7, r3
 8007b38:	d838      	bhi.n	8007bac <__ssputs_r+0x84>
 8007b3a:	898a      	ldrh	r2, [r1, #12]
 8007b3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b40:	d032      	beq.n	8007ba8 <__ssputs_r+0x80>
 8007b42:	6825      	ldr	r5, [r4, #0]
 8007b44:	6909      	ldr	r1, [r1, #16]
 8007b46:	eba5 0901 	sub.w	r9, r5, r1
 8007b4a:	6965      	ldr	r5, [r4, #20]
 8007b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b54:	3301      	adds	r3, #1
 8007b56:	444b      	add	r3, r9
 8007b58:	106d      	asrs	r5, r5, #1
 8007b5a:	429d      	cmp	r5, r3
 8007b5c:	bf38      	it	cc
 8007b5e:	461d      	movcc	r5, r3
 8007b60:	0553      	lsls	r3, r2, #21
 8007b62:	d531      	bpl.n	8007bc8 <__ssputs_r+0xa0>
 8007b64:	4629      	mov	r1, r5
 8007b66:	f7ff ff6b 	bl	8007a40 <_malloc_r>
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	b950      	cbnz	r0, 8007b84 <__ssputs_r+0x5c>
 8007b6e:	230c      	movs	r3, #12
 8007b70:	f8ca 3000 	str.w	r3, [sl]
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b84:	6921      	ldr	r1, [r4, #16]
 8007b86:	464a      	mov	r2, r9
 8007b88:	f7fe f82e 	bl	8005be8 <memcpy>
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b96:	81a3      	strh	r3, [r4, #12]
 8007b98:	6126      	str	r6, [r4, #16]
 8007b9a:	6165      	str	r5, [r4, #20]
 8007b9c:	444e      	add	r6, r9
 8007b9e:	eba5 0509 	sub.w	r5, r5, r9
 8007ba2:	6026      	str	r6, [r4, #0]
 8007ba4:	60a5      	str	r5, [r4, #8]
 8007ba6:	463e      	mov	r6, r7
 8007ba8:	42be      	cmp	r6, r7
 8007baa:	d900      	bls.n	8007bae <__ssputs_r+0x86>
 8007bac:	463e      	mov	r6, r7
 8007bae:	6820      	ldr	r0, [r4, #0]
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	4641      	mov	r1, r8
 8007bb4:	f000 f966 	bl	8007e84 <memmove>
 8007bb8:	68a3      	ldr	r3, [r4, #8]
 8007bba:	1b9b      	subs	r3, r3, r6
 8007bbc:	60a3      	str	r3, [r4, #8]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	4433      	add	r3, r6
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	e7db      	b.n	8007b80 <__ssputs_r+0x58>
 8007bc8:	462a      	mov	r2, r5
 8007bca:	f000 f981 	bl	8007ed0 <_realloc_r>
 8007bce:	4606      	mov	r6, r0
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d1e1      	bne.n	8007b98 <__ssputs_r+0x70>
 8007bd4:	6921      	ldr	r1, [r4, #16]
 8007bd6:	4650      	mov	r0, sl
 8007bd8:	f7ff fec6 	bl	8007968 <_free_r>
 8007bdc:	e7c7      	b.n	8007b6e <__ssputs_r+0x46>
	...

08007be0 <_svfiprintf_r>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	4698      	mov	r8, r3
 8007be6:	898b      	ldrh	r3, [r1, #12]
 8007be8:	061b      	lsls	r3, r3, #24
 8007bea:	b09d      	sub	sp, #116	; 0x74
 8007bec:	4607      	mov	r7, r0
 8007bee:	460d      	mov	r5, r1
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	d50e      	bpl.n	8007c12 <_svfiprintf_r+0x32>
 8007bf4:	690b      	ldr	r3, [r1, #16]
 8007bf6:	b963      	cbnz	r3, 8007c12 <_svfiprintf_r+0x32>
 8007bf8:	2140      	movs	r1, #64	; 0x40
 8007bfa:	f7ff ff21 	bl	8007a40 <_malloc_r>
 8007bfe:	6028      	str	r0, [r5, #0]
 8007c00:	6128      	str	r0, [r5, #16]
 8007c02:	b920      	cbnz	r0, 8007c0e <_svfiprintf_r+0x2e>
 8007c04:	230c      	movs	r3, #12
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c0c:	e0d1      	b.n	8007db2 <_svfiprintf_r+0x1d2>
 8007c0e:	2340      	movs	r3, #64	; 0x40
 8007c10:	616b      	str	r3, [r5, #20]
 8007c12:	2300      	movs	r3, #0
 8007c14:	9309      	str	r3, [sp, #36]	; 0x24
 8007c16:	2320      	movs	r3, #32
 8007c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c20:	2330      	movs	r3, #48	; 0x30
 8007c22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007dcc <_svfiprintf_r+0x1ec>
 8007c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c2a:	f04f 0901 	mov.w	r9, #1
 8007c2e:	4623      	mov	r3, r4
 8007c30:	469a      	mov	sl, r3
 8007c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c36:	b10a      	cbz	r2, 8007c3c <_svfiprintf_r+0x5c>
 8007c38:	2a25      	cmp	r2, #37	; 0x25
 8007c3a:	d1f9      	bne.n	8007c30 <_svfiprintf_r+0x50>
 8007c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c40:	d00b      	beq.n	8007c5a <_svfiprintf_r+0x7a>
 8007c42:	465b      	mov	r3, fp
 8007c44:	4622      	mov	r2, r4
 8007c46:	4629      	mov	r1, r5
 8007c48:	4638      	mov	r0, r7
 8007c4a:	f7ff ff6d 	bl	8007b28 <__ssputs_r>
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f000 80aa 	beq.w	8007da8 <_svfiprintf_r+0x1c8>
 8007c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c56:	445a      	add	r2, fp
 8007c58:	9209      	str	r2, [sp, #36]	; 0x24
 8007c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 80a2 	beq.w	8007da8 <_svfiprintf_r+0x1c8>
 8007c64:	2300      	movs	r3, #0
 8007c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c6e:	f10a 0a01 	add.w	sl, sl, #1
 8007c72:	9304      	str	r3, [sp, #16]
 8007c74:	9307      	str	r3, [sp, #28]
 8007c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c7c:	4654      	mov	r4, sl
 8007c7e:	2205      	movs	r2, #5
 8007c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c84:	4851      	ldr	r0, [pc, #324]	; (8007dcc <_svfiprintf_r+0x1ec>)
 8007c86:	f7f8 facb 	bl	8000220 <memchr>
 8007c8a:	9a04      	ldr	r2, [sp, #16]
 8007c8c:	b9d8      	cbnz	r0, 8007cc6 <_svfiprintf_r+0xe6>
 8007c8e:	06d0      	lsls	r0, r2, #27
 8007c90:	bf44      	itt	mi
 8007c92:	2320      	movmi	r3, #32
 8007c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c98:	0711      	lsls	r1, r2, #28
 8007c9a:	bf44      	itt	mi
 8007c9c:	232b      	movmi	r3, #43	; 0x2b
 8007c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca8:	d015      	beq.n	8007cd6 <_svfiprintf_r+0xf6>
 8007caa:	9a07      	ldr	r2, [sp, #28]
 8007cac:	4654      	mov	r4, sl
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f04f 0c0a 	mov.w	ip, #10
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cba:	3b30      	subs	r3, #48	; 0x30
 8007cbc:	2b09      	cmp	r3, #9
 8007cbe:	d94e      	bls.n	8007d5e <_svfiprintf_r+0x17e>
 8007cc0:	b1b0      	cbz	r0, 8007cf0 <_svfiprintf_r+0x110>
 8007cc2:	9207      	str	r2, [sp, #28]
 8007cc4:	e014      	b.n	8007cf0 <_svfiprintf_r+0x110>
 8007cc6:	eba0 0308 	sub.w	r3, r0, r8
 8007cca:	fa09 f303 	lsl.w	r3, r9, r3
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	46a2      	mov	sl, r4
 8007cd4:	e7d2      	b.n	8007c7c <_svfiprintf_r+0x9c>
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	1d19      	adds	r1, r3, #4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	9103      	str	r1, [sp, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bfbb      	ittet	lt
 8007ce2:	425b      	neglt	r3, r3
 8007ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce8:	9307      	strge	r3, [sp, #28]
 8007cea:	9307      	strlt	r3, [sp, #28]
 8007cec:	bfb8      	it	lt
 8007cee:	9204      	strlt	r2, [sp, #16]
 8007cf0:	7823      	ldrb	r3, [r4, #0]
 8007cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cf4:	d10c      	bne.n	8007d10 <_svfiprintf_r+0x130>
 8007cf6:	7863      	ldrb	r3, [r4, #1]
 8007cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cfa:	d135      	bne.n	8007d68 <_svfiprintf_r+0x188>
 8007cfc:	9b03      	ldr	r3, [sp, #12]
 8007cfe:	1d1a      	adds	r2, r3, #4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	9203      	str	r2, [sp, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfb8      	it	lt
 8007d08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d0c:	3402      	adds	r4, #2
 8007d0e:	9305      	str	r3, [sp, #20]
 8007d10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ddc <_svfiprintf_r+0x1fc>
 8007d14:	7821      	ldrb	r1, [r4, #0]
 8007d16:	2203      	movs	r2, #3
 8007d18:	4650      	mov	r0, sl
 8007d1a:	f7f8 fa81 	bl	8000220 <memchr>
 8007d1e:	b140      	cbz	r0, 8007d32 <_svfiprintf_r+0x152>
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	eba0 000a 	sub.w	r0, r0, sl
 8007d26:	fa03 f000 	lsl.w	r0, r3, r0
 8007d2a:	9b04      	ldr	r3, [sp, #16]
 8007d2c:	4303      	orrs	r3, r0
 8007d2e:	3401      	adds	r4, #1
 8007d30:	9304      	str	r3, [sp, #16]
 8007d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d36:	4826      	ldr	r0, [pc, #152]	; (8007dd0 <_svfiprintf_r+0x1f0>)
 8007d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d3c:	2206      	movs	r2, #6
 8007d3e:	f7f8 fa6f 	bl	8000220 <memchr>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d038      	beq.n	8007db8 <_svfiprintf_r+0x1d8>
 8007d46:	4b23      	ldr	r3, [pc, #140]	; (8007dd4 <_svfiprintf_r+0x1f4>)
 8007d48:	bb1b      	cbnz	r3, 8007d92 <_svfiprintf_r+0x1b2>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	3307      	adds	r3, #7
 8007d4e:	f023 0307 	bic.w	r3, r3, #7
 8007d52:	3308      	adds	r3, #8
 8007d54:	9303      	str	r3, [sp, #12]
 8007d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d58:	4433      	add	r3, r6
 8007d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5c:	e767      	b.n	8007c2e <_svfiprintf_r+0x4e>
 8007d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d62:	460c      	mov	r4, r1
 8007d64:	2001      	movs	r0, #1
 8007d66:	e7a5      	b.n	8007cb4 <_svfiprintf_r+0xd4>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	3401      	adds	r4, #1
 8007d6c:	9305      	str	r3, [sp, #20]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f04f 0c0a 	mov.w	ip, #10
 8007d74:	4620      	mov	r0, r4
 8007d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d7a:	3a30      	subs	r2, #48	; 0x30
 8007d7c:	2a09      	cmp	r2, #9
 8007d7e:	d903      	bls.n	8007d88 <_svfiprintf_r+0x1a8>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0c5      	beq.n	8007d10 <_svfiprintf_r+0x130>
 8007d84:	9105      	str	r1, [sp, #20]
 8007d86:	e7c3      	b.n	8007d10 <_svfiprintf_r+0x130>
 8007d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e7f0      	b.n	8007d74 <_svfiprintf_r+0x194>
 8007d92:	ab03      	add	r3, sp, #12
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	462a      	mov	r2, r5
 8007d98:	4b0f      	ldr	r3, [pc, #60]	; (8007dd8 <_svfiprintf_r+0x1f8>)
 8007d9a:	a904      	add	r1, sp, #16
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f7fd ffd9 	bl	8005d54 <_printf_float>
 8007da2:	1c42      	adds	r2, r0, #1
 8007da4:	4606      	mov	r6, r0
 8007da6:	d1d6      	bne.n	8007d56 <_svfiprintf_r+0x176>
 8007da8:	89ab      	ldrh	r3, [r5, #12]
 8007daa:	065b      	lsls	r3, r3, #25
 8007dac:	f53f af2c 	bmi.w	8007c08 <_svfiprintf_r+0x28>
 8007db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007db2:	b01d      	add	sp, #116	; 0x74
 8007db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db8:	ab03      	add	r3, sp, #12
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <_svfiprintf_r+0x1f8>)
 8007dc0:	a904      	add	r1, sp, #16
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	f7fe fa6a 	bl	800629c <_printf_i>
 8007dc8:	e7eb      	b.n	8007da2 <_svfiprintf_r+0x1c2>
 8007dca:	bf00      	nop
 8007dcc:	08008c5c 	.word	0x08008c5c
 8007dd0:	08008c66 	.word	0x08008c66
 8007dd4:	08005d55 	.word	0x08005d55
 8007dd8:	08007b29 	.word	0x08007b29
 8007ddc:	08008c62 	.word	0x08008c62

08007de0 <_sbrk_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4d06      	ldr	r5, [pc, #24]	; (8007dfc <_sbrk_r+0x1c>)
 8007de4:	2300      	movs	r3, #0
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7fa f83c 	bl	8001e68 <_sbrk>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_sbrk_r+0x1a>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_sbrk_r+0x1a>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	200003dc 	.word	0x200003dc

08007e00 <__assert_func>:
 8007e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e02:	4614      	mov	r4, r2
 8007e04:	461a      	mov	r2, r3
 8007e06:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <__assert_func+0x2c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	68d8      	ldr	r0, [r3, #12]
 8007e0e:	b14c      	cbz	r4, 8007e24 <__assert_func+0x24>
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <__assert_func+0x30>)
 8007e12:	9100      	str	r1, [sp, #0]
 8007e14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e18:	4906      	ldr	r1, [pc, #24]	; (8007e34 <__assert_func+0x34>)
 8007e1a:	462b      	mov	r3, r5
 8007e1c:	f000 f80e 	bl	8007e3c <fiprintf>
 8007e20:	f000 faac 	bl	800837c <abort>
 8007e24:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <__assert_func+0x38>)
 8007e26:	461c      	mov	r4, r3
 8007e28:	e7f3      	b.n	8007e12 <__assert_func+0x12>
 8007e2a:	bf00      	nop
 8007e2c:	2000000c 	.word	0x2000000c
 8007e30:	08008c6d 	.word	0x08008c6d
 8007e34:	08008c7a 	.word	0x08008c7a
 8007e38:	08008ca8 	.word	0x08008ca8

08007e3c <fiprintf>:
 8007e3c:	b40e      	push	{r1, r2, r3}
 8007e3e:	b503      	push	{r0, r1, lr}
 8007e40:	4601      	mov	r1, r0
 8007e42:	ab03      	add	r3, sp, #12
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <fiprintf+0x20>)
 8007e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	f000 f897 	bl	8007f80 <_vfiprintf_r>
 8007e52:	b002      	add	sp, #8
 8007e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e58:	b003      	add	sp, #12
 8007e5a:	4770      	bx	lr
 8007e5c:	2000000c 	.word	0x2000000c

08007e60 <__ascii_mbtowc>:
 8007e60:	b082      	sub	sp, #8
 8007e62:	b901      	cbnz	r1, 8007e66 <__ascii_mbtowc+0x6>
 8007e64:	a901      	add	r1, sp, #4
 8007e66:	b142      	cbz	r2, 8007e7a <__ascii_mbtowc+0x1a>
 8007e68:	b14b      	cbz	r3, 8007e7e <__ascii_mbtowc+0x1e>
 8007e6a:	7813      	ldrb	r3, [r2, #0]
 8007e6c:	600b      	str	r3, [r1, #0]
 8007e6e:	7812      	ldrb	r2, [r2, #0]
 8007e70:	1e10      	subs	r0, r2, #0
 8007e72:	bf18      	it	ne
 8007e74:	2001      	movne	r0, #1
 8007e76:	b002      	add	sp, #8
 8007e78:	4770      	bx	lr
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	e7fb      	b.n	8007e76 <__ascii_mbtowc+0x16>
 8007e7e:	f06f 0001 	mvn.w	r0, #1
 8007e82:	e7f8      	b.n	8007e76 <__ascii_mbtowc+0x16>

08007e84 <memmove>:
 8007e84:	4288      	cmp	r0, r1
 8007e86:	b510      	push	{r4, lr}
 8007e88:	eb01 0402 	add.w	r4, r1, r2
 8007e8c:	d902      	bls.n	8007e94 <memmove+0x10>
 8007e8e:	4284      	cmp	r4, r0
 8007e90:	4623      	mov	r3, r4
 8007e92:	d807      	bhi.n	8007ea4 <memmove+0x20>
 8007e94:	1e43      	subs	r3, r0, #1
 8007e96:	42a1      	cmp	r1, r4
 8007e98:	d008      	beq.n	8007eac <memmove+0x28>
 8007e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ea2:	e7f8      	b.n	8007e96 <memmove+0x12>
 8007ea4:	4402      	add	r2, r0
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	428a      	cmp	r2, r1
 8007eaa:	d100      	bne.n	8007eae <memmove+0x2a>
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eb6:	e7f7      	b.n	8007ea8 <memmove+0x24>

08007eb8 <__malloc_lock>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	; (8007ec0 <__malloc_lock+0x8>)
 8007eba:	f000 bc1f 	b.w	80086fc <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	200003e0 	.word	0x200003e0

08007ec4 <__malloc_unlock>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	; (8007ecc <__malloc_unlock+0x8>)
 8007ec6:	f000 bc1a 	b.w	80086fe <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	200003e0 	.word	0x200003e0

08007ed0 <_realloc_r>:
 8007ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	4614      	mov	r4, r2
 8007ed8:	460e      	mov	r6, r1
 8007eda:	b921      	cbnz	r1, 8007ee6 <_realloc_r+0x16>
 8007edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	f7ff bdad 	b.w	8007a40 <_malloc_r>
 8007ee6:	b92a      	cbnz	r2, 8007ef4 <_realloc_r+0x24>
 8007ee8:	f7ff fd3e 	bl	8007968 <_free_r>
 8007eec:	4625      	mov	r5, r4
 8007eee:	4628      	mov	r0, r5
 8007ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef4:	f000 fc6a 	bl	80087cc <_malloc_usable_size_r>
 8007ef8:	4284      	cmp	r4, r0
 8007efa:	4607      	mov	r7, r0
 8007efc:	d802      	bhi.n	8007f04 <_realloc_r+0x34>
 8007efe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f02:	d812      	bhi.n	8007f2a <_realloc_r+0x5a>
 8007f04:	4621      	mov	r1, r4
 8007f06:	4640      	mov	r0, r8
 8007f08:	f7ff fd9a 	bl	8007a40 <_malloc_r>
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d0ed      	beq.n	8007eee <_realloc_r+0x1e>
 8007f12:	42bc      	cmp	r4, r7
 8007f14:	4622      	mov	r2, r4
 8007f16:	4631      	mov	r1, r6
 8007f18:	bf28      	it	cs
 8007f1a:	463a      	movcs	r2, r7
 8007f1c:	f7fd fe64 	bl	8005be8 <memcpy>
 8007f20:	4631      	mov	r1, r6
 8007f22:	4640      	mov	r0, r8
 8007f24:	f7ff fd20 	bl	8007968 <_free_r>
 8007f28:	e7e1      	b.n	8007eee <_realloc_r+0x1e>
 8007f2a:	4635      	mov	r5, r6
 8007f2c:	e7df      	b.n	8007eee <_realloc_r+0x1e>

08007f2e <__sfputc_r>:
 8007f2e:	6893      	ldr	r3, [r2, #8]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	b410      	push	{r4}
 8007f36:	6093      	str	r3, [r2, #8]
 8007f38:	da08      	bge.n	8007f4c <__sfputc_r+0x1e>
 8007f3a:	6994      	ldr	r4, [r2, #24]
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	db01      	blt.n	8007f44 <__sfputc_r+0x16>
 8007f40:	290a      	cmp	r1, #10
 8007f42:	d103      	bne.n	8007f4c <__sfputc_r+0x1e>
 8007f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f48:	f000 b94a 	b.w	80081e0 <__swbuf_r>
 8007f4c:	6813      	ldr	r3, [r2, #0]
 8007f4e:	1c58      	adds	r0, r3, #1
 8007f50:	6010      	str	r0, [r2, #0]
 8007f52:	7019      	strb	r1, [r3, #0]
 8007f54:	4608      	mov	r0, r1
 8007f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <__sfputs_r>:
 8007f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5e:	4606      	mov	r6, r0
 8007f60:	460f      	mov	r7, r1
 8007f62:	4614      	mov	r4, r2
 8007f64:	18d5      	adds	r5, r2, r3
 8007f66:	42ac      	cmp	r4, r5
 8007f68:	d101      	bne.n	8007f6e <__sfputs_r+0x12>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	e007      	b.n	8007f7e <__sfputs_r+0x22>
 8007f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f72:	463a      	mov	r2, r7
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7ff ffda 	bl	8007f2e <__sfputc_r>
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	d1f3      	bne.n	8007f66 <__sfputs_r+0xa>
 8007f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f80 <_vfiprintf_r>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	460d      	mov	r5, r1
 8007f86:	b09d      	sub	sp, #116	; 0x74
 8007f88:	4614      	mov	r4, r2
 8007f8a:	4698      	mov	r8, r3
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	b118      	cbz	r0, 8007f98 <_vfiprintf_r+0x18>
 8007f90:	6983      	ldr	r3, [r0, #24]
 8007f92:	b90b      	cbnz	r3, 8007f98 <_vfiprintf_r+0x18>
 8007f94:	f000 fb14 	bl	80085c0 <__sinit>
 8007f98:	4b89      	ldr	r3, [pc, #548]	; (80081c0 <_vfiprintf_r+0x240>)
 8007f9a:	429d      	cmp	r5, r3
 8007f9c:	d11b      	bne.n	8007fd6 <_vfiprintf_r+0x56>
 8007f9e:	6875      	ldr	r5, [r6, #4]
 8007fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fa2:	07d9      	lsls	r1, r3, #31
 8007fa4:	d405      	bmi.n	8007fb2 <_vfiprintf_r+0x32>
 8007fa6:	89ab      	ldrh	r3, [r5, #12]
 8007fa8:	059a      	lsls	r2, r3, #22
 8007faa:	d402      	bmi.n	8007fb2 <_vfiprintf_r+0x32>
 8007fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fae:	f000 fba5 	bl	80086fc <__retarget_lock_acquire_recursive>
 8007fb2:	89ab      	ldrh	r3, [r5, #12]
 8007fb4:	071b      	lsls	r3, r3, #28
 8007fb6:	d501      	bpl.n	8007fbc <_vfiprintf_r+0x3c>
 8007fb8:	692b      	ldr	r3, [r5, #16]
 8007fba:	b9eb      	cbnz	r3, 8007ff8 <_vfiprintf_r+0x78>
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f000 f96e 	bl	80082a0 <__swsetup_r>
 8007fc4:	b1c0      	cbz	r0, 8007ff8 <_vfiprintf_r+0x78>
 8007fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc8:	07dc      	lsls	r4, r3, #31
 8007fca:	d50e      	bpl.n	8007fea <_vfiprintf_r+0x6a>
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fd0:	b01d      	add	sp, #116	; 0x74
 8007fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd6:	4b7b      	ldr	r3, [pc, #492]	; (80081c4 <_vfiprintf_r+0x244>)
 8007fd8:	429d      	cmp	r5, r3
 8007fda:	d101      	bne.n	8007fe0 <_vfiprintf_r+0x60>
 8007fdc:	68b5      	ldr	r5, [r6, #8]
 8007fde:	e7df      	b.n	8007fa0 <_vfiprintf_r+0x20>
 8007fe0:	4b79      	ldr	r3, [pc, #484]	; (80081c8 <_vfiprintf_r+0x248>)
 8007fe2:	429d      	cmp	r5, r3
 8007fe4:	bf08      	it	eq
 8007fe6:	68f5      	ldreq	r5, [r6, #12]
 8007fe8:	e7da      	b.n	8007fa0 <_vfiprintf_r+0x20>
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	0598      	lsls	r0, r3, #22
 8007fee:	d4ed      	bmi.n	8007fcc <_vfiprintf_r+0x4c>
 8007ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ff2:	f000 fb84 	bl	80086fe <__retarget_lock_release_recursive>
 8007ff6:	e7e9      	b.n	8007fcc <_vfiprintf_r+0x4c>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8007ffc:	2320      	movs	r3, #32
 8007ffe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008002:	f8cd 800c 	str.w	r8, [sp, #12]
 8008006:	2330      	movs	r3, #48	; 0x30
 8008008:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081cc <_vfiprintf_r+0x24c>
 800800c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008010:	f04f 0901 	mov.w	r9, #1
 8008014:	4623      	mov	r3, r4
 8008016:	469a      	mov	sl, r3
 8008018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800801c:	b10a      	cbz	r2, 8008022 <_vfiprintf_r+0xa2>
 800801e:	2a25      	cmp	r2, #37	; 0x25
 8008020:	d1f9      	bne.n	8008016 <_vfiprintf_r+0x96>
 8008022:	ebba 0b04 	subs.w	fp, sl, r4
 8008026:	d00b      	beq.n	8008040 <_vfiprintf_r+0xc0>
 8008028:	465b      	mov	r3, fp
 800802a:	4622      	mov	r2, r4
 800802c:	4629      	mov	r1, r5
 800802e:	4630      	mov	r0, r6
 8008030:	f7ff ff94 	bl	8007f5c <__sfputs_r>
 8008034:	3001      	adds	r0, #1
 8008036:	f000 80aa 	beq.w	800818e <_vfiprintf_r+0x20e>
 800803a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800803c:	445a      	add	r2, fp
 800803e:	9209      	str	r2, [sp, #36]	; 0x24
 8008040:	f89a 3000 	ldrb.w	r3, [sl]
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 80a2 	beq.w	800818e <_vfiprintf_r+0x20e>
 800804a:	2300      	movs	r3, #0
 800804c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008054:	f10a 0a01 	add.w	sl, sl, #1
 8008058:	9304      	str	r3, [sp, #16]
 800805a:	9307      	str	r3, [sp, #28]
 800805c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008060:	931a      	str	r3, [sp, #104]	; 0x68
 8008062:	4654      	mov	r4, sl
 8008064:	2205      	movs	r2, #5
 8008066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800806a:	4858      	ldr	r0, [pc, #352]	; (80081cc <_vfiprintf_r+0x24c>)
 800806c:	f7f8 f8d8 	bl	8000220 <memchr>
 8008070:	9a04      	ldr	r2, [sp, #16]
 8008072:	b9d8      	cbnz	r0, 80080ac <_vfiprintf_r+0x12c>
 8008074:	06d1      	lsls	r1, r2, #27
 8008076:	bf44      	itt	mi
 8008078:	2320      	movmi	r3, #32
 800807a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800807e:	0713      	lsls	r3, r2, #28
 8008080:	bf44      	itt	mi
 8008082:	232b      	movmi	r3, #43	; 0x2b
 8008084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008088:	f89a 3000 	ldrb.w	r3, [sl]
 800808c:	2b2a      	cmp	r3, #42	; 0x2a
 800808e:	d015      	beq.n	80080bc <_vfiprintf_r+0x13c>
 8008090:	9a07      	ldr	r2, [sp, #28]
 8008092:	4654      	mov	r4, sl
 8008094:	2000      	movs	r0, #0
 8008096:	f04f 0c0a 	mov.w	ip, #10
 800809a:	4621      	mov	r1, r4
 800809c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080a0:	3b30      	subs	r3, #48	; 0x30
 80080a2:	2b09      	cmp	r3, #9
 80080a4:	d94e      	bls.n	8008144 <_vfiprintf_r+0x1c4>
 80080a6:	b1b0      	cbz	r0, 80080d6 <_vfiprintf_r+0x156>
 80080a8:	9207      	str	r2, [sp, #28]
 80080aa:	e014      	b.n	80080d6 <_vfiprintf_r+0x156>
 80080ac:	eba0 0308 	sub.w	r3, r0, r8
 80080b0:	fa09 f303 	lsl.w	r3, r9, r3
 80080b4:	4313      	orrs	r3, r2
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	46a2      	mov	sl, r4
 80080ba:	e7d2      	b.n	8008062 <_vfiprintf_r+0xe2>
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	1d19      	adds	r1, r3, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	9103      	str	r1, [sp, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	bfbb      	ittet	lt
 80080c8:	425b      	neglt	r3, r3
 80080ca:	f042 0202 	orrlt.w	r2, r2, #2
 80080ce:	9307      	strge	r3, [sp, #28]
 80080d0:	9307      	strlt	r3, [sp, #28]
 80080d2:	bfb8      	it	lt
 80080d4:	9204      	strlt	r2, [sp, #16]
 80080d6:	7823      	ldrb	r3, [r4, #0]
 80080d8:	2b2e      	cmp	r3, #46	; 0x2e
 80080da:	d10c      	bne.n	80080f6 <_vfiprintf_r+0x176>
 80080dc:	7863      	ldrb	r3, [r4, #1]
 80080de:	2b2a      	cmp	r3, #42	; 0x2a
 80080e0:	d135      	bne.n	800814e <_vfiprintf_r+0x1ce>
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	1d1a      	adds	r2, r3, #4
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	9203      	str	r2, [sp, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	bfb8      	it	lt
 80080ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080f2:	3402      	adds	r4, #2
 80080f4:	9305      	str	r3, [sp, #20]
 80080f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081dc <_vfiprintf_r+0x25c>
 80080fa:	7821      	ldrb	r1, [r4, #0]
 80080fc:	2203      	movs	r2, #3
 80080fe:	4650      	mov	r0, sl
 8008100:	f7f8 f88e 	bl	8000220 <memchr>
 8008104:	b140      	cbz	r0, 8008118 <_vfiprintf_r+0x198>
 8008106:	2340      	movs	r3, #64	; 0x40
 8008108:	eba0 000a 	sub.w	r0, r0, sl
 800810c:	fa03 f000 	lsl.w	r0, r3, r0
 8008110:	9b04      	ldr	r3, [sp, #16]
 8008112:	4303      	orrs	r3, r0
 8008114:	3401      	adds	r4, #1
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811c:	482c      	ldr	r0, [pc, #176]	; (80081d0 <_vfiprintf_r+0x250>)
 800811e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008122:	2206      	movs	r2, #6
 8008124:	f7f8 f87c 	bl	8000220 <memchr>
 8008128:	2800      	cmp	r0, #0
 800812a:	d03f      	beq.n	80081ac <_vfiprintf_r+0x22c>
 800812c:	4b29      	ldr	r3, [pc, #164]	; (80081d4 <_vfiprintf_r+0x254>)
 800812e:	bb1b      	cbnz	r3, 8008178 <_vfiprintf_r+0x1f8>
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	3307      	adds	r3, #7
 8008134:	f023 0307 	bic.w	r3, r3, #7
 8008138:	3308      	adds	r3, #8
 800813a:	9303      	str	r3, [sp, #12]
 800813c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813e:	443b      	add	r3, r7
 8008140:	9309      	str	r3, [sp, #36]	; 0x24
 8008142:	e767      	b.n	8008014 <_vfiprintf_r+0x94>
 8008144:	fb0c 3202 	mla	r2, ip, r2, r3
 8008148:	460c      	mov	r4, r1
 800814a:	2001      	movs	r0, #1
 800814c:	e7a5      	b.n	800809a <_vfiprintf_r+0x11a>
 800814e:	2300      	movs	r3, #0
 8008150:	3401      	adds	r4, #1
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	4619      	mov	r1, r3
 8008156:	f04f 0c0a 	mov.w	ip, #10
 800815a:	4620      	mov	r0, r4
 800815c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008160:	3a30      	subs	r2, #48	; 0x30
 8008162:	2a09      	cmp	r2, #9
 8008164:	d903      	bls.n	800816e <_vfiprintf_r+0x1ee>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0c5      	beq.n	80080f6 <_vfiprintf_r+0x176>
 800816a:	9105      	str	r1, [sp, #20]
 800816c:	e7c3      	b.n	80080f6 <_vfiprintf_r+0x176>
 800816e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008172:	4604      	mov	r4, r0
 8008174:	2301      	movs	r3, #1
 8008176:	e7f0      	b.n	800815a <_vfiprintf_r+0x1da>
 8008178:	ab03      	add	r3, sp, #12
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	462a      	mov	r2, r5
 800817e:	4b16      	ldr	r3, [pc, #88]	; (80081d8 <_vfiprintf_r+0x258>)
 8008180:	a904      	add	r1, sp, #16
 8008182:	4630      	mov	r0, r6
 8008184:	f7fd fde6 	bl	8005d54 <_printf_float>
 8008188:	4607      	mov	r7, r0
 800818a:	1c78      	adds	r0, r7, #1
 800818c:	d1d6      	bne.n	800813c <_vfiprintf_r+0x1bc>
 800818e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008190:	07d9      	lsls	r1, r3, #31
 8008192:	d405      	bmi.n	80081a0 <_vfiprintf_r+0x220>
 8008194:	89ab      	ldrh	r3, [r5, #12]
 8008196:	059a      	lsls	r2, r3, #22
 8008198:	d402      	bmi.n	80081a0 <_vfiprintf_r+0x220>
 800819a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800819c:	f000 faaf 	bl	80086fe <__retarget_lock_release_recursive>
 80081a0:	89ab      	ldrh	r3, [r5, #12]
 80081a2:	065b      	lsls	r3, r3, #25
 80081a4:	f53f af12 	bmi.w	8007fcc <_vfiprintf_r+0x4c>
 80081a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081aa:	e711      	b.n	8007fd0 <_vfiprintf_r+0x50>
 80081ac:	ab03      	add	r3, sp, #12
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	462a      	mov	r2, r5
 80081b2:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <_vfiprintf_r+0x258>)
 80081b4:	a904      	add	r1, sp, #16
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7fe f870 	bl	800629c <_printf_i>
 80081bc:	e7e4      	b.n	8008188 <_vfiprintf_r+0x208>
 80081be:	bf00      	nop
 80081c0:	08008dd4 	.word	0x08008dd4
 80081c4:	08008df4 	.word	0x08008df4
 80081c8:	08008db4 	.word	0x08008db4
 80081cc:	08008c5c 	.word	0x08008c5c
 80081d0:	08008c66 	.word	0x08008c66
 80081d4:	08005d55 	.word	0x08005d55
 80081d8:	08007f5d 	.word	0x08007f5d
 80081dc:	08008c62 	.word	0x08008c62

080081e0 <__swbuf_r>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	460e      	mov	r6, r1
 80081e4:	4614      	mov	r4, r2
 80081e6:	4605      	mov	r5, r0
 80081e8:	b118      	cbz	r0, 80081f2 <__swbuf_r+0x12>
 80081ea:	6983      	ldr	r3, [r0, #24]
 80081ec:	b90b      	cbnz	r3, 80081f2 <__swbuf_r+0x12>
 80081ee:	f000 f9e7 	bl	80085c0 <__sinit>
 80081f2:	4b21      	ldr	r3, [pc, #132]	; (8008278 <__swbuf_r+0x98>)
 80081f4:	429c      	cmp	r4, r3
 80081f6:	d12b      	bne.n	8008250 <__swbuf_r+0x70>
 80081f8:	686c      	ldr	r4, [r5, #4]
 80081fa:	69a3      	ldr	r3, [r4, #24]
 80081fc:	60a3      	str	r3, [r4, #8]
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	071a      	lsls	r2, r3, #28
 8008202:	d52f      	bpl.n	8008264 <__swbuf_r+0x84>
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	b36b      	cbz	r3, 8008264 <__swbuf_r+0x84>
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	6820      	ldr	r0, [r4, #0]
 800820c:	1ac0      	subs	r0, r0, r3
 800820e:	6963      	ldr	r3, [r4, #20]
 8008210:	b2f6      	uxtb	r6, r6
 8008212:	4283      	cmp	r3, r0
 8008214:	4637      	mov	r7, r6
 8008216:	dc04      	bgt.n	8008222 <__swbuf_r+0x42>
 8008218:	4621      	mov	r1, r4
 800821a:	4628      	mov	r0, r5
 800821c:	f000 f93c 	bl	8008498 <_fflush_r>
 8008220:	bb30      	cbnz	r0, 8008270 <__swbuf_r+0x90>
 8008222:	68a3      	ldr	r3, [r4, #8]
 8008224:	3b01      	subs	r3, #1
 8008226:	60a3      	str	r3, [r4, #8]
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	6022      	str	r2, [r4, #0]
 800822e:	701e      	strb	r6, [r3, #0]
 8008230:	6963      	ldr	r3, [r4, #20]
 8008232:	3001      	adds	r0, #1
 8008234:	4283      	cmp	r3, r0
 8008236:	d004      	beq.n	8008242 <__swbuf_r+0x62>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	07db      	lsls	r3, r3, #31
 800823c:	d506      	bpl.n	800824c <__swbuf_r+0x6c>
 800823e:	2e0a      	cmp	r6, #10
 8008240:	d104      	bne.n	800824c <__swbuf_r+0x6c>
 8008242:	4621      	mov	r1, r4
 8008244:	4628      	mov	r0, r5
 8008246:	f000 f927 	bl	8008498 <_fflush_r>
 800824a:	b988      	cbnz	r0, 8008270 <__swbuf_r+0x90>
 800824c:	4638      	mov	r0, r7
 800824e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008250:	4b0a      	ldr	r3, [pc, #40]	; (800827c <__swbuf_r+0x9c>)
 8008252:	429c      	cmp	r4, r3
 8008254:	d101      	bne.n	800825a <__swbuf_r+0x7a>
 8008256:	68ac      	ldr	r4, [r5, #8]
 8008258:	e7cf      	b.n	80081fa <__swbuf_r+0x1a>
 800825a:	4b09      	ldr	r3, [pc, #36]	; (8008280 <__swbuf_r+0xa0>)
 800825c:	429c      	cmp	r4, r3
 800825e:	bf08      	it	eq
 8008260:	68ec      	ldreq	r4, [r5, #12]
 8008262:	e7ca      	b.n	80081fa <__swbuf_r+0x1a>
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f000 f81a 	bl	80082a0 <__swsetup_r>
 800826c:	2800      	cmp	r0, #0
 800826e:	d0cb      	beq.n	8008208 <__swbuf_r+0x28>
 8008270:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008274:	e7ea      	b.n	800824c <__swbuf_r+0x6c>
 8008276:	bf00      	nop
 8008278:	08008dd4 	.word	0x08008dd4
 800827c:	08008df4 	.word	0x08008df4
 8008280:	08008db4 	.word	0x08008db4

08008284 <__ascii_wctomb>:
 8008284:	b149      	cbz	r1, 800829a <__ascii_wctomb+0x16>
 8008286:	2aff      	cmp	r2, #255	; 0xff
 8008288:	bf85      	ittet	hi
 800828a:	238a      	movhi	r3, #138	; 0x8a
 800828c:	6003      	strhi	r3, [r0, #0]
 800828e:	700a      	strbls	r2, [r1, #0]
 8008290:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008294:	bf98      	it	ls
 8008296:	2001      	movls	r0, #1
 8008298:	4770      	bx	lr
 800829a:	4608      	mov	r0, r1
 800829c:	4770      	bx	lr
	...

080082a0 <__swsetup_r>:
 80082a0:	4b32      	ldr	r3, [pc, #200]	; (800836c <__swsetup_r+0xcc>)
 80082a2:	b570      	push	{r4, r5, r6, lr}
 80082a4:	681d      	ldr	r5, [r3, #0]
 80082a6:	4606      	mov	r6, r0
 80082a8:	460c      	mov	r4, r1
 80082aa:	b125      	cbz	r5, 80082b6 <__swsetup_r+0x16>
 80082ac:	69ab      	ldr	r3, [r5, #24]
 80082ae:	b913      	cbnz	r3, 80082b6 <__swsetup_r+0x16>
 80082b0:	4628      	mov	r0, r5
 80082b2:	f000 f985 	bl	80085c0 <__sinit>
 80082b6:	4b2e      	ldr	r3, [pc, #184]	; (8008370 <__swsetup_r+0xd0>)
 80082b8:	429c      	cmp	r4, r3
 80082ba:	d10f      	bne.n	80082dc <__swsetup_r+0x3c>
 80082bc:	686c      	ldr	r4, [r5, #4]
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082c4:	0719      	lsls	r1, r3, #28
 80082c6:	d42c      	bmi.n	8008322 <__swsetup_r+0x82>
 80082c8:	06dd      	lsls	r5, r3, #27
 80082ca:	d411      	bmi.n	80082f0 <__swsetup_r+0x50>
 80082cc:	2309      	movs	r3, #9
 80082ce:	6033      	str	r3, [r6, #0]
 80082d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082d4:	81a3      	strh	r3, [r4, #12]
 80082d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082da:	e03e      	b.n	800835a <__swsetup_r+0xba>
 80082dc:	4b25      	ldr	r3, [pc, #148]	; (8008374 <__swsetup_r+0xd4>)
 80082de:	429c      	cmp	r4, r3
 80082e0:	d101      	bne.n	80082e6 <__swsetup_r+0x46>
 80082e2:	68ac      	ldr	r4, [r5, #8]
 80082e4:	e7eb      	b.n	80082be <__swsetup_r+0x1e>
 80082e6:	4b24      	ldr	r3, [pc, #144]	; (8008378 <__swsetup_r+0xd8>)
 80082e8:	429c      	cmp	r4, r3
 80082ea:	bf08      	it	eq
 80082ec:	68ec      	ldreq	r4, [r5, #12]
 80082ee:	e7e6      	b.n	80082be <__swsetup_r+0x1e>
 80082f0:	0758      	lsls	r0, r3, #29
 80082f2:	d512      	bpl.n	800831a <__swsetup_r+0x7a>
 80082f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082f6:	b141      	cbz	r1, 800830a <__swsetup_r+0x6a>
 80082f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082fc:	4299      	cmp	r1, r3
 80082fe:	d002      	beq.n	8008306 <__swsetup_r+0x66>
 8008300:	4630      	mov	r0, r6
 8008302:	f7ff fb31 	bl	8007968 <_free_r>
 8008306:	2300      	movs	r3, #0
 8008308:	6363      	str	r3, [r4, #52]	; 0x34
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	2300      	movs	r3, #0
 8008314:	6063      	str	r3, [r4, #4]
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f043 0308 	orr.w	r3, r3, #8
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	b94b      	cbnz	r3, 800833a <__swsetup_r+0x9a>
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800832c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008330:	d003      	beq.n	800833a <__swsetup_r+0x9a>
 8008332:	4621      	mov	r1, r4
 8008334:	4630      	mov	r0, r6
 8008336:	f000 fa09 	bl	800874c <__smakebuf_r>
 800833a:	89a0      	ldrh	r0, [r4, #12]
 800833c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008340:	f010 0301 	ands.w	r3, r0, #1
 8008344:	d00a      	beq.n	800835c <__swsetup_r+0xbc>
 8008346:	2300      	movs	r3, #0
 8008348:	60a3      	str	r3, [r4, #8]
 800834a:	6963      	ldr	r3, [r4, #20]
 800834c:	425b      	negs	r3, r3
 800834e:	61a3      	str	r3, [r4, #24]
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	b943      	cbnz	r3, 8008366 <__swsetup_r+0xc6>
 8008354:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008358:	d1ba      	bne.n	80082d0 <__swsetup_r+0x30>
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	0781      	lsls	r1, r0, #30
 800835e:	bf58      	it	pl
 8008360:	6963      	ldrpl	r3, [r4, #20]
 8008362:	60a3      	str	r3, [r4, #8]
 8008364:	e7f4      	b.n	8008350 <__swsetup_r+0xb0>
 8008366:	2000      	movs	r0, #0
 8008368:	e7f7      	b.n	800835a <__swsetup_r+0xba>
 800836a:	bf00      	nop
 800836c:	2000000c 	.word	0x2000000c
 8008370:	08008dd4 	.word	0x08008dd4
 8008374:	08008df4 	.word	0x08008df4
 8008378:	08008db4 	.word	0x08008db4

0800837c <abort>:
 800837c:	b508      	push	{r3, lr}
 800837e:	2006      	movs	r0, #6
 8008380:	f000 fa54 	bl	800882c <raise>
 8008384:	2001      	movs	r0, #1
 8008386:	f7f9 fcf7 	bl	8001d78 <_exit>
	...

0800838c <__sflush_r>:
 800838c:	898a      	ldrh	r2, [r1, #12]
 800838e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008392:	4605      	mov	r5, r0
 8008394:	0710      	lsls	r0, r2, #28
 8008396:	460c      	mov	r4, r1
 8008398:	d458      	bmi.n	800844c <__sflush_r+0xc0>
 800839a:	684b      	ldr	r3, [r1, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	dc05      	bgt.n	80083ac <__sflush_r+0x20>
 80083a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dc02      	bgt.n	80083ac <__sflush_r+0x20>
 80083a6:	2000      	movs	r0, #0
 80083a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	d0f9      	beq.n	80083a6 <__sflush_r+0x1a>
 80083b2:	2300      	movs	r3, #0
 80083b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083b8:	682f      	ldr	r7, [r5, #0]
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	d032      	beq.n	8008424 <__sflush_r+0x98>
 80083be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	075a      	lsls	r2, r3, #29
 80083c4:	d505      	bpl.n	80083d2 <__sflush_r+0x46>
 80083c6:	6863      	ldr	r3, [r4, #4]
 80083c8:	1ac0      	subs	r0, r0, r3
 80083ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083cc:	b10b      	cbz	r3, 80083d2 <__sflush_r+0x46>
 80083ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083d0:	1ac0      	subs	r0, r0, r3
 80083d2:	2300      	movs	r3, #0
 80083d4:	4602      	mov	r2, r0
 80083d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083d8:	6a21      	ldr	r1, [r4, #32]
 80083da:	4628      	mov	r0, r5
 80083dc:	47b0      	blx	r6
 80083de:	1c43      	adds	r3, r0, #1
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	d106      	bne.n	80083f2 <__sflush_r+0x66>
 80083e4:	6829      	ldr	r1, [r5, #0]
 80083e6:	291d      	cmp	r1, #29
 80083e8:	d82c      	bhi.n	8008444 <__sflush_r+0xb8>
 80083ea:	4a2a      	ldr	r2, [pc, #168]	; (8008494 <__sflush_r+0x108>)
 80083ec:	40ca      	lsrs	r2, r1
 80083ee:	07d6      	lsls	r6, r2, #31
 80083f0:	d528      	bpl.n	8008444 <__sflush_r+0xb8>
 80083f2:	2200      	movs	r2, #0
 80083f4:	6062      	str	r2, [r4, #4]
 80083f6:	04d9      	lsls	r1, r3, #19
 80083f8:	6922      	ldr	r2, [r4, #16]
 80083fa:	6022      	str	r2, [r4, #0]
 80083fc:	d504      	bpl.n	8008408 <__sflush_r+0x7c>
 80083fe:	1c42      	adds	r2, r0, #1
 8008400:	d101      	bne.n	8008406 <__sflush_r+0x7a>
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	b903      	cbnz	r3, 8008408 <__sflush_r+0x7c>
 8008406:	6560      	str	r0, [r4, #84]	; 0x54
 8008408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800840a:	602f      	str	r7, [r5, #0]
 800840c:	2900      	cmp	r1, #0
 800840e:	d0ca      	beq.n	80083a6 <__sflush_r+0x1a>
 8008410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008414:	4299      	cmp	r1, r3
 8008416:	d002      	beq.n	800841e <__sflush_r+0x92>
 8008418:	4628      	mov	r0, r5
 800841a:	f7ff faa5 	bl	8007968 <_free_r>
 800841e:	2000      	movs	r0, #0
 8008420:	6360      	str	r0, [r4, #52]	; 0x34
 8008422:	e7c1      	b.n	80083a8 <__sflush_r+0x1c>
 8008424:	6a21      	ldr	r1, [r4, #32]
 8008426:	2301      	movs	r3, #1
 8008428:	4628      	mov	r0, r5
 800842a:	47b0      	blx	r6
 800842c:	1c41      	adds	r1, r0, #1
 800842e:	d1c7      	bne.n	80083c0 <__sflush_r+0x34>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0c4      	beq.n	80083c0 <__sflush_r+0x34>
 8008436:	2b1d      	cmp	r3, #29
 8008438:	d001      	beq.n	800843e <__sflush_r+0xb2>
 800843a:	2b16      	cmp	r3, #22
 800843c:	d101      	bne.n	8008442 <__sflush_r+0xb6>
 800843e:	602f      	str	r7, [r5, #0]
 8008440:	e7b1      	b.n	80083a6 <__sflush_r+0x1a>
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008448:	81a3      	strh	r3, [r4, #12]
 800844a:	e7ad      	b.n	80083a8 <__sflush_r+0x1c>
 800844c:	690f      	ldr	r7, [r1, #16]
 800844e:	2f00      	cmp	r7, #0
 8008450:	d0a9      	beq.n	80083a6 <__sflush_r+0x1a>
 8008452:	0793      	lsls	r3, r2, #30
 8008454:	680e      	ldr	r6, [r1, #0]
 8008456:	bf08      	it	eq
 8008458:	694b      	ldreq	r3, [r1, #20]
 800845a:	600f      	str	r7, [r1, #0]
 800845c:	bf18      	it	ne
 800845e:	2300      	movne	r3, #0
 8008460:	eba6 0807 	sub.w	r8, r6, r7
 8008464:	608b      	str	r3, [r1, #8]
 8008466:	f1b8 0f00 	cmp.w	r8, #0
 800846a:	dd9c      	ble.n	80083a6 <__sflush_r+0x1a>
 800846c:	6a21      	ldr	r1, [r4, #32]
 800846e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008470:	4643      	mov	r3, r8
 8008472:	463a      	mov	r2, r7
 8008474:	4628      	mov	r0, r5
 8008476:	47b0      	blx	r6
 8008478:	2800      	cmp	r0, #0
 800847a:	dc06      	bgt.n	800848a <__sflush_r+0xfe>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008488:	e78e      	b.n	80083a8 <__sflush_r+0x1c>
 800848a:	4407      	add	r7, r0
 800848c:	eba8 0800 	sub.w	r8, r8, r0
 8008490:	e7e9      	b.n	8008466 <__sflush_r+0xda>
 8008492:	bf00      	nop
 8008494:	20400001 	.word	0x20400001

08008498 <_fflush_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	690b      	ldr	r3, [r1, #16]
 800849c:	4605      	mov	r5, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	b913      	cbnz	r3, 80084a8 <_fflush_r+0x10>
 80084a2:	2500      	movs	r5, #0
 80084a4:	4628      	mov	r0, r5
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	b118      	cbz	r0, 80084b2 <_fflush_r+0x1a>
 80084aa:	6983      	ldr	r3, [r0, #24]
 80084ac:	b90b      	cbnz	r3, 80084b2 <_fflush_r+0x1a>
 80084ae:	f000 f887 	bl	80085c0 <__sinit>
 80084b2:	4b14      	ldr	r3, [pc, #80]	; (8008504 <_fflush_r+0x6c>)
 80084b4:	429c      	cmp	r4, r3
 80084b6:	d11b      	bne.n	80084f0 <_fflush_r+0x58>
 80084b8:	686c      	ldr	r4, [r5, #4]
 80084ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0ef      	beq.n	80084a2 <_fflush_r+0xa>
 80084c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084c4:	07d0      	lsls	r0, r2, #31
 80084c6:	d404      	bmi.n	80084d2 <_fflush_r+0x3a>
 80084c8:	0599      	lsls	r1, r3, #22
 80084ca:	d402      	bmi.n	80084d2 <_fflush_r+0x3a>
 80084cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ce:	f000 f915 	bl	80086fc <__retarget_lock_acquire_recursive>
 80084d2:	4628      	mov	r0, r5
 80084d4:	4621      	mov	r1, r4
 80084d6:	f7ff ff59 	bl	800838c <__sflush_r>
 80084da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084dc:	07da      	lsls	r2, r3, #31
 80084de:	4605      	mov	r5, r0
 80084e0:	d4e0      	bmi.n	80084a4 <_fflush_r+0xc>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	059b      	lsls	r3, r3, #22
 80084e6:	d4dd      	bmi.n	80084a4 <_fflush_r+0xc>
 80084e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ea:	f000 f908 	bl	80086fe <__retarget_lock_release_recursive>
 80084ee:	e7d9      	b.n	80084a4 <_fflush_r+0xc>
 80084f0:	4b05      	ldr	r3, [pc, #20]	; (8008508 <_fflush_r+0x70>)
 80084f2:	429c      	cmp	r4, r3
 80084f4:	d101      	bne.n	80084fa <_fflush_r+0x62>
 80084f6:	68ac      	ldr	r4, [r5, #8]
 80084f8:	e7df      	b.n	80084ba <_fflush_r+0x22>
 80084fa:	4b04      	ldr	r3, [pc, #16]	; (800850c <_fflush_r+0x74>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	bf08      	it	eq
 8008500:	68ec      	ldreq	r4, [r5, #12]
 8008502:	e7da      	b.n	80084ba <_fflush_r+0x22>
 8008504:	08008dd4 	.word	0x08008dd4
 8008508:	08008df4 	.word	0x08008df4
 800850c:	08008db4 	.word	0x08008db4

08008510 <std>:
 8008510:	2300      	movs	r3, #0
 8008512:	b510      	push	{r4, lr}
 8008514:	4604      	mov	r4, r0
 8008516:	e9c0 3300 	strd	r3, r3, [r0]
 800851a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800851e:	6083      	str	r3, [r0, #8]
 8008520:	8181      	strh	r1, [r0, #12]
 8008522:	6643      	str	r3, [r0, #100]	; 0x64
 8008524:	81c2      	strh	r2, [r0, #14]
 8008526:	6183      	str	r3, [r0, #24]
 8008528:	4619      	mov	r1, r3
 800852a:	2208      	movs	r2, #8
 800852c:	305c      	adds	r0, #92	; 0x5c
 800852e:	f7fd fb69 	bl	8005c04 <memset>
 8008532:	4b05      	ldr	r3, [pc, #20]	; (8008548 <std+0x38>)
 8008534:	6263      	str	r3, [r4, #36]	; 0x24
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <std+0x3c>)
 8008538:	62a3      	str	r3, [r4, #40]	; 0x28
 800853a:	4b05      	ldr	r3, [pc, #20]	; (8008550 <std+0x40>)
 800853c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800853e:	4b05      	ldr	r3, [pc, #20]	; (8008554 <std+0x44>)
 8008540:	6224      	str	r4, [r4, #32]
 8008542:	6323      	str	r3, [r4, #48]	; 0x30
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	08008865 	.word	0x08008865
 800854c:	08008887 	.word	0x08008887
 8008550:	080088bf 	.word	0x080088bf
 8008554:	080088e3 	.word	0x080088e3

08008558 <_cleanup_r>:
 8008558:	4901      	ldr	r1, [pc, #4]	; (8008560 <_cleanup_r+0x8>)
 800855a:	f000 b8af 	b.w	80086bc <_fwalk_reent>
 800855e:	bf00      	nop
 8008560:	08008499 	.word	0x08008499

08008564 <__sfmoreglue>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	2268      	movs	r2, #104	; 0x68
 8008568:	1e4d      	subs	r5, r1, #1
 800856a:	4355      	muls	r5, r2
 800856c:	460e      	mov	r6, r1
 800856e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008572:	f7ff fa65 	bl	8007a40 <_malloc_r>
 8008576:	4604      	mov	r4, r0
 8008578:	b140      	cbz	r0, 800858c <__sfmoreglue+0x28>
 800857a:	2100      	movs	r1, #0
 800857c:	e9c0 1600 	strd	r1, r6, [r0]
 8008580:	300c      	adds	r0, #12
 8008582:	60a0      	str	r0, [r4, #8]
 8008584:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008588:	f7fd fb3c 	bl	8005c04 <memset>
 800858c:	4620      	mov	r0, r4
 800858e:	bd70      	pop	{r4, r5, r6, pc}

08008590 <__sfp_lock_acquire>:
 8008590:	4801      	ldr	r0, [pc, #4]	; (8008598 <__sfp_lock_acquire+0x8>)
 8008592:	f000 b8b3 	b.w	80086fc <__retarget_lock_acquire_recursive>
 8008596:	bf00      	nop
 8008598:	200003e1 	.word	0x200003e1

0800859c <__sfp_lock_release>:
 800859c:	4801      	ldr	r0, [pc, #4]	; (80085a4 <__sfp_lock_release+0x8>)
 800859e:	f000 b8ae 	b.w	80086fe <__retarget_lock_release_recursive>
 80085a2:	bf00      	nop
 80085a4:	200003e1 	.word	0x200003e1

080085a8 <__sinit_lock_acquire>:
 80085a8:	4801      	ldr	r0, [pc, #4]	; (80085b0 <__sinit_lock_acquire+0x8>)
 80085aa:	f000 b8a7 	b.w	80086fc <__retarget_lock_acquire_recursive>
 80085ae:	bf00      	nop
 80085b0:	200003e2 	.word	0x200003e2

080085b4 <__sinit_lock_release>:
 80085b4:	4801      	ldr	r0, [pc, #4]	; (80085bc <__sinit_lock_release+0x8>)
 80085b6:	f000 b8a2 	b.w	80086fe <__retarget_lock_release_recursive>
 80085ba:	bf00      	nop
 80085bc:	200003e2 	.word	0x200003e2

080085c0 <__sinit>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	4604      	mov	r4, r0
 80085c4:	f7ff fff0 	bl	80085a8 <__sinit_lock_acquire>
 80085c8:	69a3      	ldr	r3, [r4, #24]
 80085ca:	b11b      	cbz	r3, 80085d4 <__sinit+0x14>
 80085cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d0:	f7ff bff0 	b.w	80085b4 <__sinit_lock_release>
 80085d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085d8:	6523      	str	r3, [r4, #80]	; 0x50
 80085da:	4b13      	ldr	r3, [pc, #76]	; (8008628 <__sinit+0x68>)
 80085dc:	4a13      	ldr	r2, [pc, #76]	; (800862c <__sinit+0x6c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80085e2:	42a3      	cmp	r3, r4
 80085e4:	bf04      	itt	eq
 80085e6:	2301      	moveq	r3, #1
 80085e8:	61a3      	streq	r3, [r4, #24]
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 f820 	bl	8008630 <__sfp>
 80085f0:	6060      	str	r0, [r4, #4]
 80085f2:	4620      	mov	r0, r4
 80085f4:	f000 f81c 	bl	8008630 <__sfp>
 80085f8:	60a0      	str	r0, [r4, #8]
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 f818 	bl	8008630 <__sfp>
 8008600:	2200      	movs	r2, #0
 8008602:	60e0      	str	r0, [r4, #12]
 8008604:	2104      	movs	r1, #4
 8008606:	6860      	ldr	r0, [r4, #4]
 8008608:	f7ff ff82 	bl	8008510 <std>
 800860c:	68a0      	ldr	r0, [r4, #8]
 800860e:	2201      	movs	r2, #1
 8008610:	2109      	movs	r1, #9
 8008612:	f7ff ff7d 	bl	8008510 <std>
 8008616:	68e0      	ldr	r0, [r4, #12]
 8008618:	2202      	movs	r2, #2
 800861a:	2112      	movs	r1, #18
 800861c:	f7ff ff78 	bl	8008510 <std>
 8008620:	2301      	movs	r3, #1
 8008622:	61a3      	str	r3, [r4, #24]
 8008624:	e7d2      	b.n	80085cc <__sinit+0xc>
 8008626:	bf00      	nop
 8008628:	08008a3c 	.word	0x08008a3c
 800862c:	08008559 	.word	0x08008559

08008630 <__sfp>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	4607      	mov	r7, r0
 8008634:	f7ff ffac 	bl	8008590 <__sfp_lock_acquire>
 8008638:	4b1e      	ldr	r3, [pc, #120]	; (80086b4 <__sfp+0x84>)
 800863a:	681e      	ldr	r6, [r3, #0]
 800863c:	69b3      	ldr	r3, [r6, #24]
 800863e:	b913      	cbnz	r3, 8008646 <__sfp+0x16>
 8008640:	4630      	mov	r0, r6
 8008642:	f7ff ffbd 	bl	80085c0 <__sinit>
 8008646:	3648      	adds	r6, #72	; 0x48
 8008648:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800864c:	3b01      	subs	r3, #1
 800864e:	d503      	bpl.n	8008658 <__sfp+0x28>
 8008650:	6833      	ldr	r3, [r6, #0]
 8008652:	b30b      	cbz	r3, 8008698 <__sfp+0x68>
 8008654:	6836      	ldr	r6, [r6, #0]
 8008656:	e7f7      	b.n	8008648 <__sfp+0x18>
 8008658:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800865c:	b9d5      	cbnz	r5, 8008694 <__sfp+0x64>
 800865e:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <__sfp+0x88>)
 8008660:	60e3      	str	r3, [r4, #12]
 8008662:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008666:	6665      	str	r5, [r4, #100]	; 0x64
 8008668:	f000 f847 	bl	80086fa <__retarget_lock_init_recursive>
 800866c:	f7ff ff96 	bl	800859c <__sfp_lock_release>
 8008670:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008674:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008678:	6025      	str	r5, [r4, #0]
 800867a:	61a5      	str	r5, [r4, #24]
 800867c:	2208      	movs	r2, #8
 800867e:	4629      	mov	r1, r5
 8008680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008684:	f7fd fabe 	bl	8005c04 <memset>
 8008688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800868c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008690:	4620      	mov	r0, r4
 8008692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008694:	3468      	adds	r4, #104	; 0x68
 8008696:	e7d9      	b.n	800864c <__sfp+0x1c>
 8008698:	2104      	movs	r1, #4
 800869a:	4638      	mov	r0, r7
 800869c:	f7ff ff62 	bl	8008564 <__sfmoreglue>
 80086a0:	4604      	mov	r4, r0
 80086a2:	6030      	str	r0, [r6, #0]
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d1d5      	bne.n	8008654 <__sfp+0x24>
 80086a8:	f7ff ff78 	bl	800859c <__sfp_lock_release>
 80086ac:	230c      	movs	r3, #12
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	e7ee      	b.n	8008690 <__sfp+0x60>
 80086b2:	bf00      	nop
 80086b4:	08008a3c 	.word	0x08008a3c
 80086b8:	ffff0001 	.word	0xffff0001

080086bc <_fwalk_reent>:
 80086bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c0:	4606      	mov	r6, r0
 80086c2:	4688      	mov	r8, r1
 80086c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086c8:	2700      	movs	r7, #0
 80086ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086ce:	f1b9 0901 	subs.w	r9, r9, #1
 80086d2:	d505      	bpl.n	80086e0 <_fwalk_reent+0x24>
 80086d4:	6824      	ldr	r4, [r4, #0]
 80086d6:	2c00      	cmp	r4, #0
 80086d8:	d1f7      	bne.n	80086ca <_fwalk_reent+0xe>
 80086da:	4638      	mov	r0, r7
 80086dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e0:	89ab      	ldrh	r3, [r5, #12]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d907      	bls.n	80086f6 <_fwalk_reent+0x3a>
 80086e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086ea:	3301      	adds	r3, #1
 80086ec:	d003      	beq.n	80086f6 <_fwalk_reent+0x3a>
 80086ee:	4629      	mov	r1, r5
 80086f0:	4630      	mov	r0, r6
 80086f2:	47c0      	blx	r8
 80086f4:	4307      	orrs	r7, r0
 80086f6:	3568      	adds	r5, #104	; 0x68
 80086f8:	e7e9      	b.n	80086ce <_fwalk_reent+0x12>

080086fa <__retarget_lock_init_recursive>:
 80086fa:	4770      	bx	lr

080086fc <__retarget_lock_acquire_recursive>:
 80086fc:	4770      	bx	lr

080086fe <__retarget_lock_release_recursive>:
 80086fe:	4770      	bx	lr

08008700 <__swhatbuf_r>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	460e      	mov	r6, r1
 8008704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008708:	2900      	cmp	r1, #0
 800870a:	b096      	sub	sp, #88	; 0x58
 800870c:	4614      	mov	r4, r2
 800870e:	461d      	mov	r5, r3
 8008710:	da08      	bge.n	8008724 <__swhatbuf_r+0x24>
 8008712:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	602a      	str	r2, [r5, #0]
 800871a:	061a      	lsls	r2, r3, #24
 800871c:	d410      	bmi.n	8008740 <__swhatbuf_r+0x40>
 800871e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008722:	e00e      	b.n	8008742 <__swhatbuf_r+0x42>
 8008724:	466a      	mov	r2, sp
 8008726:	f000 f903 	bl	8008930 <_fstat_r>
 800872a:	2800      	cmp	r0, #0
 800872c:	dbf1      	blt.n	8008712 <__swhatbuf_r+0x12>
 800872e:	9a01      	ldr	r2, [sp, #4]
 8008730:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008734:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008738:	425a      	negs	r2, r3
 800873a:	415a      	adcs	r2, r3
 800873c:	602a      	str	r2, [r5, #0]
 800873e:	e7ee      	b.n	800871e <__swhatbuf_r+0x1e>
 8008740:	2340      	movs	r3, #64	; 0x40
 8008742:	2000      	movs	r0, #0
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	b016      	add	sp, #88	; 0x58
 8008748:	bd70      	pop	{r4, r5, r6, pc}
	...

0800874c <__smakebuf_r>:
 800874c:	898b      	ldrh	r3, [r1, #12]
 800874e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008750:	079d      	lsls	r5, r3, #30
 8008752:	4606      	mov	r6, r0
 8008754:	460c      	mov	r4, r1
 8008756:	d507      	bpl.n	8008768 <__smakebuf_r+0x1c>
 8008758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	2301      	movs	r3, #1
 8008762:	6163      	str	r3, [r4, #20]
 8008764:	b002      	add	sp, #8
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	ab01      	add	r3, sp, #4
 800876a:	466a      	mov	r2, sp
 800876c:	f7ff ffc8 	bl	8008700 <__swhatbuf_r>
 8008770:	9900      	ldr	r1, [sp, #0]
 8008772:	4605      	mov	r5, r0
 8008774:	4630      	mov	r0, r6
 8008776:	f7ff f963 	bl	8007a40 <_malloc_r>
 800877a:	b948      	cbnz	r0, 8008790 <__smakebuf_r+0x44>
 800877c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008780:	059a      	lsls	r2, r3, #22
 8008782:	d4ef      	bmi.n	8008764 <__smakebuf_r+0x18>
 8008784:	f023 0303 	bic.w	r3, r3, #3
 8008788:	f043 0302 	orr.w	r3, r3, #2
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	e7e3      	b.n	8008758 <__smakebuf_r+0xc>
 8008790:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <__smakebuf_r+0x7c>)
 8008792:	62b3      	str	r3, [r6, #40]	; 0x28
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	6020      	str	r0, [r4, #0]
 8008798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879c:	81a3      	strh	r3, [r4, #12]
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	6163      	str	r3, [r4, #20]
 80087a2:	9b01      	ldr	r3, [sp, #4]
 80087a4:	6120      	str	r0, [r4, #16]
 80087a6:	b15b      	cbz	r3, 80087c0 <__smakebuf_r+0x74>
 80087a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ac:	4630      	mov	r0, r6
 80087ae:	f000 f8d1 	bl	8008954 <_isatty_r>
 80087b2:	b128      	cbz	r0, 80087c0 <__smakebuf_r+0x74>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	89a0      	ldrh	r0, [r4, #12]
 80087c2:	4305      	orrs	r5, r0
 80087c4:	81a5      	strh	r5, [r4, #12]
 80087c6:	e7cd      	b.n	8008764 <__smakebuf_r+0x18>
 80087c8:	08008559 	.word	0x08008559

080087cc <_malloc_usable_size_r>:
 80087cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d0:	1f18      	subs	r0, r3, #4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bfbc      	itt	lt
 80087d6:	580b      	ldrlt	r3, [r1, r0]
 80087d8:	18c0      	addlt	r0, r0, r3
 80087da:	4770      	bx	lr

080087dc <_raise_r>:
 80087dc:	291f      	cmp	r1, #31
 80087de:	b538      	push	{r3, r4, r5, lr}
 80087e0:	4604      	mov	r4, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	d904      	bls.n	80087f0 <_raise_r+0x14>
 80087e6:	2316      	movs	r3, #22
 80087e8:	6003      	str	r3, [r0, #0]
 80087ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087f2:	b112      	cbz	r2, 80087fa <_raise_r+0x1e>
 80087f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087f8:	b94b      	cbnz	r3, 800880e <_raise_r+0x32>
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 f830 	bl	8008860 <_getpid_r>
 8008800:	462a      	mov	r2, r5
 8008802:	4601      	mov	r1, r0
 8008804:	4620      	mov	r0, r4
 8008806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800880a:	f000 b817 	b.w	800883c <_kill_r>
 800880e:	2b01      	cmp	r3, #1
 8008810:	d00a      	beq.n	8008828 <_raise_r+0x4c>
 8008812:	1c59      	adds	r1, r3, #1
 8008814:	d103      	bne.n	800881e <_raise_r+0x42>
 8008816:	2316      	movs	r3, #22
 8008818:	6003      	str	r3, [r0, #0]
 800881a:	2001      	movs	r0, #1
 800881c:	e7e7      	b.n	80087ee <_raise_r+0x12>
 800881e:	2400      	movs	r4, #0
 8008820:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008824:	4628      	mov	r0, r5
 8008826:	4798      	blx	r3
 8008828:	2000      	movs	r0, #0
 800882a:	e7e0      	b.n	80087ee <_raise_r+0x12>

0800882c <raise>:
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <raise+0xc>)
 800882e:	4601      	mov	r1, r0
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f7ff bfd3 	b.w	80087dc <_raise_r>
 8008836:	bf00      	nop
 8008838:	2000000c 	.word	0x2000000c

0800883c <_kill_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d07      	ldr	r5, [pc, #28]	; (800885c <_kill_r+0x20>)
 8008840:	2300      	movs	r3, #0
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	4611      	mov	r1, r2
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	f7f9 fa85 	bl	8001d58 <_kill>
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	d102      	bne.n	8008858 <_kill_r+0x1c>
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	b103      	cbz	r3, 8008858 <_kill_r+0x1c>
 8008856:	6023      	str	r3, [r4, #0]
 8008858:	bd38      	pop	{r3, r4, r5, pc}
 800885a:	bf00      	nop
 800885c:	200003dc 	.word	0x200003dc

08008860 <_getpid_r>:
 8008860:	f7f9 ba72 	b.w	8001d48 <_getpid>

08008864 <__sread>:
 8008864:	b510      	push	{r4, lr}
 8008866:	460c      	mov	r4, r1
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	f000 f894 	bl	8008998 <_read_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	bfab      	itete	ge
 8008874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008876:	89a3      	ldrhlt	r3, [r4, #12]
 8008878:	181b      	addge	r3, r3, r0
 800887a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800887e:	bfac      	ite	ge
 8008880:	6563      	strge	r3, [r4, #84]	; 0x54
 8008882:	81a3      	strhlt	r3, [r4, #12]
 8008884:	bd10      	pop	{r4, pc}

08008886 <__swrite>:
 8008886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	461f      	mov	r7, r3
 800888c:	898b      	ldrh	r3, [r1, #12]
 800888e:	05db      	lsls	r3, r3, #23
 8008890:	4605      	mov	r5, r0
 8008892:	460c      	mov	r4, r1
 8008894:	4616      	mov	r6, r2
 8008896:	d505      	bpl.n	80088a4 <__swrite+0x1e>
 8008898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889c:	2302      	movs	r3, #2
 800889e:	2200      	movs	r2, #0
 80088a0:	f000 f868 	bl	8008974 <_lseek_r>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	4632      	mov	r2, r6
 80088b2:	463b      	mov	r3, r7
 80088b4:	4628      	mov	r0, r5
 80088b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	f000 b817 	b.w	80088ec <_write_r>

080088be <__sseek>:
 80088be:	b510      	push	{r4, lr}
 80088c0:	460c      	mov	r4, r1
 80088c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c6:	f000 f855 	bl	8008974 <_lseek_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	bf15      	itete	ne
 80088d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088da:	81a3      	strheq	r3, [r4, #12]
 80088dc:	bf18      	it	ne
 80088de:	81a3      	strhne	r3, [r4, #12]
 80088e0:	bd10      	pop	{r4, pc}

080088e2 <__sclose>:
 80088e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e6:	f000 b813 	b.w	8008910 <_close_r>
	...

080088ec <_write_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d07      	ldr	r5, [pc, #28]	; (800890c <_write_r+0x20>)
 80088f0:	4604      	mov	r4, r0
 80088f2:	4608      	mov	r0, r1
 80088f4:	4611      	mov	r1, r2
 80088f6:	2200      	movs	r2, #0
 80088f8:	602a      	str	r2, [r5, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	f7f9 fa63 	bl	8001dc6 <_write>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_write_r+0x1e>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_write_r+0x1e>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	200003dc 	.word	0x200003dc

08008910 <_close_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4d06      	ldr	r5, [pc, #24]	; (800892c <_close_r+0x1c>)
 8008914:	2300      	movs	r3, #0
 8008916:	4604      	mov	r4, r0
 8008918:	4608      	mov	r0, r1
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	f7f9 fa6f 	bl	8001dfe <_close>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_close_r+0x1a>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_close_r+0x1a>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	200003dc 	.word	0x200003dc

08008930 <_fstat_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d07      	ldr	r5, [pc, #28]	; (8008950 <_fstat_r+0x20>)
 8008934:	2300      	movs	r3, #0
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	4611      	mov	r1, r2
 800893c:	602b      	str	r3, [r5, #0]
 800893e:	f7f9 fa6a 	bl	8001e16 <_fstat>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d102      	bne.n	800894c <_fstat_r+0x1c>
 8008946:	682b      	ldr	r3, [r5, #0]
 8008948:	b103      	cbz	r3, 800894c <_fstat_r+0x1c>
 800894a:	6023      	str	r3, [r4, #0]
 800894c:	bd38      	pop	{r3, r4, r5, pc}
 800894e:	bf00      	nop
 8008950:	200003dc 	.word	0x200003dc

08008954 <_isatty_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d06      	ldr	r5, [pc, #24]	; (8008970 <_isatty_r+0x1c>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	f7f9 fa69 	bl	8001e36 <_isatty>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_isatty_r+0x1a>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_isatty_r+0x1a>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	200003dc 	.word	0x200003dc

08008974 <_lseek_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	; (8008994 <_lseek_r+0x20>)
 8008978:	4604      	mov	r4, r0
 800897a:	4608      	mov	r0, r1
 800897c:	4611      	mov	r1, r2
 800897e:	2200      	movs	r2, #0
 8008980:	602a      	str	r2, [r5, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f7f9 fa62 	bl	8001e4c <_lseek>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_lseek_r+0x1e>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_lseek_r+0x1e>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	200003dc 	.word	0x200003dc

08008998 <_read_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d07      	ldr	r5, [pc, #28]	; (80089b8 <_read_r+0x20>)
 800899c:	4604      	mov	r4, r0
 800899e:	4608      	mov	r0, r1
 80089a0:	4611      	mov	r1, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	602a      	str	r2, [r5, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f7f9 f9f0 	bl	8001d8c <_read>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_read_r+0x1e>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_read_r+0x1e>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	200003dc 	.word	0x200003dc

080089bc <_init>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr

080089c8 <_fini>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr
