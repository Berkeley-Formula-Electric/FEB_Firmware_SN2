
STEERING_WHEEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005834  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005a04  08005a04  00015a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a8c  08005a8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a94  08005a94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000070  08005b0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005b0c  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012767  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c9  00000000  00000000  00032807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  000348d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00035960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c25  00000000  00000000  00036940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013968  00000000  00000000  00059565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d64ac  00000000  00000000  0006cecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  001433cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059ec 	.word	0x080059ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080059ec 	.word	0x080059ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <assign_filter_array>:
const FilterArrayLength RMS_RX_NUM = 1;

const AddressIdType IVPDB_RX_ID[] = {SW_ID};
const FilterArrayLength IVPDB_RX_NUM = 1;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3b01      	subs	r3, #1
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d815      	bhi.n	80005f0 <assign_filter_array+0x3c>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <assign_filter_array+0x18>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005e1 	.word	0x080005e1
 80005d0:	080005f1 	.word	0x080005f1
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	080005e9 	.word	0x080005e9
 80005dc:	080005ed 	.word	0x080005ed
        case BMS_ID:
            return BMS_RX_ID;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <assign_filter_array+0x4c>)
 80005e2:	e006      	b.n	80005f2 <assign_filter_array+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <assign_filter_array+0x50>)
 80005e6:	e004      	b.n	80005f2 <assign_filter_array+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_ID;
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <assign_filter_array+0x54>)
 80005ea:	e002      	b.n	80005f2 <assign_filter_array+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_ID;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <assign_filter_array+0x58>)
 80005ee:	e000      	b.n	80005f2 <assign_filter_array+0x3e>
            break;
    }
    return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	08005a2c 	.word	0x08005a2c
 8000604:	08005a30 	.word	0x08005a30
 8000608:	08005a38 	.word	0x08005a38
 800060c:	08005a3c 	.word	0x08005a3c

08000610 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	2b04      	cmp	r3, #4
 800061e:	d815      	bhi.n	800064c <assign_filter_array_legnth+0x3c>
 8000620:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <assign_filter_array_legnth+0x18>)
 8000622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000626:	bf00      	nop
 8000628:	0800063d 	.word	0x0800063d
 800062c:	0800064d 	.word	0x0800064d
 8000630:	08000641 	.word	0x08000641
 8000634:	08000645 	.word	0x08000645
 8000638:	08000649 	.word	0x08000649
        case BMS_ID:
            return BMS_RX_NUM;
 800063c:	2301      	movs	r3, #1
 800063e:	e006      	b.n	800064e <assign_filter_array_legnth+0x3e>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8000640:	2302      	movs	r3, #2
 8000642:	e004      	b.n	800064e <assign_filter_array_legnth+0x3e>
            break;
        case RMS_ID:
            return RMS_RX_NUM;
 8000644:	2301      	movs	r3, #1
 8000646:	e002      	b.n	800064e <assign_filter_array_legnth+0x3e>
            break;
        case IVPDB_ID:
            return IVPDB_RX_NUM;
 8000648:	2301      	movs	r3, #1
 800064a:	e000      	b.n	800064e <assign_filter_array_legnth+0x3e>
            break;
    }
    return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <FEB_CAN_Filter_Config>:
uint8_t TxData[8];
uint8_t RxData[8];
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b090      	sub	sp, #64	; 0x40
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	4611      	mov	r1, r2
 8000668:	461a      	mov	r2, r3
 800066a:	460b      	mov	r3, r1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	4613      	mov	r3, r2
 8000670:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 8000672:	2300      	movs	r3, #0
 8000674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000676:	e027      	b.n	80006c8 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000678:	2301      	movs	r3, #1
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8000684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	4413      	add	r3, r2
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	025b      	lsls	r3, r3, #9
 8000690:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 8000696:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800069a:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80006a4:	2301      	movs	r3, #1
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 80006a8:	231b      	movs	r3, #27
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f001 f868 	bl	8001788 <HAL_CAN_ConfigFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 80006be:	f000 fc89 	bl	8000fd4 <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 80006c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006c4:	3301      	adds	r3, #1
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbd3      	blt.n	8000678 <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3740      	adds	r7, #64	; 0x40
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <FEB_CAN_Init+0x80>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d104      	bne.n	80006fa <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	e008      	b.n	800070c <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <FEB_CAN_Init+0x84>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d103      	bne.n	800070c <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 8000704:	2301      	movs	r3, #1
 8000706:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8000708:	2310      	movs	r3, #16
 800070a:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <FEB_CAN_Init+0x88>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <FEB_CAN_Init+0x88>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <FEB_CAN_Init+0x88>)
 800071a:	2200      	movs	r2, #0
 800071c:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 800071e:	6838      	ldr	r0, [r7, #0]
 8000720:	f7ff ff48 	bl	80005b4 <assign_filter_array>
 8000724:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 8000726:	6838      	ldr	r0, [r7, #0]
 8000728:	f7ff ff72 	bl	8000610 <assign_filter_array_legnth>
 800072c:	4603      	mov	r3, r0
 800072e:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	7afa      	ldrb	r2, [r7, #11]
 8000734:	68f9      	ldr	r1, [r7, #12]
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ff90 	bl	800065c <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f001 f903 	bl	8001948 <HAL_CAN_Start>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <FEB_CAN_Init+0x70>
	  Error_Handler();
 8000748:	f000 fc44 	bl	8000fd4 <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 800074c:	6939      	ldr	r1, [r7, #16]
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f001 fa4e 	bl	8001bf0 <HAL_CAN_ActivateNotification>

}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40006400 	.word	0x40006400
 8000760:	40006800 	.word	0x40006800
 8000764:	2000008c 	.word	0x2000008c

08000768 <FEB_CAN_Transmit>:
		Error_Handler();
	}
	store_msg(&RxHeader, RxData);
}

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	461a      	mov	r2, r3
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	480f      	ldr	r0, [pc, #60]	; (80007bc <FEB_CAN_Transmit+0x54>)
 800077e:	f004 fcbf 	bl	8005100 <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <FEB_CAN_Transmit+0x58>)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <FEB_CAN_Transmit+0x58>)
 800078c:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 800078e:	bf00      	nop
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f001 f9f8 	bl	8001b86 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f9      	beq.n	8000790 <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <FEB_CAN_Transmit+0x5c>)
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <FEB_CAN_Transmit+0x54>)
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <FEB_CAN_Transmit+0x58>)
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f001 f914 	bl	80019d0 <HAL_CAN_AddTxMessage>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 80007ae:	f000 fc11 	bl	8000fd4 <Error_Handler>
	}
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000a4 	.word	0x200000a4
 80007c0:	2000008c 	.word	0x2000008c
 80007c4:	200000ac 	.word	0x200000ac

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b0a8      	sub	sp, #160	; 0xa0
 80007cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fe49 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f9b1 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 fb65 	bl	8000ea4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007da:	f000 fb39 	bl	8000e50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007de:	f000 fa4d 	bl	8000c7c <MX_I2C1_Init>
  MX_TIM14_Init();
 80007e2:	f000 fb11 	bl	8000e08 <MX_TIM14_Init>
  MX_TIM2_Init();
 80007e6:	f000 fa77 	bl	8000cd8 <MX_TIM2_Init>
  MX_CAN1_Init();
 80007ea:	f000 fa11 	bl	8000c10 <MX_CAN1_Init>
  MX_TIM13_Init();
 80007ee:	f000 fae7 	bl	8000dc0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  bool ready_to_drive = false;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  bool last_button_state = false;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool lock = false;
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
  int buf_len;
  //uint8_t data1;
  uint8_t data2;
  HAL_StatusTypeDef ret;

  HAL_TIM_Base_Start_IT(&htim13);
 8000804:	48af      	ldr	r0, [pc, #700]	; (8000ac4 <main+0x2fc>)
 8000806:	f003 f875 	bl	80038f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim13);
 800080a:	48ae      	ldr	r0, [pc, #696]	; (8000ac4 <main+0x2fc>)
 800080c:	f003 f8e2 	bl	80039d4 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000810:	48ad      	ldr	r0, [pc, #692]	; (8000ac8 <main+0x300>)
 8000812:	f003 f86f 	bl	80038f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim14);
 8000816:	48ac      	ldr	r0, [pc, #688]	; (8000ac8 <main+0x300>)
 8000818:	f003 f8dc 	bl	80039d4 <HAL_TIM_Base_Stop_IT>
  Button_Checking = false;
 800081c:	4bab      	ldr	r3, [pc, #684]	; (8000acc <main+0x304>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
  Button_Timer_Flag = false;
 8000822:	4bab      	ldr	r3, [pc, #684]	; (8000ad0 <main+0x308>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
  // 0% PWM cycle to turnoff buzzer
  htim2.Instance->CCR2 = 0;
 8000828:	4baa      	ldr	r3, [pc, #680]	; (8000ad4 <main+0x30c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000830:	2104      	movs	r1, #4
 8000832:	48a8      	ldr	r0, [pc, #672]	; (8000ad4 <main+0x30c>)
 8000834:	f003 f956 	bl	8003ae4 <HAL_TIM_PWM_Start>


  FEB_CAN_Init(&hcan1, SW_ID);
 8000838:	2102      	movs	r1, #2
 800083a:	48a7      	ldr	r0, [pc, #668]	; (8000ad8 <main+0x310>)
 800083c:	f7ff ff4e 	bl	80006dc <FEB_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 8000840:	200a      	movs	r0, #10
 8000842:	f000 fe81 	bl	8001548 <HAL_Delay>
	  // read both IOexpanders
//	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP1_ADDR, &data1, 1, HAL_MAX_DELAY);
//	  if ( ret != HAL_OK ) {
//		  buf_len = sprintf((char*)buf, "IO_1 Error\r\n");
//	  }
	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP2_ADDR, &data2, 1, HAL_MAX_DELAY);
 8000846:	2342      	movs	r3, #66	; 0x42
 8000848:	b299      	uxth	r1, r3
 800084a:	1dfa      	adds	r2, r7, #7
 800084c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	48a1      	ldr	r0, [pc, #644]	; (8000adc <main+0x314>)
 8000856:	f001 fdf5 	bl	8002444 <HAL_I2C_Master_Receive>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	  if ( ret != HAL_OK ) {
 8000860:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000864:	2b00      	cmp	r3, #0
 8000866:	d007      	beq.n	8000878 <main+0xb0>
		  buf_len = sprintf((char*)buf, "IO_2 Error\r\n");
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	499c      	ldr	r1, [pc, #624]	; (8000ae0 <main+0x318>)
 800086e:	4618      	mov	r0, r3
 8000870:	f004 fc5c 	bl	800512c <siprintf>
 8000874:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
//		  HAL_TIM_Base_Start_IT(&htim14);
//		  // turn on buzzer with 30% PWM cycle
//		  htim2.Instance->CCR2 = VOLUME;
//	  }

	  if (!(data2 & (1<<1))) { // BUT_4 -> IO2 P1
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	2b00      	cmp	r3, #0
 8000880:	d131      	bne.n	80008e6 <main+0x11e>
		  if(!lastButton_4) { // if it is not pressed last time, record time of change
 8000882:	4b98      	ldr	r3, [pc, #608]	; (8000ae4 <main+0x31c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f083 0301 	eor.w	r3, r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d007      	beq.n	80008a0 <main+0xd8>
			  last_debounce_time_4 = HAL_GetTick();
 8000890:	f000 fe4e 	bl	8001530 <HAL_GetTick>
 8000894:	4603      	mov	r3, r0
 8000896:	4a94      	ldr	r2, [pc, #592]	; (8000ae8 <main+0x320>)
 8000898:	6013      	str	r3, [r2, #0]
			  lastButton_4 = true;
 800089a:	4b92      	ldr	r3, [pc, #584]	; (8000ae4 <main+0x31c>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
		  }
		  if((HAL_GetTick() - last_debounce_time_4 > debouce_delay) && lastButton_4) {
 80008a0:	f000 fe46 	bl	8001530 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	4b90      	ldr	r3, [pc, #576]	; (8000ae8 <main+0x320>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	22c8      	movs	r2, #200	; 0xc8
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d91c      	bls.n	80008ec <main+0x124>
 80008b2:	4b8c      	ldr	r3, [pc, #560]	; (8000ae4 <main+0x31c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d018      	beq.n	80008ec <main+0x124>
			  coolant_pump = !coolant_pump;
 80008ba:	4b8c      	ldr	r3, [pc, #560]	; (8000aec <main+0x324>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf14      	ite	ne
 80008c2:	2301      	movne	r3, #1
 80008c4:	2300      	moveq	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	f083 0301 	eor.w	r3, r3, #1
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b85      	ldr	r3, [pc, #532]	; (8000aec <main+0x324>)
 80008d6:	701a      	strb	r2, [r3, #0]
			  FEB_CAN_Transmit(&hcan1, SW_COOLANT_PUMP, (uint8_t *) &coolant_pump, 1);
 80008d8:	2301      	movs	r3, #1
 80008da:	4a84      	ldr	r2, [pc, #528]	; (8000aec <main+0x324>)
 80008dc:	2121      	movs	r1, #33	; 0x21
 80008de:	487e      	ldr	r0, [pc, #504]	; (8000ad8 <main+0x310>)
 80008e0:	f7ff ff42 	bl	8000768 <FEB_CAN_Transmit>
 80008e4:	e002      	b.n	80008ec <main+0x124>
		  }
	  } else {
		  lastButton_4 = false;
 80008e6:	4b7f      	ldr	r3, [pc, #508]	; (8000ae4 <main+0x31c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
	  }

	  if (!(data2 & (1<<2))) { // BUT_5 -> IO2 P2
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d131      	bne.n	800095a <main+0x192>
		  if(!lastButton_5) { // if it is not pressed last time, record time of change
 80008f6:	4b7e      	ldr	r3, [pc, #504]	; (8000af0 <main+0x328>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	f083 0301 	eor.w	r3, r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d007      	beq.n	8000914 <main+0x14c>
			  last_debounce_time_5 = HAL_GetTick();
 8000904:	f000 fe14 	bl	8001530 <HAL_GetTick>
 8000908:	4603      	mov	r3, r0
 800090a:	4a7a      	ldr	r2, [pc, #488]	; (8000af4 <main+0x32c>)
 800090c:	6013      	str	r3, [r2, #0]
			  lastButton_5 = true;
 800090e:	4b78      	ldr	r3, [pc, #480]	; (8000af0 <main+0x328>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
		  }
		  if((HAL_GetTick() - last_debounce_time_5 > debouce_delay) && lastButton_5) {
 8000914:	f000 fe0c 	bl	8001530 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	4b76      	ldr	r3, [pc, #472]	; (8000af4 <main+0x32c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	22c8      	movs	r2, #200	; 0xc8
 8000922:	4293      	cmp	r3, r2
 8000924:	d91c      	bls.n	8000960 <main+0x198>
 8000926:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <main+0x328>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d018      	beq.n	8000960 <main+0x198>
			  accumulator_fans = !accumulator_fans;
 800092e:	4b72      	ldr	r3, [pc, #456]	; (8000af8 <main+0x330>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	bf14      	ite	ne
 8000936:	2301      	movne	r3, #1
 8000938:	2300      	moveq	r3, #0
 800093a:	b2db      	uxtb	r3, r3
 800093c:	f083 0301 	eor.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <main+0x330>)
 800094a:	701a      	strb	r2, [r3, #0]
			  FEB_CAN_Transmit(&hcan1, SW_ACUMULATOR_FANS, (uint8_t *) &accumulator_fans, 1);
 800094c:	2301      	movs	r3, #1
 800094e:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <main+0x330>)
 8000950:	2122      	movs	r1, #34	; 0x22
 8000952:	4861      	ldr	r0, [pc, #388]	; (8000ad8 <main+0x310>)
 8000954:	f7ff ff08 	bl	8000768 <FEB_CAN_Transmit>
 8000958:	e002      	b.n	8000960 <main+0x198>
		  }
	  } else {
		  lastButton_5 = false;
 800095a:	4b65      	ldr	r3, [pc, #404]	; (8000af0 <main+0x328>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
	  }

	  if (!(data2 & (1<<3))) { // BUT_6 -> IO2 P3
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	2b00      	cmp	r3, #0
 8000968:	d15e      	bne.n	8000a28 <main+0x260>
		  if(!lastButton_6) { // if it is not pressed last time, record time of change
 800096a:	4b64      	ldr	r3, [pc, #400]	; (8000afc <main+0x334>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d007      	beq.n	8000988 <main+0x1c0>
			  last_debounce_time_6 = HAL_GetTick();
 8000978:	f000 fdda 	bl	8001530 <HAL_GetTick>
 800097c:	4603      	mov	r3, r0
 800097e:	4a60      	ldr	r2, [pc, #384]	; (8000b00 <main+0x338>)
 8000980:	6013      	str	r3, [r2, #0]
			  lastButton_6 = true;
 8000982:	4b5e      	ldr	r3, [pc, #376]	; (8000afc <main+0x334>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
		  }
		  uint32_t diff = HAL_GetTick() - last_debounce_time_6;
 8000988:	f000 fdd2 	bl	8001530 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <main+0x338>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  if((diff > debouce_delay) && lastButton_6) {
 8000998:	23c8      	movs	r3, #200	; 0xc8
 800099a:	461a      	mov	r2, r3
 800099c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d92c      	bls.n	80009fe <main+0x236>
 80009a4:	4b55      	ldr	r3, [pc, #340]	; (8000afc <main+0x334>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d028      	beq.n	80009fe <main+0x236>
			  extra = !extra;
 80009ac:	4b55      	ldr	r3, [pc, #340]	; (8000b04 <main+0x33c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	f083 0301 	eor.w	r3, r3, #1
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b4f      	ldr	r3, [pc, #316]	; (8000b04 <main+0x33c>)
 80009c8:	701a      	strb	r2, [r3, #0]
			  FEB_CAN_Transmit(&hcan1, SW_EXTRA, (uint8_t *) &extra, 1);
 80009ca:	2301      	movs	r3, #1
 80009cc:	4a4d      	ldr	r2, [pc, #308]	; (8000b04 <main+0x33c>)
 80009ce:	2123      	movs	r1, #35	; 0x23
 80009d0:	4841      	ldr	r0, [pc, #260]	; (8000ad8 <main+0x310>)
 80009d2:	f7ff fec9 	bl	8000768 <FEB_CAN_Transmit>
			  buf_len = sprintf((char*)buf, "Button!!!\r\n", diff);
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80009de:	494a      	ldr	r1, [pc, #296]	; (8000b08 <main+0x340>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f004 fba3 	bl	800512c <siprintf>
 80009e6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80009ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	f107 0108 	add.w	r1, r7, #8
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f8:	4844      	ldr	r0, [pc, #272]	; (8000b0c <main+0x344>)
 80009fa:	f003 ffe2 	bl	80049c2 <HAL_UART_Transmit>
		  }
		  buf_len = sprintf((char*)buf, "diff: %d\r\n", diff);
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000a06:	4942      	ldr	r1, [pc, #264]	; (8000b10 <main+0x348>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 fb8f 	bl	800512c <siprintf>
 8000a0e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 8000a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	f107 0108 	add.w	r1, r7, #8
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a20:	483a      	ldr	r0, [pc, #232]	; (8000b0c <main+0x344>)
 8000a22:	f003 ffce 	bl	80049c2 <HAL_UART_Transmit>
 8000a26:	e002      	b.n	8000a2e <main+0x266>
	  } else {
		  lastButton_6 = false;
 8000a28:	4b34      	ldr	r3, [pc, #208]	; (8000afc <main+0x334>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
	  }

	  if (!(data2 & (1<<0))) { // BUT_3 -> IO2 P0
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d16d      	bne.n	8000b14 <main+0x34c>
//		  buf_len = sprintf((char*)buf, "BUT_3\r\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);

		  // if the system is not checking a button, start the timer to check the timer
		  if (!Button_Checking && (last_button_state == false) && !lock) {
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <main+0x304>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	f083 0301 	eor.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d013      	beq.n	8000a6e <main+0x2a6>
 8000a46:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000a4a:	f083 0301 	eor.w	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d00c      	beq.n	8000a6e <main+0x2a6>
 8000a54:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000a58:	f083 0301 	eor.w	r3, r3, #1
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <main+0x2a6>
			  // Start timer to count 1 sec hold time
			  HAL_TIM_Base_Start_IT(&htim13);
 8000a62:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <main+0x2fc>)
 8000a64:	f002 ff46 	bl	80038f4 <HAL_TIM_Base_Start_IT>
			  Button_Checking = true;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <main+0x304>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "starting timer 13\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }
		  // if 1 sec has elapsed, and this button is still pressed, it is a valid action
		  // turn on buzzer and send CAN msg, reset states
		  if (Button_Timer_Flag) {
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <main+0x308>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d022      	beq.n	8000abc <main+0x2f4>
			  ready_to_drive = !ready_to_drive;
 8000a76:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf14      	ite	ne
 8000a7e:	2301      	movne	r3, #1
 8000a80:	2300      	moveq	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	f083 0301 	eor.w	r3, r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			  // when the ready_to_drive state is just changed, lock from changing again
			  lock = true;
 8000a94:	2301      	movs	r3, #1
 8000a96:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

			  // start timer for buzzer
			  HAL_TIM_Base_Start_IT(&htim14);
 8000a9a:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <main+0x300>)
 8000a9c:	f002 ff2a 	bl	80038f4 <HAL_TIM_Base_Start_IT>
			  // turn on buzzer at VOLUME
			  htim2.Instance->CCR2 = VOLUME;
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <main+0x30c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38

			  FEB_CAN_Transmit(&hcan1, SW_READY_TO_DRIVE, (uint8_t *) &ready_to_drive, 1);
 8000aa8:	f107 028b 	add.w	r2, r7, #139	; 0x8b
 8000aac:	2301      	movs	r3, #1
 8000aae:	2120      	movs	r1, #32
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <main+0x310>)
 8000ab2:	f7ff fe59 	bl	8000768 <FEB_CAN_Transmit>

			  Button_Timer_Flag = false;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <main+0x308>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "staring timer 14\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }

		  //record button state
		  last_button_state = true;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000ac2:	e6bd      	b.n	8000840 <main+0x78>
 8000ac4:	20000174 	.word	0x20000174
 8000ac8:	200001bc 	.word	0x200001bc
 8000acc:	2000025a 	.word	0x2000025a
 8000ad0:	2000025b 	.word	0x2000025b
 8000ad4:	2000012c 	.word	0x2000012c
 8000ad8:	200000b0 	.word	0x200000b0
 8000adc:	200000d8 	.word	0x200000d8
 8000ae0:	08005a04 	.word	0x08005a04
 8000ae4:	20000254 	.word	0x20000254
 8000ae8:	20000248 	.word	0x20000248
 8000aec:	20000257 	.word	0x20000257
 8000af0:	20000255 	.word	0x20000255
 8000af4:	2000024c 	.word	0x2000024c
 8000af8:	20000258 	.word	0x20000258
 8000afc:	20000256 	.word	0x20000256
 8000b00:	20000250 	.word	0x20000250
 8000b04:	20000259 	.word	0x20000259
 8000b08:	08005a14 	.word	0x08005a14
 8000b0c:	20000204 	.word	0x20000204
 8000b10:	08005a20 	.word	0x08005a20

	  } else {
		  Button_Timer_Flag = false;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <main+0x36c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]

		  // allow ready_to_drive to change when button is released.
		  if (last_button_state) {
 8000b1a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f43f ae8e 	beq.w	8000840 <main+0x78>
			  last_button_state = false;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  lock = false;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	  HAL_Delay(10);
 8000b30:	e686      	b.n	8000840 <main+0x78>
 8000b32:	bf00      	nop
 8000b34:	2000025b 	.word	0x2000025b

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	; 0x50
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2234      	movs	r2, #52	; 0x34
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f004 fae8 	bl	800511c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <SystemClock_Config+0xd0>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <SystemClock_Config+0xd0>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <SystemClock_Config+0xd0>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <SystemClock_Config+0xd4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <SystemClock_Config+0xd4>)
 8000b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <SystemClock_Config+0xd4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 fba9 	bl	8003318 <HAL_RCC_OscConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bcc:	f000 fa02 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	2105      	movs	r1, #5
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 f848 	bl	8002c84 <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bfa:	f000 f9eb 	bl	8000fd4 <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3750      	adds	r7, #80	; 0x50
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <MX_CAN1_Init+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c32:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_CAN1_Init+0x64>)
 8000c60:	f000 fc96 	bl	8001590 <HAL_CAN_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c6a:	f000 f9b3 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000b0 	.word	0x200000b0
 8000c78:	40006400 	.word	0x40006400

08000c7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <MX_I2C1_Init+0x54>)
 8000c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_I2C1_Init+0x58>)
 8000c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000cba:	f001 fa7f 	bl	80021bc <HAL_I2C_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc4:	f000 f986 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200000d8 	.word	0x200000d8
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	000186a0 	.word	0x000186a0

08000cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d12:	229f      	movs	r2, #159	; 0x9f
 8000d14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d1e:	2263      	movs	r2, #99	; 0x63
 8000d20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d2e:	4823      	ldr	r0, [pc, #140]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d30:	f002 fd90 	bl	8003854 <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000d3a:	f000 f94b 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481c      	ldr	r0, [pc, #112]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d4c:	f003 f95c 	bl	8004008 <HAL_TIM_ConfigClockSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000d56:	f000 f93d 	bl	8000fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d5a:	4818      	ldr	r0, [pc, #96]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d5c:	f002 fe69 	bl	8003a32 <HAL_TIM_PWM_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000d66:	f000 f935 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	4619      	mov	r1, r3
 8000d78:	4810      	ldr	r0, [pc, #64]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000d7a:	f003 fd45 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f000 f926 	bl	8000fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d88:	2360      	movs	r3, #96	; 0x60
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4807      	ldr	r0, [pc, #28]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000da0:	f003 f870 	bl	8003e84 <HAL_TIM_PWM_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000daa:	f000 f913 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <MX_TIM2_Init+0xe4>)
 8000db0:	f000 fa28 	bl	8001204 <HAL_TIM_MspPostInit>

}
 8000db4:	bf00      	nop
 8000db6:	3738      	adds	r7, #56	; 0x38
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000012c 	.word	0x2000012c

08000dc0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_TIM13_Init+0x40>)
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MX_TIM13_Init+0x44>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8000-1;
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_TIM13_Init+0x40>)
 8000dcc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dd0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_TIM13_Init+0x40>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_TIM13_Init+0x40>)
 8000dda:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dde:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_TIM13_Init+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_TIM13_Init+0x40>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_TIM13_Init+0x40>)
 8000dee:	f002 fd31 	bl	8003854 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000df8:	f000 f8ec 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000174 	.word	0x20000174
 8000e04:	40001c00 	.word	0x40001c00

08000e08 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_TIM14_Init+0x40>)
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <MX_TIM14_Init+0x44>)
 8000e10:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <MX_TIM14_Init+0x40>)
 8000e14:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e18:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MX_TIM14_Init+0x40>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 15000-1;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_TIM14_Init+0x40>)
 8000e22:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000e26:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <MX_TIM14_Init+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_TIM14_Init+0x40>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_TIM14_Init+0x40>)
 8000e36:	f002 fd0d 	bl	8003854 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000e40:	f000 f8c8 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200001bc 	.word	0x200001bc
 8000e4c:	40002000 	.word	0x40002000

08000e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MX_USART2_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e88:	f003 fd4e 	bl	8004928 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e92:	f000 f89f 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000204 	.word	0x20000204
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	4812      	ldr	r0, [pc, #72]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000f30:	f001 f92a 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_GPIO_Init+0xd8>)
 8000f4c:	f000 ff88 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f50:	2320      	movs	r3, #32
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000f68:	f000 ff7a 	bl	8001e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020800 	.word	0x40020800

08000f80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
//	char buf[10];
//	int buf_len;

	// timer for button
	// if 1 sec has passed since the first detection of button pressed, go back to not checking state
	if (htim == &htim13) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d108      	bne.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x22>
	  Button_Checking = false;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
	  Button_Timer_Flag = true;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim13);
 8000f9c:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f9e:	f002 fd19 	bl	80039d4 <HAL_TIM_Base_Stop_IT>
//	  buf_len = sprintf((char*)buf, "Timer13\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}

	// timer for buzzer
	if (htim == &htim14)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d106      	bne.n	8000fb8 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
	  // turn off buzzer
	  htim2.Instance->CCR2 = 0;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
	  // Stop timer
	  HAL_TIM_Base_Stop_IT(&htim14);
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fb4:	f002 fd0e 	bl	80039d4 <HAL_TIM_Base_Stop_IT>

//	  buf_len = sprintf((char*)buf, "Timer14\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000174 	.word	0x20000174
 8000fc4:	2000025a 	.word	0x2000025a
 8000fc8:	2000025b 	.word	0x2000025b
 8000fcc:	200001bc 	.word	0x200001bc
 8000fd0:	2000012c 	.word	0x2000012c

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_MspInit+0x4c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <HAL_MspInit+0x4c>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_MspInit+0x4c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_MspInit+0x4c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800101e:	2007      	movs	r0, #7
 8001020:	f000 fedc 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <HAL_CAN_MspInit+0x84>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12c      	bne.n	80010ac <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_CAN_MspInit+0x88>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <HAL_CAN_MspInit+0x88>)
 800105c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_CAN_MspInit+0x88>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_CAN_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a10      	ldr	r2, [pc, #64]	; (80010b8 <HAL_CAN_MspInit+0x88>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_CAN_MspInit+0x88>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800108a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800109c:	2309      	movs	r3, #9
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <HAL_CAN_MspInit+0x8c>)
 80010a8:	f000 feda 	bl	8001e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40006400 	.word	0x40006400
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a19      	ldr	r2, [pc, #100]	; (8001144 <HAL_I2C_MspInit+0x84>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d12c      	bne.n	800113c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_I2C_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a17      	ldr	r2, [pc, #92]	; (8001148 <HAL_I2C_MspInit+0x88>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_I2C_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001104:	2312      	movs	r3, #18
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001110:	2304      	movs	r3, #4
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <HAL_I2C_MspInit+0x8c>)
 800111c:	f000 fea0 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_I2C_MspInit+0x88>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_I2C_MspInit+0x88>)
 800112a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_I2C_MspInit+0x88>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40005400 	.word	0x40005400
 8001148:	40023800 	.word	0x40023800
 800114c:	40020400 	.word	0x40020400

08001150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001160:	d10e      	bne.n	8001180 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_TIM_Base_MspInit+0xa8>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <HAL_TIM_Base_MspInit+0xa8>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <HAL_TIM_Base_MspInit+0xa8>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800117e:	e036      	b.n	80011ee <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_TIM_Base_MspInit+0xac>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d116      	bne.n	80011b8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_TIM_Base_MspInit+0xa8>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_TIM_Base_MspInit+0xa8>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_TIM_Base_MspInit+0xa8>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	202c      	movs	r0, #44	; 0x2c
 80011ac:	f000 fe21 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80011b0:	202c      	movs	r0, #44	; 0x2c
 80011b2:	f000 fe3a 	bl	8001e2a <HAL_NVIC_EnableIRQ>
}
 80011b6:	e01a      	b.n	80011ee <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_TIM_Base_MspInit+0xb0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d115      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_TIM_Base_MspInit+0xa8>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <HAL_TIM_Base_MspInit+0xa8>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_TIM_Base_MspInit+0xa8>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	202d      	movs	r0, #45	; 0x2d
 80011e4:	f000 fe05 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80011e8:	202d      	movs	r0, #45	; 0x2d
 80011ea:	f000 fe1e 	bl	8001e2a <HAL_NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40001c00 	.word	0x40001c00
 8001200:	40002000 	.word	0x40002000

08001204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001224:	d11d      	bne.n	8001262 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_TIM_MspPostInit+0x68>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a0f      	ldr	r2, [pc, #60]	; (800126c <HAL_TIM_MspPostInit+0x68>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_TIM_MspPostInit+0x68>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001242:	2302      	movs	r3, #2
 8001244:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001252:	2301      	movs	r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4619      	mov	r1, r3
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <HAL_TIM_MspPostInit+0x6c>)
 800125e:	f000 fdff 	bl	8001e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40020000 	.word	0x40020000

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_UART_MspInit+0x84>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d12b      	bne.n	80012ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_UART_MspInit+0x88>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_UART_MspInit+0x88>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_UART_MspInit+0x88>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_UART_MspInit+0x88>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_UART_MspInit+0x88>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_UART_MspInit+0x88>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ce:	230c      	movs	r3, #12
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012de:	2307      	movs	r3, #7
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_UART_MspInit+0x8c>)
 80012ea:	f000 fdb9 	bl	8001e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40004400 	.word	0x40004400
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler+0x4>

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001350:	f000 f8da 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800135e:	f002 fc89 	bl	8003c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000174 	.word	0x20000174

0800136c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001372:	f002 fc7f 	bl	8003c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001bc 	.word	0x200001bc

08001380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <_sbrk+0x5c>)
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <_sbrk+0x60>)
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <_sbrk+0x64>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <_sbrk+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d207      	bcs.n	80013c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b0:	f003 fe7c 	bl	80050ac <__errno>
 80013b4:	4603      	mov	r3, r0
 80013b6:	220c      	movs	r2, #12
 80013b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013be:	e009      	b.n	80013d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <_sbrk+0x64>)
 80013d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20020000 	.word	0x20020000
 80013e0:	00000400 	.word	0x00000400
 80013e4:	2000025c 	.word	0x2000025c
 80013e8:	20000278 	.word	0x20000278

080013ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800142c:	4c0b      	ldr	r4, [pc, #44]	; (800145c <LoopFillZerobss+0x26>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800143a:	f7ff ffd7 	bl	80013ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f003 fe3b 	bl	80050b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff f9c1 	bl	80007c8 <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001454:	08005a9c 	.word	0x08005a9c
  ldr r2, =_sbss
 8001458:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800145c:	20000274 	.word	0x20000274

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 fca5 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fda2 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fcbd 	bl	8001e46 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e4:	f000 fc85 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000008 	.word	0x20000008
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	20000260 	.word	0x20000260

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000260 	.word	0x20000260

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0ed      	b.n	800177e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fd3e 	bl	8001030 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff ffb4 	bl	8001530 <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ca:	e012      	b.n	80015f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015cc:	f7ff ffb0 	bl	8001530 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d90b      	bls.n	80015f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2205      	movs	r2, #5
 80015ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0c5      	b.n	800177e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0e5      	beq.n	80015cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0202 	bic.w	r2, r2, #2
 800160e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001610:	f7ff ff8e 	bl	8001530 <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001616:	e012      	b.n	800163e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001618:	f7ff ff8a 	bl	8001530 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b0a      	cmp	r3, #10
 8001624:	d90b      	bls.n	800163e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2205      	movs	r2, #5
 8001636:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e09f      	b.n	800177e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e5      	bne.n	8001618 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7e1b      	ldrb	r3, [r3, #24]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e007      	b.n	8001676 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7e5b      	ldrb	r3, [r3, #25]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e007      	b.n	80016a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800169e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e9b      	ldrb	r3, [r3, #26]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0220 	orr.w	r2, r2, #32
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0220 	bic.w	r2, r2, #32
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7edb      	ldrb	r3, [r3, #27]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0210 	bic.w	r2, r2, #16
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e007      	b.n	80016f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0210 	orr.w	r2, r2, #16
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7f1b      	ldrb	r3, [r3, #28]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0208 	orr.w	r2, r2, #8
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e007      	b.n	800171e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0208 	bic.w	r2, r2, #8
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7f5b      	ldrb	r3, [r3, #29]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0204 	orr.w	r2, r2, #4
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e007      	b.n	8001748 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0204 	bic.w	r2, r2, #4
 8001746:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	ea42 0103 	orr.w	r1, r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	1e5a      	subs	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017a0:	7cfb      	ldrb	r3, [r7, #19]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d003      	beq.n	80017ae <HAL_CAN_ConfigFilter+0x26>
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	f040 80be 	bne.w	800192a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80017ae:	4b65      	ldr	r3, [pc, #404]	; (8001944 <HAL_CAN_ConfigFilter+0x1bc>)
 80017b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	431a      	orrs	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	2201      	movs	r2, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	401a      	ands	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d123      	bne.n	8001858 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001832:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3248      	adds	r2, #72	; 0x48
 8001838:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800184c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800184e:	6979      	ldr	r1, [r7, #20]
 8001850:	3348      	adds	r3, #72	; 0x48
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d122      	bne.n	80018a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	431a      	orrs	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001880:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3248      	adds	r2, #72	; 0x48
 8001886:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800189a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800189c:	6979      	ldr	r1, [r7, #20]
 800189e:	3348      	adds	r3, #72	; 0x48
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	401a      	ands	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018c0:	e007      	b.n	80018d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	401a      	ands	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018ec:	e007      	b.n	80018fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	431a      	orrs	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800191c:	f023 0201 	bic.w	r2, r3, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e006      	b.n	8001938 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
  }
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40006400 	.word	0x40006400

08001948 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d12e      	bne.n	80019ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0201 	bic.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001974:	f7ff fddc 	bl	8001530 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800197a:	e012      	b.n	80019a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800197c:	f7ff fdd8 	bl	8001530 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b0a      	cmp	r3, #10
 8001988:	d90b      	bls.n	80019a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2205      	movs	r2, #5
 800199a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e012      	b.n	80019c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e5      	bne.n	800197c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e006      	b.n	80019c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
  }
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ee:	7ffb      	ldrb	r3, [r7, #31]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d003      	beq.n	80019fc <HAL_CAN_AddTxMessage+0x2c>
 80019f4:	7ffb      	ldrb	r3, [r7, #31]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	f040 80b8 	bne.w	8001b6c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10a      	bne.n	8001a1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80a0 	beq.w	8001b5c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	0e1b      	lsrs	r3, r3, #24
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d907      	bls.n	8001a3c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e09e      	b.n	8001b7a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	409a      	lsls	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10d      	bne.n	8001a6a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a58:	68f9      	ldr	r1, [r7, #12]
 8001a5a:	6809      	ldr	r1, [r1, #0]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3318      	adds	r3, #24
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	440b      	add	r3, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e00f      	b.n	8001a8a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a74:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a7a:	68f9      	ldr	r1, [r7, #12]
 8001a7c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a7e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3318      	adds	r3, #24
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	440b      	add	r3, r1
 8001a88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6819      	ldr	r1, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3318      	adds	r3, #24
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	440b      	add	r3, r1
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	7d1b      	ldrb	r3, [r3, #20]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d111      	bne.n	8001aca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3318      	adds	r3, #24
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6811      	ldr	r1, [r2, #0]
 8001aba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3307      	adds	r3, #7
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	061a      	lsls	r2, r3, #24
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3306      	adds	r3, #6
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	3204      	adds	r2, #4
 8001aea:	7812      	ldrb	r2, [r2, #0]
 8001aec:	4610      	mov	r0, r2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	6811      	ldr	r1, [r2, #0]
 8001af2:	ea43 0200 	orr.w	r2, r3, r0
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	440b      	add	r3, r1
 8001afc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3303      	adds	r3, #3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	061a      	lsls	r2, r3, #24
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	4610      	mov	r0, r2
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	6811      	ldr	r1, [r2, #0]
 8001b28:	ea43 0200 	orr.w	r2, r3, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b36:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3318      	adds	r3, #24
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	6811      	ldr	r1, [r2, #0]
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3318      	adds	r3, #24
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	440b      	add	r3, r1
 8001b56:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e00e      	b.n	8001b7a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e006      	b.n	8001b7a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b98:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b9a:	7afb      	ldrb	r3, [r7, #11]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d002      	beq.n	8001ba6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d11d      	bne.n	8001be2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3301      	adds	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c00:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d002      	beq.n	8001c0e <HAL_CAN_ActivateNotification+0x1e>
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d109      	bne.n	8001c22 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6959      	ldr	r1, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e006      	b.n	8001c30 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e165      	b.n	8002148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8154 	bne.w	8002142 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d005      	beq.n	8001eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80ae 	beq.w	8002142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <HAL_GPIO_Init+0x300>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a5c      	ldr	r2, [pc, #368]	; (8002160 <HAL_GPIO_Init+0x300>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <HAL_GPIO_Init+0x300>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002002:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4f      	ldr	r2, [pc, #316]	; (8002168 <HAL_GPIO_Init+0x308>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d025      	beq.n	800207a <HAL_GPIO_Init+0x21a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4e      	ldr	r2, [pc, #312]	; (800216c <HAL_GPIO_Init+0x30c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01f      	beq.n	8002076 <HAL_GPIO_Init+0x216>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4d      	ldr	r2, [pc, #308]	; (8002170 <HAL_GPIO_Init+0x310>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x212>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4c      	ldr	r2, [pc, #304]	; (8002174 <HAL_GPIO_Init+0x314>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x20e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4b      	ldr	r2, [pc, #300]	; (8002178 <HAL_GPIO_Init+0x318>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x20a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4a      	ldr	r2, [pc, #296]	; (800217c <HAL_GPIO_Init+0x31c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x206>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a49      	ldr	r2, [pc, #292]	; (8002180 <HAL_GPIO_Init+0x320>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x202>
 800205e:	2306      	movs	r3, #6
 8002060:	e00c      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002062:	2307      	movs	r3, #7
 8002064:	e00a      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002066:	2305      	movs	r3, #5
 8002068:	e008      	b.n	800207c <HAL_GPIO_Init+0x21c>
 800206a:	2304      	movs	r3, #4
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x21c>
 800206e:	2303      	movs	r3, #3
 8002070:	e004      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002072:	2302      	movs	r3, #2
 8002074:	e002      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x21c>
 800207a:	2300      	movs	r3, #0
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f002 0203 	and.w	r2, r2, #3
 8002082:	0092      	lsls	r2, r2, #2
 8002084:	4093      	lsls	r3, r2
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208c:	4935      	ldr	r1, [pc, #212]	; (8002164 <HAL_GPIO_Init+0x304>)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209a:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <HAL_GPIO_Init+0x324>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020be:	4a31      	ldr	r2, [pc, #196]	; (8002184 <HAL_GPIO_Init+0x324>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x324>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_GPIO_Init+0x324>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_GPIO_Init+0x324>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_GPIO_Init+0x324>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x324>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_GPIO_Init+0x324>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3301      	adds	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b0f      	cmp	r3, #15
 800214c:	f67f ae96 	bls.w	8001e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40013800 	.word	0x40013800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020400 	.word	0x40020400
 8002170:	40020800 	.word	0x40020800
 8002174:	40020c00 	.word	0x40020c00
 8002178:	40021000 	.word	0x40021000
 800217c:	40021400 	.word	0x40021400
 8002180:	40021800 	.word	0x40021800
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e12b      	b.n	8002426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe ff6c 	bl	80010c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	; 0x24
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002220:	f000 fe22 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a81      	ldr	r2, [pc, #516]	; (8002430 <HAL_I2C_Init+0x274>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d807      	bhi.n	8002240 <HAL_I2C_Init+0x84>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a80      	ldr	r2, [pc, #512]	; (8002434 <HAL_I2C_Init+0x278>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e006      	b.n	800224e <HAL_I2C_Init+0x92>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a7d      	ldr	r2, [pc, #500]	; (8002438 <HAL_I2C_Init+0x27c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0e7      	b.n	8002426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a78      	ldr	r2, [pc, #480]	; (800243c <HAL_I2C_Init+0x280>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a6a      	ldr	r2, [pc, #424]	; (8002430 <HAL_I2C_Init+0x274>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d802      	bhi.n	8002290 <HAL_I2C_Init+0xd4>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3301      	adds	r3, #1
 800228e:	e009      	b.n	80022a4 <HAL_I2C_Init+0xe8>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4a69      	ldr	r2, [pc, #420]	; (8002440 <HAL_I2C_Init+0x284>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	3301      	adds	r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	495c      	ldr	r1, [pc, #368]	; (8002430 <HAL_I2C_Init+0x274>)
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d819      	bhi.n	80022f8 <HAL_I2C_Init+0x13c>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e59      	subs	r1, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d8:	400b      	ands	r3, r1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_I2C_Init+0x138>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e59      	subs	r1, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f2:	e051      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f4:	2304      	movs	r3, #4
 80022f6:	e04f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d111      	bne.n	8002324 <HAL_I2C_Init+0x168>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e012      	b.n	800234a <HAL_I2C_Init+0x18e>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	0099      	lsls	r1, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Init+0x196>
 800234e:	2301      	movs	r3, #1
 8002350:	e022      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10e      	bne.n	8002378 <HAL_I2C_Init+0x1bc>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e58      	subs	r0, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	440b      	add	r3, r1
 8002368:	fbb0 f3f3 	udiv	r3, r0, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002376:	e00f      	b.n	8002398 <HAL_I2C_Init+0x1dc>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	0099      	lsls	r1, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	fbb0 f3f3 	udiv	r3, r0, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	6809      	ldr	r1, [r1, #0]
 800239c:	4313      	orrs	r3, r2
 800239e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6911      	ldr	r1, [r2, #16]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68d2      	ldr	r2, [r2, #12]
 80023d2:	4311      	orrs	r1, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	000186a0 	.word	0x000186a0
 8002434:	001e847f 	.word	0x001e847f
 8002438:	003d08ff 	.word	0x003d08ff
 800243c:	431bde83 	.word	0x431bde83
 8002440:	10624dd3 	.word	0x10624dd3

08002444 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	461a      	mov	r2, r3
 8002450:	460b      	mov	r3, r1
 8002452:	817b      	strh	r3, [r7, #10]
 8002454:	4613      	mov	r3, r2
 8002456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff f86a 	bl	8001530 <HAL_GetTick>
 800245c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b20      	cmp	r3, #32
 8002468:	f040 820b 	bne.w	8002882 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2319      	movs	r3, #25
 8002472:	2201      	movs	r2, #1
 8002474:	497c      	ldr	r1, [pc, #496]	; (8002668 <HAL_I2C_Master_Receive+0x224>)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fad8 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
 8002484:	e1fe      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2C_Master_Receive+0x50>
 8002490:	2302      	movs	r3, #2
 8002492:	e1f7      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d007      	beq.n	80024ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2222      	movs	r2, #34	; 0x22
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2210      	movs	r2, #16
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a5c      	ldr	r2, [pc, #368]	; (800266c <HAL_I2C_Master_Receive+0x228>)
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024fc:	8979      	ldrh	r1, [r7, #10]
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f9c4 	bl	8002890 <I2C_MasterRequestRead>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1b8      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	d113      	bne.n	8002542 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	623b      	str	r3, [r7, #32]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e18c      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	2b01      	cmp	r3, #1
 8002548:	d11b      	bne.n	8002582 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e16c      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	2b02      	cmp	r3, #2
 8002588:	d11b      	bne.n	80025c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	e14c      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025e8:	e138      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	f200 80f1 	bhi.w	80027d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d123      	bne.n	8002644 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fae9 	bl	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e139      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002642:	e10b      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b02      	cmp	r3, #2
 800264a:	d14e      	bne.n	80026ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	2200      	movs	r2, #0
 8002654:	4906      	ldr	r1, [pc, #24]	; (8002670 <HAL_I2C_Master_Receive+0x22c>)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f9e8 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e10e      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
 8002666:	bf00      	nop
 8002668:	00100002 	.word	0x00100002
 800266c:	ffff0000 	.word	0xffff0000
 8002670:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026e8:	e0b8      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	2200      	movs	r2, #0
 80026f2:	4966      	ldr	r1, [pc, #408]	; (800288c <HAL_I2C_Master_Receive+0x448>)
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f999 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0bf      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	2200      	movs	r2, #0
 800274e:	494f      	ldr	r1, [pc, #316]	; (800288c <HAL_I2C_Master_Receive+0x448>)
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f96b 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e091      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d4:	e042      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f9fc 	bl	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e04c      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b04      	cmp	r3, #4
 8002828:	d118      	bne.n	800285c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	f47f aec2 	bne.w	80025ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002882:	2302      	movs	r3, #2
  }
}
 8002884:	4618      	mov	r0, r3
 8002886:	3728      	adds	r7, #40	; 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	00010004 	.word	0x00010004

08002890 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d006      	beq.n	80028ca <I2C_MasterRequestRead+0x3a>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d003      	beq.n	80028ca <I2C_MasterRequestRead+0x3a>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028c8:	d108      	bne.n	80028dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e00b      	b.n	80028f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	2b11      	cmp	r3, #17
 80028e2:	d107      	bne.n	80028f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f893 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291a:	d103      	bne.n	8002924 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e079      	b.n	8002a1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002930:	d108      	bne.n	8002944 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e05f      	b.n	8002a04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002944:	897b      	ldrh	r3, [r7, #10]
 8002946:	11db      	asrs	r3, r3, #7
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 0306 	and.w	r3, r3, #6
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f063 030f 	orn	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4930      	ldr	r1, [pc, #192]	; (8002a24 <I2C_MasterRequestRead+0x194>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f8b9 	bl	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e054      	b.n	8002a1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002972:	897b      	ldrh	r3, [r7, #10]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4929      	ldr	r1, [pc, #164]	; (8002a28 <I2C_MasterRequestRead+0x198>)
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f8a9 	bl	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e044      	b.n	8002a1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f831 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029de:	d103      	bne.n	80029e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e017      	b.n	8002a1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029ec:	897b      	ldrh	r3, [r7, #10]
 80029ee:	11db      	asrs	r3, r3, #7
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f003 0306 	and.w	r3, r3, #6
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f063 030e 	orn	r3, r3, #14
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4907      	ldr	r1, [pc, #28]	; (8002a28 <I2C_MasterRequestRead+0x198>)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f865 	bl	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	00010008 	.word	0x00010008
 8002a28:	00010002 	.word	0x00010002

08002a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3c:	e025      	b.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a44:	d021      	beq.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7fe fd73 	bl	8001530 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d116      	bne.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e023      	b.n	8002ad2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d10d      	bne.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	e00c      	b.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d0b6      	beq.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ae8:	e051      	b.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af8:	d123      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0204 	orr.w	r2, r3, #4
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e046      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b48:	d021      	beq.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe fcf1 	bl	8001530 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d116      	bne.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e020      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d10c      	bne.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	e00b      	b.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d18d      	bne.n	8002aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be4:	e042      	b.n	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d119      	bne.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0210 	mvn.w	r2, #16
 8002bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e029      	b.n	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c28:	f7fe fc82 	bl	8001530 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d302      	bcc.n	8002c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d116      	bne.n	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e007      	b.n	8002c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d1b5      	bne.n	8002be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0cc      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b68      	ldr	r3, [pc, #416]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d90c      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b65      	ldr	r3, [pc, #404]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b63      	ldr	r3, [pc, #396]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0b8      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd8:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf0:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	494d      	ldr	r1, [pc, #308]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d044      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b47      	ldr	r3, [pc, #284]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d119      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e06f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e067      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4934      	ldr	r1, [pc, #208]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7fe fbdc 	bl	8001530 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fe fbd8 	bl	8001530 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e04f      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d20c      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e032      	b.n	8002e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4916      	ldr	r1, [pc, #88]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	490e      	ldr	r1, [pc, #56]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e0a:	f000 f855 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490a      	ldr	r1, [pc, #40]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fb3c 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023c00 	.word	0x40023c00
 8002e40:	40023800 	.word	0x40023800
 8002e44:	08005a40 	.word	0x08005a40
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	20000004 	.word	0x20000004

08002e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e6c:	f7ff fff0 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0a9b      	lsrs	r3, r3, #10
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4903      	ldr	r1, [pc, #12]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08005a50 	.word	0x08005a50

08002e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e94:	f7ff ffdc 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0b5b      	lsrs	r3, r3, #13
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08005a50 	.word	0x08005a50

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ebc:	b0ae      	sub	sp, #184	; 0xb8
 8002ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ede:	4bcb      	ldr	r3, [pc, #812]	; (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	f200 8206 	bhi.w	80032f8 <HAL_RCC_GetSysClockFreq+0x440>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f29 	.word	0x08002f29
 8002ef8:	080032f9 	.word	0x080032f9
 8002efc:	080032f9 	.word	0x080032f9
 8002f00:	080032f9 	.word	0x080032f9
 8002f04:	08002f31 	.word	0x08002f31
 8002f08:	080032f9 	.word	0x080032f9
 8002f0c:	080032f9 	.word	0x080032f9
 8002f10:	080032f9 	.word	0x080032f9
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	080032f9 	.word	0x080032f9
 8002f1c:	080032f9 	.word	0x080032f9
 8002f20:	080032f9 	.word	0x080032f9
 8002f24:	08003129 	.word	0x08003129
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4bb9      	ldr	r3, [pc, #740]	; (8003210 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002f2e:	e1e7      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f30:	4bb8      	ldr	r3, [pc, #736]	; (8003214 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f36:	e1e3      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f38:	4bb4      	ldr	r3, [pc, #720]	; (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f44:	4bb1      	ldr	r3, [pc, #708]	; (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d071      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f50:	4bae      	ldr	r3, [pc, #696]	; (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f5c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f76:	4622      	mov	r2, r4
 8002f78:	462b      	mov	r3, r5
 8002f7a:	f04f 0000 	mov.w	r0, #0
 8002f7e:	f04f 0100 	mov.w	r1, #0
 8002f82:	0159      	lsls	r1, r3, #5
 8002f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f88:	0150      	lsls	r0, r2, #5
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4621      	mov	r1, r4
 8002f90:	1a51      	subs	r1, r2, r1
 8002f92:	6439      	str	r1, [r7, #64]	; 0x40
 8002f94:	4629      	mov	r1, r5
 8002f96:	eb63 0301 	sbc.w	r3, r3, r1
 8002f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002fa8:	4649      	mov	r1, r9
 8002faa:	018b      	lsls	r3, r1, #6
 8002fac:	4641      	mov	r1, r8
 8002fae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	018a      	lsls	r2, r1, #6
 8002fb6:	4641      	mov	r1, r8
 8002fb8:	1a51      	subs	r1, r2, r1
 8002fba:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	00cb      	lsls	r3, r1, #3
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fda:	4641      	mov	r1, r8
 8002fdc:	00ca      	lsls	r2, r1, #3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4622      	mov	r2, r4
 8002fe6:	189b      	adds	r3, r3, r2
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fea:	462b      	mov	r3, r5
 8002fec:	460a      	mov	r2, r1
 8002fee:	eb42 0303 	adc.w	r3, r2, r3
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003000:	4629      	mov	r1, r5
 8003002:	024b      	lsls	r3, r1, #9
 8003004:	4621      	mov	r1, r4
 8003006:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800300a:	4621      	mov	r1, r4
 800300c:	024a      	lsls	r2, r1, #9
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003016:	2200      	movs	r2, #0
 8003018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800301c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003020:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003024:	f7fd f944 	bl	80002b0 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003032:	e067      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003034:	4b75      	ldr	r3, [pc, #468]	; (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	2200      	movs	r2, #0
 800303c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003040:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003044:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304c:	67bb      	str	r3, [r7, #120]	; 0x78
 800304e:	2300      	movs	r3, #0
 8003050:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003052:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003056:	4622      	mov	r2, r4
 8003058:	462b      	mov	r3, r5
 800305a:	f04f 0000 	mov.w	r0, #0
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	0159      	lsls	r1, r3, #5
 8003064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003068:	0150      	lsls	r0, r2, #5
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4621      	mov	r1, r4
 8003070:	1a51      	subs	r1, r2, r1
 8003072:	62b9      	str	r1, [r7, #40]	; 0x28
 8003074:	4629      	mov	r1, r5
 8003076:	eb63 0301 	sbc.w	r3, r3, r1
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003088:	4649      	mov	r1, r9
 800308a:	018b      	lsls	r3, r1, #6
 800308c:	4641      	mov	r1, r8
 800308e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003092:	4641      	mov	r1, r8
 8003094:	018a      	lsls	r2, r1, #6
 8003096:	4641      	mov	r1, r8
 8003098:	ebb2 0a01 	subs.w	sl, r2, r1
 800309c:	4649      	mov	r1, r9
 800309e:	eb63 0b01 	sbc.w	fp, r3, r1
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b6:	4692      	mov	sl, r2
 80030b8:	469b      	mov	fp, r3
 80030ba:	4623      	mov	r3, r4
 80030bc:	eb1a 0303 	adds.w	r3, sl, r3
 80030c0:	623b      	str	r3, [r7, #32]
 80030c2:	462b      	mov	r3, r5
 80030c4:	eb4b 0303 	adc.w	r3, fp, r3
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030ec:	2200      	movs	r2, #0
 80030ee:	673b      	str	r3, [r7, #112]	; 0x70
 80030f0:	677a      	str	r2, [r7, #116]	; 0x74
 80030f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80030f6:	f7fd f8db 	bl	80002b0 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4613      	mov	r3, r2
 8003100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800311a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003126:	e0eb      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003128:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003134:	4b35      	ldr	r3, [pc, #212]	; (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d06b      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003140:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_RCC_GetSysClockFreq+0x354>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	2200      	movs	r2, #0
 8003148:	66bb      	str	r3, [r7, #104]	; 0x68
 800314a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800314c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800314e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003152:	663b      	str	r3, [r7, #96]	; 0x60
 8003154:	2300      	movs	r3, #0
 8003156:	667b      	str	r3, [r7, #100]	; 0x64
 8003158:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800315c:	4622      	mov	r2, r4
 800315e:	462b      	mov	r3, r5
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	0159      	lsls	r1, r3, #5
 800316a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800316e:	0150      	lsls	r0, r2, #5
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4621      	mov	r1, r4
 8003176:	1a51      	subs	r1, r2, r1
 8003178:	61b9      	str	r1, [r7, #24]
 800317a:	4629      	mov	r1, r5
 800317c:	eb63 0301 	sbc.w	r3, r3, r1
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800318e:	4659      	mov	r1, fp
 8003190:	018b      	lsls	r3, r1, #6
 8003192:	4651      	mov	r1, sl
 8003194:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003198:	4651      	mov	r1, sl
 800319a:	018a      	lsls	r2, r1, #6
 800319c:	4651      	mov	r1, sl
 800319e:	ebb2 0801 	subs.w	r8, r2, r1
 80031a2:	4659      	mov	r1, fp
 80031a4:	eb63 0901 	sbc.w	r9, r3, r1
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031bc:	4690      	mov	r8, r2
 80031be:	4699      	mov	r9, r3
 80031c0:	4623      	mov	r3, r4
 80031c2:	eb18 0303 	adds.w	r3, r8, r3
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	462b      	mov	r3, r5
 80031ca:	eb49 0303 	adc.w	r3, r9, r3
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80031dc:	4629      	mov	r1, r5
 80031de:	024b      	lsls	r3, r1, #9
 80031e0:	4621      	mov	r1, r4
 80031e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e6:	4621      	mov	r1, r4
 80031e8:	024a      	lsls	r2, r1, #9
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031f2:	2200      	movs	r2, #0
 80031f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031fc:	f7fd f858 	bl	80002b0 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4613      	mov	r3, r2
 8003206:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800320a:	e065      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x420>
 800320c:	40023800 	.word	0x40023800
 8003210:	00f42400 	.word	0x00f42400
 8003214:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003218:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_GetSysClockFreq+0x458>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	2200      	movs	r2, #0
 8003220:	4618      	mov	r0, r3
 8003222:	4611      	mov	r1, r2
 8003224:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003228:	653b      	str	r3, [r7, #80]	; 0x50
 800322a:	2300      	movs	r3, #0
 800322c:	657b      	str	r3, [r7, #84]	; 0x54
 800322e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003232:	4642      	mov	r2, r8
 8003234:	464b      	mov	r3, r9
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	0159      	lsls	r1, r3, #5
 8003240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003244:	0150      	lsls	r0, r2, #5
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4641      	mov	r1, r8
 800324c:	1a51      	subs	r1, r2, r1
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	4649      	mov	r1, r9
 8003252:	eb63 0301 	sbc.w	r3, r3, r1
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003264:	4659      	mov	r1, fp
 8003266:	018b      	lsls	r3, r1, #6
 8003268:	4651      	mov	r1, sl
 800326a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800326e:	4651      	mov	r1, sl
 8003270:	018a      	lsls	r2, r1, #6
 8003272:	4651      	mov	r1, sl
 8003274:	1a54      	subs	r4, r2, r1
 8003276:	4659      	mov	r1, fp
 8003278:	eb63 0501 	sbc.w	r5, r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	00eb      	lsls	r3, r5, #3
 8003286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328a:	00e2      	lsls	r2, r4, #3
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	4643      	mov	r3, r8
 8003292:	18e3      	adds	r3, r4, r3
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	464b      	mov	r3, r9
 8003298:	eb45 0303 	adc.w	r3, r5, r3
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032aa:	4629      	mov	r1, r5
 80032ac:	028b      	lsls	r3, r1, #10
 80032ae:	4621      	mov	r1, r4
 80032b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032b4:	4621      	mov	r1, r4
 80032b6:	028a      	lsls	r2, r1, #10
 80032b8:	4610      	mov	r0, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032c0:	2200      	movs	r2, #0
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80032c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032ca:	f7fc fff1 	bl	80002b0 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4613      	mov	r3, r2
 80032d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <HAL_RCC_GetSysClockFreq+0x458>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	0f1b      	lsrs	r3, r3, #28
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80032e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032f6:	e003      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003300:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003304:	4618      	mov	r0, r3
 8003306:	37b8      	adds	r7, #184	; 0xb8
 8003308:	46bd      	mov	sp, r7
 800330a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
 8003314:	00f42400 	.word	0x00f42400

08003318 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e28d      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8083 	beq.w	800343e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003338:	4b94      	ldr	r3, [pc, #592]	; (800358c <HAL_RCC_OscConfig+0x274>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	d019      	beq.n	8003378 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003344:	4b91      	ldr	r3, [pc, #580]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800334c:	2b08      	cmp	r3, #8
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003350:	4b8e      	ldr	r3, [pc, #568]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335c:	d00c      	beq.n	8003378 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335e:	4b8b      	ldr	r3, [pc, #556]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d112      	bne.n	8003390 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336a:	4b88      	ldr	r3, [pc, #544]	; (800358c <HAL_RCC_OscConfig+0x274>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003376:	d10b      	bne.n	8003390 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	4b84      	ldr	r3, [pc, #528]	; (800358c <HAL_RCC_OscConfig+0x274>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d05b      	beq.n	800343c <HAL_RCC_OscConfig+0x124>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d157      	bne.n	800343c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e25a      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_OscConfig+0x90>
 800339a:	4b7c      	ldr	r3, [pc, #496]	; (800358c <HAL_RCC_OscConfig+0x274>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7b      	ldr	r2, [pc, #492]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e01d      	b.n	80033e4 <HAL_RCC_OscConfig+0xcc>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0xb4>
 80033b2:	4b76      	ldr	r3, [pc, #472]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b73      	ldr	r3, [pc, #460]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a72      	ldr	r2, [pc, #456]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0xcc>
 80033cc:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b6c      	ldr	r3, [pc, #432]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6b      	ldr	r2, [pc, #428]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe f8a0 	bl	8001530 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fe f89c 	bl	8001530 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e21f      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b61      	ldr	r3, [pc, #388]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0xdc>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe f88c 	bl	8001530 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800341c:	f7fe f888 	bl	8001530 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e20b      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	4b57      	ldr	r3, [pc, #348]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x104>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d06f      	beq.n	800352a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800344a:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_OscConfig+0x274>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b00      	cmp	r3, #0
 8003454:	d017      	beq.n	8003486 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003456:	4b4d      	ldr	r3, [pc, #308]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800345e:	2b08      	cmp	r3, #8
 8003460:	d105      	bne.n	800346e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003462:	4b4a      	ldr	r3, [pc, #296]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d11c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b44      	ldr	r3, [pc, #272]	; (800358c <HAL_RCC_OscConfig+0x274>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x186>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e1d3      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4937      	ldr	r1, [pc, #220]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	e03a      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034bc:	4b34      	ldr	r3, [pc, #208]	; (8003590 <HAL_RCC_OscConfig+0x278>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fe f835 	bl	8001530 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fe f831 	bl	8001530 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e1b4      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4925      	ldr	r1, [pc, #148]	; (800358c <HAL_RCC_OscConfig+0x274>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_RCC_OscConfig+0x278>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe f814 	bl	8001530 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350c:	f7fe f810 	bl	8001530 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e193      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d036      	beq.n	80035a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <HAL_RCC_OscConfig+0x27c>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd fff4 	bl	8001530 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354c:	f7fd fff0 	bl	8001530 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e173      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_OscConfig+0x274>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x234>
 800356a:	e01b      	b.n	80035a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_OscConfig+0x27c>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fd ffdd 	bl	8001530 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	e00e      	b.n	8003598 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357a:	f7fd ffd9 	bl	8001530 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d907      	bls.n	8003598 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e15c      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
 800358c:	40023800 	.word	0x40023800
 8003590:	42470000 	.word	0x42470000
 8003594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b8a      	ldr	r3, [pc, #552]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800359a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ea      	bne.n	800357a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8097 	beq.w	80036e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4b83      	ldr	r3, [pc, #524]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10f      	bne.n	80035e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	4b7f      	ldr	r3, [pc, #508]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a7e      	ldr	r2, [pc, #504]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b7c      	ldr	r3, [pc, #496]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035de:	2301      	movs	r3, #1
 80035e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	4b79      	ldr	r3, [pc, #484]	; (80037c8 <HAL_RCC_OscConfig+0x4b0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d118      	bne.n	8003620 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ee:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x4b0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a75      	ldr	r2, [pc, #468]	; (80037c8 <HAL_RCC_OscConfig+0x4b0>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fa:	f7fd ff99 	bl	8001530 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003602:	f7fd ff95 	bl	8001530 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e118      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <HAL_RCC_OscConfig+0x4b0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x31e>
 8003628:	4b66      	ldr	r3, [pc, #408]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4a65      	ldr	r2, [pc, #404]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6713      	str	r3, [r2, #112]	; 0x70
 8003634:	e01c      	b.n	8003670 <HAL_RCC_OscConfig+0x358>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b05      	cmp	r3, #5
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0x340>
 800363e:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a60      	ldr	r2, [pc, #384]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
 800364a:	4b5e      	ldr	r3, [pc, #376]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a5d      	ldr	r2, [pc, #372]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
 8003656:	e00b      	b.n	8003670 <HAL_RCC_OscConfig+0x358>
 8003658:	4b5a      	ldr	r3, [pc, #360]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a59      	ldr	r2, [pc, #356]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a56      	ldr	r2, [pc, #344]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	f023 0304 	bic.w	r3, r3, #4
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d015      	beq.n	80036a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003678:	f7fd ff5a 	bl	8001530 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fd ff56 	bl	8001530 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0d7      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	4b4b      	ldr	r3, [pc, #300]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ee      	beq.n	8003680 <HAL_RCC_OscConfig+0x368>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fd ff44 	bl	8001530 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fd ff40 	bl	8001530 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0c1      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c2:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ee      	bne.n	80036ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	4a3a      	ldr	r2, [pc, #232]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80036da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80ad 	beq.w	8003844 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ea:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d060      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d145      	bne.n	800378a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fe:	4b33      	ldr	r3, [pc, #204]	; (80037cc <HAL_RCC_OscConfig+0x4b4>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003704:	f7fd ff14 	bl	8001530 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370c:	f7fd ff10 	bl	8001530 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e093      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	4b29      	ldr	r3, [pc, #164]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	071b      	lsls	r3, r3, #28
 8003756:	491b      	ldr	r1, [pc, #108]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <HAL_RCC_OscConfig+0x4b4>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fd fee5 	bl	8001530 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376a:	f7fd fee1 	bl	8001530 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e064      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377c:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x452>
 8003788:	e05c      	b.n	8003844 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_RCC_OscConfig+0x4b4>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd fece 	bl	8001530 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7fd feca 	bl	8001530 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e04d      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_OscConfig+0x4ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x480>
 80037b6:	e045      	b.n	8003844 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e040      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40007000 	.word	0x40007000
 80037cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037d0:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <HAL_RCC_OscConfig+0x538>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d030      	beq.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d129      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d122      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	4293      	cmp	r3, r2
 800380a:	d119      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	3b01      	subs	r3, #1
 800381a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d10f      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e041      	b.n	80038ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fc68 	bl	8001150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fca8 	bl	80041e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e04e      	b.n	80039aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d01d      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_TIM_Base_Start_IT+0xc8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x80>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d111      	bne.n	8003998 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b06      	cmp	r3, #6
 8003984:	d010      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	e007      	b.n	80039a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40001800 	.word	0x40001800

080039d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <HAL_TIM_Base_Stop_IT+0x48>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	f240 4344 	movw	r3, #1092	; 0x444
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <HAL_TIM_Base_Stop_IT+0x48>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e041      	b.n	8003ac8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f839 	bl	8003ad0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f000 fbb9 	bl	80041e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_TIM_PWM_Start+0x24>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e022      	b.n	8003b4e <HAL_TIM_PWM_Start+0x6a>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d109      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x3e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e015      	b.n	8003b4e <HAL_TIM_PWM_Start+0x6a>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d109      	bne.n	8003b3c <HAL_TIM_PWM_Start+0x58>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e008      	b.n	8003b4e <HAL_TIM_PWM_Start+0x6a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07c      	b.n	8003c50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_PWM_Start+0x82>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b64:	e013      	b.n	8003b8e <HAL_TIM_PWM_Start+0xaa>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x92>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b74:	e00b      	b.n	8003b8e <HAL_TIM_PWM_Start+0xaa>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_PWM_Start+0xa2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b84:	e003      	b.n	8003b8e <HAL_TIM_PWM_Start+0xaa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fe10 	bl	80047bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	; (8003c58 <HAL_TIM_PWM_Start+0x174>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_TIM_PWM_Start+0xcc>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <HAL_TIM_PWM_Start+0x178>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIM_PWM_Start+0xd0>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_TIM_PWM_Start+0xd2>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <HAL_TIM_PWM_Start+0x174>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bdc:	d01d      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <HAL_TIM_PWM_Start+0x17c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d018      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <HAL_TIM_PWM_Start+0x180>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_TIM_PWM_Start+0x184>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00e      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <HAL_TIM_PWM_Start+0x178>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d009      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <HAL_TIM_PWM_Start+0x188>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d004      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x136>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <HAL_TIM_PWM_Start+0x18c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d111      	bne.n	8003c3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2b06      	cmp	r3, #6
 8003c2a:	d010      	beq.n	8003c4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3c:	e007      	b.n	8003c4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40010400 	.word	0x40010400
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	40000c00 	.word	0x40000c00
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40001800 	.word	0x40001800

08003c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d122      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d11b      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0202 	mvn.w	r2, #2
 8003ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fa77 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8003cbc:	e005      	b.n	8003cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa69 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fa7a 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d122      	bne.n	8003d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d11b      	bne.n	8003d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0204 	mvn.w	r2, #4
 8003cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fa4d 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8003d10:	e005      	b.n	8003d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fa3f 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fa50 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d122      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d11b      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0208 	mvn.w	r2, #8
 8003d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa23 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8003d64:	e005      	b.n	8003d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fa15 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fa26 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b10      	cmp	r3, #16
 8003d84:	d122      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d11b      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0210 	mvn.w	r2, #16
 8003d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2208      	movs	r2, #8
 8003da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f9f9 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8003db8:	e005      	b.n	8003dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9eb 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f9fc 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10e      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0201 	mvn.w	r2, #1
 8003df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd f8c4 	bl	8000f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d10e      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b80      	cmp	r3, #128	; 0x80
 8003e12:	d107      	bne.n	8003e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fd78 	bl	8004914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d10e      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b40      	cmp	r3, #64	; 0x40
 8003e3e:	d107      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f9c1 	bl	80041d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d10e      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d107      	bne.n	8003e7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0220 	mvn.w	r2, #32
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fd42 	bl	8004900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0ae      	b.n	8004000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	f200 809f 	bhi.w	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003ff1 	.word	0x08003ff1
 8003ec0:	08003ff1 	.word	0x08003ff1
 8003ec4:	08003ff1 	.word	0x08003ff1
 8003ec8:	08003f2d 	.word	0x08003f2d
 8003ecc:	08003ff1 	.word	0x08003ff1
 8003ed0:	08003ff1 	.word	0x08003ff1
 8003ed4:	08003ff1 	.word	0x08003ff1
 8003ed8:	08003f6f 	.word	0x08003f6f
 8003edc:	08003ff1 	.word	0x08003ff1
 8003ee0:	08003ff1 	.word	0x08003ff1
 8003ee4:	08003ff1 	.word	0x08003ff1
 8003ee8:	08003faf 	.word	0x08003faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fa18 	bl	8004328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0208 	orr.w	r2, r2, #8
 8003f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0204 	bic.w	r2, r2, #4
 8003f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6999      	ldr	r1, [r3, #24]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	619a      	str	r2, [r3, #24]
      break;
 8003f2a:	e064      	b.n	8003ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fa68 	bl	8004408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6999      	ldr	r1, [r3, #24]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	021a      	lsls	r2, r3, #8
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	619a      	str	r2, [r3, #24]
      break;
 8003f6c:	e043      	b.n	8003ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fabd 	bl	80044f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0208 	orr.w	r2, r2, #8
 8003f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0204 	bic.w	r2, r2, #4
 8003f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69d9      	ldr	r1, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	61da      	str	r2, [r3, #28]
      break;
 8003fac:	e023      	b.n	8003ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fb11 	bl	80045dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69d9      	ldr	r1, [r3, #28]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	021a      	lsls	r2, r3, #8
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	61da      	str	r2, [r3, #28]
      break;
 8003fee:	e002      	b.n	8003ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_TIM_ConfigClockSource+0x1c>
 8004020:	2302      	movs	r3, #2
 8004022:	e0b4      	b.n	800418e <HAL_TIM_ConfigClockSource+0x186>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800404a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405c:	d03e      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0xd4>
 800405e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004062:	f200 8087 	bhi.w	8004174 <HAL_TIM_ConfigClockSource+0x16c>
 8004066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406a:	f000 8086 	beq.w	800417a <HAL_TIM_ConfigClockSource+0x172>
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004072:	d87f      	bhi.n	8004174 <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b70      	cmp	r3, #112	; 0x70
 8004076:	d01a      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0xa6>
 8004078:	2b70      	cmp	r3, #112	; 0x70
 800407a:	d87b      	bhi.n	8004174 <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b60      	cmp	r3, #96	; 0x60
 800407e:	d050      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x11a>
 8004080:	2b60      	cmp	r3, #96	; 0x60
 8004082:	d877      	bhi.n	8004174 <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b50      	cmp	r3, #80	; 0x50
 8004086:	d03c      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0xfa>
 8004088:	2b50      	cmp	r3, #80	; 0x50
 800408a:	d873      	bhi.n	8004174 <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b40      	cmp	r3, #64	; 0x40
 800408e:	d058      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x13a>
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d86f      	bhi.n	8004174 <HAL_TIM_ConfigClockSource+0x16c>
 8004094:	2b30      	cmp	r3, #48	; 0x30
 8004096:	d064      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0x15a>
 8004098:	2b30      	cmp	r3, #48	; 0x30
 800409a:	d86b      	bhi.n	8004174 <HAL_TIM_ConfigClockSource+0x16c>
 800409c:	2b20      	cmp	r3, #32
 800409e:	d060      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0x15a>
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d867      	bhi.n	8004174 <HAL_TIM_ConfigClockSource+0x16c>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d05c      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0x15a>
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d05a      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0x15a>
 80040ac:	e062      	b.n	8004174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6899      	ldr	r1, [r3, #8]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f000 fb5d 	bl	800477c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	609a      	str	r2, [r3, #8]
      break;
 80040da:	e04f      	b.n	800417c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	6899      	ldr	r1, [r3, #8]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f000 fb46 	bl	800477c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fe:	609a      	str	r2, [r3, #8]
      break;
 8004100:	e03c      	b.n	800417c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	461a      	mov	r2, r3
 8004110:	f000 faba 	bl	8004688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2150      	movs	r1, #80	; 0x50
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fb13 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004120:	e02c      	b.n	800417c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6859      	ldr	r1, [r3, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	461a      	mov	r2, r3
 8004130:	f000 fad9 	bl	80046e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2160      	movs	r1, #96	; 0x60
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fb03 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004140:	e01c      	b.n	800417c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6859      	ldr	r1, [r3, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	461a      	mov	r2, r3
 8004150:	f000 fa9a 	bl	8004688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2140      	movs	r1, #64	; 0x40
 800415a:	4618      	mov	r0, r3
 800415c:	f000 faf3 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004160:	e00c      	b.n	800417c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f000 faea 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 8004172:	e003      	b.n	800417c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      break;
 8004178:	e000      	b.n	800417c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800417a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a40      	ldr	r2, [pc, #256]	; (80042fc <TIM_Base_SetConfig+0x114>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d00f      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a3d      	ldr	r2, [pc, #244]	; (8004300 <TIM_Base_SetConfig+0x118>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00b      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a3c      	ldr	r2, [pc, #240]	; (8004304 <TIM_Base_SetConfig+0x11c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <TIM_Base_SetConfig+0x120>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3a      	ldr	r2, [pc, #232]	; (800430c <TIM_Base_SetConfig+0x124>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d108      	bne.n	800423a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2f      	ldr	r2, [pc, #188]	; (80042fc <TIM_Base_SetConfig+0x114>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d02b      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004248:	d027      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <TIM_Base_SetConfig+0x118>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d023      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2b      	ldr	r2, [pc, #172]	; (8004304 <TIM_Base_SetConfig+0x11c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01f      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <TIM_Base_SetConfig+0x120>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01b      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a29      	ldr	r2, [pc, #164]	; (800430c <TIM_Base_SetConfig+0x124>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d017      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a28      	ldr	r2, [pc, #160]	; (8004310 <TIM_Base_SetConfig+0x128>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a27      	ldr	r2, [pc, #156]	; (8004314 <TIM_Base_SetConfig+0x12c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00f      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a26      	ldr	r2, [pc, #152]	; (8004318 <TIM_Base_SetConfig+0x130>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00b      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a25      	ldr	r2, [pc, #148]	; (800431c <TIM_Base_SetConfig+0x134>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a24      	ldr	r2, [pc, #144]	; (8004320 <TIM_Base_SetConfig+0x138>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a23      	ldr	r2, [pc, #140]	; (8004324 <TIM_Base_SetConfig+0x13c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <TIM_Base_SetConfig+0x114>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0c      	ldr	r2, [pc, #48]	; (800430c <TIM_Base_SetConfig+0x124>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d103      	bne.n	80042e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	615a      	str	r2, [r3, #20]
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40010400 	.word	0x40010400
 8004310:	40014000 	.word	0x40014000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800
 800431c:	40001800 	.word	0x40001800
 8004320:	40001c00 	.word	0x40001c00
 8004324:	40002000 	.word	0x40002000

08004328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0201 	bic.w	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f023 0302 	bic.w	r3, r3, #2
 8004370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a20      	ldr	r2, [pc, #128]	; (8004400 <TIM_OC1_SetConfig+0xd8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_OC1_SetConfig+0x64>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a1f      	ldr	r2, [pc, #124]	; (8004404 <TIM_OC1_SetConfig+0xdc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d10c      	bne.n	80043a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0308 	bic.w	r3, r3, #8
 8004392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a15      	ldr	r2, [pc, #84]	; (8004400 <TIM_OC1_SetConfig+0xd8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_OC1_SetConfig+0x8e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a14      	ldr	r2, [pc, #80]	; (8004404 <TIM_OC1_SetConfig+0xdc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d111      	bne.n	80043da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40010000 	.word	0x40010000
 8004404:	40010400 	.word	0x40010400

08004408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0210 	bic.w	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0320 	bic.w	r3, r3, #32
 8004452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a22      	ldr	r2, [pc, #136]	; (80044ec <TIM_OC2_SetConfig+0xe4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_OC2_SetConfig+0x68>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <TIM_OC2_SetConfig+0xe8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10d      	bne.n	800448c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a17      	ldr	r2, [pc, #92]	; (80044ec <TIM_OC2_SetConfig+0xe4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d003      	beq.n	800449c <TIM_OC2_SetConfig+0x94>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <TIM_OC2_SetConfig+0xe8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d113      	bne.n	80044c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40010400 	.word	0x40010400

080044f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800453c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a21      	ldr	r2, [pc, #132]	; (80045d4 <TIM_OC3_SetConfig+0xe0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_OC3_SetConfig+0x66>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a20      	ldr	r2, [pc, #128]	; (80045d8 <TIM_OC3_SetConfig+0xe4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d10d      	bne.n	8004576 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <TIM_OC3_SetConfig+0xe0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC3_SetConfig+0x92>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <TIM_OC3_SetConfig+0xe4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d113      	bne.n	80045ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800458c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40010400 	.word	0x40010400

080045dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	031b      	lsls	r3, r3, #12
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a12      	ldr	r2, [pc, #72]	; (8004680 <TIM_OC4_SetConfig+0xa4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_OC4_SetConfig+0x68>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a11      	ldr	r2, [pc, #68]	; (8004684 <TIM_OC4_SetConfig+0xa8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d109      	bne.n	8004658 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800464a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	019b      	lsls	r3, r3, #6
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	bf00      	nop
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40010000 	.word	0x40010000
 8004684:	40010400 	.word	0x40010400

08004688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f023 0201 	bic.w	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 030a 	bic.w	r3, r3, #10
 80046c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b087      	sub	sp, #28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0210 	bic.w	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	031b      	lsls	r3, r3, #12
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004722:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	f043 0307 	orr.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	021a      	lsls	r2, r3, #8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	431a      	orrs	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2201      	movs	r2, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1a      	ldr	r2, [r3, #32]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	43db      	mvns	r3, r3
 80047de:	401a      	ands	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800481c:	2302      	movs	r3, #2
 800481e:	e05a      	b.n	80048d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486c:	d01d      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1b      	ldr	r2, [pc, #108]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1a      	ldr	r2, [pc, #104]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a15      	ldr	r2, [pc, #84]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d10c      	bne.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40001800 	.word	0x40001800

08004900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e03f      	b.n	80049ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fc fc90 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800496a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f929 	bl	8004bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b08a      	sub	sp, #40	; 0x28
 80049c6:	af02      	add	r7, sp, #8
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d17c      	bne.n	8004adc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_UART_Transmit+0x2c>
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e075      	b.n	8004ade <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_UART_Transmit+0x3e>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e06e      	b.n	8004ade <HAL_UART_Transmit+0x11c>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2221      	movs	r2, #33	; 0x21
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a16:	f7fc fd8b 	bl	8001530 <HAL_GetTick>
 8004a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a30:	d108      	bne.n	8004a44 <HAL_UART_Transmit+0x82>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	e003      	b.n	8004a4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a54:	e02a      	b.n	8004aac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f840 	bl	8004ae6 <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e036      	b.n	8004ade <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10b      	bne.n	8004a8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	3302      	adds	r3, #2
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e007      	b.n	8004a9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1cf      	bne.n	8004a56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2140      	movs	r1, #64	; 0x40
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f810 	bl	8004ae6 <UART_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e006      	b.n	8004ade <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b090      	sub	sp, #64	; 0x40
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af6:	e050      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afe:	d04c      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b06:	f7fc fd13 	bl	8001530 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d241      	bcs.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b36:	637a      	str	r2, [r7, #52]	; 0x34
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3314      	adds	r3, #20
 8004b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3314      	adds	r3, #20
 8004b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b6a:	623a      	str	r2, [r7, #32]
 8004b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	69f9      	ldr	r1, [r7, #28]
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e5      	bne.n	8004b4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e00f      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d09f      	beq.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3740      	adds	r7, #64	; 0x40
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b0c0      	sub	sp, #256	; 0x100
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	68d9      	ldr	r1, [r3, #12]
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	ea40 0301 	orr.w	r3, r0, r1
 8004bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c1c:	f021 010c 	bic.w	r1, r1, #12
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	6999      	ldr	r1, [r3, #24]
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	ea40 0301 	orr.w	r3, r0, r1
 8004c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b8f      	ldr	r3, [pc, #572]	; (8004e90 <UART_SetConfig+0x2cc>)
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d005      	beq.n	8004c64 <UART_SetConfig+0xa0>
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	; (8004e94 <UART_SetConfig+0x2d0>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d104      	bne.n	8004c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe f914 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 8004c68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c6c:	e003      	b.n	8004c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c6e:	f7fe f8fb 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8004c72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c80:	f040 810c 	bne.w	8004e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c96:	4622      	mov	r2, r4
 8004c98:	462b      	mov	r3, r5
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	eb12 0801 	adds.w	r8, r2, r1
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb43 0901 	adc.w	r9, r3, r1
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cc6:	4690      	mov	r8, r2
 8004cc8:	4699      	mov	r9, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	eb18 0303 	adds.w	r3, r8, r3
 8004cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	eb49 0303 	adc.w	r3, r9, r3
 8004cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	18db      	adds	r3, r3, r3
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	eb42 0303 	adc.w	r3, r2, r3
 8004cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8004d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d08:	f7fb fad2 	bl	80002b0 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b61      	ldr	r3, [pc, #388]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004d12:	fba3 2302 	umull	r2, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	011c      	lsls	r4, r3, #4
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d34:	415b      	adcs	r3, r3
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d42:	4649      	mov	r1, r9
 8004d44:	eb43 0b01 	adc.w	fp, r3, r1
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d5c:	4692      	mov	sl, r2
 8004d5e:	469b      	mov	fp, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	eb1a 0303 	adds.w	r3, sl, r3
 8004d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	18db      	adds	r3, r3, r3
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d8e:	4613      	mov	r3, r2
 8004d90:	eb42 0303 	adc.w	r3, r2, r3
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
 8004d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d9e:	f7fb fa87 	bl	80002b0 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004daa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2264      	movs	r2, #100	; 0x64
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	1acb      	subs	r3, r1, r3
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dcc:	441c      	add	r4, r3
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004de8:	415b      	adcs	r3, r3
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	6339      	str	r1, [r7, #48]	; 0x30
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e24:	464b      	mov	r3, r9
 8004e26:	460a      	mov	r2, r1
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e44:	460b      	mov	r3, r1
 8004e46:	18db      	adds	r3, r3, r3
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e5a:	f7fb fa29 	bl	80002b0 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004e64:	fba3 1302 	umull	r1, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	2164      	movs	r1, #100	; 0x64
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3332      	adds	r3, #50	; 0x32
 8004e76:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f003 0207 	and.w	r2, r3, #7
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4422      	add	r2, r4
 8004e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e8c:	e105      	b.n	800509a <UART_SetConfig+0x4d6>
 8004e8e:	bf00      	nop
 8004e90:	40011000 	.word	0x40011000
 8004e94:	40011400 	.word	0x40011400
 8004e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eae:	4642      	mov	r2, r8
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	1891      	adds	r1, r2, r2
 8004eb4:	6239      	str	r1, [r7, #32]
 8004eb6:	415b      	adcs	r3, r3
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	1854      	adds	r4, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb43 0501 	adc.w	r5, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	00eb      	lsls	r3, r5, #3
 8004ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed6:	00e2      	lsls	r2, r4, #3
 8004ed8:	4614      	mov	r4, r2
 8004eda:	461d      	mov	r5, r3
 8004edc:	4643      	mov	r3, r8
 8004ede:	18e3      	adds	r3, r4, r3
 8004ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	eb45 0303 	adc.w	r3, r5, r3
 8004eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	4621      	mov	r1, r4
 8004f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f14:	4621      	mov	r1, r4
 8004f16:	008a      	lsls	r2, r1, #2
 8004f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f1c:	f7fb f9c8 	bl	80002b0 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b60      	ldr	r3, [pc, #384]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004f26:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	011c      	lsls	r4, r3, #4
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	61b9      	str	r1, [r7, #24]
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6139      	str	r1, [r7, #16]
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fa8:	4649      	mov	r1, r9
 8004faa:	008b      	lsls	r3, r1, #2
 8004fac:	4641      	mov	r1, r8
 8004fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	008a      	lsls	r2, r1, #2
 8004fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fba:	f7fb f979 	bl	80002b0 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	; 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	3332      	adds	r3, #50	; 0x32
 8004fd6:	4a34      	ldr	r2, [pc, #208]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe2:	441c      	add	r4, r3
 8004fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe8:	2200      	movs	r2, #0
 8004fea:	673b      	str	r3, [r7, #112]	; 0x70
 8004fec:	677a      	str	r2, [r7, #116]	; 0x74
 8004fee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ff2:	4642      	mov	r2, r8
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	1891      	adds	r1, r2, r2
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	415b      	adcs	r3, r3
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005002:	4641      	mov	r1, r8
 8005004:	1851      	adds	r1, r2, r1
 8005006:	6039      	str	r1, [r7, #0]
 8005008:	4649      	mov	r1, r9
 800500a:	414b      	adcs	r3, r1
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800501a:	4659      	mov	r1, fp
 800501c:	00cb      	lsls	r3, r1, #3
 800501e:	4651      	mov	r1, sl
 8005020:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005024:	4651      	mov	r1, sl
 8005026:	00ca      	lsls	r2, r1, #3
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	4603      	mov	r3, r0
 800502e:	4642      	mov	r2, r8
 8005030:	189b      	adds	r3, r3, r2
 8005032:	66bb      	str	r3, [r7, #104]	; 0x68
 8005034:	464b      	mov	r3, r9
 8005036:	460a      	mov	r2, r1
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	663b      	str	r3, [r7, #96]	; 0x60
 8005048:	667a      	str	r2, [r7, #100]	; 0x64
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005056:	4649      	mov	r1, r9
 8005058:	008b      	lsls	r3, r1, #2
 800505a:	4641      	mov	r1, r8
 800505c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005060:	4641      	mov	r1, r8
 8005062:	008a      	lsls	r2, r1, #2
 8005064:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005068:	f7fb f922 	bl	80002b0 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <UART_SetConfig+0x4e4>)
 8005072:	fba3 1302 	umull	r1, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2164      	movs	r1, #100	; 0x64
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	3332      	adds	r3, #50	; 0x32
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <UART_SetConfig+0x4e4>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	f003 020f 	and.w	r2, r3, #15
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4422      	add	r2, r4
 8005098:	609a      	str	r2, [r3, #8]
}
 800509a:	bf00      	nop
 800509c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050a0:	46bd      	mov	sp, r7
 80050a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a6:	bf00      	nop
 80050a8:	51eb851f 	.word	0x51eb851f

080050ac <__errno>:
 80050ac:	4b01      	ldr	r3, [pc, #4]	; (80050b4 <__errno+0x8>)
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	2000000c 	.word	0x2000000c

080050b8 <__libc_init_array>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4d0d      	ldr	r5, [pc, #52]	; (80050f0 <__libc_init_array+0x38>)
 80050bc:	4c0d      	ldr	r4, [pc, #52]	; (80050f4 <__libc_init_array+0x3c>)
 80050be:	1b64      	subs	r4, r4, r5
 80050c0:	10a4      	asrs	r4, r4, #2
 80050c2:	2600      	movs	r6, #0
 80050c4:	42a6      	cmp	r6, r4
 80050c6:	d109      	bne.n	80050dc <__libc_init_array+0x24>
 80050c8:	4d0b      	ldr	r5, [pc, #44]	; (80050f8 <__libc_init_array+0x40>)
 80050ca:	4c0c      	ldr	r4, [pc, #48]	; (80050fc <__libc_init_array+0x44>)
 80050cc:	f000 fc8e 	bl	80059ec <_init>
 80050d0:	1b64      	subs	r4, r4, r5
 80050d2:	10a4      	asrs	r4, r4, #2
 80050d4:	2600      	movs	r6, #0
 80050d6:	42a6      	cmp	r6, r4
 80050d8:	d105      	bne.n	80050e6 <__libc_init_array+0x2e>
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e0:	4798      	blx	r3
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7ee      	b.n	80050c4 <__libc_init_array+0xc>
 80050e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ea:	4798      	blx	r3
 80050ec:	3601      	adds	r6, #1
 80050ee:	e7f2      	b.n	80050d6 <__libc_init_array+0x1e>
 80050f0:	08005a94 	.word	0x08005a94
 80050f4:	08005a94 	.word	0x08005a94
 80050f8:	08005a94 	.word	0x08005a94
 80050fc:	08005a98 	.word	0x08005a98

08005100 <memcpy>:
 8005100:	440a      	add	r2, r1
 8005102:	4291      	cmp	r1, r2
 8005104:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005108:	d100      	bne.n	800510c <memcpy+0xc>
 800510a:	4770      	bx	lr
 800510c:	b510      	push	{r4, lr}
 800510e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005116:	4291      	cmp	r1, r2
 8005118:	d1f9      	bne.n	800510e <memcpy+0xe>
 800511a:	bd10      	pop	{r4, pc}

0800511c <memset>:
 800511c:	4402      	add	r2, r0
 800511e:	4603      	mov	r3, r0
 8005120:	4293      	cmp	r3, r2
 8005122:	d100      	bne.n	8005126 <memset+0xa>
 8005124:	4770      	bx	lr
 8005126:	f803 1b01 	strb.w	r1, [r3], #1
 800512a:	e7f9      	b.n	8005120 <memset+0x4>

0800512c <siprintf>:
 800512c:	b40e      	push	{r1, r2, r3}
 800512e:	b500      	push	{lr}
 8005130:	b09c      	sub	sp, #112	; 0x70
 8005132:	ab1d      	add	r3, sp, #116	; 0x74
 8005134:	9002      	str	r0, [sp, #8]
 8005136:	9006      	str	r0, [sp, #24]
 8005138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800513c:	4809      	ldr	r0, [pc, #36]	; (8005164 <siprintf+0x38>)
 800513e:	9107      	str	r1, [sp, #28]
 8005140:	9104      	str	r1, [sp, #16]
 8005142:	4909      	ldr	r1, [pc, #36]	; (8005168 <siprintf+0x3c>)
 8005144:	f853 2b04 	ldr.w	r2, [r3], #4
 8005148:	9105      	str	r1, [sp, #20]
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	a902      	add	r1, sp, #8
 8005150:	f000 f868 	bl	8005224 <_svfiprintf_r>
 8005154:	9b02      	ldr	r3, [sp, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	b01c      	add	sp, #112	; 0x70
 800515c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005160:	b003      	add	sp, #12
 8005162:	4770      	bx	lr
 8005164:	2000000c 	.word	0x2000000c
 8005168:	ffff0208 	.word	0xffff0208

0800516c <__ssputs_r>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	688e      	ldr	r6, [r1, #8]
 8005172:	429e      	cmp	r6, r3
 8005174:	4682      	mov	sl, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4690      	mov	r8, r2
 800517a:	461f      	mov	r7, r3
 800517c:	d838      	bhi.n	80051f0 <__ssputs_r+0x84>
 800517e:	898a      	ldrh	r2, [r1, #12]
 8005180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005184:	d032      	beq.n	80051ec <__ssputs_r+0x80>
 8005186:	6825      	ldr	r5, [r4, #0]
 8005188:	6909      	ldr	r1, [r1, #16]
 800518a:	eba5 0901 	sub.w	r9, r5, r1
 800518e:	6965      	ldr	r5, [r4, #20]
 8005190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005198:	3301      	adds	r3, #1
 800519a:	444b      	add	r3, r9
 800519c:	106d      	asrs	r5, r5, #1
 800519e:	429d      	cmp	r5, r3
 80051a0:	bf38      	it	cc
 80051a2:	461d      	movcc	r5, r3
 80051a4:	0553      	lsls	r3, r2, #21
 80051a6:	d531      	bpl.n	800520c <__ssputs_r+0xa0>
 80051a8:	4629      	mov	r1, r5
 80051aa:	f000 fb55 	bl	8005858 <_malloc_r>
 80051ae:	4606      	mov	r6, r0
 80051b0:	b950      	cbnz	r0, 80051c8 <__ssputs_r+0x5c>
 80051b2:	230c      	movs	r3, #12
 80051b4:	f8ca 3000 	str.w	r3, [sl]
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c8:	6921      	ldr	r1, [r4, #16]
 80051ca:	464a      	mov	r2, r9
 80051cc:	f7ff ff98 	bl	8005100 <memcpy>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	6126      	str	r6, [r4, #16]
 80051de:	6165      	str	r5, [r4, #20]
 80051e0:	444e      	add	r6, r9
 80051e2:	eba5 0509 	sub.w	r5, r5, r9
 80051e6:	6026      	str	r6, [r4, #0]
 80051e8:	60a5      	str	r5, [r4, #8]
 80051ea:	463e      	mov	r6, r7
 80051ec:	42be      	cmp	r6, r7
 80051ee:	d900      	bls.n	80051f2 <__ssputs_r+0x86>
 80051f0:	463e      	mov	r6, r7
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	4632      	mov	r2, r6
 80051f6:	4641      	mov	r1, r8
 80051f8:	f000 faa8 	bl	800574c <memmove>
 80051fc:	68a3      	ldr	r3, [r4, #8]
 80051fe:	1b9b      	subs	r3, r3, r6
 8005200:	60a3      	str	r3, [r4, #8]
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	4433      	add	r3, r6
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	2000      	movs	r0, #0
 800520a:	e7db      	b.n	80051c4 <__ssputs_r+0x58>
 800520c:	462a      	mov	r2, r5
 800520e:	f000 fb97 	bl	8005940 <_realloc_r>
 8005212:	4606      	mov	r6, r0
 8005214:	2800      	cmp	r0, #0
 8005216:	d1e1      	bne.n	80051dc <__ssputs_r+0x70>
 8005218:	6921      	ldr	r1, [r4, #16]
 800521a:	4650      	mov	r0, sl
 800521c:	f000 fab0 	bl	8005780 <_free_r>
 8005220:	e7c7      	b.n	80051b2 <__ssputs_r+0x46>
	...

08005224 <_svfiprintf_r>:
 8005224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	4698      	mov	r8, r3
 800522a:	898b      	ldrh	r3, [r1, #12]
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	b09d      	sub	sp, #116	; 0x74
 8005230:	4607      	mov	r7, r0
 8005232:	460d      	mov	r5, r1
 8005234:	4614      	mov	r4, r2
 8005236:	d50e      	bpl.n	8005256 <_svfiprintf_r+0x32>
 8005238:	690b      	ldr	r3, [r1, #16]
 800523a:	b963      	cbnz	r3, 8005256 <_svfiprintf_r+0x32>
 800523c:	2140      	movs	r1, #64	; 0x40
 800523e:	f000 fb0b 	bl	8005858 <_malloc_r>
 8005242:	6028      	str	r0, [r5, #0]
 8005244:	6128      	str	r0, [r5, #16]
 8005246:	b920      	cbnz	r0, 8005252 <_svfiprintf_r+0x2e>
 8005248:	230c      	movs	r3, #12
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005250:	e0d1      	b.n	80053f6 <_svfiprintf_r+0x1d2>
 8005252:	2340      	movs	r3, #64	; 0x40
 8005254:	616b      	str	r3, [r5, #20]
 8005256:	2300      	movs	r3, #0
 8005258:	9309      	str	r3, [sp, #36]	; 0x24
 800525a:	2320      	movs	r3, #32
 800525c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005260:	f8cd 800c 	str.w	r8, [sp, #12]
 8005264:	2330      	movs	r3, #48	; 0x30
 8005266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005410 <_svfiprintf_r+0x1ec>
 800526a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800526e:	f04f 0901 	mov.w	r9, #1
 8005272:	4623      	mov	r3, r4
 8005274:	469a      	mov	sl, r3
 8005276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800527a:	b10a      	cbz	r2, 8005280 <_svfiprintf_r+0x5c>
 800527c:	2a25      	cmp	r2, #37	; 0x25
 800527e:	d1f9      	bne.n	8005274 <_svfiprintf_r+0x50>
 8005280:	ebba 0b04 	subs.w	fp, sl, r4
 8005284:	d00b      	beq.n	800529e <_svfiprintf_r+0x7a>
 8005286:	465b      	mov	r3, fp
 8005288:	4622      	mov	r2, r4
 800528a:	4629      	mov	r1, r5
 800528c:	4638      	mov	r0, r7
 800528e:	f7ff ff6d 	bl	800516c <__ssputs_r>
 8005292:	3001      	adds	r0, #1
 8005294:	f000 80aa 	beq.w	80053ec <_svfiprintf_r+0x1c8>
 8005298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800529a:	445a      	add	r2, fp
 800529c:	9209      	str	r2, [sp, #36]	; 0x24
 800529e:	f89a 3000 	ldrb.w	r3, [sl]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80a2 	beq.w	80053ec <_svfiprintf_r+0x1c8>
 80052a8:	2300      	movs	r3, #0
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b2:	f10a 0a01 	add.w	sl, sl, #1
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	9307      	str	r3, [sp, #28]
 80052ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052be:	931a      	str	r3, [sp, #104]	; 0x68
 80052c0:	4654      	mov	r4, sl
 80052c2:	2205      	movs	r2, #5
 80052c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c8:	4851      	ldr	r0, [pc, #324]	; (8005410 <_svfiprintf_r+0x1ec>)
 80052ca:	f7fa ffa1 	bl	8000210 <memchr>
 80052ce:	9a04      	ldr	r2, [sp, #16]
 80052d0:	b9d8      	cbnz	r0, 800530a <_svfiprintf_r+0xe6>
 80052d2:	06d0      	lsls	r0, r2, #27
 80052d4:	bf44      	itt	mi
 80052d6:	2320      	movmi	r3, #32
 80052d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052dc:	0711      	lsls	r1, r2, #28
 80052de:	bf44      	itt	mi
 80052e0:	232b      	movmi	r3, #43	; 0x2b
 80052e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ea:	2b2a      	cmp	r3, #42	; 0x2a
 80052ec:	d015      	beq.n	800531a <_svfiprintf_r+0xf6>
 80052ee:	9a07      	ldr	r2, [sp, #28]
 80052f0:	4654      	mov	r4, sl
 80052f2:	2000      	movs	r0, #0
 80052f4:	f04f 0c0a 	mov.w	ip, #10
 80052f8:	4621      	mov	r1, r4
 80052fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fe:	3b30      	subs	r3, #48	; 0x30
 8005300:	2b09      	cmp	r3, #9
 8005302:	d94e      	bls.n	80053a2 <_svfiprintf_r+0x17e>
 8005304:	b1b0      	cbz	r0, 8005334 <_svfiprintf_r+0x110>
 8005306:	9207      	str	r2, [sp, #28]
 8005308:	e014      	b.n	8005334 <_svfiprintf_r+0x110>
 800530a:	eba0 0308 	sub.w	r3, r0, r8
 800530e:	fa09 f303 	lsl.w	r3, r9, r3
 8005312:	4313      	orrs	r3, r2
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	46a2      	mov	sl, r4
 8005318:	e7d2      	b.n	80052c0 <_svfiprintf_r+0x9c>
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	1d19      	adds	r1, r3, #4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	9103      	str	r1, [sp, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfbb      	ittet	lt
 8005326:	425b      	neglt	r3, r3
 8005328:	f042 0202 	orrlt.w	r2, r2, #2
 800532c:	9307      	strge	r3, [sp, #28]
 800532e:	9307      	strlt	r3, [sp, #28]
 8005330:	bfb8      	it	lt
 8005332:	9204      	strlt	r2, [sp, #16]
 8005334:	7823      	ldrb	r3, [r4, #0]
 8005336:	2b2e      	cmp	r3, #46	; 0x2e
 8005338:	d10c      	bne.n	8005354 <_svfiprintf_r+0x130>
 800533a:	7863      	ldrb	r3, [r4, #1]
 800533c:	2b2a      	cmp	r3, #42	; 0x2a
 800533e:	d135      	bne.n	80053ac <_svfiprintf_r+0x188>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	1d1a      	adds	r2, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	9203      	str	r2, [sp, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	bfb8      	it	lt
 800534c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005350:	3402      	adds	r4, #2
 8005352:	9305      	str	r3, [sp, #20]
 8005354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005420 <_svfiprintf_r+0x1fc>
 8005358:	7821      	ldrb	r1, [r4, #0]
 800535a:	2203      	movs	r2, #3
 800535c:	4650      	mov	r0, sl
 800535e:	f7fa ff57 	bl	8000210 <memchr>
 8005362:	b140      	cbz	r0, 8005376 <_svfiprintf_r+0x152>
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	eba0 000a 	sub.w	r0, r0, sl
 800536a:	fa03 f000 	lsl.w	r0, r3, r0
 800536e:	9b04      	ldr	r3, [sp, #16]
 8005370:	4303      	orrs	r3, r0
 8005372:	3401      	adds	r4, #1
 8005374:	9304      	str	r3, [sp, #16]
 8005376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800537a:	4826      	ldr	r0, [pc, #152]	; (8005414 <_svfiprintf_r+0x1f0>)
 800537c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005380:	2206      	movs	r2, #6
 8005382:	f7fa ff45 	bl	8000210 <memchr>
 8005386:	2800      	cmp	r0, #0
 8005388:	d038      	beq.n	80053fc <_svfiprintf_r+0x1d8>
 800538a:	4b23      	ldr	r3, [pc, #140]	; (8005418 <_svfiprintf_r+0x1f4>)
 800538c:	bb1b      	cbnz	r3, 80053d6 <_svfiprintf_r+0x1b2>
 800538e:	9b03      	ldr	r3, [sp, #12]
 8005390:	3307      	adds	r3, #7
 8005392:	f023 0307 	bic.w	r3, r3, #7
 8005396:	3308      	adds	r3, #8
 8005398:	9303      	str	r3, [sp, #12]
 800539a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539c:	4433      	add	r3, r6
 800539e:	9309      	str	r3, [sp, #36]	; 0x24
 80053a0:	e767      	b.n	8005272 <_svfiprintf_r+0x4e>
 80053a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053a6:	460c      	mov	r4, r1
 80053a8:	2001      	movs	r0, #1
 80053aa:	e7a5      	b.n	80052f8 <_svfiprintf_r+0xd4>
 80053ac:	2300      	movs	r3, #0
 80053ae:	3401      	adds	r4, #1
 80053b0:	9305      	str	r3, [sp, #20]
 80053b2:	4619      	mov	r1, r3
 80053b4:	f04f 0c0a 	mov.w	ip, #10
 80053b8:	4620      	mov	r0, r4
 80053ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053be:	3a30      	subs	r2, #48	; 0x30
 80053c0:	2a09      	cmp	r2, #9
 80053c2:	d903      	bls.n	80053cc <_svfiprintf_r+0x1a8>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0c5      	beq.n	8005354 <_svfiprintf_r+0x130>
 80053c8:	9105      	str	r1, [sp, #20]
 80053ca:	e7c3      	b.n	8005354 <_svfiprintf_r+0x130>
 80053cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80053d0:	4604      	mov	r4, r0
 80053d2:	2301      	movs	r3, #1
 80053d4:	e7f0      	b.n	80053b8 <_svfiprintf_r+0x194>
 80053d6:	ab03      	add	r3, sp, #12
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	462a      	mov	r2, r5
 80053dc:	4b0f      	ldr	r3, [pc, #60]	; (800541c <_svfiprintf_r+0x1f8>)
 80053de:	a904      	add	r1, sp, #16
 80053e0:	4638      	mov	r0, r7
 80053e2:	f3af 8000 	nop.w
 80053e6:	1c42      	adds	r2, r0, #1
 80053e8:	4606      	mov	r6, r0
 80053ea:	d1d6      	bne.n	800539a <_svfiprintf_r+0x176>
 80053ec:	89ab      	ldrh	r3, [r5, #12]
 80053ee:	065b      	lsls	r3, r3, #25
 80053f0:	f53f af2c 	bmi.w	800524c <_svfiprintf_r+0x28>
 80053f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053f6:	b01d      	add	sp, #116	; 0x74
 80053f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fc:	ab03      	add	r3, sp, #12
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	462a      	mov	r2, r5
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <_svfiprintf_r+0x1f8>)
 8005404:	a904      	add	r1, sp, #16
 8005406:	4638      	mov	r0, r7
 8005408:	f000 f87a 	bl	8005500 <_printf_i>
 800540c:	e7eb      	b.n	80053e6 <_svfiprintf_r+0x1c2>
 800540e:	bf00      	nop
 8005410:	08005a58 	.word	0x08005a58
 8005414:	08005a62 	.word	0x08005a62
 8005418:	00000000 	.word	0x00000000
 800541c:	0800516d 	.word	0x0800516d
 8005420:	08005a5e 	.word	0x08005a5e

08005424 <_printf_common>:
 8005424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005428:	4616      	mov	r6, r2
 800542a:	4699      	mov	r9, r3
 800542c:	688a      	ldr	r2, [r1, #8]
 800542e:	690b      	ldr	r3, [r1, #16]
 8005430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005434:	4293      	cmp	r3, r2
 8005436:	bfb8      	it	lt
 8005438:	4613      	movlt	r3, r2
 800543a:	6033      	str	r3, [r6, #0]
 800543c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005440:	4607      	mov	r7, r0
 8005442:	460c      	mov	r4, r1
 8005444:	b10a      	cbz	r2, 800544a <_printf_common+0x26>
 8005446:	3301      	adds	r3, #1
 8005448:	6033      	str	r3, [r6, #0]
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	0699      	lsls	r1, r3, #26
 800544e:	bf42      	ittt	mi
 8005450:	6833      	ldrmi	r3, [r6, #0]
 8005452:	3302      	addmi	r3, #2
 8005454:	6033      	strmi	r3, [r6, #0]
 8005456:	6825      	ldr	r5, [r4, #0]
 8005458:	f015 0506 	ands.w	r5, r5, #6
 800545c:	d106      	bne.n	800546c <_printf_common+0x48>
 800545e:	f104 0a19 	add.w	sl, r4, #25
 8005462:	68e3      	ldr	r3, [r4, #12]
 8005464:	6832      	ldr	r2, [r6, #0]
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	42ab      	cmp	r3, r5
 800546a:	dc26      	bgt.n	80054ba <_printf_common+0x96>
 800546c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005470:	1e13      	subs	r3, r2, #0
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	bf18      	it	ne
 8005476:	2301      	movne	r3, #1
 8005478:	0692      	lsls	r2, r2, #26
 800547a:	d42b      	bmi.n	80054d4 <_printf_common+0xb0>
 800547c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005480:	4649      	mov	r1, r9
 8005482:	4638      	mov	r0, r7
 8005484:	47c0      	blx	r8
 8005486:	3001      	adds	r0, #1
 8005488:	d01e      	beq.n	80054c8 <_printf_common+0xa4>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	68e5      	ldr	r5, [r4, #12]
 800548e:	6832      	ldr	r2, [r6, #0]
 8005490:	f003 0306 	and.w	r3, r3, #6
 8005494:	2b04      	cmp	r3, #4
 8005496:	bf08      	it	eq
 8005498:	1aad      	subeq	r5, r5, r2
 800549a:	68a3      	ldr	r3, [r4, #8]
 800549c:	6922      	ldr	r2, [r4, #16]
 800549e:	bf0c      	ite	eq
 80054a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a4:	2500      	movne	r5, #0
 80054a6:	4293      	cmp	r3, r2
 80054a8:	bfc4      	itt	gt
 80054aa:	1a9b      	subgt	r3, r3, r2
 80054ac:	18ed      	addgt	r5, r5, r3
 80054ae:	2600      	movs	r6, #0
 80054b0:	341a      	adds	r4, #26
 80054b2:	42b5      	cmp	r5, r6
 80054b4:	d11a      	bne.n	80054ec <_printf_common+0xc8>
 80054b6:	2000      	movs	r0, #0
 80054b8:	e008      	b.n	80054cc <_printf_common+0xa8>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4652      	mov	r2, sl
 80054be:	4649      	mov	r1, r9
 80054c0:	4638      	mov	r0, r7
 80054c2:	47c0      	blx	r8
 80054c4:	3001      	adds	r0, #1
 80054c6:	d103      	bne.n	80054d0 <_printf_common+0xac>
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d0:	3501      	adds	r5, #1
 80054d2:	e7c6      	b.n	8005462 <_printf_common+0x3e>
 80054d4:	18e1      	adds	r1, r4, r3
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	2030      	movs	r0, #48	; 0x30
 80054da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054de:	4422      	add	r2, r4
 80054e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054e8:	3302      	adds	r3, #2
 80054ea:	e7c7      	b.n	800547c <_printf_common+0x58>
 80054ec:	2301      	movs	r3, #1
 80054ee:	4622      	mov	r2, r4
 80054f0:	4649      	mov	r1, r9
 80054f2:	4638      	mov	r0, r7
 80054f4:	47c0      	blx	r8
 80054f6:	3001      	adds	r0, #1
 80054f8:	d0e6      	beq.n	80054c8 <_printf_common+0xa4>
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7d9      	b.n	80054b2 <_printf_common+0x8e>
	...

08005500 <_printf_i>:
 8005500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005504:	7e0f      	ldrb	r7, [r1, #24]
 8005506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005508:	2f78      	cmp	r7, #120	; 0x78
 800550a:	4691      	mov	r9, r2
 800550c:	4680      	mov	r8, r0
 800550e:	460c      	mov	r4, r1
 8005510:	469a      	mov	sl, r3
 8005512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005516:	d807      	bhi.n	8005528 <_printf_i+0x28>
 8005518:	2f62      	cmp	r7, #98	; 0x62
 800551a:	d80a      	bhi.n	8005532 <_printf_i+0x32>
 800551c:	2f00      	cmp	r7, #0
 800551e:	f000 80d8 	beq.w	80056d2 <_printf_i+0x1d2>
 8005522:	2f58      	cmp	r7, #88	; 0x58
 8005524:	f000 80a3 	beq.w	800566e <_printf_i+0x16e>
 8005528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800552c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005530:	e03a      	b.n	80055a8 <_printf_i+0xa8>
 8005532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005536:	2b15      	cmp	r3, #21
 8005538:	d8f6      	bhi.n	8005528 <_printf_i+0x28>
 800553a:	a101      	add	r1, pc, #4	; (adr r1, 8005540 <_printf_i+0x40>)
 800553c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005540:	08005599 	.word	0x08005599
 8005544:	080055ad 	.word	0x080055ad
 8005548:	08005529 	.word	0x08005529
 800554c:	08005529 	.word	0x08005529
 8005550:	08005529 	.word	0x08005529
 8005554:	08005529 	.word	0x08005529
 8005558:	080055ad 	.word	0x080055ad
 800555c:	08005529 	.word	0x08005529
 8005560:	08005529 	.word	0x08005529
 8005564:	08005529 	.word	0x08005529
 8005568:	08005529 	.word	0x08005529
 800556c:	080056b9 	.word	0x080056b9
 8005570:	080055dd 	.word	0x080055dd
 8005574:	0800569b 	.word	0x0800569b
 8005578:	08005529 	.word	0x08005529
 800557c:	08005529 	.word	0x08005529
 8005580:	080056db 	.word	0x080056db
 8005584:	08005529 	.word	0x08005529
 8005588:	080055dd 	.word	0x080055dd
 800558c:	08005529 	.word	0x08005529
 8005590:	08005529 	.word	0x08005529
 8005594:	080056a3 	.word	0x080056a3
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	1d1a      	adds	r2, r3, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	602a      	str	r2, [r5, #0]
 80055a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0a3      	b.n	80056f4 <_printf_i+0x1f4>
 80055ac:	6820      	ldr	r0, [r4, #0]
 80055ae:	6829      	ldr	r1, [r5, #0]
 80055b0:	0606      	lsls	r6, r0, #24
 80055b2:	f101 0304 	add.w	r3, r1, #4
 80055b6:	d50a      	bpl.n	80055ce <_printf_i+0xce>
 80055b8:	680e      	ldr	r6, [r1, #0]
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	2e00      	cmp	r6, #0
 80055be:	da03      	bge.n	80055c8 <_printf_i+0xc8>
 80055c0:	232d      	movs	r3, #45	; 0x2d
 80055c2:	4276      	negs	r6, r6
 80055c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c8:	485e      	ldr	r0, [pc, #376]	; (8005744 <_printf_i+0x244>)
 80055ca:	230a      	movs	r3, #10
 80055cc:	e019      	b.n	8005602 <_printf_i+0x102>
 80055ce:	680e      	ldr	r6, [r1, #0]
 80055d0:	602b      	str	r3, [r5, #0]
 80055d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055d6:	bf18      	it	ne
 80055d8:	b236      	sxthne	r6, r6
 80055da:	e7ef      	b.n	80055bc <_printf_i+0xbc>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	1d19      	adds	r1, r3, #4
 80055e2:	6029      	str	r1, [r5, #0]
 80055e4:	0601      	lsls	r1, r0, #24
 80055e6:	d501      	bpl.n	80055ec <_printf_i+0xec>
 80055e8:	681e      	ldr	r6, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <_printf_i+0xf2>
 80055ec:	0646      	lsls	r6, r0, #25
 80055ee:	d5fb      	bpl.n	80055e8 <_printf_i+0xe8>
 80055f0:	881e      	ldrh	r6, [r3, #0]
 80055f2:	4854      	ldr	r0, [pc, #336]	; (8005744 <_printf_i+0x244>)
 80055f4:	2f6f      	cmp	r7, #111	; 0x6f
 80055f6:	bf0c      	ite	eq
 80055f8:	2308      	moveq	r3, #8
 80055fa:	230a      	movne	r3, #10
 80055fc:	2100      	movs	r1, #0
 80055fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005602:	6865      	ldr	r5, [r4, #4]
 8005604:	60a5      	str	r5, [r4, #8]
 8005606:	2d00      	cmp	r5, #0
 8005608:	bfa2      	ittt	ge
 800560a:	6821      	ldrge	r1, [r4, #0]
 800560c:	f021 0104 	bicge.w	r1, r1, #4
 8005610:	6021      	strge	r1, [r4, #0]
 8005612:	b90e      	cbnz	r6, 8005618 <_printf_i+0x118>
 8005614:	2d00      	cmp	r5, #0
 8005616:	d04d      	beq.n	80056b4 <_printf_i+0x1b4>
 8005618:	4615      	mov	r5, r2
 800561a:	fbb6 f1f3 	udiv	r1, r6, r3
 800561e:	fb03 6711 	mls	r7, r3, r1, r6
 8005622:	5dc7      	ldrb	r7, [r0, r7]
 8005624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005628:	4637      	mov	r7, r6
 800562a:	42bb      	cmp	r3, r7
 800562c:	460e      	mov	r6, r1
 800562e:	d9f4      	bls.n	800561a <_printf_i+0x11a>
 8005630:	2b08      	cmp	r3, #8
 8005632:	d10b      	bne.n	800564c <_printf_i+0x14c>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	07de      	lsls	r6, r3, #31
 8005638:	d508      	bpl.n	800564c <_printf_i+0x14c>
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	6861      	ldr	r1, [r4, #4]
 800563e:	4299      	cmp	r1, r3
 8005640:	bfde      	ittt	le
 8005642:	2330      	movle	r3, #48	; 0x30
 8005644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005648:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800564c:	1b52      	subs	r2, r2, r5
 800564e:	6122      	str	r2, [r4, #16]
 8005650:	f8cd a000 	str.w	sl, [sp]
 8005654:	464b      	mov	r3, r9
 8005656:	aa03      	add	r2, sp, #12
 8005658:	4621      	mov	r1, r4
 800565a:	4640      	mov	r0, r8
 800565c:	f7ff fee2 	bl	8005424 <_printf_common>
 8005660:	3001      	adds	r0, #1
 8005662:	d14c      	bne.n	80056fe <_printf_i+0x1fe>
 8005664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005668:	b004      	add	sp, #16
 800566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566e:	4835      	ldr	r0, [pc, #212]	; (8005744 <_printf_i+0x244>)
 8005670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005674:	6829      	ldr	r1, [r5, #0]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f851 6b04 	ldr.w	r6, [r1], #4
 800567c:	6029      	str	r1, [r5, #0]
 800567e:	061d      	lsls	r5, r3, #24
 8005680:	d514      	bpl.n	80056ac <_printf_i+0x1ac>
 8005682:	07df      	lsls	r7, r3, #31
 8005684:	bf44      	itt	mi
 8005686:	f043 0320 	orrmi.w	r3, r3, #32
 800568a:	6023      	strmi	r3, [r4, #0]
 800568c:	b91e      	cbnz	r6, 8005696 <_printf_i+0x196>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	f023 0320 	bic.w	r3, r3, #32
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	2310      	movs	r3, #16
 8005698:	e7b0      	b.n	80055fc <_printf_i+0xfc>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f043 0320 	orr.w	r3, r3, #32
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	2378      	movs	r3, #120	; 0x78
 80056a4:	4828      	ldr	r0, [pc, #160]	; (8005748 <_printf_i+0x248>)
 80056a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056aa:	e7e3      	b.n	8005674 <_printf_i+0x174>
 80056ac:	0659      	lsls	r1, r3, #25
 80056ae:	bf48      	it	mi
 80056b0:	b2b6      	uxthmi	r6, r6
 80056b2:	e7e6      	b.n	8005682 <_printf_i+0x182>
 80056b4:	4615      	mov	r5, r2
 80056b6:	e7bb      	b.n	8005630 <_printf_i+0x130>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	6826      	ldr	r6, [r4, #0]
 80056bc:	6961      	ldr	r1, [r4, #20]
 80056be:	1d18      	adds	r0, r3, #4
 80056c0:	6028      	str	r0, [r5, #0]
 80056c2:	0635      	lsls	r5, r6, #24
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	d501      	bpl.n	80056cc <_printf_i+0x1cc>
 80056c8:	6019      	str	r1, [r3, #0]
 80056ca:	e002      	b.n	80056d2 <_printf_i+0x1d2>
 80056cc:	0670      	lsls	r0, r6, #25
 80056ce:	d5fb      	bpl.n	80056c8 <_printf_i+0x1c8>
 80056d0:	8019      	strh	r1, [r3, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	4615      	mov	r5, r2
 80056d8:	e7ba      	b.n	8005650 <_printf_i+0x150>
 80056da:	682b      	ldr	r3, [r5, #0]
 80056dc:	1d1a      	adds	r2, r3, #4
 80056de:	602a      	str	r2, [r5, #0]
 80056e0:	681d      	ldr	r5, [r3, #0]
 80056e2:	6862      	ldr	r2, [r4, #4]
 80056e4:	2100      	movs	r1, #0
 80056e6:	4628      	mov	r0, r5
 80056e8:	f7fa fd92 	bl	8000210 <memchr>
 80056ec:	b108      	cbz	r0, 80056f2 <_printf_i+0x1f2>
 80056ee:	1b40      	subs	r0, r0, r5
 80056f0:	6060      	str	r0, [r4, #4]
 80056f2:	6863      	ldr	r3, [r4, #4]
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	2300      	movs	r3, #0
 80056f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fc:	e7a8      	b.n	8005650 <_printf_i+0x150>
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	462a      	mov	r2, r5
 8005702:	4649      	mov	r1, r9
 8005704:	4640      	mov	r0, r8
 8005706:	47d0      	blx	sl
 8005708:	3001      	adds	r0, #1
 800570a:	d0ab      	beq.n	8005664 <_printf_i+0x164>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	079b      	lsls	r3, r3, #30
 8005710:	d413      	bmi.n	800573a <_printf_i+0x23a>
 8005712:	68e0      	ldr	r0, [r4, #12]
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	4298      	cmp	r0, r3
 8005718:	bfb8      	it	lt
 800571a:	4618      	movlt	r0, r3
 800571c:	e7a4      	b.n	8005668 <_printf_i+0x168>
 800571e:	2301      	movs	r3, #1
 8005720:	4632      	mov	r2, r6
 8005722:	4649      	mov	r1, r9
 8005724:	4640      	mov	r0, r8
 8005726:	47d0      	blx	sl
 8005728:	3001      	adds	r0, #1
 800572a:	d09b      	beq.n	8005664 <_printf_i+0x164>
 800572c:	3501      	adds	r5, #1
 800572e:	68e3      	ldr	r3, [r4, #12]
 8005730:	9903      	ldr	r1, [sp, #12]
 8005732:	1a5b      	subs	r3, r3, r1
 8005734:	42ab      	cmp	r3, r5
 8005736:	dcf2      	bgt.n	800571e <_printf_i+0x21e>
 8005738:	e7eb      	b.n	8005712 <_printf_i+0x212>
 800573a:	2500      	movs	r5, #0
 800573c:	f104 0619 	add.w	r6, r4, #25
 8005740:	e7f5      	b.n	800572e <_printf_i+0x22e>
 8005742:	bf00      	nop
 8005744:	08005a69 	.word	0x08005a69
 8005748:	08005a7a 	.word	0x08005a7a

0800574c <memmove>:
 800574c:	4288      	cmp	r0, r1
 800574e:	b510      	push	{r4, lr}
 8005750:	eb01 0402 	add.w	r4, r1, r2
 8005754:	d902      	bls.n	800575c <memmove+0x10>
 8005756:	4284      	cmp	r4, r0
 8005758:	4623      	mov	r3, r4
 800575a:	d807      	bhi.n	800576c <memmove+0x20>
 800575c:	1e43      	subs	r3, r0, #1
 800575e:	42a1      	cmp	r1, r4
 8005760:	d008      	beq.n	8005774 <memmove+0x28>
 8005762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800576a:	e7f8      	b.n	800575e <memmove+0x12>
 800576c:	4402      	add	r2, r0
 800576e:	4601      	mov	r1, r0
 8005770:	428a      	cmp	r2, r1
 8005772:	d100      	bne.n	8005776 <memmove+0x2a>
 8005774:	bd10      	pop	{r4, pc}
 8005776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800577a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800577e:	e7f7      	b.n	8005770 <memmove+0x24>

08005780 <_free_r>:
 8005780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005782:	2900      	cmp	r1, #0
 8005784:	d044      	beq.n	8005810 <_free_r+0x90>
 8005786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578a:	9001      	str	r0, [sp, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f1a1 0404 	sub.w	r4, r1, #4
 8005792:	bfb8      	it	lt
 8005794:	18e4      	addlt	r4, r4, r3
 8005796:	f000 f913 	bl	80059c0 <__malloc_lock>
 800579a:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <_free_r+0x94>)
 800579c:	9801      	ldr	r0, [sp, #4]
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	b933      	cbnz	r3, 80057b0 <_free_r+0x30>
 80057a2:	6063      	str	r3, [r4, #4]
 80057a4:	6014      	str	r4, [r2, #0]
 80057a6:	b003      	add	sp, #12
 80057a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ac:	f000 b90e 	b.w	80059cc <__malloc_unlock>
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d908      	bls.n	80057c6 <_free_r+0x46>
 80057b4:	6825      	ldr	r5, [r4, #0]
 80057b6:	1961      	adds	r1, r4, r5
 80057b8:	428b      	cmp	r3, r1
 80057ba:	bf01      	itttt	eq
 80057bc:	6819      	ldreq	r1, [r3, #0]
 80057be:	685b      	ldreq	r3, [r3, #4]
 80057c0:	1949      	addeq	r1, r1, r5
 80057c2:	6021      	streq	r1, [r4, #0]
 80057c4:	e7ed      	b.n	80057a2 <_free_r+0x22>
 80057c6:	461a      	mov	r2, r3
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b10b      	cbz	r3, 80057d0 <_free_r+0x50>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d9fa      	bls.n	80057c6 <_free_r+0x46>
 80057d0:	6811      	ldr	r1, [r2, #0]
 80057d2:	1855      	adds	r5, r2, r1
 80057d4:	42a5      	cmp	r5, r4
 80057d6:	d10b      	bne.n	80057f0 <_free_r+0x70>
 80057d8:	6824      	ldr	r4, [r4, #0]
 80057da:	4421      	add	r1, r4
 80057dc:	1854      	adds	r4, r2, r1
 80057de:	42a3      	cmp	r3, r4
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	d1e0      	bne.n	80057a6 <_free_r+0x26>
 80057e4:	681c      	ldr	r4, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	6053      	str	r3, [r2, #4]
 80057ea:	4421      	add	r1, r4
 80057ec:	6011      	str	r1, [r2, #0]
 80057ee:	e7da      	b.n	80057a6 <_free_r+0x26>
 80057f0:	d902      	bls.n	80057f8 <_free_r+0x78>
 80057f2:	230c      	movs	r3, #12
 80057f4:	6003      	str	r3, [r0, #0]
 80057f6:	e7d6      	b.n	80057a6 <_free_r+0x26>
 80057f8:	6825      	ldr	r5, [r4, #0]
 80057fa:	1961      	adds	r1, r4, r5
 80057fc:	428b      	cmp	r3, r1
 80057fe:	bf04      	itt	eq
 8005800:	6819      	ldreq	r1, [r3, #0]
 8005802:	685b      	ldreq	r3, [r3, #4]
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	bf04      	itt	eq
 8005808:	1949      	addeq	r1, r1, r5
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	6054      	str	r4, [r2, #4]
 800580e:	e7ca      	b.n	80057a6 <_free_r+0x26>
 8005810:	b003      	add	sp, #12
 8005812:	bd30      	pop	{r4, r5, pc}
 8005814:	20000264 	.word	0x20000264

08005818 <sbrk_aligned>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4e0e      	ldr	r6, [pc, #56]	; (8005854 <sbrk_aligned+0x3c>)
 800581c:	460c      	mov	r4, r1
 800581e:	6831      	ldr	r1, [r6, #0]
 8005820:	4605      	mov	r5, r0
 8005822:	b911      	cbnz	r1, 800582a <sbrk_aligned+0x12>
 8005824:	f000 f8bc 	bl	80059a0 <_sbrk_r>
 8005828:	6030      	str	r0, [r6, #0]
 800582a:	4621      	mov	r1, r4
 800582c:	4628      	mov	r0, r5
 800582e:	f000 f8b7 	bl	80059a0 <_sbrk_r>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	d00a      	beq.n	800584c <sbrk_aligned+0x34>
 8005836:	1cc4      	adds	r4, r0, #3
 8005838:	f024 0403 	bic.w	r4, r4, #3
 800583c:	42a0      	cmp	r0, r4
 800583e:	d007      	beq.n	8005850 <sbrk_aligned+0x38>
 8005840:	1a21      	subs	r1, r4, r0
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f8ac 	bl	80059a0 <_sbrk_r>
 8005848:	3001      	adds	r0, #1
 800584a:	d101      	bne.n	8005850 <sbrk_aligned+0x38>
 800584c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005850:	4620      	mov	r0, r4
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	20000268 	.word	0x20000268

08005858 <_malloc_r>:
 8005858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585c:	1ccd      	adds	r5, r1, #3
 800585e:	f025 0503 	bic.w	r5, r5, #3
 8005862:	3508      	adds	r5, #8
 8005864:	2d0c      	cmp	r5, #12
 8005866:	bf38      	it	cc
 8005868:	250c      	movcc	r5, #12
 800586a:	2d00      	cmp	r5, #0
 800586c:	4607      	mov	r7, r0
 800586e:	db01      	blt.n	8005874 <_malloc_r+0x1c>
 8005870:	42a9      	cmp	r1, r5
 8005872:	d905      	bls.n	8005880 <_malloc_r+0x28>
 8005874:	230c      	movs	r3, #12
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	2600      	movs	r6, #0
 800587a:	4630      	mov	r0, r6
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	4e2e      	ldr	r6, [pc, #184]	; (800593c <_malloc_r+0xe4>)
 8005882:	f000 f89d 	bl	80059c0 <__malloc_lock>
 8005886:	6833      	ldr	r3, [r6, #0]
 8005888:	461c      	mov	r4, r3
 800588a:	bb34      	cbnz	r4, 80058da <_malloc_r+0x82>
 800588c:	4629      	mov	r1, r5
 800588e:	4638      	mov	r0, r7
 8005890:	f7ff ffc2 	bl	8005818 <sbrk_aligned>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	4604      	mov	r4, r0
 8005898:	d14d      	bne.n	8005936 <_malloc_r+0xde>
 800589a:	6834      	ldr	r4, [r6, #0]
 800589c:	4626      	mov	r6, r4
 800589e:	2e00      	cmp	r6, #0
 80058a0:	d140      	bne.n	8005924 <_malloc_r+0xcc>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	4631      	mov	r1, r6
 80058a6:	4638      	mov	r0, r7
 80058a8:	eb04 0803 	add.w	r8, r4, r3
 80058ac:	f000 f878 	bl	80059a0 <_sbrk_r>
 80058b0:	4580      	cmp	r8, r0
 80058b2:	d13a      	bne.n	800592a <_malloc_r+0xd2>
 80058b4:	6821      	ldr	r1, [r4, #0]
 80058b6:	3503      	adds	r5, #3
 80058b8:	1a6d      	subs	r5, r5, r1
 80058ba:	f025 0503 	bic.w	r5, r5, #3
 80058be:	3508      	adds	r5, #8
 80058c0:	2d0c      	cmp	r5, #12
 80058c2:	bf38      	it	cc
 80058c4:	250c      	movcc	r5, #12
 80058c6:	4629      	mov	r1, r5
 80058c8:	4638      	mov	r0, r7
 80058ca:	f7ff ffa5 	bl	8005818 <sbrk_aligned>
 80058ce:	3001      	adds	r0, #1
 80058d0:	d02b      	beq.n	800592a <_malloc_r+0xd2>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	442b      	add	r3, r5
 80058d6:	6023      	str	r3, [r4, #0]
 80058d8:	e00e      	b.n	80058f8 <_malloc_r+0xa0>
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	1b52      	subs	r2, r2, r5
 80058de:	d41e      	bmi.n	800591e <_malloc_r+0xc6>
 80058e0:	2a0b      	cmp	r2, #11
 80058e2:	d916      	bls.n	8005912 <_malloc_r+0xba>
 80058e4:	1961      	adds	r1, r4, r5
 80058e6:	42a3      	cmp	r3, r4
 80058e8:	6025      	str	r5, [r4, #0]
 80058ea:	bf18      	it	ne
 80058ec:	6059      	strne	r1, [r3, #4]
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	bf08      	it	eq
 80058f2:	6031      	streq	r1, [r6, #0]
 80058f4:	5162      	str	r2, [r4, r5]
 80058f6:	604b      	str	r3, [r1, #4]
 80058f8:	4638      	mov	r0, r7
 80058fa:	f104 060b 	add.w	r6, r4, #11
 80058fe:	f000 f865 	bl	80059cc <__malloc_unlock>
 8005902:	f026 0607 	bic.w	r6, r6, #7
 8005906:	1d23      	adds	r3, r4, #4
 8005908:	1af2      	subs	r2, r6, r3
 800590a:	d0b6      	beq.n	800587a <_malloc_r+0x22>
 800590c:	1b9b      	subs	r3, r3, r6
 800590e:	50a3      	str	r3, [r4, r2]
 8005910:	e7b3      	b.n	800587a <_malloc_r+0x22>
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	42a3      	cmp	r3, r4
 8005916:	bf0c      	ite	eq
 8005918:	6032      	streq	r2, [r6, #0]
 800591a:	605a      	strne	r2, [r3, #4]
 800591c:	e7ec      	b.n	80058f8 <_malloc_r+0xa0>
 800591e:	4623      	mov	r3, r4
 8005920:	6864      	ldr	r4, [r4, #4]
 8005922:	e7b2      	b.n	800588a <_malloc_r+0x32>
 8005924:	4634      	mov	r4, r6
 8005926:	6876      	ldr	r6, [r6, #4]
 8005928:	e7b9      	b.n	800589e <_malloc_r+0x46>
 800592a:	230c      	movs	r3, #12
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	4638      	mov	r0, r7
 8005930:	f000 f84c 	bl	80059cc <__malloc_unlock>
 8005934:	e7a1      	b.n	800587a <_malloc_r+0x22>
 8005936:	6025      	str	r5, [r4, #0]
 8005938:	e7de      	b.n	80058f8 <_malloc_r+0xa0>
 800593a:	bf00      	nop
 800593c:	20000264 	.word	0x20000264

08005940 <_realloc_r>:
 8005940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	4680      	mov	r8, r0
 8005946:	4614      	mov	r4, r2
 8005948:	460e      	mov	r6, r1
 800594a:	b921      	cbnz	r1, 8005956 <_realloc_r+0x16>
 800594c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005950:	4611      	mov	r1, r2
 8005952:	f7ff bf81 	b.w	8005858 <_malloc_r>
 8005956:	b92a      	cbnz	r2, 8005964 <_realloc_r+0x24>
 8005958:	f7ff ff12 	bl	8005780 <_free_r>
 800595c:	4625      	mov	r5, r4
 800595e:	4628      	mov	r0, r5
 8005960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005964:	f000 f838 	bl	80059d8 <_malloc_usable_size_r>
 8005968:	4284      	cmp	r4, r0
 800596a:	4607      	mov	r7, r0
 800596c:	d802      	bhi.n	8005974 <_realloc_r+0x34>
 800596e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005972:	d812      	bhi.n	800599a <_realloc_r+0x5a>
 8005974:	4621      	mov	r1, r4
 8005976:	4640      	mov	r0, r8
 8005978:	f7ff ff6e 	bl	8005858 <_malloc_r>
 800597c:	4605      	mov	r5, r0
 800597e:	2800      	cmp	r0, #0
 8005980:	d0ed      	beq.n	800595e <_realloc_r+0x1e>
 8005982:	42bc      	cmp	r4, r7
 8005984:	4622      	mov	r2, r4
 8005986:	4631      	mov	r1, r6
 8005988:	bf28      	it	cs
 800598a:	463a      	movcs	r2, r7
 800598c:	f7ff fbb8 	bl	8005100 <memcpy>
 8005990:	4631      	mov	r1, r6
 8005992:	4640      	mov	r0, r8
 8005994:	f7ff fef4 	bl	8005780 <_free_r>
 8005998:	e7e1      	b.n	800595e <_realloc_r+0x1e>
 800599a:	4635      	mov	r5, r6
 800599c:	e7df      	b.n	800595e <_realloc_r+0x1e>
	...

080059a0 <_sbrk_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d06      	ldr	r5, [pc, #24]	; (80059bc <_sbrk_r+0x1c>)
 80059a4:	2300      	movs	r3, #0
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	f7fb fce8 	bl	8001380 <_sbrk>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_sbrk_r+0x1a>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_sbrk_r+0x1a>
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	2000026c 	.word	0x2000026c

080059c0 <__malloc_lock>:
 80059c0:	4801      	ldr	r0, [pc, #4]	; (80059c8 <__malloc_lock+0x8>)
 80059c2:	f000 b811 	b.w	80059e8 <__retarget_lock_acquire_recursive>
 80059c6:	bf00      	nop
 80059c8:	20000270 	.word	0x20000270

080059cc <__malloc_unlock>:
 80059cc:	4801      	ldr	r0, [pc, #4]	; (80059d4 <__malloc_unlock+0x8>)
 80059ce:	f000 b80c 	b.w	80059ea <__retarget_lock_release_recursive>
 80059d2:	bf00      	nop
 80059d4:	20000270 	.word	0x20000270

080059d8 <_malloc_usable_size_r>:
 80059d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059dc:	1f18      	subs	r0, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bfbc      	itt	lt
 80059e2:	580b      	ldrlt	r3, [r1, r0]
 80059e4:	18c0      	addlt	r0, r0, r3
 80059e6:	4770      	bx	lr

080059e8 <__retarget_lock_acquire_recursive>:
 80059e8:	4770      	bx	lr

080059ea <__retarget_lock_release_recursive>:
 80059ea:	4770      	bx	lr

080059ec <_init>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr

080059f8 <_fini>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr
