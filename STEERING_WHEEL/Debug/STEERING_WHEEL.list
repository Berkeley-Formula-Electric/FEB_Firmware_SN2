
STEERING_WHEEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08009db8  08009db8  00019db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1f4  0800a1f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1f4  0800a1f4  0001a1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1fc  0800a1fc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1fc  0800a1fc  0001a1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a200  0800a200  0001a200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001dc  0800a3e0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800a3e0  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e2d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255c  00000000  00000000  00034039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00036598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00037778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023868  00000000  00000000  00038888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151ad  00000000  00000000  0005c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7a19  00000000  00000000  0007129d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148cb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed8  00000000  00000000  00148d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d9c 	.word	0x08009d9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009d9c 	.word	0x08009d9c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Store_EMERGENCY_Msg>:
    EMERGENCY_APPS_EMERGENCY_TYPE apps_emergency;
    EMERGENCY_SW_EMERGENCY_TYPE sw_emergency;
} EMERGENCY_MESSAGE_TYPE;
EMERGENCY_MESSAGE_TYPE EMERGENCY_MESSAGE;

void Store_EMERGENCY_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <Store_EMERGENCY_Msg+0x1a>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d006      	beq.n	8000fb2 <Store_EMERGENCY_Msg+0x26>
            break;
        case EMERGENCY_SW_EMERGENCY:
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
            break;
    }
}
 8000fa4:	e00b      	b.n	8000fbe <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.apps_emergency), RxData, data_length);
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <Store_EMERGENCY_Msg+0x3c>)
 8000fac:	f006 f80a 	bl	8006fc4 <memcpy>
            break;
 8000fb0:	e005      	b.n	8000fbe <Store_EMERGENCY_Msg+0x32>
            memcpy(&(EMERGENCY_MESSAGE.sw_emergency), RxData, data_length);
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <Store_EMERGENCY_Msg+0x40>)
 8000fb8:	f006 f804 	bl	8006fc4 <memcpy>
            break;
 8000fbc:	bf00      	nop
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001f8 	.word	0x200001f8
 8000fcc:	200001f9 	.word	0x200001f9

08000fd0 <Store_BMS_Msg>:
    BMS_TEMPERATURE_TYPE temperature;
    BMS_VOLTAGE_TYPE voltage;
} BMS_MESSAGE_TYPE;
BMS_MESSAGE_TYPE BMS_MESSAGE;

void Store_BMS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	d003      	beq.n	8000fea <Store_BMS_Msg+0x1a>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d006      	beq.n	8000ff6 <Store_BMS_Msg+0x26>
            break;
        case BMS_VOLTAGE:
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
            break;
    }
}
 8000fe8:	e00b      	b.n	8001002 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.temperature), RxData, data_length);
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <Store_BMS_Msg+0x3c>)
 8000ff0:	f005 ffe8 	bl	8006fc4 <memcpy>
            break;
 8000ff4:	e005      	b.n	8001002 <Store_BMS_Msg+0x32>
            memcpy(&(BMS_MESSAGE.voltage), RxData, data_length);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <Store_BMS_Msg+0x40>)
 8000ffc:	f005 ffe2 	bl	8006fc4 <memcpy>
            break;
 8001000:	bf00      	nop
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001fc 	.word	0x200001fc
 8001010:	20000200 	.word	0x20000200

08001014 <Store_SW_Msg>:
    SW_ACUMULATOR_FANS_TYPE acumulator_fans;
    SW_EXTRA_TYPE extra;
} SW_MESSAGE_TYPE;
SW_MESSAGE_TYPE SW_MESSAGE;

void Store_SW_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3b20      	subs	r3, #32
 8001024:	2b03      	cmp	r3, #3
 8001026:	d823      	bhi.n	8001070 <Store_SW_Msg+0x5c>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <Store_SW_Msg+0x1c>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	0800104d 	.word	0x0800104d
 8001038:	08001059 	.word	0x08001059
 800103c:	08001065 	.word	0x08001065
        case SW_READY_TO_DRIVE:
            memcpy(&(SW_MESSAGE.ready_to_drive), RxData, data_length);
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <Store_SW_Msg+0x64>)
 8001046:	f005 ffbd 	bl	8006fc4 <memcpy>
            break;
 800104a:	e011      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_COOLANT_PUMP:
            memcpy(&(SW_MESSAGE.coolant_pump), RxData, data_length);
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <Store_SW_Msg+0x68>)
 8001052:	f005 ffb7 	bl	8006fc4 <memcpy>
            break;
 8001056:	e00b      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_ACUMULATOR_FANS:
            memcpy(&(SW_MESSAGE.acumulator_fans), RxData, data_length);
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <Store_SW_Msg+0x6c>)
 800105e:	f005 ffb1 	bl	8006fc4 <memcpy>
            break;
 8001062:	e005      	b.n	8001070 <Store_SW_Msg+0x5c>
        case SW_EXTRA:
            memcpy(&(SW_MESSAGE.extra), RxData, data_length);
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <Store_SW_Msg+0x70>)
 800106a:	f005 ffab 	bl	8006fc4 <memcpy>
            break;
 800106e:	bf00      	nop
    }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000204 	.word	0x20000204
 800107c:	20000205 	.word	0x20000205
 8001080:	20000206 	.word	0x20000206
 8001084:	20000207 	.word	0x20000207

08001088 <Store_APPS_Msg>:
    APPS_BRAKE_PEDAL_TYPE brake_pedal;
    APPS_TORQUE_TYPE torque;
} APPS_MESSAGE_TYPE;
APPS_MESSAGE_TYPE APPS_MESSAGE;

void Store_APPS_Msg(AddressIdType RxId, uint8_t *RxData, uint32_t data_length) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
    switch (RxId){
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3b30      	subs	r3, #48	; 0x30
 8001098:	2b03      	cmp	r3, #3
 800109a:	d823      	bhi.n	80010e4 <Store_APPS_Msg+0x5c>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <Store_APPS_Msg+0x1c>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010c1 	.word	0x080010c1
 80010ac:	080010cd 	.word	0x080010cd
 80010b0:	080010d9 	.word	0x080010d9
        case APPS_ACCELERATOR1_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator1_pedal), RxData, data_length);
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <Store_APPS_Msg+0x64>)
 80010ba:	f005 ff83 	bl	8006fc4 <memcpy>
            break;
 80010be:	e011      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_ACCELERATOR2_PEDAL:
            memcpy(&(APPS_MESSAGE.accelerator2_pedal), RxData, data_length);
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <Store_APPS_Msg+0x68>)
 80010c6:	f005 ff7d 	bl	8006fc4 <memcpy>
            break;
 80010ca:	e00b      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_BRAKE_PEDAL:
            memcpy(&(APPS_MESSAGE.brake_pedal), RxData, data_length);
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <Store_APPS_Msg+0x6c>)
 80010d2:	f005 ff77 	bl	8006fc4 <memcpy>
            break;
 80010d6:	e005      	b.n	80010e4 <Store_APPS_Msg+0x5c>
        case APPS_TORQUE:
            memcpy(&(APPS_MESSAGE.torque), RxData, data_length);
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	4806      	ldr	r0, [pc, #24]	; (80010f8 <Store_APPS_Msg+0x70>)
 80010de:	f005 ff71 	bl	8006fc4 <memcpy>
            break;
 80010e2:	bf00      	nop
    }
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000208 	.word	0x20000208
 80010f0:	2000020c 	.word	0x2000020c
 80010f4:	20000210 	.word	0x20000210
 80010f8:	20000214 	.word	0x20000214

080010fc <assign_filter_array>:
const FilterArrayLength APPS_RX_NUM = 2;

const AddressIdType LVPDB_RX_ID[] = {SW_ID, APPS_ID};
const FilterArrayLength LVPDB_RX_NUM = 2;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	2b03      	cmp	r3, #3
 800110a:	d813      	bhi.n	8001134 <assign_filter_array+0x38>
 800110c:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <assign_filter_array+0x18>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001125 	.word	0x08001125
 8001118:	08001129 	.word	0x08001129
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001131 	.word	0x08001131
        case BMS_ID:
            return BMS_RX_ID;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <assign_filter_array+0x48>)
 8001126:	e006      	b.n	8001136 <assign_filter_array+0x3a>
            break;
        case SW_ID:
            return SW_RX_ID;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <assign_filter_array+0x4c>)
 800112a:	e004      	b.n	8001136 <assign_filter_array+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <assign_filter_array+0x50>)
 800112e:	e002      	b.n	8001136 <assign_filter_array+0x3a>
            break;
        case LVPDB_ID:
            return LVPDB_RX_ID;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <assign_filter_array+0x54>)
 8001132:	e000      	b.n	8001136 <assign_filter_array+0x3a>
            break;
    }
    return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	08009dec 	.word	0x08009dec
 8001148:	08009df0 	.word	0x08009df0
 800114c:	08009df4 	.word	0x08009df4
 8001150:	08009dfc 	.word	0x08009dfc

08001154 <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	2b03      	cmp	r3, #3
 8001162:	d813      	bhi.n	800118c <assign_filter_array_legnth+0x38>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <assign_filter_array_legnth+0x18>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	0800117d 	.word	0x0800117d
 8001170:	08001181 	.word	0x08001181
 8001174:	08001185 	.word	0x08001185
 8001178:	08001189 	.word	0x08001189
        case BMS_ID:
            return BMS_RX_NUM;
 800117c:	2301      	movs	r3, #1
 800117e:	e006      	b.n	800118e <assign_filter_array_legnth+0x3a>
            break;
        case SW_ID:
            return SW_RX_NUM;
 8001180:	2301      	movs	r3, #1
 8001182:	e004      	b.n	800118e <assign_filter_array_legnth+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <assign_filter_array_legnth+0x3a>
            break;
        case LVPDB_ID:
            return LVPDB_RX_NUM;
 8001188:	2302      	movs	r3, #2
 800118a:	e000      	b.n	800118e <assign_filter_array_legnth+0x3a>
            break;
    }
    return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <store_msg>:

void store_msg(CAN_RxHeaderTypeDef *pHeader, uint8_t RxData[]) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    switch(pHeader->StdId >> BITS_PER_MESSAGE_TYPE) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d82f      	bhi.n	8001210 <store_msg+0x74>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <store_msg+0x1c>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011db 	.word	0x080011db
 80011c0:	080011ed 	.word	0x080011ed
 80011c4:	080011ff 	.word	0x080011ff
        case EMERGENCY_ID:
            Store_EMERGENCY_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	461a      	mov	r2, r3
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	f7ff feda 	bl	8000f8c <Store_EMERGENCY_Msg>
            break;
 80011d8:	e01a      	b.n	8001210 <store_msg+0x74>
        case BMS_ID:
            Store_BMS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	461a      	mov	r2, r3
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	f7ff fef3 	bl	8000fd0 <Store_BMS_Msg>
            break;
 80011ea:	e011      	b.n	8001210 <store_msg+0x74>
        case SW_ID:
            Store_SW_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	461a      	mov	r2, r3
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	f7ff ff0c 	bl	8001014 <Store_SW_Msg>
            break;
 80011fc:	e008      	b.n	8001210 <store_msg+0x74>
        case APPS_ID:
            Store_APPS_Msg(pHeader->StdId, RxData, pHeader->DLC);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	461a      	mov	r2, r3
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	f7ff ff3d 	bl	8001088 <Store_APPS_Msg>
            break;
 800120e:	bf00      	nop
    }
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <FEB_CAN_Filter_Config>:
uint8_t RxData[8];
uint32_t TxMailbox;
float HV_Voltage = 0.0;
extern UART_HandleTypeDef huart2;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b09a      	sub	sp, #104	; 0x68
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	460b      	mov	r3, r1
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	4613      	mov	r3, r2
 800122c:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 800122e:	2300      	movs	r3, #0
 8001230:	667b      	str	r3, [r7, #100]	; 0x64
 8001232:	e027      	b.n	8001284 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8001234:	2301      	movs	r3, #1
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8001238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 8001240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	4413      	add	r3, r2
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 8001252:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8001256:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001260:	2301      	movs	r3, #1
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 8001264:	231b      	movs	r3, #27
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f001 f9d0 	bl	8002614 <HAL_CAN_ConfigFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 800127a:	f000 fd2b 	bl	8001cd4 <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 800127e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001280:	3301      	adds	r3, #1
 8001282:	667b      	str	r3, [r7, #100]	; 0x64
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001288:	429a      	cmp	r2, r3
 800128a:	dbd3      	blt.n	8001234 <FEB_CAN_Filter_Config+0x1c>
		}
	}

	CAN_FilterTypeDef filter_config;

	filter_config.FilterActivation = CAN_FILTER_ENABLE;
 800128c:	2301      	movs	r3, #1
 800128e:	65fb      	str	r3, [r7, #92]	; 0x5c
	filter_config.FilterBank = filter_array_len;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	653b      	str	r3, [r7, #80]	; 0x50
	filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
	filter_config.FilterIdHigh = 0xA7 << 5;
 8001298:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
 800129c:	63fb      	str	r3, [r7, #60]	; 0x3c
	filter_config.FilterIdLow = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	643b      	str	r3, [r7, #64]	; 0x40
	filter_config.FilterMaskIdHigh = 0x7FF << 5;
 80012a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
	filter_config.FilterMaskIdLow = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	657b      	str	r3, [r7, #84]	; 0x54
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80012b0:	2301      	movs	r3, #1
 80012b2:	65bb      	str	r3, [r7, #88]	; 0x58
	filter_config.SlaveStartFilterBank = 27;
 80012b4:	231b      	movs	r3, #27
 80012b6:	663b      	str	r3, [r7, #96]	; 0x60

	if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 80012b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f001 f9a8 	bl	8002614 <HAL_CAN_ConfigFilter>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <FEB_CAN_Filter_Config+0xb6>
	{
	  Error_Handler();
 80012ca:	f000 fd03 	bl	8001cd4 <Error_Handler>
	}
}
 80012ce:	bf00      	nop
 80012d0:	3768      	adds	r7, #104	; 0x68
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <FEB_CAN_Init+0x80>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d104      	bne.n	80012f6 <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 80012f0:	2302      	movs	r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e008      	b.n	8001308 <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <FEB_CAN_Init+0x84>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d103      	bne.n	8001308 <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 8001300:	2301      	movs	r3, #1
 8001302:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8001304:	2310      	movs	r3, #16
 8001306:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <FEB_CAN_Init+0x88>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <FEB_CAN_Init+0x88>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <FEB_CAN_Init+0x88>)
 8001316:	2200      	movs	r2, #0
 8001318:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 800131a:	6838      	ldr	r0, [r7, #0]
 800131c:	f7ff feee 	bl	80010fc <assign_filter_array>
 8001320:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f7ff ff16 	bl	8001154 <assign_filter_array_legnth>
 8001328:	4603      	mov	r3, r0
 800132a:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	7afa      	ldrb	r2, [r7, #11]
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff70 	bl	8001218 <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f001 fa4b 	bl	80027d4 <HAL_CAN_Start>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <FEB_CAN_Init+0x70>
	  Error_Handler();
 8001344:	f000 fcc6 	bl	8001cd4 <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 8001348:	6939      	ldr	r1, [r7, #16]
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f001 fca8 	bl	8002ca0 <HAL_CAN_ActivateNotification>

}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40006400 	.word	0x40006400
 800135c:	40006800 	.word	0x40006800
 8001360:	20000218 	.word	0x20000218

08001364 <FEB_CAN_Receive>:

//		char buf[128];
void FEB_CAN_Receive(CAN_HandleTypeDef *hcan, uint32_t CAN_RX_FIFO) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <FEB_CAN_Receive+0x68>)
 8001370:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <FEB_CAN_Receive+0x6c>)
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f001 fb81 	bl	8002a7c <HAL_CAN_GetRxMessage>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <FEB_CAN_Receive+0x20>
		Error_Handler();
 8001380:	f000 fca8 	bl	8001cd4 <Error_Handler>
	}
	if (RxHeader.StdId == 0xA7) { //DC voltage measured by the inverter
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <FEB_CAN_Receive+0x6c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2ba7      	cmp	r3, #167	; 0xa7
 800138a:	d117      	bne.n	80013bc <FEB_CAN_Receive+0x58>
//		uint8_t buf_len;
//		buf_len = sprintf(buf, "voltage received, byte6: %d\n", RxData[6]);
//		HAL_UART_Transmit_IT(&huart2,(uint8_t *)buf, buf_len);
		HV_Voltage = (((uint16_t) RxData[1] << 8) | RxData[0]) / 10.0;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <FEB_CAN_Receive+0x68>)
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <FEB_CAN_Receive+0x68>)
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	4313      	orrs	r3, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8e3 	bl	8000564 <__aeabi_i2d>
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <FEB_CAN_Receive+0x70>)
 80013a4:	f7ff fa72 	bl	800088c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fc1a 	bl	8000be8 <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <FEB_CAN_Receive+0x74>)
 80013b8:	6013      	str	r3, [r2, #0]
	} else {
		store_msg(&RxHeader, RxData);
	}
}
 80013ba:	e003      	b.n	80013c4 <FEB_CAN_Receive+0x60>
		store_msg(&RxHeader, RxData);
 80013bc:	4903      	ldr	r1, [pc, #12]	; (80013cc <FEB_CAN_Receive+0x68>)
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <FEB_CAN_Receive+0x6c>)
 80013c0:	f7ff feec 	bl	800119c <store_msg>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000254 	.word	0x20000254
 80013d0:	20000230 	.word	0x20000230
 80013d4:	40240000 	.word	0x40240000
 80013d8:	20000260 	.word	0x20000260

080013dc <FEB_CAN_Transmit>:

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	461a      	mov	r2, r3
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	480f      	ldr	r0, [pc, #60]	; (8001430 <FEB_CAN_Transmit+0x54>)
 80013f2:	f005 fde7 	bl	8006fc4 <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <FEB_CAN_Transmit+0x58>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <FEB_CAN_Transmit+0x58>)
 8001400:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 8001402:	bf00      	nop
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f001 fb04 	bl	8002a12 <HAL_CAN_GetTxMailboxesFreeLevel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f9      	beq.n	8001404 <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <FEB_CAN_Transmit+0x5c>)
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <FEB_CAN_Transmit+0x54>)
 8001414:	4907      	ldr	r1, [pc, #28]	; (8001434 <FEB_CAN_Transmit+0x58>)
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f001 fa20 	bl	800285c <HAL_CAN_AddTxMessage>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 8001422:	f000 fc57 	bl	8001cd4 <Error_Handler>
	}
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000024c 	.word	0x2000024c
 8001434:	20000218 	.word	0x20000218
 8001438:	2000025c 	.word	0x2000025c

0800143c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
//	uint8_t buf_len;
//	buf_len = sprintf(buf, "received in fifo0");
//	HAL_UART_Transmit_IT(&huart2,(uint8_t *)buf, buf_len);
	FEB_CAN_Receive(hcan, CAN_RX_FIFO0);
 8001444:	2100      	movs	r1, #0
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff8c 	bl	8001364 <FEB_CAN_Receive>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
//	uint8_t buf_len;
//	buf_len = sprintf(buf, "received in fifo1");
//	HAL_UART_Transmit_IT(&huart2,(uint8_t *)buf, buf_len);
	FEB_CAN_Receive(hcan, CAN_RX_FIFO1);
 800145c:	2101      	movs	r1, #1
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff80 	bl	8001364 <FEB_CAN_Receive>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	0000      	movs	r0, r0
	...

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001472:	b0ab      	sub	sp, #172	; 0xac
 8001474:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001476:	f000 ff3b 	bl	80022f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147a:	f000 f9dd 	bl	8001838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147e:	f000 fb91 	bl	8001ba4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001482:	f000 fb65 	bl	8001b50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001486:	f000 fa79 	bl	800197c <MX_I2C1_Init>
  MX_TIM14_Init();
 800148a:	f000 fb3d 	bl	8001b08 <MX_TIM14_Init>
  MX_TIM2_Init();
 800148e:	f000 faa3 	bl	80019d8 <MX_TIM2_Init>
  MX_CAN1_Init();
 8001492:	f000 fa3d 	bl	8001910 <MX_CAN1_Init>
  MX_TIM13_Init();
 8001496:	f000 fb13 	bl	8001ac0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  bool ready_to_drive = false;
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  bool last_button_state = false;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool lock = false;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

  bool lastButton_4 = 0; // coolant pump
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
  bool lastButton_5 = 0; // acumulator fans
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  bool lastButton_6 = 0; // extra
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  bool lock_4 = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  bool lock_5 = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  bool lock_6 = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  bool coolant_pump = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  bool accumulator_fans = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  bool extra = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  int buf_len;
  //uint8_t data1;
  uint8_t data2;
  HAL_StatusTypeDef ret;

  HAL_TIM_Base_Start_IT(&htim13);
 80014e2:	489d      	ldr	r0, [pc, #628]	; (8001758 <main+0x2e8>)
 80014e4:	f003 fd16 	bl	8004f14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim13);
 80014e8:	489b      	ldr	r0, [pc, #620]	; (8001758 <main+0x2e8>)
 80014ea:	f003 fd83 	bl	8004ff4 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80014ee:	489b      	ldr	r0, [pc, #620]	; (800175c <main+0x2ec>)
 80014f0:	f003 fd10 	bl	8004f14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim14);
 80014f4:	4899      	ldr	r0, [pc, #612]	; (800175c <main+0x2ec>)
 80014f6:	f003 fd7d 	bl	8004ff4 <HAL_TIM_Base_Stop_IT>
  Button_Checking = false;
 80014fa:	4b99      	ldr	r3, [pc, #612]	; (8001760 <main+0x2f0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
  Button_Timer_Flag = false;
 8001500:	4b98      	ldr	r3, [pc, #608]	; (8001764 <main+0x2f4>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
  // 0% PWM cycle to turnoff buzzer
  htim2.Instance->CCR2 = 0;
 8001506:	4b98      	ldr	r3, [pc, #608]	; (8001768 <main+0x2f8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2200      	movs	r2, #0
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800150e:	2104      	movs	r1, #4
 8001510:	4895      	ldr	r0, [pc, #596]	; (8001768 <main+0x2f8>)
 8001512:	f003 fdf7 	bl	8005104 <HAL_TIM_PWM_Start>


  FEB_CAN_Init(&hcan1, SW_ID);
 8001516:	2102      	movs	r1, #2
 8001518:	4894      	ldr	r0, [pc, #592]	; (800176c <main+0x2fc>)
 800151a:	f7ff fedd 	bl	80012d8 <FEB_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 800151e:	200a      	movs	r0, #10
 8001520:	f000 ff58 	bl	80023d4 <HAL_Delay>
	  // read both IOexpanders
//	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP1_ADDR, &data1, 1, HAL_MAX_DELAY);
//	  if ( ret != HAL_OK ) {
//		  buf_len = sprintf((char*)buf, "IO_1 Error\r\n");
//	  }
	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP2_ADDR, &data2, 1, HAL_MAX_DELAY);
 8001524:	2342      	movs	r3, #66	; 0x42
 8001526:	b299      	uxth	r1, r3
 8001528:	1cfa      	adds	r2, r7, #3
 800152a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	488f      	ldr	r0, [pc, #572]	; (8001770 <main+0x300>)
 8001534:	f002 fa96 	bl	8003a64 <HAL_I2C_Master_Receive>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  if ( ret != HAL_OK ) {
 800153e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <main+0xe4>
		  buf_len = sprintf((char*)buf, "IO_2 Error\r\n");
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	498a      	ldr	r1, [pc, #552]	; (8001774 <main+0x304>)
 800154a:	4618      	mov	r0, r3
 800154c:	f006 f9ba 	bl	80078c4 <siprintf>
 8001550:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
//		  HAL_TIM_Base_Start_IT(&htim14);
//		  // turn on buzzer with 30% PWM cycle
//		  htim2.Instance->CCR2 = VOLUME;
//	  }

	  if (!(data2 & (1<<1))) { // BUT_4 -> IO2 P1, coolant pump
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d123      	bne.n	80015a6 <main+0x136>
		  if (!lastButton_4) {
 800155e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001562:	f083 0301 	eor.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d018      	beq.n	800159e <main+0x12e>
			  lock_4 = true;
 800156c:	2301      	movs	r3, #1
 800156e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  coolant_pump = !coolant_pump;
 8001572:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f083 0301 	eor.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			  FEB_CAN_Transmit(&hcan1, SW_COOLANT_PUMP, (uint8_t *) &coolant_pump, 1);
 8001590:	f107 0286 	add.w	r2, r7, #134	; 0x86
 8001594:	2301      	movs	r3, #1
 8001596:	2121      	movs	r1, #33	; 0x21
 8001598:	4874      	ldr	r0, [pc, #464]	; (800176c <main+0x2fc>)
 800159a:	f7ff ff1f 	bl	80013dc <FEB_CAN_Transmit>
		  }
		  lastButton_4 = true;
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80015a4:	e009      	b.n	80015ba <main+0x14a>
	  } else {
		  if (lastButton_4) {
 80015a6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <main+0x144>
			  lock_4 = false;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		  }
		  lastButton_4 = false;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	  }

	  if (!(data2 & (1<<2))) { // BUT_5 -> IO2 P2, accumulator fans
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d123      	bne.n	800160c <main+0x19c>
		  if (!lastButton_5) {
 80015c4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80015c8:	f083 0301 	eor.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d018      	beq.n	8001604 <main+0x194>
			  lock_5 = true;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			  accumulator_fans = !accumulator_fans;
 80015d8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f083 0301 	eor.w	r3, r3, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			  FEB_CAN_Transmit(&hcan1, SW_ACUMULATOR_FANS, (uint8_t *) &accumulator_fans, 1);
 80015f6:	f107 0285 	add.w	r2, r7, #133	; 0x85
 80015fa:	2301      	movs	r3, #1
 80015fc:	2122      	movs	r1, #34	; 0x22
 80015fe:	485b      	ldr	r0, [pc, #364]	; (800176c <main+0x2fc>)
 8001600:	f7ff feec 	bl	80013dc <FEB_CAN_Transmit>
		  }
		  lastButton_5 = true;
 8001604:	2301      	movs	r3, #1
 8001606:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800160a:	e009      	b.n	8001620 <main+0x1b0>
	  } else {
		  if (lastButton_5) {
 800160c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <main+0x1aa>
			  lock_5 = false;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		  }
		  lastButton_5 = false;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	  }

	  if (!(data2 & (1<<3))) { // BUT_6 -> IO2 P3, extra
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d123      	bne.n	8001672 <main+0x202>
		  if (!lastButton_6) {
 800162a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800162e:	f083 0301 	eor.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d018      	beq.n	800166a <main+0x1fa>
			  lock_6 = true;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  extra = !extra;
 800163e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf14      	ite	ne
 8001646:	2301      	movne	r3, #1
 8001648:	2300      	moveq	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f083 0301 	eor.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			  FEB_CAN_Transmit(&hcan1, SW_EXTRA, (uint8_t *) &extra, 1);
 800165c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001660:	2301      	movs	r3, #1
 8001662:	2123      	movs	r1, #35	; 0x23
 8001664:	4841      	ldr	r0, [pc, #260]	; (800176c <main+0x2fc>)
 8001666:	f7ff feb9 	bl	80013dc <FEB_CAN_Transmit>
		  }
		  lastButton_6 = true;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8001670:	e009      	b.n	8001686 <main+0x216>
	  } else {
		  if (lastButton_6) {
 8001672:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <main+0x210>
			  lock_6 = false;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
		  }
		  lastButton_6 = false;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  }

	  if (!(data2 & (1<<0))) { // BUT_3 -> IO2 P0, ready to drive
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d179      	bne.n	8001784 <main+0x314>
//		  buf_len = sprintf((char*)buf, "BUT_3\r\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);

		  // if the system is not checking a button, start the timer to check the timer
		  // also check if brake is pressed and Tractive System is on
		  if (!Button_Checking && (last_button_state == false) && !lock && APPS_MESSAGE.brake_pedal > 0.2 && HV_Voltage > 60.0) {
 8001690:	4b33      	ldr	r3, [pc, #204]	; (8001760 <main+0x2f0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d02a      	beq.n	80016f4 <main+0x284>
 800169e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016a2:	f083 0301 	eor.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d023      	beq.n	80016f4 <main+0x284>
 80016ac:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80016b0:	f083 0301 	eor.w	r3, r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01c      	beq.n	80016f4 <main+0x284>
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <main+0x308>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff62 	bl	8000588 <__aeabi_f2d>
 80016c4:	a322      	add	r3, pc, #136	; (adr r3, 8001750 <main+0x2e0>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7ff fa45 	bl	8000b58 <__aeabi_dcmpgt>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00f      	beq.n	80016f4 <main+0x284>
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <main+0x30c>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001780 <main+0x310>
 80016de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd05      	ble.n	80016f4 <main+0x284>
			  // Start timer to count 1 sec hold time
			  HAL_TIM_Base_Start_IT(&htim13);
 80016e8:	481b      	ldr	r0, [pc, #108]	; (8001758 <main+0x2e8>)
 80016ea:	f003 fc13 	bl	8004f14 <HAL_TIM_Base_Start_IT>
			  Button_Checking = true;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <main+0x2f0>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "starting timer 13\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }
		  // if 1 sec has elapsed, and this button is still pressed, it is a valid action
		  // turn on buzzer and send CAN msg, reset states
		  if (Button_Timer_Flag) {
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <main+0x2f4>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d022      	beq.n	8001742 <main+0x2d2>
			  ready_to_drive = !ready_to_drive;
 80016fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f083 0301 	eor.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			  // when the ready_to_drive state is just changed, lock from changing again
			  lock = true;
 800171a:	2301      	movs	r3, #1
 800171c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

			  // start timer for buzzer
			  HAL_TIM_Base_Start_IT(&htim14);
 8001720:	480e      	ldr	r0, [pc, #56]	; (800175c <main+0x2ec>)
 8001722:	f003 fbf7 	bl	8004f14 <HAL_TIM_Base_Start_IT>
			  // turn on buzzer at VOLUME
			  htim2.Instance->CCR2 = VOLUME;
 8001726:	2264      	movs	r2, #100	; 0x64
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <main+0x2f8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	639a      	str	r2, [r3, #56]	; 0x38

			  FEB_CAN_Transmit(&hcan1, SW_READY_TO_DRIVE, (uint8_t *) &ready_to_drive, 1);
 800172e:	f107 0287 	add.w	r2, r7, #135	; 0x87
 8001732:	2301      	movs	r3, #1
 8001734:	2120      	movs	r1, #32
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <main+0x2fc>)
 8001738:	f7ff fe50 	bl	80013dc <FEB_CAN_Transmit>

			  Button_Timer_Flag = false;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <main+0x2f4>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "staring timer 14\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }

		  //record button state
		  last_button_state = true;
 8001742:	2301      	movs	r3, #1
 8001744:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001748:	e029      	b.n	800179e <main+0x32e>
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	9999999a 	.word	0x9999999a
 8001754:	3fc99999 	.word	0x3fc99999
 8001758:	20000328 	.word	0x20000328
 800175c:	20000370 	.word	0x20000370
 8001760:	200003fc 	.word	0x200003fc
 8001764:	200003fd 	.word	0x200003fd
 8001768:	200002e0 	.word	0x200002e0
 800176c:	20000264 	.word	0x20000264
 8001770:	2000028c 	.word	0x2000028c
 8001774:	08009db8 	.word	0x08009db8
 8001778:	20000208 	.word	0x20000208
 800177c:	20000260 	.word	0x20000260
 8001780:	42700000 	.word	0x42700000

	  } else {
		  Button_Timer_Flag = false;
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <main+0x3ac>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]

		  // allow ready_to_drive to change when button is released.
		  if (last_button_state) {
 800178a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <main+0x32e>
			  last_button_state = false;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			  lock = false;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		  }
	  }

	  // if at sometime Tractive System falls below 60V (not enough battery or E-Stop), disable ready_to_drive
	  if (HV_Voltage < 60.0 && ready_to_drive) {
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <main+0x3b0>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001824 <main+0x3b4>
 80017a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d50d      	bpl.n	80017ce <main+0x35e>
 80017b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <main+0x35e>
		  ready_to_drive = false;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  FEB_CAN_Transmit(&hcan1, SW_READY_TO_DRIVE, (uint8_t *) &ready_to_drive, 1);
 80017c0:	f107 0287 	add.w	r2, r7, #135	; 0x87
 80017c4:	2301      	movs	r3, #1
 80017c6:	2120      	movs	r1, #32
 80017c8:	4817      	ldr	r0, [pc, #92]	; (8001828 <main+0x3b8>)
 80017ca:	f7ff fe07 	bl	80013dc <FEB_CAN_Transmit>
	  }

//	  buf_len = sprintf((char*)buf, "check:%d flag:%d\r\n", Button_Checking, Button_Timer_Flag);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	  buf_len = sprintf((char*)buf, "ready:%d voltage:%.1f brake:%.1f\r\n", ready_to_drive, HV_Voltage, APPS_MESSAGE.brake_pedal);
 80017ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017d2:	461e      	mov	r6, r3
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <main+0x3b0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fed5 	bl	8000588 <__aeabi_f2d>
 80017de:	4604      	mov	r4, r0
 80017e0:	460d      	mov	r5, r1
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <main+0x3bc>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fece 	bl	8000588 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	1d38      	adds	r0, r7, #4
 80017f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017f6:	e9cd 4500 	strd	r4, r5, [sp]
 80017fa:	4632      	mov	r2, r6
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <main+0x3c0>)
 80017fe:	f006 f861 	bl	80078c4 <siprintf>
 8001802:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 1000);
 8001806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800180a:	b29a      	uxth	r2, r3
 800180c:	1d39      	adds	r1, r7, #4
 800180e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <main+0x3c4>)
 8001814:	f004 fbe5 	bl	8005fe2 <HAL_UART_Transmit>
	  HAL_Delay(10);
 8001818:	e681      	b.n	800151e <main+0xae>
 800181a:	bf00      	nop
 800181c:	200003fd 	.word	0x200003fd
 8001820:	20000260 	.word	0x20000260
 8001824:	42700000 	.word	0x42700000
 8001828:	20000264 	.word	0x20000264
 800182c:	20000208 	.word	0x20000208
 8001830:	08009dc8 	.word	0x08009dc8
 8001834:	200003b8 	.word	0x200003b8

08001838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	; 0x50
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	2234      	movs	r2, #52	; 0x34
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f005 fbca 	bl	8006fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <SystemClock_Config+0xd0>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	4a28      	ldr	r2, [pc, #160]	; (8001908 <SystemClock_Config+0xd0>)
 8001866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186a:	6413      	str	r3, [r2, #64]	; 0x40
 800186c:	4b26      	ldr	r3, [pc, #152]	; (8001908 <SystemClock_Config+0xd0>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <SystemClock_Config+0xd4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a22      	ldr	r2, [pc, #136]	; (800190c <SystemClock_Config+0xd4>)
 8001882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b20      	ldr	r3, [pc, #128]	; (800190c <SystemClock_Config+0xd4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001894:	2301      	movs	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018a8:	2304      	movs	r3, #4
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80018ac:	23a0      	movs	r3, #160	; 0xa0
 80018ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4618      	mov	r0, r3
 80018c2:	f003 f839 	bl	8004938 <HAL_RCC_OscConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018cc:	f000 fa02 	bl	8001cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	230f      	movs	r3, #15
 80018d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d4:	2302      	movs	r3, #2
 80018d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	2105      	movs	r1, #5
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 fcd8 	bl	80042a4 <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018fa:	f000 f9eb 	bl	8001cd4 <Error_Handler>
  }
}
 80018fe:	bf00      	nop
 8001900:	3750      	adds	r7, #80	; 0x50
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000

08001910 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_CAN1_Init+0x64>)
 8001916:	4a18      	ldr	r2, [pc, #96]	; (8001978 <MX_CAN1_Init+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_CAN1_Init+0x64>)
 800191c:	2210      	movs	r2, #16
 800191e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_CAN1_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_CAN1_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_CAN1_Init+0x64>)
 800192e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001932:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_CAN1_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_CAN1_Init+0x64>)
 800193c:	2200      	movs	r2, #0
 800193e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_CAN1_Init+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_CAN1_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_CAN1_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_CAN1_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_CAN1_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_CAN1_Init+0x64>)
 8001960:	f000 fd5c 	bl	800241c <HAL_CAN_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800196a:	f000 f9b3 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000264 	.word	0x20000264
 8001978:	40006400 	.word	0x40006400

0800197c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MX_I2C1_Init+0x50>)
 8001982:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <MX_I2C1_Init+0x54>)
 8001984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_I2C1_Init+0x50>)
 8001988:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <MX_I2C1_Init+0x58>)
 800198a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_I2C1_Init+0x50>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_I2C1_Init+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_I2C1_Init+0x50>)
 800199a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <MX_I2C1_Init+0x50>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_I2C1_Init+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <MX_I2C1_Init+0x50>)
 80019ba:	f001 ff0f 	bl	80037dc <HAL_I2C_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019c4:	f000 f986 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000028c 	.word	0x2000028c
 80019d0:	40005400 	.word	0x40005400
 80019d4:	000186a0 	.word	0x000186a0

080019d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	f107 0320 	add.w	r3, r7, #32
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a08:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a12:	229f      	movs	r2, #159	; 0x9f
 8001a14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a1e:	2263      	movs	r2, #99	; 0x63
 8001a20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a2e:	4823      	ldr	r0, [pc, #140]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a30:	f003 fa20 	bl	8004e74 <HAL_TIM_Base_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001a3a:	f000 f94b 	bl	8001cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	481c      	ldr	r0, [pc, #112]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a4c:	f003 fdec 	bl	8005628 <HAL_TIM_ConfigClockSource>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001a56:	f000 f93d 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a5a:	4818      	ldr	r0, [pc, #96]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a5c:	f003 faf9 	bl	8005052 <HAL_TIM_PWM_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001a66:	f000 f935 	bl	8001cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	4619      	mov	r1, r3
 8001a78:	4810      	ldr	r0, [pc, #64]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001a7a:	f004 f9d5 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001a84:	f000 f926 	bl	8001cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a88:	2360      	movs	r3, #96	; 0x60
 8001a8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4807      	ldr	r0, [pc, #28]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001aa0:	f003 fd00 	bl	80054a4 <HAL_TIM_PWM_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001aaa:	f000 f913 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aae:	4803      	ldr	r0, [pc, #12]	; (8001abc <MX_TIM2_Init+0xe4>)
 8001ab0:	f000 fa38 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 8001ab4:	bf00      	nop
 8001ab6:	3738      	adds	r7, #56	; 0x38
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200002e0 	.word	0x200002e0

08001ac0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_TIM13_Init+0x40>)
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <MX_TIM13_Init+0x44>)
 8001ac8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8000-1;
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <MX_TIM13_Init+0x40>)
 8001acc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001ad0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_TIM13_Init+0x40>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_TIM13_Init+0x40>)
 8001ada:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ade:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <MX_TIM13_Init+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_TIM13_Init+0x40>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <MX_TIM13_Init+0x40>)
 8001aee:	f003 f9c1 	bl	8004e74 <HAL_TIM_Base_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001af8:	f000 f8ec 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000328 	.word	0x20000328
 8001b04:	40001c00 	.word	0x40001c00

08001b08 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_TIM14_Init+0x40>)
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <MX_TIM14_Init+0x44>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8000-1;
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <MX_TIM14_Init+0x40>)
 8001b14:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001b18:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_TIM14_Init+0x40>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 15000-1;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_TIM14_Init+0x40>)
 8001b22:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001b26:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <MX_TIM14_Init+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_TIM14_Init+0x40>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <MX_TIM14_Init+0x40>)
 8001b36:	f003 f99d 	bl	8004e74 <HAL_TIM_Base_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001b40:	f000 f8c8 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000370 	.word	0x20000370
 8001b4c:	40002000 	.word	0x40002000

08001b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <MX_USART2_UART_Init+0x50>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b88:	f004 f9de 	bl	8005f48 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b92:	f000 f89f 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200003b8 	.word	0x200003b8
 8001ba0:	40004400 	.word	0x40004400

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a2c      	ldr	r2, [pc, #176]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <MX_GPIO_Init+0xd0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2120      	movs	r1, #32
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <MX_GPIO_Init+0xd4>)
 8001c30:	f001 fdba 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480c      	ldr	r0, [pc, #48]	; (8001c7c <MX_GPIO_Init+0xd8>)
 8001c4c:	f001 fc18 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c50:	2320      	movs	r3, #32
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4804      	ldr	r0, [pc, #16]	; (8001c78 <MX_GPIO_Init+0xd4>)
 8001c68:	f001 fc0a 	bl	8003480 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020800 	.word	0x40020800

08001c80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
//	char buf[10];
//	int buf_len;

	// timer for button
	// if 1 sec has passed since the first detection of button pressed, go back to not checking state
	if (htim == &htim13) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d108      	bne.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x22>
	  Button_Checking = false;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
	  Button_Timer_Flag = true;
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim13);
 8001c9c:	4808      	ldr	r0, [pc, #32]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c9e:	f003 f9a9 	bl	8004ff4 <HAL_TIM_Base_Stop_IT>
//	  buf_len = sprintf((char*)buf, "Timer13\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}

	// timer for buzzer
	if (htim == &htim14)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d106      	bne.n	8001cb8 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
	  // turn off buzzer
	  htim2.Instance->CCR2 = 0;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	639a      	str	r2, [r3, #56]	; 0x38
	  // Stop timer
	  HAL_TIM_Base_Stop_IT(&htim14);
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001cb4:	f003 f99e 	bl	8004ff4 <HAL_TIM_Base_Stop_IT>

//	  buf_len = sprintf((char*)buf, "Timer14\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000328 	.word	0x20000328
 8001cc4:	200003fc 	.word	0x200003fc
 8001cc8:	200003fd 	.word	0x200003fd
 8001ccc:	20000370 	.word	0x20000370
 8001cd0:	200002e0 	.word	0x200002e0

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <Error_Handler+0x8>
	...

08001ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d1e:	2007      	movs	r0, #7
 8001d20:	f001 fada 	bl	80032d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_CAN_MspInit+0xa4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d13c      	bne.n	8001dcc <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_CAN_MspInit+0xa8>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_CAN_MspInit+0xa8>)
 8001d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_CAN_MspInit+0xa8>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_CAN_MspInit+0xa8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_CAN_MspInit+0xa8>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_CAN_MspInit+0xa8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d9c:	2309      	movs	r3, #9
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	480d      	ldr	r0, [pc, #52]	; (8001ddc <HAL_CAN_MspInit+0xac>)
 8001da8:	f001 fb6a 	bl	8003480 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	2014      	movs	r0, #20
 8001db2:	f001 fa9c 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001db6:	2014      	movs	r0, #20
 8001db8:	f001 fab5 	bl	8003326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2015      	movs	r0, #21
 8001dc2:	f001 fa94 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001dc6:	2015      	movs	r0, #21
 8001dc8:	f001 faad 	bl	8003326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40006400 	.word	0x40006400
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_I2C_MspInit+0x84>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12c      	bne.n	8001e5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e24:	2312      	movs	r3, #18
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e30:	2304      	movs	r3, #4
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480c      	ldr	r0, [pc, #48]	; (8001e6c <HAL_I2C_MspInit+0x8c>)
 8001e3c:	f001 fb20 	bl	8003480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_I2C_MspInit+0x88>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40005400 	.word	0x40005400
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020400 	.word	0x40020400

08001e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_TIM_Base_MspInit+0xa8>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <HAL_TIM_Base_MspInit+0xa8>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_TIM_Base_MspInit+0xa8>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001e9e:	e036      	b.n	8001f0e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <HAL_TIM_Base_MspInit+0xac>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d116      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_TIM_Base_MspInit+0xa8>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_TIM_Base_MspInit+0xa8>)
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_TIM_Base_MspInit+0xa8>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	202c      	movs	r0, #44	; 0x2c
 8001ecc:	f001 fa0f 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ed0:	202c      	movs	r0, #44	; 0x2c
 8001ed2:	f001 fa28 	bl	8003326 <HAL_NVIC_EnableIRQ>
}
 8001ed6:	e01a      	b.n	8001f0e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <HAL_TIM_Base_MspInit+0xb0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d115      	bne.n	8001f0e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_TIM_Base_MspInit+0xa8>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_TIM_Base_MspInit+0xa8>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_TIM_Base_MspInit+0xa8>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	202d      	movs	r0, #45	; 0x2d
 8001f04:	f001 f9f3 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f08:	202d      	movs	r0, #45	; 0x2d
 8001f0a:	f001 fa0c 	bl	8003326 <HAL_NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40001c00 	.word	0x40001c00
 8001f20:	40002000 	.word	0x40002000

08001f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d11d      	bne.n	8001f82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_TIM_MspPostInit+0x68>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_TIM_MspPostInit+0x68>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_TIM_MspPostInit+0x68>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f62:	2302      	movs	r3, #2
 8001f64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4804      	ldr	r0, [pc, #16]	; (8001f90 <HAL_TIM_MspPostInit+0x6c>)
 8001f7e:	f001 fa7f 	bl	8003480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f82:	bf00      	nop
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000

08001f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_UART_MspInit+0x94>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d133      	bne.n	800201e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <HAL_UART_MspInit+0x98>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a1b      	ldr	r2, [pc, #108]	; (800202c <HAL_UART_MspInit+0x98>)
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_UART_MspInit+0x98>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_UART_MspInit+0x98>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_UART_MspInit+0x98>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_UART_MspInit+0x98>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fee:	230c      	movs	r3, #12
 8001ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ffe:	2307      	movs	r3, #7
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <HAL_UART_MspInit+0x9c>)
 800200a:	f001 fa39 	bl	8003480 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	2026      	movs	r0, #38	; 0x26
 8002014:	f001 f96b 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002018:	2026      	movs	r0, #38	; 0x26
 800201a:	f001 f984 	bl	8003326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40004400 	.word	0x40004400
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <NMI_Handler+0x4>

0800203a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <MemManage_Handler+0x4>

08002046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <BusFault_Handler+0x4>

0800204c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <UsageFault_Handler+0x4>

08002052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002080:	f000 f988 	bl	8002394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}

08002088 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <CAN1_RX0_IRQHandler+0x10>)
 800208e:	f000 fe2d 	bl	8002cec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000264 	.word	0x20000264

0800209c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <CAN1_RX1_IRQHandler+0x10>)
 80020a2:	f000 fe23 	bl	8002cec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000264 	.word	0x20000264

080020b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <USART2_IRQHandler+0x10>)
 80020b6:	f004 f827 	bl	8006108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200003b8 	.word	0x200003b8

080020c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80020ca:	f003 f8e3 	bl	8005294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000328 	.word	0x20000328

080020d8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80020de:	f003 f8d9 	bl	8005294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000370 	.word	0x20000370

080020ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return 1;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_kill>:

int _kill(int pid, int sig)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002106:	f004 ff33 	bl	8006f70 <__errno>
 800210a:	4603      	mov	r3, r0
 800210c:	2216      	movs	r2, #22
 800210e:	601a      	str	r2, [r3, #0]
  return -1;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_exit>:

void _exit (int status)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ffe7 	bl	80020fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800212e:	e7fe      	b.n	800212e <_exit+0x12>

08002130 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00a      	b.n	8002158 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002142:	f3af 8000 	nop.w
 8002146:	4601      	mov	r1, r0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf0      	blt.n	8002142 <_read+0x12>
  }

  return len;
 8002160:	687b      	ldr	r3, [r7, #4]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e009      	b.n	8002190 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbf1      	blt.n	800217c <_write+0x12>
  }
  return len;
 8002198:	687b      	ldr	r3, [r7, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_close>:

int _close(int file)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ca:	605a      	str	r2, [r3, #4]
  return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_isatty>:

int _isatty(int file)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f004 fe98 	bl	8006f70 <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <_sbrk+0x64>)
 800225c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20020000 	.word	0x20020000
 800226c:	00000400 	.word	0x00000400
 8002270:	20000400 	.word	0x20000400
 8002274:	20000418 	.word	0x20000418

08002278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <SystemInit+0x20>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <SystemInit+0x20>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800229c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a0:	480d      	ldr	r0, [pc, #52]	; (80022d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022a2:	490e      	ldr	r1, [pc, #56]	; (80022dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b8:	4c0b      	ldr	r4, [pc, #44]	; (80022e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022c6:	f7ff ffd7 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ca:	f004 fe57 	bl	8006f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ce:	f7ff f8cf 	bl	8001470 <main>
  bx  lr    
 80022d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022e0:	0800a204 	.word	0x0800a204
  ldr r2, =_sbss
 80022e4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80022e8:	20000418 	.word	0x20000418

080022ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC_IRQHandler>
	...

080022f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_Init+0x40>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_Init+0x40>)
 8002306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_Init+0x40>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f000 ffdd 	bl	80032d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231e:	2000      	movs	r0, #0
 8002320:	f000 f808 	bl	8002334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002324:	f7ff fcdc 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_InitTick+0x54>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_InitTick+0x58>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234a:	fbb3 f3f1 	udiv	r3, r3, r1
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fff5 	bl	8003342 <HAL_SYSTICK_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00e      	b.n	8002380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b0f      	cmp	r3, #15
 8002366:	d80a      	bhi.n	800237e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002368:	2200      	movs	r2, #0
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002370:	f000 ffbd 	bl	80032ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <HAL_InitTick+0x5c>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000000 	.word	0x20000000
 800238c:	20000008 	.word	0x20000008
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_IncTick+0x20>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_IncTick+0x24>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <HAL_IncTick+0x24>)
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000008 	.word	0x20000008
 80023b8:	20000404 	.word	0x20000404

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_GetTick+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000404 	.word	0x20000404

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff ffee 	bl	80023bc <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ec:	d005      	beq.n	80023fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_Delay+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffde 	bl	80023bc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f7      	bhi.n	80023fc <HAL_Delay+0x28>
  {
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000008 	.word	0x20000008

0800241c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0ed      	b.n	800260a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fc78 	bl	8001d30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002450:	f7ff ffb4 	bl	80023bc <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002456:	e012      	b.n	800247e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002458:	f7ff ffb0 	bl	80023bc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b0a      	cmp	r3, #10
 8002464:	d90b      	bls.n	800247e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2205      	movs	r2, #5
 8002476:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0c5      	b.n	800260a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0e5      	beq.n	8002458 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0202 	bic.w	r2, r2, #2
 800249a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800249c:	f7ff ff8e 	bl	80023bc <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024a2:	e012      	b.n	80024ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024a4:	f7ff ff8a 	bl	80023bc <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b0a      	cmp	r3, #10
 80024b0:	d90b      	bls.n	80024ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2205      	movs	r2, #5
 80024c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e09f      	b.n	800260a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1e5      	bne.n	80024a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7e1b      	ldrb	r3, [r3, #24]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d108      	bne.n	80024f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e007      	b.n	8002502 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7e5b      	ldrb	r3, [r3, #25]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e007      	b.n	800252c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7e9b      	ldrb	r3, [r3, #26]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d108      	bne.n	8002546 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0220 	orr.w	r2, r2, #32
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e007      	b.n	8002556 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0220 	bic.w	r2, r2, #32
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7edb      	ldrb	r3, [r3, #27]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d108      	bne.n	8002570 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0210 	bic.w	r2, r2, #16
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e007      	b.n	8002580 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0210 	orr.w	r2, r2, #16
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7f1b      	ldrb	r3, [r3, #28]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d108      	bne.n	800259a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0208 	orr.w	r2, r2, #8
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e007      	b.n	80025aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0208 	bic.w	r2, r2, #8
 80025a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7f5b      	ldrb	r3, [r3, #29]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0204 	orr.w	r2, r2, #4
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e007      	b.n	80025d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0204 	bic.w	r2, r2, #4
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	ea42 0103 	orr.w	r1, r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800262a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d003      	beq.n	800263a <HAL_CAN_ConfigFilter+0x26>
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b02      	cmp	r3, #2
 8002636:	f040 80be 	bne.w	80027b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800263a:	4b65      	ldr	r3, [pc, #404]	; (80027d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800263c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002654:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	431a      	orrs	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2201      	movs	r2, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43db      	mvns	r3, r3
 800268c:	401a      	ands	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d123      	bne.n	80026e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3248      	adds	r2, #72	; 0x48
 80026c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026da:	6979      	ldr	r1, [r7, #20]
 80026dc:	3348      	adds	r3, #72	; 0x48
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d122      	bne.n	8002732 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800270c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3248      	adds	r2, #72	; 0x48
 8002712:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002726:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002728:	6979      	ldr	r1, [r7, #20]
 800272a:	3348      	adds	r3, #72	; 0x48
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	43db      	mvns	r3, r3
 8002744:	401a      	ands	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800274c:	e007      	b.n	800275e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	431a      	orrs	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	43db      	mvns	r3, r3
 8002770:	401a      	ands	r2, r3
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002778:	e007      	b.n	800278a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	431a      	orrs	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d107      	bne.n	80027a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	431a      	orrs	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027a8:	f023 0201 	bic.w	r2, r3, #1
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e006      	b.n	80027c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	40006400 	.word	0x40006400

080027d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d12e      	bne.n	8002846 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002800:	f7ff fddc 	bl	80023bc <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002806:	e012      	b.n	800282e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002808:	f7ff fdd8 	bl	80023bc <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b0a      	cmp	r3, #10
 8002814:	d90b      	bls.n	800282e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2205      	movs	r2, #5
 8002826:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e012      	b.n	8002854 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e5      	bne.n	8002808 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e006      	b.n	8002854 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002870:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800287a:	7ffb      	ldrb	r3, [r7, #31]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d003      	beq.n	8002888 <HAL_CAN_AddTxMessage+0x2c>
 8002880:	7ffb      	ldrb	r3, [r7, #31]
 8002882:	2b02      	cmp	r3, #2
 8002884:	f040 80b8 	bne.w	80029f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80a0 	beq.w	80029e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	0e1b      	lsrs	r3, r3, #24
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d907      	bls.n	80028c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e09e      	b.n	8002a06 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028c8:	2201      	movs	r2, #1
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	409a      	lsls	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028e4:	68f9      	ldr	r1, [r7, #12]
 80028e6:	6809      	ldr	r1, [r1, #0]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3318      	adds	r3, #24
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	440b      	add	r3, r1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e00f      	b.n	8002916 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002900:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800290a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3318      	adds	r3, #24
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	440b      	add	r3, r1
 8002914:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3318      	adds	r3, #24
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	440b      	add	r3, r1
 8002926:	3304      	adds	r3, #4
 8002928:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	7d1b      	ldrb	r3, [r3, #20]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d111      	bne.n	8002956 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3318      	adds	r3, #24
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	6811      	ldr	r1, [r2, #0]
 8002946:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3318      	adds	r3, #24
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	440b      	add	r3, r1
 8002952:	3304      	adds	r3, #4
 8002954:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3307      	adds	r3, #7
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	061a      	lsls	r2, r3, #24
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3306      	adds	r3, #6
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	041b      	lsls	r3, r3, #16
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3305      	adds	r3, #5
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	4313      	orrs	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	3204      	adds	r2, #4
 8002976:	7812      	ldrb	r2, [r2, #0]
 8002978:	4610      	mov	r0, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	6811      	ldr	r1, [r2, #0]
 800297e:	ea43 0200 	orr.w	r2, r3, r0
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	440b      	add	r3, r1
 8002988:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800298c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3303      	adds	r3, #3
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	061a      	lsls	r2, r3, #24
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3302      	adds	r3, #2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3301      	adds	r3, #1
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	4313      	orrs	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	4610      	mov	r0, r2
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	6811      	ldr	r1, [r2, #0]
 80029b4:	ea43 0200 	orr.w	r2, r3, r0
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	440b      	add	r3, r1
 80029be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3318      	adds	r3, #24
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	4413      	add	r3, r2
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	6811      	ldr	r1, [r2, #0]
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3318      	adds	r3, #24
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	440b      	add	r3, r1
 80029e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e00e      	b.n	8002a06 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e006      	b.n	8002a06 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a24:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d002      	beq.n	8002a32 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002a2c:	7afb      	ldrb	r3, [r7, #11]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d11d      	bne.n	8002a6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3301      	adds	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3301      	adds	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a90:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d003      	beq.n	8002aa0 <HAL_CAN_GetRxMessage+0x24>
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	f040 80f3 	bne.w	8002c86 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d116      	bne.n	8002ae2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0e7      	b.n	8002c94 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0d8      	b.n	8002c94 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	331b      	adds	r3, #27
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0204 	and.w	r2, r3, #4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10c      	bne.n	8002b1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	331b      	adds	r3, #27
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	4413      	add	r3, r2
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	0d5b      	lsrs	r3, r3, #21
 8002b10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e00b      	b.n	8002b32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	331b      	adds	r3, #27
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	4413      	add	r3, r2
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	08db      	lsrs	r3, r3, #3
 8002b2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	331b      	adds	r3, #27
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0202 	and.w	r2, r3, #2
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	331b      	adds	r3, #27
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 020f 	and.w	r2, r3, #15
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	331b      	adds	r3, #27
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	331b      	adds	r3, #27
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	4413      	add	r3, r2
 8002b84:	3304      	adds	r3, #4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0c1b      	lsrs	r3, r3, #16
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0a1a      	lsrs	r2, r3, #8
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0c1a      	lsrs	r2, r3, #16
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0e1a      	lsrs	r2, r3, #24
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	3303      	adds	r3, #3
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	3304      	adds	r3, #4
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0a1a      	lsrs	r2, r3, #8
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3305      	adds	r3, #5
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0c1a      	lsrs	r2, r3, #16
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	3306      	adds	r3, #6
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e1a      	lsrs	r2, r3, #24
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	3307      	adds	r3, #7
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d108      	bne.n	8002c72 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0220 	orr.w	r2, r2, #32
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	e007      	b.n	8002c82 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0220 	orr.w	r2, r2, #32
 8002c80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e006      	b.n	8002c94 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
  }
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d002      	beq.n	8002cbe <HAL_CAN_ActivateNotification+0x1e>
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d109      	bne.n	8002cd2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6959      	ldr	r1, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e006      	b.n	8002ce0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d07c      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d023      	beq.n	8002d84 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2201      	movs	r2, #1
 8002d42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f983 	bl	800305a <HAL_CAN_TxMailbox0CompleteCallback>
 8002d54:	e016      	b.n	8002d84 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
 8002d68:	e00c      	b.n	8002d84 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7c:	e002      	b.n	8002d84 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f989 	bl	8003096 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d024      	beq.n	8002dd8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f963 	bl	800306e <HAL_CAN_TxMailbox1CompleteCallback>
 8002da8:	e016      	b.n	8002dd8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbc:	e00c      	b.n	8002dd8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	e002      	b.n	8002dd8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f969 	bl	80030aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d024      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f943 	bl	8003082 <HAL_CAN_TxMailbox2CompleteCallback>
 8002dfc:	e016      	b.n	8002e2c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e10:	e00c      	b.n	8002e2c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
 8002e24:	e002      	b.n	8002e2c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f949 	bl	80030be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00c      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2208      	movs	r2, #8
 8002e6a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f930 	bl	80030d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fad6 	bl	800143c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f908 	bl	80030e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fab0 	bl	8001454 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d006      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f8f2 	bl	80030fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00b      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8eb 	bl	800310e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d07b      	beq.n	800303a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d072      	beq.n	8003032 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d043      	beq.n	8003032 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03e      	beq.n	8003032 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fba:	2b60      	cmp	r3, #96	; 0x60
 8002fbc:	d02b      	beq.n	8003016 <HAL_CAN_IRQHandler+0x32a>
 8002fbe:	2b60      	cmp	r3, #96	; 0x60
 8002fc0:	d82e      	bhi.n	8003020 <HAL_CAN_IRQHandler+0x334>
 8002fc2:	2b50      	cmp	r3, #80	; 0x50
 8002fc4:	d022      	beq.n	800300c <HAL_CAN_IRQHandler+0x320>
 8002fc6:	2b50      	cmp	r3, #80	; 0x50
 8002fc8:	d82a      	bhi.n	8003020 <HAL_CAN_IRQHandler+0x334>
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d019      	beq.n	8003002 <HAL_CAN_IRQHandler+0x316>
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d826      	bhi.n	8003020 <HAL_CAN_IRQHandler+0x334>
 8002fd2:	2b30      	cmp	r3, #48	; 0x30
 8002fd4:	d010      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x30c>
 8002fd6:	2b30      	cmp	r3, #48	; 0x30
 8002fd8:	d822      	bhi.n	8003020 <HAL_CAN_IRQHandler+0x334>
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d002      	beq.n	8002fe4 <HAL_CAN_IRQHandler+0x2f8>
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d005      	beq.n	8002fee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002fe2:	e01d      	b.n	8003020 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	f043 0308 	orr.w	r3, r3, #8
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fec:	e019      	b.n	8003022 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	f043 0310 	orr.w	r3, r3, #16
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ff6:	e014      	b.n	8003022 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	f043 0320 	orr.w	r3, r3, #32
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003000:	e00f      	b.n	8003022 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800300a:	e00a      	b.n	8003022 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003014:	e005      	b.n	8003022 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800301e:	e000      	b.n	8003022 <HAL_CAN_IRQHandler+0x336>
            break;
 8003020:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003030:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2204      	movs	r2, #4
 8003038:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f868 	bl	8003122 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	; 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003154:	4013      	ands	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	60d3      	str	r3, [r2, #12]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <__NVIC_GetPriorityGrouping+0x18>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	f003 0307 	and.w	r3, r3, #7
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db0b      	blt.n	80031c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4907      	ldr	r1, [pc, #28]	; (80031d4 <__NVIC_EnableIRQ+0x38>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000e100 	.word	0xe000e100

080031d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	6039      	str	r1, [r7, #0]
 80031e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	db0a      	blt.n	8003202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	490c      	ldr	r1, [pc, #48]	; (8003224 <__NVIC_SetPriority+0x4c>)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	0112      	lsls	r2, r2, #4
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	440b      	add	r3, r1
 80031fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003200:	e00a      	b.n	8003218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4908      	ldr	r1, [pc, #32]	; (8003228 <__NVIC_SetPriority+0x50>)
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	3b04      	subs	r3, #4
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	440b      	add	r3, r1
 8003216:	761a      	strb	r2, [r3, #24]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000e100 	.word	0xe000e100
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322c:	b480      	push	{r7}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f1c3 0307 	rsb	r3, r3, #7
 8003246:	2b04      	cmp	r3, #4
 8003248:	bf28      	it	cs
 800324a:	2304      	movcs	r3, #4
 800324c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3304      	adds	r3, #4
 8003252:	2b06      	cmp	r3, #6
 8003254:	d902      	bls.n	800325c <NVIC_EncodePriority+0x30>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3b03      	subs	r3, #3
 800325a:	e000      	b.n	800325e <NVIC_EncodePriority+0x32>
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	401a      	ands	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003274:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43d9      	mvns	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003284:	4313      	orrs	r3, r2
         );
}
 8003286:	4618      	mov	r0, r3
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a4:	d301      	bcc.n	80032aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00f      	b.n	80032ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <SysTick_Config+0x40>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b2:	210f      	movs	r1, #15
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032b8:	f7ff ff8e 	bl	80031d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <SysTick_Config+0x40>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <SysTick_Config+0x40>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	e000e010 	.word	0xe000e010

080032d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff29 	bl	8003138 <__NVIC_SetPriorityGrouping>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4603      	mov	r3, r0
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003300:	f7ff ff3e 	bl	8003180 <__NVIC_GetPriorityGrouping>
 8003304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	6978      	ldr	r0, [r7, #20]
 800330c:	f7ff ff8e 	bl	800322c <NVIC_EncodePriority>
 8003310:	4602      	mov	r2, r0
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff5d 	bl	80031d8 <__NVIC_SetPriority>
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff31 	bl	800319c <__NVIC_EnableIRQ>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ffa2 	bl	8003294 <SysTick_Config>
 8003350:	4603      	mov	r3, r0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff f828 	bl	80023bc <HAL_GetTick>
 800336c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d008      	beq.n	800338c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e052      	b.n	8003432 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0216 	bic.w	r2, r2, #22
 800339a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <HAL_DMA_Abort+0x62>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0208 	bic.w	r2, r2, #8
 80033ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033dc:	e013      	b.n	8003406 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033de:	f7fe ffed 	bl	80023bc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d90c      	bls.n	8003406 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2203      	movs	r2, #3
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e015      	b.n	8003432 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e4      	bne.n	80033de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	223f      	movs	r2, #63	; 0x3f
 800341a:	409a      	lsls	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d004      	beq.n	8003458 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e00c      	b.n	8003472 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2205      	movs	r2, #5
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	e165      	b.n	8003768 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800349c:	2201      	movs	r2, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	f040 8154 	bne.w	8003762 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d005      	beq.n	80034d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d130      	bne.n	8003534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	2203      	movs	r2, #3
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003508:	2201      	movs	r2, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 0201 	and.w	r2, r3, #1
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b03      	cmp	r3, #3
 800353e:	d017      	beq.n	8003570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2203      	movs	r2, #3
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d123      	bne.n	80035c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	08da      	lsrs	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	220f      	movs	r2, #15
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	08da      	lsrs	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3208      	adds	r2, #8
 80035be:	69b9      	ldr	r1, [r7, #24]
 80035c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0203 	and.w	r2, r3, #3
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80ae 	beq.w	8003762 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <HAL_GPIO_Init+0x300>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	4a5c      	ldr	r2, [pc, #368]	; (8003780 <HAL_GPIO_Init+0x300>)
 8003610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003614:	6453      	str	r3, [r2, #68]	; 0x44
 8003616:	4b5a      	ldr	r3, [pc, #360]	; (8003780 <HAL_GPIO_Init+0x300>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003622:	4a58      	ldr	r2, [pc, #352]	; (8003784 <HAL_GPIO_Init+0x304>)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	220f      	movs	r2, #15
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a4f      	ldr	r2, [pc, #316]	; (8003788 <HAL_GPIO_Init+0x308>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d025      	beq.n	800369a <HAL_GPIO_Init+0x21a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4e      	ldr	r2, [pc, #312]	; (800378c <HAL_GPIO_Init+0x30c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01f      	beq.n	8003696 <HAL_GPIO_Init+0x216>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a4d      	ldr	r2, [pc, #308]	; (8003790 <HAL_GPIO_Init+0x310>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d019      	beq.n	8003692 <HAL_GPIO_Init+0x212>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4c      	ldr	r2, [pc, #304]	; (8003794 <HAL_GPIO_Init+0x314>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_GPIO_Init+0x20e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4b      	ldr	r2, [pc, #300]	; (8003798 <HAL_GPIO_Init+0x318>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00d      	beq.n	800368a <HAL_GPIO_Init+0x20a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4a      	ldr	r2, [pc, #296]	; (800379c <HAL_GPIO_Init+0x31c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d007      	beq.n	8003686 <HAL_GPIO_Init+0x206>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a49      	ldr	r2, [pc, #292]	; (80037a0 <HAL_GPIO_Init+0x320>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_GPIO_Init+0x202>
 800367e:	2306      	movs	r3, #6
 8003680:	e00c      	b.n	800369c <HAL_GPIO_Init+0x21c>
 8003682:	2307      	movs	r3, #7
 8003684:	e00a      	b.n	800369c <HAL_GPIO_Init+0x21c>
 8003686:	2305      	movs	r3, #5
 8003688:	e008      	b.n	800369c <HAL_GPIO_Init+0x21c>
 800368a:	2304      	movs	r3, #4
 800368c:	e006      	b.n	800369c <HAL_GPIO_Init+0x21c>
 800368e:	2303      	movs	r3, #3
 8003690:	e004      	b.n	800369c <HAL_GPIO_Init+0x21c>
 8003692:	2302      	movs	r3, #2
 8003694:	e002      	b.n	800369c <HAL_GPIO_Init+0x21c>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_GPIO_Init+0x21c>
 800369a:	2300      	movs	r3, #0
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	f002 0203 	and.w	r2, r2, #3
 80036a2:	0092      	lsls	r2, r2, #2
 80036a4:	4093      	lsls	r3, r2
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ac:	4935      	ldr	r1, [pc, #212]	; (8003784 <HAL_GPIO_Init+0x304>)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	089b      	lsrs	r3, r3, #2
 80036b2:	3302      	adds	r3, #2
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <HAL_GPIO_Init+0x324>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036de:	4a31      	ldr	r2, [pc, #196]	; (80037a4 <HAL_GPIO_Init+0x324>)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e4:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <HAL_GPIO_Init+0x324>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003708:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <HAL_GPIO_Init+0x324>)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800370e:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <HAL_GPIO_Init+0x324>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <HAL_GPIO_Init+0x324>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_GPIO_Init+0x324>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3301      	adds	r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2b0f      	cmp	r3, #15
 800376c:	f67f ae96 	bls.w	800349c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	3724      	adds	r7, #36	; 0x24
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	40013800 	.word	0x40013800
 8003788:	40020000 	.word	0x40020000
 800378c:	40020400 	.word	0x40020400
 8003790:	40020800 	.word	0x40020800
 8003794:	40020c00 	.word	0x40020c00
 8003798:	40021000 	.word	0x40021000
 800379c:	40021400 	.word	0x40021400
 80037a0:	40021800 	.word	0x40021800
 80037a4:	40013c00 	.word	0x40013c00

080037a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
 80037b4:	4613      	mov	r3, r2
 80037b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b8:	787b      	ldrb	r3, [r7, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c4:	e003      	b.n	80037ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c6:	887b      	ldrh	r3, [r7, #2]
 80037c8:	041a      	lsls	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	619a      	str	r2, [r3, #24]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e12b      	b.n	8003a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fe faec 	bl	8001de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800383e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003840:	f000 fe22 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8003844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a81      	ldr	r2, [pc, #516]	; (8003a50 <HAL_I2C_Init+0x274>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d807      	bhi.n	8003860 <HAL_I2C_Init+0x84>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a80      	ldr	r2, [pc, #512]	; (8003a54 <HAL_I2C_Init+0x278>)
 8003854:	4293      	cmp	r3, r2
 8003856:	bf94      	ite	ls
 8003858:	2301      	movls	r3, #1
 800385a:	2300      	movhi	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e006      	b.n	800386e <HAL_I2C_Init+0x92>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a7d      	ldr	r2, [pc, #500]	; (8003a58 <HAL_I2C_Init+0x27c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	bf94      	ite	ls
 8003868:	2301      	movls	r3, #1
 800386a:	2300      	movhi	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e0e7      	b.n	8003a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a78      	ldr	r2, [pc, #480]	; (8003a5c <HAL_I2C_Init+0x280>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0c9b      	lsrs	r3, r3, #18
 8003880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a6a      	ldr	r2, [pc, #424]	; (8003a50 <HAL_I2C_Init+0x274>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d802      	bhi.n	80038b0 <HAL_I2C_Init+0xd4>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3301      	adds	r3, #1
 80038ae:	e009      	b.n	80038c4 <HAL_I2C_Init+0xe8>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	4a69      	ldr	r2, [pc, #420]	; (8003a60 <HAL_I2C_Init+0x284>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	3301      	adds	r3, #1
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	495c      	ldr	r1, [pc, #368]	; (8003a50 <HAL_I2C_Init+0x274>)
 80038e0:	428b      	cmp	r3, r1
 80038e2:	d819      	bhi.n	8003918 <HAL_I2C_Init+0x13c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1e59      	subs	r1, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f2:	1c59      	adds	r1, r3, #1
 80038f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038f8:	400b      	ands	r3, r1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_I2C_Init+0x138>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1e59      	subs	r1, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fbb1 f3f3 	udiv	r3, r1, r3
 800390c:	3301      	adds	r3, #1
 800390e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003912:	e051      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003914:	2304      	movs	r3, #4
 8003916:	e04f      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d111      	bne.n	8003944 <HAL_I2C_Init+0x168>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e58      	subs	r0, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	440b      	add	r3, r1
 800392e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003932:	3301      	adds	r3, #1
 8003934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e012      	b.n	800396a <HAL_I2C_Init+0x18e>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e58      	subs	r0, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	0099      	lsls	r1, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	fbb0 f3f3 	udiv	r3, r0, r3
 800395a:	3301      	adds	r3, #1
 800395c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Init+0x196>
 800396e:	2301      	movs	r3, #1
 8003970:	e022      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10e      	bne.n	8003998 <HAL_I2C_Init+0x1bc>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1e58      	subs	r0, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6859      	ldr	r1, [r3, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	440b      	add	r3, r1
 8003988:	fbb0 f3f3 	udiv	r3, r0, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003996:	e00f      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e58      	subs	r0, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	0099      	lsls	r1, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	6809      	ldr	r1, [r1, #0]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6911      	ldr	r1, [r2, #16]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	4311      	orrs	r1, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	000186a0 	.word	0x000186a0
 8003a54:	001e847f 	.word	0x001e847f
 8003a58:	003d08ff 	.word	0x003d08ff
 8003a5c:	431bde83 	.word	0x431bde83
 8003a60:	10624dd3 	.word	0x10624dd3

08003a64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08c      	sub	sp, #48	; 0x30
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	460b      	mov	r3, r1
 8003a72:	817b      	strh	r3, [r7, #10]
 8003a74:	4613      	mov	r3, r2
 8003a76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7fe fca0 	bl	80023bc <HAL_GetTick>
 8003a7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	f040 820b 	bne.w	8003ea2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2319      	movs	r3, #25
 8003a92:	2201      	movs	r2, #1
 8003a94:	497c      	ldr	r1, [pc, #496]	; (8003c88 <HAL_I2C_Master_Receive+0x224>)
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fad8 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e1fe      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_I2C_Master_Receive+0x50>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e1f7      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d007      	beq.n	8003ada <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2222      	movs	r2, #34	; 0x22
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2210      	movs	r2, #16
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	893a      	ldrh	r2, [r7, #8]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a5c      	ldr	r2, [pc, #368]	; (8003c8c <HAL_I2C_Master_Receive+0x228>)
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b1c:	8979      	ldrh	r1, [r7, #10]
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f9c4 	bl	8003eb0 <I2C_MasterRequestRead>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1b8      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d113      	bne.n	8003b62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	623b      	str	r3, [r7, #32]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e18c      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d11b      	bne.n	8003ba2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e16c      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d11b      	bne.n	8003be2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	e14c      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c08:	e138      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	f200 80f1 	bhi.w	8003df6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d123      	bne.n	8003c64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fae9 	bl	80041f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e139      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c62:	e10b      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d14e      	bne.n	8003d0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	2200      	movs	r2, #0
 8003c74:	4906      	ldr	r1, [pc, #24]	; (8003c90 <HAL_I2C_Master_Receive+0x22c>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f9e8 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e10e      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
 8003c86:	bf00      	nop
 8003c88:	00100002 	.word	0x00100002
 8003c8c:	ffff0000 	.word	0xffff0000
 8003c90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d08:	e0b8      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	2200      	movs	r2, #0
 8003d12:	4966      	ldr	r1, [pc, #408]	; (8003eac <HAL_I2C_Master_Receive+0x448>)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f999 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0bf      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	494f      	ldr	r1, [pc, #316]	; (8003eac <HAL_I2C_Master_Receive+0x448>)
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f96b 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e091      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df4:	e042      	b.n	8003e7c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f9fc 	bl	80041f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e04c      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d118      	bne.n	8003e7c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f aec2 	bne.w	8003c0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e000      	b.n	8003ea4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	00010004 	.word	0x00010004

08003eb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d006      	beq.n	8003eea <I2C_MasterRequestRead+0x3a>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d003      	beq.n	8003eea <I2C_MasterRequestRead+0x3a>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee8:	d108      	bne.n	8003efc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e00b      	b.n	8003f14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	2b11      	cmp	r3, #17
 8003f02:	d107      	bne.n	8003f14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f893 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3a:	d103      	bne.n	8003f44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e079      	b.n	800403c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f50:	d108      	bne.n	8003f64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	611a      	str	r2, [r3, #16]
 8003f62:	e05f      	b.n	8004024 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f64:	897b      	ldrh	r3, [r7, #10]
 8003f66:	11db      	asrs	r3, r3, #7
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 0306 	and.w	r3, r3, #6
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f063 030f 	orn	r3, r3, #15
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4930      	ldr	r1, [pc, #192]	; (8004044 <I2C_MasterRequestRead+0x194>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f8b9 	bl	80040fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e054      	b.n	800403c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4929      	ldr	r1, [pc, #164]	; (8004048 <I2C_MasterRequestRead+0x198>)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f8a9 	bl	80040fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e044      	b.n	800403c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f831 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffe:	d103      	bne.n	8004008 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004006:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e017      	b.n	800403c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800400c:	897b      	ldrh	r3, [r7, #10]
 800400e:	11db      	asrs	r3, r3, #7
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0306 	and.w	r3, r3, #6
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f063 030e 	orn	r3, r3, #14
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4907      	ldr	r1, [pc, #28]	; (8004048 <I2C_MasterRequestRead+0x198>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f865 	bl	80040fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	00010008 	.word	0x00010008
 8004048:	00010002 	.word	0x00010002

0800404c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800405c:	e025      	b.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004064:	d021      	beq.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fe f9a9 	bl	80023bc <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d116      	bne.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e023      	b.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	0c1b      	lsrs	r3, r3, #16
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d10d      	bne.n	80040d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	e00c      	b.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	43da      	mvns	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4013      	ands	r3, r2
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf0c      	ite	eq
 80040e2:	2301      	moveq	r3, #1
 80040e4:	2300      	movne	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d0b6      	beq.n	800405e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004108:	e051      	b.n	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d123      	bne.n	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004128:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004132:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f043 0204 	orr.w	r2, r3, #4
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e046      	b.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004168:	d021      	beq.n	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7fe f927 	bl	80023bc <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d302      	bcc.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d116      	bne.n	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e020      	b.n	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10c      	bne.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4013      	ands	r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf14      	ite	ne
 80041ca:	2301      	movne	r3, #1
 80041cc:	2300      	moveq	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	e00b      	b.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	43da      	mvns	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4013      	ands	r3, r2
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d18d      	bne.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004204:	e042      	b.n	800428c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d119      	bne.n	8004248 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0210 	mvn.w	r2, #16
 800421c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e029      	b.n	800429c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004248:	f7fe f8b8 	bl	80023bc <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	429a      	cmp	r2, r3
 8004256:	d302      	bcc.n	800425e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d116      	bne.n	800428c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e007      	b.n	800429c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b40      	cmp	r3, #64	; 0x40
 8004298:	d1b5      	bne.n	8004206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0cc      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b8:	4b68      	ldr	r3, [pc, #416]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d90c      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b65      	ldr	r3, [pc, #404]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b63      	ldr	r3, [pc, #396]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0b8      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d020      	beq.n	800432e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f8:	4b59      	ldr	r3, [pc, #356]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a58      	ldr	r2, [pc, #352]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004310:	4b53      	ldr	r3, [pc, #332]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a52      	ldr	r2, [pc, #328]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800431a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800431c:	4b50      	ldr	r3, [pc, #320]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	494d      	ldr	r1, [pc, #308]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d044      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b47      	ldr	r3, [pc, #284]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d119      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e07f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d003      	beq.n	8004362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	2b03      	cmp	r3, #3
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004362:	4b3f      	ldr	r3, [pc, #252]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e06f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004372:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e067      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004382:	4b37      	ldr	r3, [pc, #220]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f023 0203 	bic.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4934      	ldr	r1, [pc, #208]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004394:	f7fe f812 	bl	80023bc <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439c:	f7fe f80e 	bl	80023bc <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e04f      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b2:	4b2b      	ldr	r3, [pc, #172]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 020c 	and.w	r2, r3, #12
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d1eb      	bne.n	800439c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d20c      	bcs.n	80043ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b22      	ldr	r3, [pc, #136]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e032      	b.n	8004452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4916      	ldr	r1, [pc, #88]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	490e      	ldr	r1, [pc, #56]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	4313      	orrs	r3, r2
 8004428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800442a:	f000 f855 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 800442e:	4602      	mov	r2, r0
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	490a      	ldr	r1, [pc, #40]	; (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	5ccb      	ldrb	r3, [r1, r3]
 800443e:	fa22 f303 	lsr.w	r3, r2, r3
 8004442:	4a09      	ldr	r2, [pc, #36]	; (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fd ff72 	bl	8002334 <HAL_InitTick>

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40023c00 	.word	0x40023c00
 8004460:	40023800 	.word	0x40023800
 8004464:	08009e04 	.word	0x08009e04
 8004468:	20000000 	.word	0x20000000
 800446c:	20000004 	.word	0x20000004

08004470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	08009e14 	.word	0x08009e14

080044b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044b4:	f7ff ffdc 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0b5b      	lsrs	r3, r3, #13
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	08009e14 	.word	0x08009e14

080044d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044dc:	b0ae      	sub	sp, #184	; 0xb8
 80044de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044fe:	4bcb      	ldr	r3, [pc, #812]	; (800482c <HAL_RCC_GetSysClockFreq+0x354>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b0c      	cmp	r3, #12
 8004508:	f200 8206 	bhi.w	8004918 <HAL_RCC_GetSysClockFreq+0x440>
 800450c:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <HAL_RCC_GetSysClockFreq+0x3c>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004549 	.word	0x08004549
 8004518:	08004919 	.word	0x08004919
 800451c:	08004919 	.word	0x08004919
 8004520:	08004919 	.word	0x08004919
 8004524:	08004551 	.word	0x08004551
 8004528:	08004919 	.word	0x08004919
 800452c:	08004919 	.word	0x08004919
 8004530:	08004919 	.word	0x08004919
 8004534:	08004559 	.word	0x08004559
 8004538:	08004919 	.word	0x08004919
 800453c:	08004919 	.word	0x08004919
 8004540:	08004919 	.word	0x08004919
 8004544:	08004749 	.word	0x08004749
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4bb9      	ldr	r3, [pc, #740]	; (8004830 <HAL_RCC_GetSysClockFreq+0x358>)
 800454a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800454e:	e1e7      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004550:	4bb8      	ldr	r3, [pc, #736]	; (8004834 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004556:	e1e3      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004558:	4bb4      	ldr	r3, [pc, #720]	; (800482c <HAL_RCC_GetSysClockFreq+0x354>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004564:	4bb1      	ldr	r3, [pc, #708]	; (800482c <HAL_RCC_GetSysClockFreq+0x354>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d071      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004570:	4bae      	ldr	r3, [pc, #696]	; (800482c <HAL_RCC_GetSysClockFreq+0x354>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	099b      	lsrs	r3, r3, #6
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800457c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800458c:	2300      	movs	r3, #0
 800458e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004596:	4622      	mov	r2, r4
 8004598:	462b      	mov	r3, r5
 800459a:	f04f 0000 	mov.w	r0, #0
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	0159      	lsls	r1, r3, #5
 80045a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a8:	0150      	lsls	r0, r2, #5
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4621      	mov	r1, r4
 80045b0:	1a51      	subs	r1, r2, r1
 80045b2:	6439      	str	r1, [r7, #64]	; 0x40
 80045b4:	4629      	mov	r1, r5
 80045b6:	eb63 0301 	sbc.w	r3, r3, r1
 80045ba:	647b      	str	r3, [r7, #68]	; 0x44
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80045c8:	4649      	mov	r1, r9
 80045ca:	018b      	lsls	r3, r1, #6
 80045cc:	4641      	mov	r1, r8
 80045ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045d2:	4641      	mov	r1, r8
 80045d4:	018a      	lsls	r2, r1, #6
 80045d6:	4641      	mov	r1, r8
 80045d8:	1a51      	subs	r1, r2, r1
 80045da:	63b9      	str	r1, [r7, #56]	; 0x38
 80045dc:	4649      	mov	r1, r9
 80045de:	eb63 0301 	sbc.w	r3, r3, r1
 80045e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80045f0:	4649      	mov	r1, r9
 80045f2:	00cb      	lsls	r3, r1, #3
 80045f4:	4641      	mov	r1, r8
 80045f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fa:	4641      	mov	r1, r8
 80045fc:	00ca      	lsls	r2, r1, #3
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	4603      	mov	r3, r0
 8004604:	4622      	mov	r2, r4
 8004606:	189b      	adds	r3, r3, r2
 8004608:	633b      	str	r3, [r7, #48]	; 0x30
 800460a:	462b      	mov	r3, r5
 800460c:	460a      	mov	r2, r1
 800460e:	eb42 0303 	adc.w	r3, r2, r3
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004620:	4629      	mov	r1, r5
 8004622:	024b      	lsls	r3, r1, #9
 8004624:	4621      	mov	r1, r4
 8004626:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800462a:	4621      	mov	r1, r4
 800462c:	024a      	lsls	r2, r1, #9
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800463c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004640:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004644:	f7fc fb20 	bl	8000c88 <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4613      	mov	r3, r2
 800464e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004652:	e067      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004654:	4b75      	ldr	r3, [pc, #468]	; (800482c <HAL_RCC_GetSysClockFreq+0x354>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	099b      	lsrs	r3, r3, #6
 800465a:	2200      	movs	r2, #0
 800465c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004660:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466c:	67bb      	str	r3, [r7, #120]	; 0x78
 800466e:	2300      	movs	r3, #0
 8004670:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004672:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004676:	4622      	mov	r2, r4
 8004678:	462b      	mov	r3, r5
 800467a:	f04f 0000 	mov.w	r0, #0
 800467e:	f04f 0100 	mov.w	r1, #0
 8004682:	0159      	lsls	r1, r3, #5
 8004684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004688:	0150      	lsls	r0, r2, #5
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4621      	mov	r1, r4
 8004690:	1a51      	subs	r1, r2, r1
 8004692:	62b9      	str	r1, [r7, #40]	; 0x28
 8004694:	4629      	mov	r1, r5
 8004696:	eb63 0301 	sbc.w	r3, r3, r1
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80046a8:	4649      	mov	r1, r9
 80046aa:	018b      	lsls	r3, r1, #6
 80046ac:	4641      	mov	r1, r8
 80046ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046b2:	4641      	mov	r1, r8
 80046b4:	018a      	lsls	r2, r1, #6
 80046b6:	4641      	mov	r1, r8
 80046b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80046bc:	4649      	mov	r1, r9
 80046be:	eb63 0b01 	sbc.w	fp, r3, r1
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046d6:	4692      	mov	sl, r2
 80046d8:	469b      	mov	fp, r3
 80046da:	4623      	mov	r3, r4
 80046dc:	eb1a 0303 	adds.w	r3, sl, r3
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	462b      	mov	r3, r5
 80046e4:	eb4b 0303 	adc.w	r3, fp, r3
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046f6:	4629      	mov	r1, r5
 80046f8:	028b      	lsls	r3, r1, #10
 80046fa:	4621      	mov	r1, r4
 80046fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004700:	4621      	mov	r1, r4
 8004702:	028a      	lsls	r2, r1, #10
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800470c:	2200      	movs	r2, #0
 800470e:	673b      	str	r3, [r7, #112]	; 0x70
 8004710:	677a      	str	r2, [r7, #116]	; 0x74
 8004712:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004716:	f7fc fab7 	bl	8000c88 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4613      	mov	r3, r2
 8004720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004724:	4b41      	ldr	r3, [pc, #260]	; (800482c <HAL_RCC_GetSysClockFreq+0x354>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	3301      	adds	r3, #1
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800473a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004746:	e0eb      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004748:	4b38      	ldr	r3, [pc, #224]	; (800482c <HAL_RCC_GetSysClockFreq+0x354>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004754:	4b35      	ldr	r3, [pc, #212]	; (800482c <HAL_RCC_GetSysClockFreq+0x354>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d06b      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <HAL_RCC_GetSysClockFreq+0x354>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	099b      	lsrs	r3, r3, #6
 8004766:	2200      	movs	r2, #0
 8004768:	66bb      	str	r3, [r7, #104]	; 0x68
 800476a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800476c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	663b      	str	r3, [r7, #96]	; 0x60
 8004774:	2300      	movs	r3, #0
 8004776:	667b      	str	r3, [r7, #100]	; 0x64
 8004778:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800477c:	4622      	mov	r2, r4
 800477e:	462b      	mov	r3, r5
 8004780:	f04f 0000 	mov.w	r0, #0
 8004784:	f04f 0100 	mov.w	r1, #0
 8004788:	0159      	lsls	r1, r3, #5
 800478a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800478e:	0150      	lsls	r0, r2, #5
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4621      	mov	r1, r4
 8004796:	1a51      	subs	r1, r2, r1
 8004798:	61b9      	str	r1, [r7, #24]
 800479a:	4629      	mov	r1, r5
 800479c:	eb63 0301 	sbc.w	r3, r3, r1
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80047ae:	4659      	mov	r1, fp
 80047b0:	018b      	lsls	r3, r1, #6
 80047b2:	4651      	mov	r1, sl
 80047b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047b8:	4651      	mov	r1, sl
 80047ba:	018a      	lsls	r2, r1, #6
 80047bc:	4651      	mov	r1, sl
 80047be:	ebb2 0801 	subs.w	r8, r2, r1
 80047c2:	4659      	mov	r1, fp
 80047c4:	eb63 0901 	sbc.w	r9, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047dc:	4690      	mov	r8, r2
 80047de:	4699      	mov	r9, r3
 80047e0:	4623      	mov	r3, r4
 80047e2:	eb18 0303 	adds.w	r3, r8, r3
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	462b      	mov	r3, r5
 80047ea:	eb49 0303 	adc.w	r3, r9, r3
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047fc:	4629      	mov	r1, r5
 80047fe:	024b      	lsls	r3, r1, #9
 8004800:	4621      	mov	r1, r4
 8004802:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004806:	4621      	mov	r1, r4
 8004808:	024a      	lsls	r2, r1, #9
 800480a:	4610      	mov	r0, r2
 800480c:	4619      	mov	r1, r3
 800480e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004812:	2200      	movs	r2, #0
 8004814:	65bb      	str	r3, [r7, #88]	; 0x58
 8004816:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004818:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800481c:	f7fc fa34 	bl	8000c88 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4613      	mov	r3, r2
 8004826:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800482a:	e065      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x420>
 800482c:	40023800 	.word	0x40023800
 8004830:	00f42400 	.word	0x00f42400
 8004834:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004838:	4b3d      	ldr	r3, [pc, #244]	; (8004930 <HAL_RCC_GetSysClockFreq+0x458>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	2200      	movs	r2, #0
 8004840:	4618      	mov	r0, r3
 8004842:	4611      	mov	r1, r2
 8004844:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004848:	653b      	str	r3, [r7, #80]	; 0x50
 800484a:	2300      	movs	r3, #0
 800484c:	657b      	str	r3, [r7, #84]	; 0x54
 800484e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004852:	4642      	mov	r2, r8
 8004854:	464b      	mov	r3, r9
 8004856:	f04f 0000 	mov.w	r0, #0
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	0159      	lsls	r1, r3, #5
 8004860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004864:	0150      	lsls	r0, r2, #5
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4641      	mov	r1, r8
 800486c:	1a51      	subs	r1, r2, r1
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	4649      	mov	r1, r9
 8004872:	eb63 0301 	sbc.w	r3, r3, r1
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004884:	4659      	mov	r1, fp
 8004886:	018b      	lsls	r3, r1, #6
 8004888:	4651      	mov	r1, sl
 800488a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800488e:	4651      	mov	r1, sl
 8004890:	018a      	lsls	r2, r1, #6
 8004892:	4651      	mov	r1, sl
 8004894:	1a54      	subs	r4, r2, r1
 8004896:	4659      	mov	r1, fp
 8004898:	eb63 0501 	sbc.w	r5, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	00eb      	lsls	r3, r5, #3
 80048a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048aa:	00e2      	lsls	r2, r4, #3
 80048ac:	4614      	mov	r4, r2
 80048ae:	461d      	mov	r5, r3
 80048b0:	4643      	mov	r3, r8
 80048b2:	18e3      	adds	r3, r4, r3
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	464b      	mov	r3, r9
 80048b8:	eb45 0303 	adc.w	r3, r5, r3
 80048bc:	607b      	str	r3, [r7, #4]
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ca:	4629      	mov	r1, r5
 80048cc:	028b      	lsls	r3, r1, #10
 80048ce:	4621      	mov	r1, r4
 80048d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048d4:	4621      	mov	r1, r4
 80048d6:	028a      	lsls	r2, r1, #10
 80048d8:	4610      	mov	r0, r2
 80048da:	4619      	mov	r1, r3
 80048dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048e0:	2200      	movs	r2, #0
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80048e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048ea:	f7fc f9cd 	bl	8000c88 <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4613      	mov	r3, r2
 80048f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <HAL_RCC_GetSysClockFreq+0x458>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	0f1b      	lsrs	r3, r3, #28
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800490a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800490e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004916:	e003      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <HAL_RCC_GetSysClockFreq+0x45c>)
 800491a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800491e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004924:	4618      	mov	r0, r3
 8004926:	37b8      	adds	r7, #184	; 0xb8
 8004928:	46bd      	mov	sp, r7
 800492a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800
 8004934:	00f42400 	.word	0x00f42400

08004938 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e28d      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8083 	beq.w	8004a5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004958:	4b94      	ldr	r3, [pc, #592]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 030c 	and.w	r3, r3, #12
 8004960:	2b04      	cmp	r3, #4
 8004962:	d019      	beq.n	8004998 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004964:	4b91      	ldr	r3, [pc, #580]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800496c:	2b08      	cmp	r3, #8
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004970:	4b8e      	ldr	r3, [pc, #568]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497c:	d00c      	beq.n	8004998 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800497e:	4b8b      	ldr	r3, [pc, #556]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d112      	bne.n	80049b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800498a:	4b88      	ldr	r3, [pc, #544]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004996:	d10b      	bne.n	80049b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	4b84      	ldr	r3, [pc, #528]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05b      	beq.n	8004a5c <HAL_RCC_OscConfig+0x124>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d157      	bne.n	8004a5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e25a      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCC_OscConfig+0x90>
 80049ba:	4b7c      	ldr	r3, [pc, #496]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a7b      	ldr	r2, [pc, #492]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e01d      	b.n	8004a04 <HAL_RCC_OscConfig+0xcc>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCC_OscConfig+0xb4>
 80049d2:	4b76      	ldr	r3, [pc, #472]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a75      	ldr	r2, [pc, #468]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b73      	ldr	r3, [pc, #460]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a72      	ldr	r2, [pc, #456]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e00b      	b.n	8004a04 <HAL_RCC_OscConfig+0xcc>
 80049ec:	4b6f      	ldr	r3, [pc, #444]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a6e      	ldr	r2, [pc, #440]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6b      	ldr	r2, [pc, #428]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 80049fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d013      	beq.n	8004a34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fcd6 	bl	80023bc <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd fcd2 	bl	80023bc <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e21f      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	4b61      	ldr	r3, [pc, #388]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0xdc>
 8004a32:	e014      	b.n	8004a5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd fcc2 	bl	80023bc <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a3c:	f7fd fcbe 	bl	80023bc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b64      	cmp	r3, #100	; 0x64
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e20b      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a4e:	4b57      	ldr	r3, [pc, #348]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x104>
 8004a5a:	e000      	b.n	8004a5e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d06f      	beq.n	8004b4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a6a:	4b50      	ldr	r3, [pc, #320]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d017      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a76:	4b4d      	ldr	r3, [pc, #308]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d105      	bne.n	8004a8e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a82:	4b4a      	ldr	r3, [pc, #296]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a8e:	4b47      	ldr	r3, [pc, #284]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a96:	2b0c      	cmp	r3, #12
 8004a98:	d11c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a9a:	4b44      	ldr	r3, [pc, #272]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d116      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa6:	4b41      	ldr	r3, [pc, #260]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_RCC_OscConfig+0x186>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d001      	beq.n	8004abe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e1d3      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abe:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4937      	ldr	r1, [pc, #220]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad2:	e03a      	b.n	8004b4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d020      	beq.n	8004b1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004adc:	4b34      	ldr	r3, [pc, #208]	; (8004bb0 <HAL_RCC_OscConfig+0x278>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae2:	f7fd fc6b 	bl	80023bc <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aea:	f7fd fc67 	bl	80023bc <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e1b4      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afc:	4b2b      	ldr	r3, [pc, #172]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b08:	4b28      	ldr	r3, [pc, #160]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	4925      	ldr	r1, [pc, #148]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]
 8004b1c:	e015      	b.n	8004b4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b1e:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCC_OscConfig+0x278>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fd fc4a 	bl	80023bc <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b2c:	f7fd fc46 	bl	80023bc <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e193      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b3e:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d036      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b64:	f7fd fc2a 	bl	80023bc <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6c:	f7fd fc26 	bl	80023bc <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e173      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_OscConfig+0x274>)
 8004b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x234>
 8004b8a:	e01b      	b.n	8004bc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b92:	f7fd fc13 	bl	80023bc <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b98:	e00e      	b.n	8004bb8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fd fc0f 	bl	80023bc <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d907      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e15c      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	42470000 	.word	0x42470000
 8004bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb8:	4b8a      	ldr	r3, [pc, #552]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1ea      	bne.n	8004b9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8097 	beq.w	8004d00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd6:	4b83      	ldr	r3, [pc, #524]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10f      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	4b7f      	ldr	r3, [pc, #508]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4a7e      	ldr	r2, [pc, #504]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf2:	4b7c      	ldr	r3, [pc, #496]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c02:	4b79      	ldr	r3, [pc, #484]	; (8004de8 <HAL_RCC_OscConfig+0x4b0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d118      	bne.n	8004c40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c0e:	4b76      	ldr	r3, [pc, #472]	; (8004de8 <HAL_RCC_OscConfig+0x4b0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a75      	ldr	r2, [pc, #468]	; (8004de8 <HAL_RCC_OscConfig+0x4b0>)
 8004c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1a:	f7fd fbcf 	bl	80023bc <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c22:	f7fd fbcb 	bl	80023bc <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e118      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c34:	4b6c      	ldr	r3, [pc, #432]	; (8004de8 <HAL_RCC_OscConfig+0x4b0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d106      	bne.n	8004c56 <HAL_RCC_OscConfig+0x31e>
 8004c48:	4b66      	ldr	r3, [pc, #408]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	4a65      	ldr	r2, [pc, #404]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6713      	str	r3, [r2, #112]	; 0x70
 8004c54:	e01c      	b.n	8004c90 <HAL_RCC_OscConfig+0x358>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b05      	cmp	r3, #5
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x340>
 8004c5e:	4b61      	ldr	r3, [pc, #388]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	4a60      	ldr	r2, [pc, #384]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6a:	4b5e      	ldr	r3, [pc, #376]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	4a5d      	ldr	r2, [pc, #372]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	6713      	str	r3, [r2, #112]	; 0x70
 8004c76:	e00b      	b.n	8004c90 <HAL_RCC_OscConfig+0x358>
 8004c78:	4b5a      	ldr	r3, [pc, #360]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	4a59      	ldr	r2, [pc, #356]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	6713      	str	r3, [r2, #112]	; 0x70
 8004c84:	4b57      	ldr	r3, [pc, #348]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	4a56      	ldr	r2, [pc, #344]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004c8a:	f023 0304 	bic.w	r3, r3, #4
 8004c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d015      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c98:	f7fd fb90 	bl	80023bc <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca0:	f7fd fb8c 	bl	80023bc <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e0d7      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb6:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0ee      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x368>
 8004cc2:	e014      	b.n	8004cee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fd fb7a 	bl	80023bc <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f7fd fb76 	bl	80023bc <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e0c1      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce2:	4b40      	ldr	r3, [pc, #256]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ee      	bne.n	8004ccc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	4a3a      	ldr	r2, [pc, #232]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 80ad 	beq.w	8004e64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d0a:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d060      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d145      	bne.n	8004daa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1e:	4b33      	ldr	r3, [pc, #204]	; (8004dec <HAL_RCC_OscConfig+0x4b4>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd fb4a 	bl	80023bc <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd fb46 	bl	80023bc <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e093      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	4b29      	ldr	r3, [pc, #164]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	019b      	lsls	r3, r3, #6
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	3b01      	subs	r3, #1
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	061b      	lsls	r3, r3, #24
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	071b      	lsls	r3, r3, #28
 8004d76:	491b      	ldr	r1, [pc, #108]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x4b4>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fd fb1b 	bl	80023bc <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fd fb17 	bl	80023bc <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e064      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x452>
 8004da8:	e05c      	b.n	8004e64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <HAL_RCC_OscConfig+0x4b4>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fd fb04 	bl	80023bc <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fd fb00 	bl	80023bc <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e04d      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_OscConfig+0x4ac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x480>
 8004dd6:	e045      	b.n	8004e64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e040      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004df0:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <HAL_RCC_OscConfig+0x538>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d030      	beq.n	8004e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d129      	bne.n	8004e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d122      	bne.n	8004e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d119      	bne.n	8004e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d10f      	bne.n	8004e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d107      	bne.n	8004e60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800

08004e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e041      	b.n	8004f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fc ffe8 	bl	8001e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f000 fca8 	bl	8005808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d001      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e04e      	b.n	8004fca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a23      	ldr	r2, [pc, #140]	; (8004fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d022      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x80>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f56:	d01d      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x80>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d018      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x80>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1e      	ldr	r2, [pc, #120]	; (8004fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x80>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1c      	ldr	r2, [pc, #112]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00e      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x80>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	; (8004fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a19      	ldr	r2, [pc, #100]	; (8004fec <HAL_TIM_Base_Start_IT+0xd8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x80>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d111      	bne.n	8004fb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b06      	cmp	r3, #6
 8004fa4:	d010      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb6:	e007      	b.n	8004fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40010400 	.word	0x40010400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40001800 	.word	0x40001800

08004ff4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	f241 1311 	movw	r3, #4369	; 0x1111
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10f      	bne.n	800503c <HAL_TIM_Base_Stop_IT+0x48>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	f240 4344 	movw	r3, #1092	; 0x444
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d107      	bne.n	800503c <HAL_TIM_Base_Stop_IT+0x48>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e041      	b.n	80050e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f839 	bl	80050f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 fbb9 	bl	8005808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d109      	bne.n	8005128 <HAL_TIM_PWM_Start+0x24>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e022      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d109      	bne.n	8005142 <HAL_TIM_PWM_Start+0x3e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e015      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d109      	bne.n	800515c <HAL_TIM_PWM_Start+0x58>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e008      	b.n	800516e <HAL_TIM_PWM_Start+0x6a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e07c      	b.n	8005270 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0x82>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005184:	e013      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0x92>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005194:	e00b      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xa2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a4:	e003      	b.n	80051ae <HAL_TIM_PWM_Start+0xaa>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2201      	movs	r2, #1
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fe10 	bl	8005ddc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2d      	ldr	r2, [pc, #180]	; (8005278 <HAL_TIM_PWM_Start+0x174>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_TIM_PWM_Start+0xcc>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2c      	ldr	r2, [pc, #176]	; (800527c <HAL_TIM_PWM_Start+0x178>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d101      	bne.n	80051d4 <HAL_TIM_PWM_Start+0xd0>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_TIM_PWM_Start+0xd2>
 80051d4:	2300      	movs	r3, #0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a22      	ldr	r2, [pc, #136]	; (8005278 <HAL_TIM_PWM_Start+0x174>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d022      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fc:	d01d      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <HAL_TIM_PWM_Start+0x17c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <HAL_TIM_PWM_Start+0x180>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <HAL_TIM_PWM_Start+0x184>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a16      	ldr	r2, [pc, #88]	; (800527c <HAL_TIM_PWM_Start+0x178>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a18      	ldr	r2, [pc, #96]	; (800528c <HAL_TIM_PWM_Start+0x188>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIM_PWM_Start+0x136>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a16      	ldr	r2, [pc, #88]	; (8005290 <HAL_TIM_PWM_Start+0x18c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d111      	bne.n	800525e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b06      	cmp	r3, #6
 800524a:	d010      	beq.n	800526e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525c:	e007      	b.n	800526e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40010000 	.word	0x40010000
 800527c:	40010400 	.word	0x40010400
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40014000 	.word	0x40014000
 8005290:	40001800 	.word	0x40001800

08005294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d122      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d11b      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0202 	mvn.w	r2, #2
 80052c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa77 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa69 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fa7a 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b04      	cmp	r3, #4
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0204 	mvn.w	r2, #4
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2202      	movs	r2, #2
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa4d 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa3f 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fa50 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b08      	cmp	r3, #8
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b08      	cmp	r3, #8
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0208 	mvn.w	r2, #8
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2204      	movs	r2, #4
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa23 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa15 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fa26 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0210 	mvn.w	r2, #16
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2208      	movs	r2, #8
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f9f9 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f9eb 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f9fc 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d10e      	bne.n	8005418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b01      	cmp	r3, #1
 8005406:	d107      	bne.n	8005418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0201 	mvn.w	r2, #1
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fc fc34 	bl	8001c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d10e      	bne.n	8005444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d107      	bne.n	8005444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800543c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fd78 	bl	8005f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b40      	cmp	r3, #64	; 0x40
 8005450:	d10e      	bne.n	8005470 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d107      	bne.n	8005470 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f9c1 	bl	80057f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	d10e      	bne.n	800549c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b20      	cmp	r3, #32
 800548a:	d107      	bne.n	800549c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0220 	mvn.w	r2, #32
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fd42 	bl	8005f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e0ae      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b0c      	cmp	r3, #12
 80054ce:	f200 809f 	bhi.w	8005610 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	0800550d 	.word	0x0800550d
 80054dc:	08005611 	.word	0x08005611
 80054e0:	08005611 	.word	0x08005611
 80054e4:	08005611 	.word	0x08005611
 80054e8:	0800554d 	.word	0x0800554d
 80054ec:	08005611 	.word	0x08005611
 80054f0:	08005611 	.word	0x08005611
 80054f4:	08005611 	.word	0x08005611
 80054f8:	0800558f 	.word	0x0800558f
 80054fc:	08005611 	.word	0x08005611
 8005500:	08005611 	.word	0x08005611
 8005504:	08005611 	.word	0x08005611
 8005508:	080055cf 	.word	0x080055cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fa18 	bl	8005948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0208 	orr.w	r2, r2, #8
 8005526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0204 	bic.w	r2, r2, #4
 8005536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6999      	ldr	r1, [r3, #24]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	619a      	str	r2, [r3, #24]
      break;
 800554a:	e064      	b.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fa68 	bl	8005a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	021a      	lsls	r2, r3, #8
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	619a      	str	r2, [r3, #24]
      break;
 800558c:	e043      	b.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fabd 	bl	8005b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0208 	orr.w	r2, r2, #8
 80055a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0204 	bic.w	r2, r2, #4
 80055b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	61da      	str	r2, [r3, #28]
      break;
 80055cc:	e023      	b.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fb11 	bl	8005bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	61da      	str	r2, [r3, #28]
      break;
 800560e:	e002      	b.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	75fb      	strb	r3, [r7, #23]
      break;
 8005614:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800561e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_TIM_ConfigClockSource+0x1c>
 8005640:	2302      	movs	r3, #2
 8005642:	e0b4      	b.n	80057ae <HAL_TIM_ConfigClockSource+0x186>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800566a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567c:	d03e      	beq.n	80056fc <HAL_TIM_ConfigClockSource+0xd4>
 800567e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005682:	f200 8087 	bhi.w	8005794 <HAL_TIM_ConfigClockSource+0x16c>
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568a:	f000 8086 	beq.w	800579a <HAL_TIM_ConfigClockSource+0x172>
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	d87f      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x16c>
 8005694:	2b70      	cmp	r3, #112	; 0x70
 8005696:	d01a      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0xa6>
 8005698:	2b70      	cmp	r3, #112	; 0x70
 800569a:	d87b      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x16c>
 800569c:	2b60      	cmp	r3, #96	; 0x60
 800569e:	d050      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x11a>
 80056a0:	2b60      	cmp	r3, #96	; 0x60
 80056a2:	d877      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x16c>
 80056a4:	2b50      	cmp	r3, #80	; 0x50
 80056a6:	d03c      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0xfa>
 80056a8:	2b50      	cmp	r3, #80	; 0x50
 80056aa:	d873      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x16c>
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d058      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x13a>
 80056b0:	2b40      	cmp	r3, #64	; 0x40
 80056b2:	d86f      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x16c>
 80056b4:	2b30      	cmp	r3, #48	; 0x30
 80056b6:	d064      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x15a>
 80056b8:	2b30      	cmp	r3, #48	; 0x30
 80056ba:	d86b      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x16c>
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d060      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x15a>
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d867      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d05c      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x15a>
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d05a      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0x15a>
 80056cc:	e062      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6899      	ldr	r1, [r3, #8]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f000 fb5d 	bl	8005d9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	609a      	str	r2, [r3, #8]
      break;
 80056fa:	e04f      	b.n	800579c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	6899      	ldr	r1, [r3, #8]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f000 fb46 	bl	8005d9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800571e:	609a      	str	r2, [r3, #8]
      break;
 8005720:	e03c      	b.n	800579c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6859      	ldr	r1, [r3, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	461a      	mov	r2, r3
 8005730:	f000 faba 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2150      	movs	r1, #80	; 0x50
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fb13 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005740:	e02c      	b.n	800579c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6859      	ldr	r1, [r3, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	461a      	mov	r2, r3
 8005750:	f000 fad9 	bl	8005d06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2160      	movs	r1, #96	; 0x60
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fb03 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005760:	e01c      	b.n	800579c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6859      	ldr	r1, [r3, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	461a      	mov	r2, r3
 8005770:	f000 fa9a 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2140      	movs	r1, #64	; 0x40
 800577a:	4618      	mov	r0, r3
 800577c:	f000 faf3 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005780:	e00c      	b.n	800579c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f000 faea 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005792:	e003      	b.n	800579c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      break;
 8005798:	e000      	b.n	800579c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800579a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a40      	ldr	r2, [pc, #256]	; (800591c <TIM_Base_SetConfig+0x114>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d00f      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a3d      	ldr	r2, [pc, #244]	; (8005920 <TIM_Base_SetConfig+0x118>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3c      	ldr	r2, [pc, #240]	; (8005924 <TIM_Base_SetConfig+0x11c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3b      	ldr	r2, [pc, #236]	; (8005928 <TIM_Base_SetConfig+0x120>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3a      	ldr	r2, [pc, #232]	; (800592c <TIM_Base_SetConfig+0x124>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d108      	bne.n	800585a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2f      	ldr	r2, [pc, #188]	; (800591c <TIM_Base_SetConfig+0x114>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005868:	d027      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2c      	ldr	r2, [pc, #176]	; (8005920 <TIM_Base_SetConfig+0x118>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d023      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2b      	ldr	r2, [pc, #172]	; (8005924 <TIM_Base_SetConfig+0x11c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01f      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2a      	ldr	r2, [pc, #168]	; (8005928 <TIM_Base_SetConfig+0x120>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a29      	ldr	r2, [pc, #164]	; (800592c <TIM_Base_SetConfig+0x124>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d017      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a28      	ldr	r2, [pc, #160]	; (8005930 <TIM_Base_SetConfig+0x128>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a27      	ldr	r2, [pc, #156]	; (8005934 <TIM_Base_SetConfig+0x12c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00f      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a26      	ldr	r2, [pc, #152]	; (8005938 <TIM_Base_SetConfig+0x130>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <TIM_Base_SetConfig+0x134>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a24      	ldr	r2, [pc, #144]	; (8005940 <TIM_Base_SetConfig+0x138>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a23      	ldr	r2, [pc, #140]	; (8005944 <TIM_Base_SetConfig+0x13c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d108      	bne.n	80058cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a0a      	ldr	r2, [pc, #40]	; (800591c <TIM_Base_SetConfig+0x114>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0xf8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a0c      	ldr	r2, [pc, #48]	; (800592c <TIM_Base_SetConfig+0x124>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d103      	bne.n	8005908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	615a      	str	r2, [r3, #20]
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40010400 	.word	0x40010400
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800
 800593c:	40001800 	.word	0x40001800
 8005940:	40001c00 	.word	0x40001c00
 8005944:	40002000 	.word	0x40002000

08005948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0303 	bic.w	r3, r3, #3
 800597e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f023 0302 	bic.w	r3, r3, #2
 8005990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a20      	ldr	r2, [pc, #128]	; (8005a20 <TIM_OC1_SetConfig+0xd8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d003      	beq.n	80059ac <TIM_OC1_SetConfig+0x64>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a1f      	ldr	r2, [pc, #124]	; (8005a24 <TIM_OC1_SetConfig+0xdc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d10c      	bne.n	80059c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f023 0308 	bic.w	r3, r3, #8
 80059b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f023 0304 	bic.w	r3, r3, #4
 80059c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <TIM_OC1_SetConfig+0xd8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_OC1_SetConfig+0x8e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a14      	ldr	r2, [pc, #80]	; (8005a24 <TIM_OC1_SetConfig+0xdc>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d111      	bne.n	80059fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	621a      	str	r2, [r3, #32]
}
 8005a14:	bf00      	nop
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400

08005a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f023 0210 	bic.w	r2, r3, #16
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0320 	bic.w	r3, r3, #32
 8005a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a22      	ldr	r2, [pc, #136]	; (8005b0c <TIM_OC2_SetConfig+0xe4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_OC2_SetConfig+0x68>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <TIM_OC2_SetConfig+0xe8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10d      	bne.n	8005aac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <TIM_OC2_SetConfig+0xe4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC2_SetConfig+0x94>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a16      	ldr	r2, [pc, #88]	; (8005b10 <TIM_OC2_SetConfig+0xe8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d113      	bne.n	8005ae4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40010400 	.word	0x40010400

08005b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <TIM_OC3_SetConfig+0xe0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_OC3_SetConfig+0x66>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a20      	ldr	r2, [pc, #128]	; (8005bf8 <TIM_OC3_SetConfig+0xe4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10d      	bne.n	8005b96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a16      	ldr	r2, [pc, #88]	; (8005bf4 <TIM_OC3_SetConfig+0xe0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_OC3_SetConfig+0x92>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <TIM_OC3_SetConfig+0xe4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d113      	bne.n	8005bce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	621a      	str	r2, [r3, #32]
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40010400 	.word	0x40010400

08005bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	031b      	lsls	r3, r3, #12
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <TIM_OC4_SetConfig+0xa4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_OC4_SetConfig+0x68>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a11      	ldr	r2, [pc, #68]	; (8005ca4 <TIM_OC4_SetConfig+0xa8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d109      	bne.n	8005c78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	019b      	lsls	r3, r3, #6
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40010400 	.word	0x40010400

08005ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 030a 	bic.w	r3, r3, #10
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 0210 	bic.w	r2, r3, #16
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f043 0307 	orr.w	r3, r3, #7
 8005d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	021a      	lsls	r2, r3, #8
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	609a      	str	r2, [r3, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	2201      	movs	r2, #1
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	401a      	ands	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1a      	ldr	r2, [r3, #32]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	fa01 f303 	lsl.w	r3, r1, r3
 8005e14:	431a      	orrs	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e05a      	b.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a21      	ldr	r2, [pc, #132]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d022      	beq.n	8005eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8c:	d01d      	beq.n	8005eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1d      	ldr	r2, [pc, #116]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d018      	beq.n	8005eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1b      	ldr	r2, [pc, #108]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d013      	beq.n	8005eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1a      	ldr	r2, [pc, #104]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00e      	beq.n	8005eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a18      	ldr	r2, [pc, #96]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d009      	beq.n	8005eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d004      	beq.n	8005eca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a15      	ldr	r2, [pc, #84]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40010400 	.word	0x40010400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40001800 	.word	0x40001800

08005f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e03f      	b.n	8005fda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fc f810 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2224      	movs	r2, #36	; 0x24
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fd7b 	bl	8006a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b08a      	sub	sp, #40	; 0x28
 8005fe6:	af02      	add	r7, sp, #8
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d17c      	bne.n	80060fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_UART_Transmit+0x2c>
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e075      	b.n	80060fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_UART_Transmit+0x3e>
 800601c:	2302      	movs	r3, #2
 800601e:	e06e      	b.n	80060fe <HAL_UART_Transmit+0x11c>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2221      	movs	r2, #33	; 0x21
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006036:	f7fc f9c1 	bl	80023bc <HAL_GetTick>
 800603a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	88fa      	ldrh	r2, [r7, #6]
 8006040:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	88fa      	ldrh	r2, [r7, #6]
 8006046:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006050:	d108      	bne.n	8006064 <HAL_UART_Transmit+0x82>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	e003      	b.n	800606c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006074:	e02a      	b.n	80060cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2200      	movs	r2, #0
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 faf9 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e036      	b.n	80060fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	3302      	adds	r3, #2
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	e007      	b.n	80060be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3301      	adds	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1cf      	bne.n	8006076 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2200      	movs	r2, #0
 80060de:	2140      	movs	r1, #64	; 0x40
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fac9 	bl	8006678 <UART_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e006      	b.n	80060fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	e000      	b.n	80060fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
  }
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3720      	adds	r7, #32
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b0ba      	sub	sp, #232	; 0xe8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10f      	bne.n	800616e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <HAL_UART_IRQHandler+0x66>
 800615a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fbd3 	bl	8006912 <UART_Receive_IT>
      return;
 800616c:	e256      	b.n	800661c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800616e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80de 	beq.w	8006334 <HAL_UART_IRQHandler+0x22c>
 8006178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d106      	bne.n	8006192 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006188:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80d1 	beq.w	8006334 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <HAL_UART_IRQHandler+0xae>
 800619e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f043 0201 	orr.w	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <HAL_UART_IRQHandler+0xd2>
 80061c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f043 0202 	orr.w	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_UART_IRQHandler+0xf6>
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0204 	orr.w	r2, r3, #4
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d011      	beq.n	800622e <HAL_UART_IRQHandler+0x126>
 800620a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d105      	bne.n	8006222 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f043 0208 	orr.w	r2, r3, #8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 81ed 	beq.w	8006612 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_UART_IRQHandler+0x14e>
 8006244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fb5e 	bl	8006912 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <HAL_UART_IRQHandler+0x17a>
 800627a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d04f      	beq.n	8006322 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa66 	bl	8006754 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d141      	bne.n	800631a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3314      	adds	r3, #20
 800629c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1d9      	bne.n	8006296 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d013      	beq.n	8006312 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	4a7d      	ldr	r2, [pc, #500]	; (80064e4 <HAL_UART_IRQHandler+0x3dc>)
 80062f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fd f89f 	bl	800343a <HAL_DMA_Abort_IT>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006310:	e00e      	b.n	8006330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f99a 	bl	800664c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	e00a      	b.n	8006330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f996 	bl	800664c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	e006      	b.n	8006330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f992 	bl	800664c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800632e:	e170      	b.n	8006612 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	bf00      	nop
    return;
 8006332:	e16e      	b.n	8006612 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006338:	2b01      	cmp	r3, #1
 800633a:	f040 814a 	bne.w	80065d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800633e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006342:	f003 0310 	and.w	r3, r3, #16
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8143 	beq.w	80065d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800634c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 813c 	beq.w	80065d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800635a:	2300      	movs	r3, #0
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	f040 80b4 	bne.w	80064e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800638c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8140 	beq.w	8006616 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800639a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800639e:	429a      	cmp	r2, r3
 80063a0:	f080 8139 	bcs.w	8006616 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b6:	f000 8088 	beq.w	80064ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	330c      	adds	r3, #12
 80063c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1d9      	bne.n	80063ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3314      	adds	r3, #20
 8006426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800642a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800642e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006432:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800643c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e1      	bne.n	8006406 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3314      	adds	r3, #20
 8006448:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006466:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006468:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800646c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e3      	bne.n	8006442 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649a:	f023 0310 	bic.w	r3, r3, #16
 800649e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80064ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e3      	bne.n	8006488 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fc ff48 	bl	800335a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8c0 	bl	8006660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064e0:	e099      	b.n	8006616 <HAL_UART_IRQHandler+0x50e>
 80064e2:	bf00      	nop
 80064e4:	0800681b 	.word	0x0800681b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 808b 	beq.w	800661a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8086 	beq.w	800661a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006524:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006532:	647a      	str	r2, [r7, #68]	; 0x44
 8006534:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e3      	bne.n	800650e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3314      	adds	r3, #20
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	623b      	str	r3, [r7, #32]
   return(result);
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	f023 0301 	bic.w	r3, r3, #1
 800655c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3314      	adds	r3, #20
 8006566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800656a:	633a      	str	r2, [r7, #48]	; 0x30
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e3      	bne.n	8006546 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	330c      	adds	r3, #12
 8006592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	60fb      	str	r3, [r7, #12]
   return(result);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0310 	bic.w	r3, r3, #16
 80065a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065b0:	61fa      	str	r2, [r7, #28]
 80065b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	69b9      	ldr	r1, [r7, #24]
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	617b      	str	r3, [r7, #20]
   return(result);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e3      	bne.n	800658c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f848 	bl	8006660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065d0:	e023      	b.n	800661a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_UART_IRQHandler+0x4ea>
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f929 	bl	8006842 <UART_Transmit_IT>
    return;
 80065f0:	e014      	b.n	800661c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00e      	beq.n	800661c <HAL_UART_IRQHandler+0x514>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f969 	bl	80068e2 <UART_EndTransmit_IT>
    return;
 8006610:	e004      	b.n	800661c <HAL_UART_IRQHandler+0x514>
    return;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <HAL_UART_IRQHandler+0x514>
      return;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <HAL_UART_IRQHandler+0x514>
      return;
 800661a:	bf00      	nop
  }
}
 800661c:	37e8      	adds	r7, #232	; 0xe8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop

08006624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b090      	sub	sp, #64	; 0x40
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006688:	e050      	b.n	800672c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006690:	d04c      	beq.n	800672c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006698:	f7fb fe90 	bl	80023bc <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d241      	bcs.n	800672c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	330c      	adds	r3, #12
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066c8:	637a      	str	r2, [r7, #52]	; 0x34
 80066ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e5      	bne.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3314      	adds	r3, #20
 80066e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	613b      	str	r3, [r7, #16]
   return(result);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3314      	adds	r3, #20
 80066fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066fc:	623a      	str	r2, [r7, #32]
 80066fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	69f9      	ldr	r1, [r7, #28]
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	61bb      	str	r3, [r7, #24]
   return(result);
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e5      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e00f      	b.n	800674c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4013      	ands	r3, r2
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	429a      	cmp	r2, r3
 800673a:	bf0c      	ite	eq
 800673c:	2301      	moveq	r3, #1
 800673e:	2300      	movne	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	429a      	cmp	r2, r3
 8006748:	d09f      	beq.n	800668a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3740      	adds	r7, #64	; 0x40
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b095      	sub	sp, #84	; 0x54
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	330c      	adds	r3, #12
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	e853 3f00 	ldrex	r3, [r3]
 800676a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800677c:	643a      	str	r2, [r7, #64]	; 0x40
 800677e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006782:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e5      	bne.n	800675c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3314      	adds	r3, #20
 8006796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6a3b      	ldr	r3, [r7, #32]
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f023 0301 	bic.w	r3, r3, #1
 80067a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3314      	adds	r3, #20
 80067ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e5      	bne.n	8006790 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d119      	bne.n	8006800 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	330c      	adds	r3, #12
 80067d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	60bb      	str	r3, [r7, #8]
   return(result);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f023 0310 	bic.w	r3, r3, #16
 80067e2:	647b      	str	r3, [r7, #68]	; 0x44
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ec:	61ba      	str	r2, [r7, #24]
 80067ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6979      	ldr	r1, [r7, #20]
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	613b      	str	r3, [r7, #16]
   return(result);
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e5      	bne.n	80067cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800680e:	bf00      	nop
 8006810:	3754      	adds	r7, #84	; 0x54
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f7ff ff09 	bl	800664c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800683a:	bf00      	nop
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b21      	cmp	r3, #33	; 0x21
 8006854:	d13e      	bne.n	80068d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	d114      	bne.n	800688a <UART_Transmit_IT+0x48>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d110      	bne.n	800688a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800687c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	1c9a      	adds	r2, r3, #2
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	621a      	str	r2, [r3, #32]
 8006888:	e008      	b.n	800689c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	1c59      	adds	r1, r3, #1
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6211      	str	r1, [r2, #32]
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	4619      	mov	r1, r3
 80068aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10f      	bne.n	80068d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	e000      	b.n	80068d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068d4:	2302      	movs	r3, #2
  }
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fe8e 	bl	8006624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b08c      	sub	sp, #48	; 0x30
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b22      	cmp	r3, #34	; 0x22
 8006924:	f040 80ab 	bne.w	8006a7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006930:	d117      	bne.n	8006962 <UART_Receive_IT+0x50>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d113      	bne.n	8006962 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006950:	b29a      	uxth	r2, r3
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	629a      	str	r2, [r3, #40]	; 0x28
 8006960:	e026      	b.n	80069b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006974:	d007      	beq.n	8006986 <UART_Receive_IT+0x74>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <UART_Receive_IT+0x82>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	e008      	b.n	80069a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4619      	mov	r1, r3
 80069be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d15a      	bne.n	8006a7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0220 	bic.w	r2, r2, #32
 80069d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695a      	ldr	r2, [r3, #20]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0201 	bic.w	r2, r2, #1
 80069f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d135      	bne.n	8006a70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f023 0310 	bic.w	r3, r3, #16
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2a:	623a      	str	r2, [r7, #32]
 8006a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	69f9      	ldr	r1, [r7, #28]
 8006a30:	6a3a      	ldr	r2, [r7, #32]
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e5      	bne.n	8006a0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d10a      	bne.n	8006a62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff fdf9 	bl	8006660 <HAL_UARTEx_RxEventCallback>
 8006a6e:	e002      	b.n	8006a76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff fde1 	bl	8006638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	e002      	b.n	8006a80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e000      	b.n	8006a80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a7e:	2302      	movs	r3, #2
  }
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3730      	adds	r7, #48	; 0x30
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a8c:	b0c0      	sub	sp, #256	; 0x100
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa4:	68d9      	ldr	r1, [r3, #12]
 8006aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	ea40 0301 	orr.w	r3, r0, r1
 8006ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ae0:	f021 010c 	bic.w	r1, r1, #12
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aee:	430b      	orrs	r3, r1
 8006af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b02:	6999      	ldr	r1, [r3, #24]
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	ea40 0301 	orr.w	r3, r0, r1
 8006b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b8f      	ldr	r3, [pc, #572]	; (8006d54 <UART_SetConfig+0x2cc>)
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d005      	beq.n	8006b28 <UART_SetConfig+0xa0>
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b8d      	ldr	r3, [pc, #564]	; (8006d58 <UART_SetConfig+0x2d0>)
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d104      	bne.n	8006b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b28:	f7fd fcc2 	bl	80044b0 <HAL_RCC_GetPCLK2Freq>
 8006b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b30:	e003      	b.n	8006b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b32:	f7fd fca9 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8006b36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b44:	f040 810c 	bne.w	8006d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b5a:	4622      	mov	r2, r4
 8006b5c:	462b      	mov	r3, r5
 8006b5e:	1891      	adds	r1, r2, r2
 8006b60:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b62:	415b      	adcs	r3, r3
 8006b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	eb12 0801 	adds.w	r8, r2, r1
 8006b70:	4629      	mov	r1, r5
 8006b72:	eb43 0901 	adc.w	r9, r3, r1
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b8a:	4690      	mov	r8, r2
 8006b8c:	4699      	mov	r9, r3
 8006b8e:	4623      	mov	r3, r4
 8006b90:	eb18 0303 	adds.w	r3, r8, r3
 8006b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b98:	462b      	mov	r3, r5
 8006b9a:	eb49 0303 	adc.w	r3, r9, r3
 8006b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	18db      	adds	r3, r3, r3
 8006bba:	653b      	str	r3, [r7, #80]	; 0x50
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	eb42 0303 	adc.w	r3, r2, r3
 8006bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8006bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bcc:	f7fa f85c 	bl	8000c88 <__aeabi_uldivmod>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4b61      	ldr	r3, [pc, #388]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	011c      	lsls	r4, r3, #4
 8006bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006be8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c00:	4641      	mov	r1, r8
 8006c02:	eb12 0a01 	adds.w	sl, r2, r1
 8006c06:	4649      	mov	r1, r9
 8006c08:	eb43 0b01 	adc.w	fp, r3, r1
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c20:	4692      	mov	sl, r2
 8006c22:	469b      	mov	fp, r3
 8006c24:	4643      	mov	r3, r8
 8006c26:	eb1a 0303 	adds.w	r3, sl, r3
 8006c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c2e:	464b      	mov	r3, r9
 8006c30:	eb4b 0303 	adc.w	r3, fp, r3
 8006c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	18db      	adds	r3, r3, r3
 8006c50:	643b      	str	r3, [r7, #64]	; 0x40
 8006c52:	4613      	mov	r3, r2
 8006c54:	eb42 0303 	adc.w	r3, r2, r3
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c62:	f7fa f811 	bl	8000c88 <__aeabi_uldivmod>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	4b3b      	ldr	r3, [pc, #236]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	2264      	movs	r2, #100	; 0x64
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	1acb      	subs	r3, r1, r3
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c82:	4b36      	ldr	r3, [pc, #216]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006c84:	fba3 2302 	umull	r2, r3, r3, r2
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c90:	441c      	add	r4, r3
 8006c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	1891      	adds	r1, r2, r2
 8006caa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cac:	415b      	adcs	r3, r3
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	1851      	adds	r1, r2, r1
 8006cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8006cba:	4649      	mov	r1, r9
 8006cbc:	414b      	adcs	r3, r1
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ccc:	4659      	mov	r1, fp
 8006cce:	00cb      	lsls	r3, r1, #3
 8006cd0:	4651      	mov	r1, sl
 8006cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cd6:	4651      	mov	r1, sl
 8006cd8:	00ca      	lsls	r2, r1, #3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	189b      	adds	r3, r3, r2
 8006ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ce8:	464b      	mov	r3, r9
 8006cea:	460a      	mov	r2, r1
 8006cec:	eb42 0303 	adc.w	r3, r2, r3
 8006cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d08:	460b      	mov	r3, r1
 8006d0a:	18db      	adds	r3, r3, r3
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0e:	4613      	mov	r3, r2
 8006d10:	eb42 0303 	adc.w	r3, r2, r3
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d1e:	f7f9 ffb3 	bl	8000c88 <__aeabi_uldivmod>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006d28:	fba3 1302 	umull	r1, r3, r3, r2
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	2164      	movs	r1, #100	; 0x64
 8006d30:	fb01 f303 	mul.w	r3, r1, r3
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	3332      	adds	r3, #50	; 0x32
 8006d3a:	4a08      	ldr	r2, [pc, #32]	; (8006d5c <UART_SetConfig+0x2d4>)
 8006d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	f003 0207 	and.w	r2, r3, #7
 8006d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4422      	add	r2, r4
 8006d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d50:	e105      	b.n	8006f5e <UART_SetConfig+0x4d6>
 8006d52:	bf00      	nop
 8006d54:	40011000 	.word	0x40011000
 8006d58:	40011400 	.word	0x40011400
 8006d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d72:	4642      	mov	r2, r8
 8006d74:	464b      	mov	r3, r9
 8006d76:	1891      	adds	r1, r2, r2
 8006d78:	6239      	str	r1, [r7, #32]
 8006d7a:	415b      	adcs	r3, r3
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d82:	4641      	mov	r1, r8
 8006d84:	1854      	adds	r4, r2, r1
 8006d86:	4649      	mov	r1, r9
 8006d88:	eb43 0501 	adc.w	r5, r3, r1
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	00eb      	lsls	r3, r5, #3
 8006d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d9a:	00e2      	lsls	r2, r4, #3
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	461d      	mov	r5, r3
 8006da0:	4643      	mov	r3, r8
 8006da2:	18e3      	adds	r3, r4, r3
 8006da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006da8:	464b      	mov	r3, r9
 8006daa:	eb45 0303 	adc.w	r3, r5, r3
 8006dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006dbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006dce:	4629      	mov	r1, r5
 8006dd0:	008b      	lsls	r3, r1, #2
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dd8:	4621      	mov	r1, r4
 8006dda:	008a      	lsls	r2, r1, #2
 8006ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006de0:	f7f9 ff52 	bl	8000c88 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4b60      	ldr	r3, [pc, #384]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006dea:	fba3 2302 	umull	r2, r3, r3, r2
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	011c      	lsls	r4, r3, #4
 8006df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	1891      	adds	r1, r2, r2
 8006e0a:	61b9      	str	r1, [r7, #24]
 8006e0c:	415b      	adcs	r3, r3
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e14:	4641      	mov	r1, r8
 8006e16:	1851      	adds	r1, r2, r1
 8006e18:	6139      	str	r1, [r7, #16]
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	414b      	adcs	r3, r1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	00cb      	lsls	r3, r1, #3
 8006e30:	4651      	mov	r1, sl
 8006e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e36:	4651      	mov	r1, sl
 8006e38:	00ca      	lsls	r2, r1, #3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	4642      	mov	r2, r8
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e48:	464b      	mov	r3, r9
 8006e4a:	460a      	mov	r2, r1
 8006e4c:	eb42 0303 	adc.w	r3, r2, r3
 8006e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	008b      	lsls	r3, r1, #2
 8006e70:	4641      	mov	r1, r8
 8006e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e76:	4641      	mov	r1, r8
 8006e78:	008a      	lsls	r2, r1, #2
 8006e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e7e:	f7f9 ff03 	bl	8000c88 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4b39      	ldr	r3, [pc, #228]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006e88:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	2164      	movs	r1, #100	; 0x64
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	3332      	adds	r3, #50	; 0x32
 8006e9a:	4a34      	ldr	r2, [pc, #208]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ea6:	441c      	add	r4, r3
 8006ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eac:	2200      	movs	r2, #0
 8006eae:	673b      	str	r3, [r7, #112]	; 0x70
 8006eb0:	677a      	str	r2, [r7, #116]	; 0x74
 8006eb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	464b      	mov	r3, r9
 8006eba:	1891      	adds	r1, r2, r2
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	415b      	adcs	r3, r3
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	1851      	adds	r1, r2, r1
 8006eca:	6039      	str	r1, [r7, #0]
 8006ecc:	4649      	mov	r1, r9
 8006ece:	414b      	adcs	r3, r1
 8006ed0:	607b      	str	r3, [r7, #4]
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	f04f 0300 	mov.w	r3, #0
 8006eda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ede:	4659      	mov	r1, fp
 8006ee0:	00cb      	lsls	r3, r1, #3
 8006ee2:	4651      	mov	r1, sl
 8006ee4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ee8:	4651      	mov	r1, sl
 8006eea:	00ca      	lsls	r2, r1, #3
 8006eec:	4610      	mov	r0, r2
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	189b      	adds	r3, r3, r2
 8006ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ef8:	464b      	mov	r3, r9
 8006efa:	460a      	mov	r2, r1
 8006efc:	eb42 0303 	adc.w	r3, r2, r3
 8006f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f0c:	667a      	str	r2, [r7, #100]	; 0x64
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	008b      	lsls	r3, r1, #2
 8006f1e:	4641      	mov	r1, r8
 8006f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f24:	4641      	mov	r1, r8
 8006f26:	008a      	lsls	r2, r1, #2
 8006f28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f2c:	f7f9 feac 	bl	8000c88 <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006f36:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	2164      	movs	r1, #100	; 0x64
 8006f3e:	fb01 f303 	mul.w	r3, r1, r3
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	3332      	adds	r3, #50	; 0x32
 8006f48:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <UART_SetConfig+0x4e4>)
 8006f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4422      	add	r2, r4
 8006f5c:	609a      	str	r2, [r3, #8]
}
 8006f5e:	bf00      	nop
 8006f60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f64:	46bd      	mov	sp, r7
 8006f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f6a:	bf00      	nop
 8006f6c:	51eb851f 	.word	0x51eb851f

08006f70 <__errno>:
 8006f70:	4b01      	ldr	r3, [pc, #4]	; (8006f78 <__errno+0x8>)
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	2000000c 	.word	0x2000000c

08006f7c <__libc_init_array>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	4d0d      	ldr	r5, [pc, #52]	; (8006fb4 <__libc_init_array+0x38>)
 8006f80:	4c0d      	ldr	r4, [pc, #52]	; (8006fb8 <__libc_init_array+0x3c>)
 8006f82:	1b64      	subs	r4, r4, r5
 8006f84:	10a4      	asrs	r4, r4, #2
 8006f86:	2600      	movs	r6, #0
 8006f88:	42a6      	cmp	r6, r4
 8006f8a:	d109      	bne.n	8006fa0 <__libc_init_array+0x24>
 8006f8c:	4d0b      	ldr	r5, [pc, #44]	; (8006fbc <__libc_init_array+0x40>)
 8006f8e:	4c0c      	ldr	r4, [pc, #48]	; (8006fc0 <__libc_init_array+0x44>)
 8006f90:	f002 ff04 	bl	8009d9c <_init>
 8006f94:	1b64      	subs	r4, r4, r5
 8006f96:	10a4      	asrs	r4, r4, #2
 8006f98:	2600      	movs	r6, #0
 8006f9a:	42a6      	cmp	r6, r4
 8006f9c:	d105      	bne.n	8006faa <__libc_init_array+0x2e>
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa4:	4798      	blx	r3
 8006fa6:	3601      	adds	r6, #1
 8006fa8:	e7ee      	b.n	8006f88 <__libc_init_array+0xc>
 8006faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fae:	4798      	blx	r3
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	e7f2      	b.n	8006f9a <__libc_init_array+0x1e>
 8006fb4:	0800a1fc 	.word	0x0800a1fc
 8006fb8:	0800a1fc 	.word	0x0800a1fc
 8006fbc:	0800a1fc 	.word	0x0800a1fc
 8006fc0:	0800a200 	.word	0x0800a200

08006fc4 <memcpy>:
 8006fc4:	440a      	add	r2, r1
 8006fc6:	4291      	cmp	r1, r2
 8006fc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fcc:	d100      	bne.n	8006fd0 <memcpy+0xc>
 8006fce:	4770      	bx	lr
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fda:	4291      	cmp	r1, r2
 8006fdc:	d1f9      	bne.n	8006fd2 <memcpy+0xe>
 8006fde:	bd10      	pop	{r4, pc}

08006fe0 <memset>:
 8006fe0:	4402      	add	r2, r0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d100      	bne.n	8006fea <memset+0xa>
 8006fe8:	4770      	bx	lr
 8006fea:	f803 1b01 	strb.w	r1, [r3], #1
 8006fee:	e7f9      	b.n	8006fe4 <memset+0x4>

08006ff0 <__cvt>:
 8006ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	ec55 4b10 	vmov	r4, r5, d0
 8006ff8:	2d00      	cmp	r5, #0
 8006ffa:	460e      	mov	r6, r1
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	462b      	mov	r3, r5
 8007000:	bfbb      	ittet	lt
 8007002:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007006:	461d      	movlt	r5, r3
 8007008:	2300      	movge	r3, #0
 800700a:	232d      	movlt	r3, #45	; 0x2d
 800700c:	700b      	strb	r3, [r1, #0]
 800700e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007010:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007014:	4691      	mov	r9, r2
 8007016:	f023 0820 	bic.w	r8, r3, #32
 800701a:	bfbc      	itt	lt
 800701c:	4622      	movlt	r2, r4
 800701e:	4614      	movlt	r4, r2
 8007020:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007024:	d005      	beq.n	8007032 <__cvt+0x42>
 8007026:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800702a:	d100      	bne.n	800702e <__cvt+0x3e>
 800702c:	3601      	adds	r6, #1
 800702e:	2102      	movs	r1, #2
 8007030:	e000      	b.n	8007034 <__cvt+0x44>
 8007032:	2103      	movs	r1, #3
 8007034:	ab03      	add	r3, sp, #12
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	ab02      	add	r3, sp, #8
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	ec45 4b10 	vmov	d0, r4, r5
 8007040:	4653      	mov	r3, sl
 8007042:	4632      	mov	r2, r6
 8007044:	f000 fcec 	bl	8007a20 <_dtoa_r>
 8007048:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800704c:	4607      	mov	r7, r0
 800704e:	d102      	bne.n	8007056 <__cvt+0x66>
 8007050:	f019 0f01 	tst.w	r9, #1
 8007054:	d022      	beq.n	800709c <__cvt+0xac>
 8007056:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800705a:	eb07 0906 	add.w	r9, r7, r6
 800705e:	d110      	bne.n	8007082 <__cvt+0x92>
 8007060:	783b      	ldrb	r3, [r7, #0]
 8007062:	2b30      	cmp	r3, #48	; 0x30
 8007064:	d10a      	bne.n	800707c <__cvt+0x8c>
 8007066:	2200      	movs	r2, #0
 8007068:	2300      	movs	r3, #0
 800706a:	4620      	mov	r0, r4
 800706c:	4629      	mov	r1, r5
 800706e:	f7f9 fd4b 	bl	8000b08 <__aeabi_dcmpeq>
 8007072:	b918      	cbnz	r0, 800707c <__cvt+0x8c>
 8007074:	f1c6 0601 	rsb	r6, r6, #1
 8007078:	f8ca 6000 	str.w	r6, [sl]
 800707c:	f8da 3000 	ldr.w	r3, [sl]
 8007080:	4499      	add	r9, r3
 8007082:	2200      	movs	r2, #0
 8007084:	2300      	movs	r3, #0
 8007086:	4620      	mov	r0, r4
 8007088:	4629      	mov	r1, r5
 800708a:	f7f9 fd3d 	bl	8000b08 <__aeabi_dcmpeq>
 800708e:	b108      	cbz	r0, 8007094 <__cvt+0xa4>
 8007090:	f8cd 900c 	str.w	r9, [sp, #12]
 8007094:	2230      	movs	r2, #48	; 0x30
 8007096:	9b03      	ldr	r3, [sp, #12]
 8007098:	454b      	cmp	r3, r9
 800709a:	d307      	bcc.n	80070ac <__cvt+0xbc>
 800709c:	9b03      	ldr	r3, [sp, #12]
 800709e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070a0:	1bdb      	subs	r3, r3, r7
 80070a2:	4638      	mov	r0, r7
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	b004      	add	sp, #16
 80070a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ac:	1c59      	adds	r1, r3, #1
 80070ae:	9103      	str	r1, [sp, #12]
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	e7f0      	b.n	8007096 <__cvt+0xa6>

080070b4 <__exponent>:
 80070b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b6:	4603      	mov	r3, r0
 80070b8:	2900      	cmp	r1, #0
 80070ba:	bfb8      	it	lt
 80070bc:	4249      	neglt	r1, r1
 80070be:	f803 2b02 	strb.w	r2, [r3], #2
 80070c2:	bfb4      	ite	lt
 80070c4:	222d      	movlt	r2, #45	; 0x2d
 80070c6:	222b      	movge	r2, #43	; 0x2b
 80070c8:	2909      	cmp	r1, #9
 80070ca:	7042      	strb	r2, [r0, #1]
 80070cc:	dd2a      	ble.n	8007124 <__exponent+0x70>
 80070ce:	f10d 0407 	add.w	r4, sp, #7
 80070d2:	46a4      	mov	ip, r4
 80070d4:	270a      	movs	r7, #10
 80070d6:	46a6      	mov	lr, r4
 80070d8:	460a      	mov	r2, r1
 80070da:	fb91 f6f7 	sdiv	r6, r1, r7
 80070de:	fb07 1516 	mls	r5, r7, r6, r1
 80070e2:	3530      	adds	r5, #48	; 0x30
 80070e4:	2a63      	cmp	r2, #99	; 0x63
 80070e6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80070ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070ee:	4631      	mov	r1, r6
 80070f0:	dcf1      	bgt.n	80070d6 <__exponent+0x22>
 80070f2:	3130      	adds	r1, #48	; 0x30
 80070f4:	f1ae 0502 	sub.w	r5, lr, #2
 80070f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070fc:	1c44      	adds	r4, r0, #1
 80070fe:	4629      	mov	r1, r5
 8007100:	4561      	cmp	r1, ip
 8007102:	d30a      	bcc.n	800711a <__exponent+0x66>
 8007104:	f10d 0209 	add.w	r2, sp, #9
 8007108:	eba2 020e 	sub.w	r2, r2, lr
 800710c:	4565      	cmp	r5, ip
 800710e:	bf88      	it	hi
 8007110:	2200      	movhi	r2, #0
 8007112:	4413      	add	r3, r2
 8007114:	1a18      	subs	r0, r3, r0
 8007116:	b003      	add	sp, #12
 8007118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800711a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800711e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007122:	e7ed      	b.n	8007100 <__exponent+0x4c>
 8007124:	2330      	movs	r3, #48	; 0x30
 8007126:	3130      	adds	r1, #48	; 0x30
 8007128:	7083      	strb	r3, [r0, #2]
 800712a:	70c1      	strb	r1, [r0, #3]
 800712c:	1d03      	adds	r3, r0, #4
 800712e:	e7f1      	b.n	8007114 <__exponent+0x60>

08007130 <_printf_float>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	ed2d 8b02 	vpush	{d8}
 8007138:	b08d      	sub	sp, #52	; 0x34
 800713a:	460c      	mov	r4, r1
 800713c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007140:	4616      	mov	r6, r2
 8007142:	461f      	mov	r7, r3
 8007144:	4605      	mov	r5, r0
 8007146:	f001 fa59 	bl	80085fc <_localeconv_r>
 800714a:	f8d0 a000 	ldr.w	sl, [r0]
 800714e:	4650      	mov	r0, sl
 8007150:	f7f9 f85e 	bl	8000210 <strlen>
 8007154:	2300      	movs	r3, #0
 8007156:	930a      	str	r3, [sp, #40]	; 0x28
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	f8d8 3000 	ldr.w	r3, [r8]
 8007160:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007164:	3307      	adds	r3, #7
 8007166:	f023 0307 	bic.w	r3, r3, #7
 800716a:	f103 0208 	add.w	r2, r3, #8
 800716e:	f8c8 2000 	str.w	r2, [r8]
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800717a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800717e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007182:	9307      	str	r3, [sp, #28]
 8007184:	f8cd 8018 	str.w	r8, [sp, #24]
 8007188:	ee08 0a10 	vmov	s16, r0
 800718c:	4b9f      	ldr	r3, [pc, #636]	; (800740c <_printf_float+0x2dc>)
 800718e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007196:	f7f9 fce9 	bl	8000b6c <__aeabi_dcmpun>
 800719a:	bb88      	cbnz	r0, 8007200 <_printf_float+0xd0>
 800719c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071a0:	4b9a      	ldr	r3, [pc, #616]	; (800740c <_printf_float+0x2dc>)
 80071a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071a6:	f7f9 fcc3 	bl	8000b30 <__aeabi_dcmple>
 80071aa:	bb48      	cbnz	r0, 8007200 <_printf_float+0xd0>
 80071ac:	2200      	movs	r2, #0
 80071ae:	2300      	movs	r3, #0
 80071b0:	4640      	mov	r0, r8
 80071b2:	4649      	mov	r1, r9
 80071b4:	f7f9 fcb2 	bl	8000b1c <__aeabi_dcmplt>
 80071b8:	b110      	cbz	r0, 80071c0 <_printf_float+0x90>
 80071ba:	232d      	movs	r3, #45	; 0x2d
 80071bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071c0:	4b93      	ldr	r3, [pc, #588]	; (8007410 <_printf_float+0x2e0>)
 80071c2:	4894      	ldr	r0, [pc, #592]	; (8007414 <_printf_float+0x2e4>)
 80071c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071c8:	bf94      	ite	ls
 80071ca:	4698      	movls	r8, r3
 80071cc:	4680      	movhi	r8, r0
 80071ce:	2303      	movs	r3, #3
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	9b05      	ldr	r3, [sp, #20]
 80071d4:	f023 0204 	bic.w	r2, r3, #4
 80071d8:	6022      	str	r2, [r4, #0]
 80071da:	f04f 0900 	mov.w	r9, #0
 80071de:	9700      	str	r7, [sp, #0]
 80071e0:	4633      	mov	r3, r6
 80071e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80071e4:	4621      	mov	r1, r4
 80071e6:	4628      	mov	r0, r5
 80071e8:	f000 f9d8 	bl	800759c <_printf_common>
 80071ec:	3001      	adds	r0, #1
 80071ee:	f040 8090 	bne.w	8007312 <_printf_float+0x1e2>
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071f6:	b00d      	add	sp, #52	; 0x34
 80071f8:	ecbd 8b02 	vpop	{d8}
 80071fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007200:	4642      	mov	r2, r8
 8007202:	464b      	mov	r3, r9
 8007204:	4640      	mov	r0, r8
 8007206:	4649      	mov	r1, r9
 8007208:	f7f9 fcb0 	bl	8000b6c <__aeabi_dcmpun>
 800720c:	b140      	cbz	r0, 8007220 <_printf_float+0xf0>
 800720e:	464b      	mov	r3, r9
 8007210:	2b00      	cmp	r3, #0
 8007212:	bfbc      	itt	lt
 8007214:	232d      	movlt	r3, #45	; 0x2d
 8007216:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800721a:	487f      	ldr	r0, [pc, #508]	; (8007418 <_printf_float+0x2e8>)
 800721c:	4b7f      	ldr	r3, [pc, #508]	; (800741c <_printf_float+0x2ec>)
 800721e:	e7d1      	b.n	80071c4 <_printf_float+0x94>
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007226:	9206      	str	r2, [sp, #24]
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	d13f      	bne.n	80072ac <_printf_float+0x17c>
 800722c:	2306      	movs	r3, #6
 800722e:	6063      	str	r3, [r4, #4]
 8007230:	9b05      	ldr	r3, [sp, #20]
 8007232:	6861      	ldr	r1, [r4, #4]
 8007234:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007238:	2300      	movs	r3, #0
 800723a:	9303      	str	r3, [sp, #12]
 800723c:	ab0a      	add	r3, sp, #40	; 0x28
 800723e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007242:	ab09      	add	r3, sp, #36	; 0x24
 8007244:	ec49 8b10 	vmov	d0, r8, r9
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007250:	4628      	mov	r0, r5
 8007252:	f7ff fecd 	bl	8006ff0 <__cvt>
 8007256:	9b06      	ldr	r3, [sp, #24]
 8007258:	9909      	ldr	r1, [sp, #36]	; 0x24
 800725a:	2b47      	cmp	r3, #71	; 0x47
 800725c:	4680      	mov	r8, r0
 800725e:	d108      	bne.n	8007272 <_printf_float+0x142>
 8007260:	1cc8      	adds	r0, r1, #3
 8007262:	db02      	blt.n	800726a <_printf_float+0x13a>
 8007264:	6863      	ldr	r3, [r4, #4]
 8007266:	4299      	cmp	r1, r3
 8007268:	dd41      	ble.n	80072ee <_printf_float+0x1be>
 800726a:	f1ab 0b02 	sub.w	fp, fp, #2
 800726e:	fa5f fb8b 	uxtb.w	fp, fp
 8007272:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007276:	d820      	bhi.n	80072ba <_printf_float+0x18a>
 8007278:	3901      	subs	r1, #1
 800727a:	465a      	mov	r2, fp
 800727c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007280:	9109      	str	r1, [sp, #36]	; 0x24
 8007282:	f7ff ff17 	bl	80070b4 <__exponent>
 8007286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007288:	1813      	adds	r3, r2, r0
 800728a:	2a01      	cmp	r2, #1
 800728c:	4681      	mov	r9, r0
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	dc02      	bgt.n	8007298 <_printf_float+0x168>
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	07d2      	lsls	r2, r2, #31
 8007296:	d501      	bpl.n	800729c <_printf_float+0x16c>
 8007298:	3301      	adds	r3, #1
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d09c      	beq.n	80071de <_printf_float+0xae>
 80072a4:	232d      	movs	r3, #45	; 0x2d
 80072a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072aa:	e798      	b.n	80071de <_printf_float+0xae>
 80072ac:	9a06      	ldr	r2, [sp, #24]
 80072ae:	2a47      	cmp	r2, #71	; 0x47
 80072b0:	d1be      	bne.n	8007230 <_printf_float+0x100>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1bc      	bne.n	8007230 <_printf_float+0x100>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e7b9      	b.n	800722e <_printf_float+0xfe>
 80072ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072be:	d118      	bne.n	80072f2 <_printf_float+0x1c2>
 80072c0:	2900      	cmp	r1, #0
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	dd0b      	ble.n	80072de <_printf_float+0x1ae>
 80072c6:	6121      	str	r1, [r4, #16]
 80072c8:	b913      	cbnz	r3, 80072d0 <_printf_float+0x1a0>
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	07d0      	lsls	r0, r2, #31
 80072ce:	d502      	bpl.n	80072d6 <_printf_float+0x1a6>
 80072d0:	3301      	adds	r3, #1
 80072d2:	440b      	add	r3, r1
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80072d8:	f04f 0900 	mov.w	r9, #0
 80072dc:	e7de      	b.n	800729c <_printf_float+0x16c>
 80072de:	b913      	cbnz	r3, 80072e6 <_printf_float+0x1b6>
 80072e0:	6822      	ldr	r2, [r4, #0]
 80072e2:	07d2      	lsls	r2, r2, #31
 80072e4:	d501      	bpl.n	80072ea <_printf_float+0x1ba>
 80072e6:	3302      	adds	r3, #2
 80072e8:	e7f4      	b.n	80072d4 <_printf_float+0x1a4>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e7f2      	b.n	80072d4 <_printf_float+0x1a4>
 80072ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f4:	4299      	cmp	r1, r3
 80072f6:	db05      	blt.n	8007304 <_printf_float+0x1d4>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	6121      	str	r1, [r4, #16]
 80072fc:	07d8      	lsls	r0, r3, #31
 80072fe:	d5ea      	bpl.n	80072d6 <_printf_float+0x1a6>
 8007300:	1c4b      	adds	r3, r1, #1
 8007302:	e7e7      	b.n	80072d4 <_printf_float+0x1a4>
 8007304:	2900      	cmp	r1, #0
 8007306:	bfd4      	ite	le
 8007308:	f1c1 0202 	rsble	r2, r1, #2
 800730c:	2201      	movgt	r2, #1
 800730e:	4413      	add	r3, r2
 8007310:	e7e0      	b.n	80072d4 <_printf_float+0x1a4>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	055a      	lsls	r2, r3, #21
 8007316:	d407      	bmi.n	8007328 <_printf_float+0x1f8>
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	4642      	mov	r2, r8
 800731c:	4631      	mov	r1, r6
 800731e:	4628      	mov	r0, r5
 8007320:	47b8      	blx	r7
 8007322:	3001      	adds	r0, #1
 8007324:	d12c      	bne.n	8007380 <_printf_float+0x250>
 8007326:	e764      	b.n	80071f2 <_printf_float+0xc2>
 8007328:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800732c:	f240 80e0 	bls.w	80074f0 <_printf_float+0x3c0>
 8007330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007334:	2200      	movs	r2, #0
 8007336:	2300      	movs	r3, #0
 8007338:	f7f9 fbe6 	bl	8000b08 <__aeabi_dcmpeq>
 800733c:	2800      	cmp	r0, #0
 800733e:	d034      	beq.n	80073aa <_printf_float+0x27a>
 8007340:	4a37      	ldr	r2, [pc, #220]	; (8007420 <_printf_float+0x2f0>)
 8007342:	2301      	movs	r3, #1
 8007344:	4631      	mov	r1, r6
 8007346:	4628      	mov	r0, r5
 8007348:	47b8      	blx	r7
 800734a:	3001      	adds	r0, #1
 800734c:	f43f af51 	beq.w	80071f2 <_printf_float+0xc2>
 8007350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007354:	429a      	cmp	r2, r3
 8007356:	db02      	blt.n	800735e <_printf_float+0x22e>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	07d8      	lsls	r0, r3, #31
 800735c:	d510      	bpl.n	8007380 <_printf_float+0x250>
 800735e:	ee18 3a10 	vmov	r3, s16
 8007362:	4652      	mov	r2, sl
 8007364:	4631      	mov	r1, r6
 8007366:	4628      	mov	r0, r5
 8007368:	47b8      	blx	r7
 800736a:	3001      	adds	r0, #1
 800736c:	f43f af41 	beq.w	80071f2 <_printf_float+0xc2>
 8007370:	f04f 0800 	mov.w	r8, #0
 8007374:	f104 091a 	add.w	r9, r4, #26
 8007378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800737a:	3b01      	subs	r3, #1
 800737c:	4543      	cmp	r3, r8
 800737e:	dc09      	bgt.n	8007394 <_printf_float+0x264>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	079b      	lsls	r3, r3, #30
 8007384:	f100 8105 	bmi.w	8007592 <_printf_float+0x462>
 8007388:	68e0      	ldr	r0, [r4, #12]
 800738a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800738c:	4298      	cmp	r0, r3
 800738e:	bfb8      	it	lt
 8007390:	4618      	movlt	r0, r3
 8007392:	e730      	b.n	80071f6 <_printf_float+0xc6>
 8007394:	2301      	movs	r3, #1
 8007396:	464a      	mov	r2, r9
 8007398:	4631      	mov	r1, r6
 800739a:	4628      	mov	r0, r5
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	f43f af27 	beq.w	80071f2 <_printf_float+0xc2>
 80073a4:	f108 0801 	add.w	r8, r8, #1
 80073a8:	e7e6      	b.n	8007378 <_printf_float+0x248>
 80073aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dc39      	bgt.n	8007424 <_printf_float+0x2f4>
 80073b0:	4a1b      	ldr	r2, [pc, #108]	; (8007420 <_printf_float+0x2f0>)
 80073b2:	2301      	movs	r3, #1
 80073b4:	4631      	mov	r1, r6
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b8      	blx	r7
 80073ba:	3001      	adds	r0, #1
 80073bc:	f43f af19 	beq.w	80071f2 <_printf_float+0xc2>
 80073c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073c4:	4313      	orrs	r3, r2
 80073c6:	d102      	bne.n	80073ce <_printf_float+0x29e>
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	07d9      	lsls	r1, r3, #31
 80073cc:	d5d8      	bpl.n	8007380 <_printf_float+0x250>
 80073ce:	ee18 3a10 	vmov	r3, s16
 80073d2:	4652      	mov	r2, sl
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f af09 	beq.w	80071f2 <_printf_float+0xc2>
 80073e0:	f04f 0900 	mov.w	r9, #0
 80073e4:	f104 0a1a 	add.w	sl, r4, #26
 80073e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ea:	425b      	negs	r3, r3
 80073ec:	454b      	cmp	r3, r9
 80073ee:	dc01      	bgt.n	80073f4 <_printf_float+0x2c4>
 80073f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f2:	e792      	b.n	800731a <_printf_float+0x1ea>
 80073f4:	2301      	movs	r3, #1
 80073f6:	4652      	mov	r2, sl
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	f43f aef7 	beq.w	80071f2 <_printf_float+0xc2>
 8007404:	f109 0901 	add.w	r9, r9, #1
 8007408:	e7ee      	b.n	80073e8 <_printf_float+0x2b8>
 800740a:	bf00      	nop
 800740c:	7fefffff 	.word	0x7fefffff
 8007410:	08009e20 	.word	0x08009e20
 8007414:	08009e24 	.word	0x08009e24
 8007418:	08009e2c 	.word	0x08009e2c
 800741c:	08009e28 	.word	0x08009e28
 8007420:	08009e30 	.word	0x08009e30
 8007424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007426:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007428:	429a      	cmp	r2, r3
 800742a:	bfa8      	it	ge
 800742c:	461a      	movge	r2, r3
 800742e:	2a00      	cmp	r2, #0
 8007430:	4691      	mov	r9, r2
 8007432:	dc37      	bgt.n	80074a4 <_printf_float+0x374>
 8007434:	f04f 0b00 	mov.w	fp, #0
 8007438:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800743c:	f104 021a 	add.w	r2, r4, #26
 8007440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	eba3 0309 	sub.w	r3, r3, r9
 8007448:	455b      	cmp	r3, fp
 800744a:	dc33      	bgt.n	80074b4 <_printf_float+0x384>
 800744c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007450:	429a      	cmp	r2, r3
 8007452:	db3b      	blt.n	80074cc <_printf_float+0x39c>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	07da      	lsls	r2, r3, #31
 8007458:	d438      	bmi.n	80074cc <_printf_float+0x39c>
 800745a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745c:	9a05      	ldr	r2, [sp, #20]
 800745e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007460:	1a9a      	subs	r2, r3, r2
 8007462:	eba3 0901 	sub.w	r9, r3, r1
 8007466:	4591      	cmp	r9, r2
 8007468:	bfa8      	it	ge
 800746a:	4691      	movge	r9, r2
 800746c:	f1b9 0f00 	cmp.w	r9, #0
 8007470:	dc35      	bgt.n	80074de <_printf_float+0x3ae>
 8007472:	f04f 0800 	mov.w	r8, #0
 8007476:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800747a:	f104 0a1a 	add.w	sl, r4, #26
 800747e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	eba3 0309 	sub.w	r3, r3, r9
 8007488:	4543      	cmp	r3, r8
 800748a:	f77f af79 	ble.w	8007380 <_printf_float+0x250>
 800748e:	2301      	movs	r3, #1
 8007490:	4652      	mov	r2, sl
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f aeaa 	beq.w	80071f2 <_printf_float+0xc2>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	e7ec      	b.n	800747e <_printf_float+0x34e>
 80074a4:	4613      	mov	r3, r2
 80074a6:	4631      	mov	r1, r6
 80074a8:	4642      	mov	r2, r8
 80074aa:	4628      	mov	r0, r5
 80074ac:	47b8      	blx	r7
 80074ae:	3001      	adds	r0, #1
 80074b0:	d1c0      	bne.n	8007434 <_printf_float+0x304>
 80074b2:	e69e      	b.n	80071f2 <_printf_float+0xc2>
 80074b4:	2301      	movs	r3, #1
 80074b6:	4631      	mov	r1, r6
 80074b8:	4628      	mov	r0, r5
 80074ba:	9205      	str	r2, [sp, #20]
 80074bc:	47b8      	blx	r7
 80074be:	3001      	adds	r0, #1
 80074c0:	f43f ae97 	beq.w	80071f2 <_printf_float+0xc2>
 80074c4:	9a05      	ldr	r2, [sp, #20]
 80074c6:	f10b 0b01 	add.w	fp, fp, #1
 80074ca:	e7b9      	b.n	8007440 <_printf_float+0x310>
 80074cc:	ee18 3a10 	vmov	r3, s16
 80074d0:	4652      	mov	r2, sl
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	d1be      	bne.n	800745a <_printf_float+0x32a>
 80074dc:	e689      	b.n	80071f2 <_printf_float+0xc2>
 80074de:	9a05      	ldr	r2, [sp, #20]
 80074e0:	464b      	mov	r3, r9
 80074e2:	4442      	add	r2, r8
 80074e4:	4631      	mov	r1, r6
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b8      	blx	r7
 80074ea:	3001      	adds	r0, #1
 80074ec:	d1c1      	bne.n	8007472 <_printf_float+0x342>
 80074ee:	e680      	b.n	80071f2 <_printf_float+0xc2>
 80074f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074f2:	2a01      	cmp	r2, #1
 80074f4:	dc01      	bgt.n	80074fa <_printf_float+0x3ca>
 80074f6:	07db      	lsls	r3, r3, #31
 80074f8:	d538      	bpl.n	800756c <_printf_float+0x43c>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4642      	mov	r2, r8
 80074fe:	4631      	mov	r1, r6
 8007500:	4628      	mov	r0, r5
 8007502:	47b8      	blx	r7
 8007504:	3001      	adds	r0, #1
 8007506:	f43f ae74 	beq.w	80071f2 <_printf_float+0xc2>
 800750a:	ee18 3a10 	vmov	r3, s16
 800750e:	4652      	mov	r2, sl
 8007510:	4631      	mov	r1, r6
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	f43f ae6b 	beq.w	80071f2 <_printf_float+0xc2>
 800751c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007520:	2200      	movs	r2, #0
 8007522:	2300      	movs	r3, #0
 8007524:	f7f9 faf0 	bl	8000b08 <__aeabi_dcmpeq>
 8007528:	b9d8      	cbnz	r0, 8007562 <_printf_float+0x432>
 800752a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752c:	f108 0201 	add.w	r2, r8, #1
 8007530:	3b01      	subs	r3, #1
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	47b8      	blx	r7
 8007538:	3001      	adds	r0, #1
 800753a:	d10e      	bne.n	800755a <_printf_float+0x42a>
 800753c:	e659      	b.n	80071f2 <_printf_float+0xc2>
 800753e:	2301      	movs	r3, #1
 8007540:	4652      	mov	r2, sl
 8007542:	4631      	mov	r1, r6
 8007544:	4628      	mov	r0, r5
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	f43f ae52 	beq.w	80071f2 <_printf_float+0xc2>
 800754e:	f108 0801 	add.w	r8, r8, #1
 8007552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007554:	3b01      	subs	r3, #1
 8007556:	4543      	cmp	r3, r8
 8007558:	dcf1      	bgt.n	800753e <_printf_float+0x40e>
 800755a:	464b      	mov	r3, r9
 800755c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007560:	e6dc      	b.n	800731c <_printf_float+0x1ec>
 8007562:	f04f 0800 	mov.w	r8, #0
 8007566:	f104 0a1a 	add.w	sl, r4, #26
 800756a:	e7f2      	b.n	8007552 <_printf_float+0x422>
 800756c:	2301      	movs	r3, #1
 800756e:	4642      	mov	r2, r8
 8007570:	e7df      	b.n	8007532 <_printf_float+0x402>
 8007572:	2301      	movs	r3, #1
 8007574:	464a      	mov	r2, r9
 8007576:	4631      	mov	r1, r6
 8007578:	4628      	mov	r0, r5
 800757a:	47b8      	blx	r7
 800757c:	3001      	adds	r0, #1
 800757e:	f43f ae38 	beq.w	80071f2 <_printf_float+0xc2>
 8007582:	f108 0801 	add.w	r8, r8, #1
 8007586:	68e3      	ldr	r3, [r4, #12]
 8007588:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800758a:	1a5b      	subs	r3, r3, r1
 800758c:	4543      	cmp	r3, r8
 800758e:	dcf0      	bgt.n	8007572 <_printf_float+0x442>
 8007590:	e6fa      	b.n	8007388 <_printf_float+0x258>
 8007592:	f04f 0800 	mov.w	r8, #0
 8007596:	f104 0919 	add.w	r9, r4, #25
 800759a:	e7f4      	b.n	8007586 <_printf_float+0x456>

0800759c <_printf_common>:
 800759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a0:	4616      	mov	r6, r2
 80075a2:	4699      	mov	r9, r3
 80075a4:	688a      	ldr	r2, [r1, #8]
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bfb8      	it	lt
 80075b0:	4613      	movlt	r3, r2
 80075b2:	6033      	str	r3, [r6, #0]
 80075b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075b8:	4607      	mov	r7, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b10a      	cbz	r2, 80075c2 <_printf_common+0x26>
 80075be:	3301      	adds	r3, #1
 80075c0:	6033      	str	r3, [r6, #0]
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	0699      	lsls	r1, r3, #26
 80075c6:	bf42      	ittt	mi
 80075c8:	6833      	ldrmi	r3, [r6, #0]
 80075ca:	3302      	addmi	r3, #2
 80075cc:	6033      	strmi	r3, [r6, #0]
 80075ce:	6825      	ldr	r5, [r4, #0]
 80075d0:	f015 0506 	ands.w	r5, r5, #6
 80075d4:	d106      	bne.n	80075e4 <_printf_common+0x48>
 80075d6:	f104 0a19 	add.w	sl, r4, #25
 80075da:	68e3      	ldr	r3, [r4, #12]
 80075dc:	6832      	ldr	r2, [r6, #0]
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	42ab      	cmp	r3, r5
 80075e2:	dc26      	bgt.n	8007632 <_printf_common+0x96>
 80075e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075e8:	1e13      	subs	r3, r2, #0
 80075ea:	6822      	ldr	r2, [r4, #0]
 80075ec:	bf18      	it	ne
 80075ee:	2301      	movne	r3, #1
 80075f0:	0692      	lsls	r2, r2, #26
 80075f2:	d42b      	bmi.n	800764c <_printf_common+0xb0>
 80075f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075f8:	4649      	mov	r1, r9
 80075fa:	4638      	mov	r0, r7
 80075fc:	47c0      	blx	r8
 80075fe:	3001      	adds	r0, #1
 8007600:	d01e      	beq.n	8007640 <_printf_common+0xa4>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	68e5      	ldr	r5, [r4, #12]
 8007606:	6832      	ldr	r2, [r6, #0]
 8007608:	f003 0306 	and.w	r3, r3, #6
 800760c:	2b04      	cmp	r3, #4
 800760e:	bf08      	it	eq
 8007610:	1aad      	subeq	r5, r5, r2
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	6922      	ldr	r2, [r4, #16]
 8007616:	bf0c      	ite	eq
 8007618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800761c:	2500      	movne	r5, #0
 800761e:	4293      	cmp	r3, r2
 8007620:	bfc4      	itt	gt
 8007622:	1a9b      	subgt	r3, r3, r2
 8007624:	18ed      	addgt	r5, r5, r3
 8007626:	2600      	movs	r6, #0
 8007628:	341a      	adds	r4, #26
 800762a:	42b5      	cmp	r5, r6
 800762c:	d11a      	bne.n	8007664 <_printf_common+0xc8>
 800762e:	2000      	movs	r0, #0
 8007630:	e008      	b.n	8007644 <_printf_common+0xa8>
 8007632:	2301      	movs	r3, #1
 8007634:	4652      	mov	r2, sl
 8007636:	4649      	mov	r1, r9
 8007638:	4638      	mov	r0, r7
 800763a:	47c0      	blx	r8
 800763c:	3001      	adds	r0, #1
 800763e:	d103      	bne.n	8007648 <_printf_common+0xac>
 8007640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007648:	3501      	adds	r5, #1
 800764a:	e7c6      	b.n	80075da <_printf_common+0x3e>
 800764c:	18e1      	adds	r1, r4, r3
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	2030      	movs	r0, #48	; 0x30
 8007652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007656:	4422      	add	r2, r4
 8007658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800765c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007660:	3302      	adds	r3, #2
 8007662:	e7c7      	b.n	80075f4 <_printf_common+0x58>
 8007664:	2301      	movs	r3, #1
 8007666:	4622      	mov	r2, r4
 8007668:	4649      	mov	r1, r9
 800766a:	4638      	mov	r0, r7
 800766c:	47c0      	blx	r8
 800766e:	3001      	adds	r0, #1
 8007670:	d0e6      	beq.n	8007640 <_printf_common+0xa4>
 8007672:	3601      	adds	r6, #1
 8007674:	e7d9      	b.n	800762a <_printf_common+0x8e>
	...

08007678 <_printf_i>:
 8007678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	7e0f      	ldrb	r7, [r1, #24]
 800767e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007680:	2f78      	cmp	r7, #120	; 0x78
 8007682:	4691      	mov	r9, r2
 8007684:	4680      	mov	r8, r0
 8007686:	460c      	mov	r4, r1
 8007688:	469a      	mov	sl, r3
 800768a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800768e:	d807      	bhi.n	80076a0 <_printf_i+0x28>
 8007690:	2f62      	cmp	r7, #98	; 0x62
 8007692:	d80a      	bhi.n	80076aa <_printf_i+0x32>
 8007694:	2f00      	cmp	r7, #0
 8007696:	f000 80d8 	beq.w	800784a <_printf_i+0x1d2>
 800769a:	2f58      	cmp	r7, #88	; 0x58
 800769c:	f000 80a3 	beq.w	80077e6 <_printf_i+0x16e>
 80076a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076a8:	e03a      	b.n	8007720 <_printf_i+0xa8>
 80076aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076ae:	2b15      	cmp	r3, #21
 80076b0:	d8f6      	bhi.n	80076a0 <_printf_i+0x28>
 80076b2:	a101      	add	r1, pc, #4	; (adr r1, 80076b8 <_printf_i+0x40>)
 80076b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b8:	08007711 	.word	0x08007711
 80076bc:	08007725 	.word	0x08007725
 80076c0:	080076a1 	.word	0x080076a1
 80076c4:	080076a1 	.word	0x080076a1
 80076c8:	080076a1 	.word	0x080076a1
 80076cc:	080076a1 	.word	0x080076a1
 80076d0:	08007725 	.word	0x08007725
 80076d4:	080076a1 	.word	0x080076a1
 80076d8:	080076a1 	.word	0x080076a1
 80076dc:	080076a1 	.word	0x080076a1
 80076e0:	080076a1 	.word	0x080076a1
 80076e4:	08007831 	.word	0x08007831
 80076e8:	08007755 	.word	0x08007755
 80076ec:	08007813 	.word	0x08007813
 80076f0:	080076a1 	.word	0x080076a1
 80076f4:	080076a1 	.word	0x080076a1
 80076f8:	08007853 	.word	0x08007853
 80076fc:	080076a1 	.word	0x080076a1
 8007700:	08007755 	.word	0x08007755
 8007704:	080076a1 	.word	0x080076a1
 8007708:	080076a1 	.word	0x080076a1
 800770c:	0800781b 	.word	0x0800781b
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	1d1a      	adds	r2, r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	602a      	str	r2, [r5, #0]
 8007718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800771c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007720:	2301      	movs	r3, #1
 8007722:	e0a3      	b.n	800786c <_printf_i+0x1f4>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	6829      	ldr	r1, [r5, #0]
 8007728:	0606      	lsls	r6, r0, #24
 800772a:	f101 0304 	add.w	r3, r1, #4
 800772e:	d50a      	bpl.n	8007746 <_printf_i+0xce>
 8007730:	680e      	ldr	r6, [r1, #0]
 8007732:	602b      	str	r3, [r5, #0]
 8007734:	2e00      	cmp	r6, #0
 8007736:	da03      	bge.n	8007740 <_printf_i+0xc8>
 8007738:	232d      	movs	r3, #45	; 0x2d
 800773a:	4276      	negs	r6, r6
 800773c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007740:	485e      	ldr	r0, [pc, #376]	; (80078bc <_printf_i+0x244>)
 8007742:	230a      	movs	r3, #10
 8007744:	e019      	b.n	800777a <_printf_i+0x102>
 8007746:	680e      	ldr	r6, [r1, #0]
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800774e:	bf18      	it	ne
 8007750:	b236      	sxthne	r6, r6
 8007752:	e7ef      	b.n	8007734 <_printf_i+0xbc>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	6820      	ldr	r0, [r4, #0]
 8007758:	1d19      	adds	r1, r3, #4
 800775a:	6029      	str	r1, [r5, #0]
 800775c:	0601      	lsls	r1, r0, #24
 800775e:	d501      	bpl.n	8007764 <_printf_i+0xec>
 8007760:	681e      	ldr	r6, [r3, #0]
 8007762:	e002      	b.n	800776a <_printf_i+0xf2>
 8007764:	0646      	lsls	r6, r0, #25
 8007766:	d5fb      	bpl.n	8007760 <_printf_i+0xe8>
 8007768:	881e      	ldrh	r6, [r3, #0]
 800776a:	4854      	ldr	r0, [pc, #336]	; (80078bc <_printf_i+0x244>)
 800776c:	2f6f      	cmp	r7, #111	; 0x6f
 800776e:	bf0c      	ite	eq
 8007770:	2308      	moveq	r3, #8
 8007772:	230a      	movne	r3, #10
 8007774:	2100      	movs	r1, #0
 8007776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800777a:	6865      	ldr	r5, [r4, #4]
 800777c:	60a5      	str	r5, [r4, #8]
 800777e:	2d00      	cmp	r5, #0
 8007780:	bfa2      	ittt	ge
 8007782:	6821      	ldrge	r1, [r4, #0]
 8007784:	f021 0104 	bicge.w	r1, r1, #4
 8007788:	6021      	strge	r1, [r4, #0]
 800778a:	b90e      	cbnz	r6, 8007790 <_printf_i+0x118>
 800778c:	2d00      	cmp	r5, #0
 800778e:	d04d      	beq.n	800782c <_printf_i+0x1b4>
 8007790:	4615      	mov	r5, r2
 8007792:	fbb6 f1f3 	udiv	r1, r6, r3
 8007796:	fb03 6711 	mls	r7, r3, r1, r6
 800779a:	5dc7      	ldrb	r7, [r0, r7]
 800779c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077a0:	4637      	mov	r7, r6
 80077a2:	42bb      	cmp	r3, r7
 80077a4:	460e      	mov	r6, r1
 80077a6:	d9f4      	bls.n	8007792 <_printf_i+0x11a>
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d10b      	bne.n	80077c4 <_printf_i+0x14c>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	07de      	lsls	r6, r3, #31
 80077b0:	d508      	bpl.n	80077c4 <_printf_i+0x14c>
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	6861      	ldr	r1, [r4, #4]
 80077b6:	4299      	cmp	r1, r3
 80077b8:	bfde      	ittt	le
 80077ba:	2330      	movle	r3, #48	; 0x30
 80077bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80077c4:	1b52      	subs	r2, r2, r5
 80077c6:	6122      	str	r2, [r4, #16]
 80077c8:	f8cd a000 	str.w	sl, [sp]
 80077cc:	464b      	mov	r3, r9
 80077ce:	aa03      	add	r2, sp, #12
 80077d0:	4621      	mov	r1, r4
 80077d2:	4640      	mov	r0, r8
 80077d4:	f7ff fee2 	bl	800759c <_printf_common>
 80077d8:	3001      	adds	r0, #1
 80077da:	d14c      	bne.n	8007876 <_printf_i+0x1fe>
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e0:	b004      	add	sp, #16
 80077e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e6:	4835      	ldr	r0, [pc, #212]	; (80078bc <_printf_i+0x244>)
 80077e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80077ec:	6829      	ldr	r1, [r5, #0]
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80077f4:	6029      	str	r1, [r5, #0]
 80077f6:	061d      	lsls	r5, r3, #24
 80077f8:	d514      	bpl.n	8007824 <_printf_i+0x1ac>
 80077fa:	07df      	lsls	r7, r3, #31
 80077fc:	bf44      	itt	mi
 80077fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007802:	6023      	strmi	r3, [r4, #0]
 8007804:	b91e      	cbnz	r6, 800780e <_printf_i+0x196>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	f023 0320 	bic.w	r3, r3, #32
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	2310      	movs	r3, #16
 8007810:	e7b0      	b.n	8007774 <_printf_i+0xfc>
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	f043 0320 	orr.w	r3, r3, #32
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	2378      	movs	r3, #120	; 0x78
 800781c:	4828      	ldr	r0, [pc, #160]	; (80078c0 <_printf_i+0x248>)
 800781e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007822:	e7e3      	b.n	80077ec <_printf_i+0x174>
 8007824:	0659      	lsls	r1, r3, #25
 8007826:	bf48      	it	mi
 8007828:	b2b6      	uxthmi	r6, r6
 800782a:	e7e6      	b.n	80077fa <_printf_i+0x182>
 800782c:	4615      	mov	r5, r2
 800782e:	e7bb      	b.n	80077a8 <_printf_i+0x130>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	6826      	ldr	r6, [r4, #0]
 8007834:	6961      	ldr	r1, [r4, #20]
 8007836:	1d18      	adds	r0, r3, #4
 8007838:	6028      	str	r0, [r5, #0]
 800783a:	0635      	lsls	r5, r6, #24
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	d501      	bpl.n	8007844 <_printf_i+0x1cc>
 8007840:	6019      	str	r1, [r3, #0]
 8007842:	e002      	b.n	800784a <_printf_i+0x1d2>
 8007844:	0670      	lsls	r0, r6, #25
 8007846:	d5fb      	bpl.n	8007840 <_printf_i+0x1c8>
 8007848:	8019      	strh	r1, [r3, #0]
 800784a:	2300      	movs	r3, #0
 800784c:	6123      	str	r3, [r4, #16]
 800784e:	4615      	mov	r5, r2
 8007850:	e7ba      	b.n	80077c8 <_printf_i+0x150>
 8007852:	682b      	ldr	r3, [r5, #0]
 8007854:	1d1a      	adds	r2, r3, #4
 8007856:	602a      	str	r2, [r5, #0]
 8007858:	681d      	ldr	r5, [r3, #0]
 800785a:	6862      	ldr	r2, [r4, #4]
 800785c:	2100      	movs	r1, #0
 800785e:	4628      	mov	r0, r5
 8007860:	f7f8 fcde 	bl	8000220 <memchr>
 8007864:	b108      	cbz	r0, 800786a <_printf_i+0x1f2>
 8007866:	1b40      	subs	r0, r0, r5
 8007868:	6060      	str	r0, [r4, #4]
 800786a:	6863      	ldr	r3, [r4, #4]
 800786c:	6123      	str	r3, [r4, #16]
 800786e:	2300      	movs	r3, #0
 8007870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007874:	e7a8      	b.n	80077c8 <_printf_i+0x150>
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	462a      	mov	r2, r5
 800787a:	4649      	mov	r1, r9
 800787c:	4640      	mov	r0, r8
 800787e:	47d0      	blx	sl
 8007880:	3001      	adds	r0, #1
 8007882:	d0ab      	beq.n	80077dc <_printf_i+0x164>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	079b      	lsls	r3, r3, #30
 8007888:	d413      	bmi.n	80078b2 <_printf_i+0x23a>
 800788a:	68e0      	ldr	r0, [r4, #12]
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	4298      	cmp	r0, r3
 8007890:	bfb8      	it	lt
 8007892:	4618      	movlt	r0, r3
 8007894:	e7a4      	b.n	80077e0 <_printf_i+0x168>
 8007896:	2301      	movs	r3, #1
 8007898:	4632      	mov	r2, r6
 800789a:	4649      	mov	r1, r9
 800789c:	4640      	mov	r0, r8
 800789e:	47d0      	blx	sl
 80078a0:	3001      	adds	r0, #1
 80078a2:	d09b      	beq.n	80077dc <_printf_i+0x164>
 80078a4:	3501      	adds	r5, #1
 80078a6:	68e3      	ldr	r3, [r4, #12]
 80078a8:	9903      	ldr	r1, [sp, #12]
 80078aa:	1a5b      	subs	r3, r3, r1
 80078ac:	42ab      	cmp	r3, r5
 80078ae:	dcf2      	bgt.n	8007896 <_printf_i+0x21e>
 80078b0:	e7eb      	b.n	800788a <_printf_i+0x212>
 80078b2:	2500      	movs	r5, #0
 80078b4:	f104 0619 	add.w	r6, r4, #25
 80078b8:	e7f5      	b.n	80078a6 <_printf_i+0x22e>
 80078ba:	bf00      	nop
 80078bc:	08009e32 	.word	0x08009e32
 80078c0:	08009e43 	.word	0x08009e43

080078c4 <siprintf>:
 80078c4:	b40e      	push	{r1, r2, r3}
 80078c6:	b500      	push	{lr}
 80078c8:	b09c      	sub	sp, #112	; 0x70
 80078ca:	ab1d      	add	r3, sp, #116	; 0x74
 80078cc:	9002      	str	r0, [sp, #8]
 80078ce:	9006      	str	r0, [sp, #24]
 80078d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078d4:	4809      	ldr	r0, [pc, #36]	; (80078fc <siprintf+0x38>)
 80078d6:	9107      	str	r1, [sp, #28]
 80078d8:	9104      	str	r1, [sp, #16]
 80078da:	4909      	ldr	r1, [pc, #36]	; (8007900 <siprintf+0x3c>)
 80078dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80078e0:	9105      	str	r1, [sp, #20]
 80078e2:	6800      	ldr	r0, [r0, #0]
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	a902      	add	r1, sp, #8
 80078e8:	f001 fb6a 	bl	8008fc0 <_svfiprintf_r>
 80078ec:	9b02      	ldr	r3, [sp, #8]
 80078ee:	2200      	movs	r2, #0
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	b01c      	add	sp, #112	; 0x70
 80078f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078f8:	b003      	add	sp, #12
 80078fa:	4770      	bx	lr
 80078fc:	2000000c 	.word	0x2000000c
 8007900:	ffff0208 	.word	0xffff0208

08007904 <quorem>:
 8007904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007908:	6903      	ldr	r3, [r0, #16]
 800790a:	690c      	ldr	r4, [r1, #16]
 800790c:	42a3      	cmp	r3, r4
 800790e:	4607      	mov	r7, r0
 8007910:	f2c0 8081 	blt.w	8007a16 <quorem+0x112>
 8007914:	3c01      	subs	r4, #1
 8007916:	f101 0814 	add.w	r8, r1, #20
 800791a:	f100 0514 	add.w	r5, r0, #20
 800791e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800792c:	3301      	adds	r3, #1
 800792e:	429a      	cmp	r2, r3
 8007930:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007934:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007938:	fbb2 f6f3 	udiv	r6, r2, r3
 800793c:	d331      	bcc.n	80079a2 <quorem+0x9e>
 800793e:	f04f 0e00 	mov.w	lr, #0
 8007942:	4640      	mov	r0, r8
 8007944:	46ac      	mov	ip, r5
 8007946:	46f2      	mov	sl, lr
 8007948:	f850 2b04 	ldr.w	r2, [r0], #4
 800794c:	b293      	uxth	r3, r2
 800794e:	fb06 e303 	mla	r3, r6, r3, lr
 8007952:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007956:	b29b      	uxth	r3, r3
 8007958:	ebaa 0303 	sub.w	r3, sl, r3
 800795c:	f8dc a000 	ldr.w	sl, [ip]
 8007960:	0c12      	lsrs	r2, r2, #16
 8007962:	fa13 f38a 	uxtah	r3, r3, sl
 8007966:	fb06 e202 	mla	r2, r6, r2, lr
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	9b00      	ldr	r3, [sp, #0]
 800796e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007972:	b292      	uxth	r2, r2
 8007974:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007978:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800797c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007980:	4581      	cmp	r9, r0
 8007982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007986:	f84c 3b04 	str.w	r3, [ip], #4
 800798a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800798e:	d2db      	bcs.n	8007948 <quorem+0x44>
 8007990:	f855 300b 	ldr.w	r3, [r5, fp]
 8007994:	b92b      	cbnz	r3, 80079a2 <quorem+0x9e>
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	3b04      	subs	r3, #4
 800799a:	429d      	cmp	r5, r3
 800799c:	461a      	mov	r2, r3
 800799e:	d32e      	bcc.n	80079fe <quorem+0xfa>
 80079a0:	613c      	str	r4, [r7, #16]
 80079a2:	4638      	mov	r0, r7
 80079a4:	f001 f8b8 	bl	8008b18 <__mcmp>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	db24      	blt.n	80079f6 <quorem+0xf2>
 80079ac:	3601      	adds	r6, #1
 80079ae:	4628      	mov	r0, r5
 80079b0:	f04f 0c00 	mov.w	ip, #0
 80079b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80079b8:	f8d0 e000 	ldr.w	lr, [r0]
 80079bc:	b293      	uxth	r3, r2
 80079be:	ebac 0303 	sub.w	r3, ip, r3
 80079c2:	0c12      	lsrs	r2, r2, #16
 80079c4:	fa13 f38e 	uxtah	r3, r3, lr
 80079c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079d6:	45c1      	cmp	r9, r8
 80079d8:	f840 3b04 	str.w	r3, [r0], #4
 80079dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079e0:	d2e8      	bcs.n	80079b4 <quorem+0xb0>
 80079e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ea:	b922      	cbnz	r2, 80079f6 <quorem+0xf2>
 80079ec:	3b04      	subs	r3, #4
 80079ee:	429d      	cmp	r5, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	d30a      	bcc.n	8007a0a <quorem+0x106>
 80079f4:	613c      	str	r4, [r7, #16]
 80079f6:	4630      	mov	r0, r6
 80079f8:	b003      	add	sp, #12
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	3b04      	subs	r3, #4
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	d1cc      	bne.n	80079a0 <quorem+0x9c>
 8007a06:	3c01      	subs	r4, #1
 8007a08:	e7c7      	b.n	800799a <quorem+0x96>
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	2a00      	cmp	r2, #0
 8007a10:	d1f0      	bne.n	80079f4 <quorem+0xf0>
 8007a12:	3c01      	subs	r4, #1
 8007a14:	e7eb      	b.n	80079ee <quorem+0xea>
 8007a16:	2000      	movs	r0, #0
 8007a18:	e7ee      	b.n	80079f8 <quorem+0xf4>
 8007a1a:	0000      	movs	r0, r0
 8007a1c:	0000      	movs	r0, r0
	...

08007a20 <_dtoa_r>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	ed2d 8b04 	vpush	{d8-d9}
 8007a28:	ec57 6b10 	vmov	r6, r7, d0
 8007a2c:	b093      	sub	sp, #76	; 0x4c
 8007a2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a34:	9106      	str	r1, [sp, #24]
 8007a36:	ee10 aa10 	vmov	sl, s0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8007a40:	46bb      	mov	fp, r7
 8007a42:	b975      	cbnz	r5, 8007a62 <_dtoa_r+0x42>
 8007a44:	2010      	movs	r0, #16
 8007a46:	f000 fddd 	bl	8008604 <malloc>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	6260      	str	r0, [r4, #36]	; 0x24
 8007a4e:	b920      	cbnz	r0, 8007a5a <_dtoa_r+0x3a>
 8007a50:	4ba7      	ldr	r3, [pc, #668]	; (8007cf0 <_dtoa_r+0x2d0>)
 8007a52:	21ea      	movs	r1, #234	; 0xea
 8007a54:	48a7      	ldr	r0, [pc, #668]	; (8007cf4 <_dtoa_r+0x2d4>)
 8007a56:	f001 fbc3 	bl	80091e0 <__assert_func>
 8007a5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a5e:	6005      	str	r5, [r0, #0]
 8007a60:	60c5      	str	r5, [r0, #12]
 8007a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a64:	6819      	ldr	r1, [r3, #0]
 8007a66:	b151      	cbz	r1, 8007a7e <_dtoa_r+0x5e>
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	604a      	str	r2, [r1, #4]
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	4093      	lsls	r3, r2
 8007a70:	608b      	str	r3, [r1, #8]
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 fe0e 	bl	8008694 <_Bfree>
 8007a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	1e3b      	subs	r3, r7, #0
 8007a80:	bfaa      	itet	ge
 8007a82:	2300      	movge	r3, #0
 8007a84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007a88:	f8c8 3000 	strge.w	r3, [r8]
 8007a8c:	4b9a      	ldr	r3, [pc, #616]	; (8007cf8 <_dtoa_r+0x2d8>)
 8007a8e:	bfbc      	itt	lt
 8007a90:	2201      	movlt	r2, #1
 8007a92:	f8c8 2000 	strlt.w	r2, [r8]
 8007a96:	ea33 030b 	bics.w	r3, r3, fp
 8007a9a:	d11b      	bne.n	8007ad4 <_dtoa_r+0xb4>
 8007a9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aa8:	4333      	orrs	r3, r6
 8007aaa:	f000 8592 	beq.w	80085d2 <_dtoa_r+0xbb2>
 8007aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ab0:	b963      	cbnz	r3, 8007acc <_dtoa_r+0xac>
 8007ab2:	4b92      	ldr	r3, [pc, #584]	; (8007cfc <_dtoa_r+0x2dc>)
 8007ab4:	e022      	b.n	8007afc <_dtoa_r+0xdc>
 8007ab6:	4b92      	ldr	r3, [pc, #584]	; (8007d00 <_dtoa_r+0x2e0>)
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	3308      	adds	r3, #8
 8007abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	9801      	ldr	r0, [sp, #4]
 8007ac2:	b013      	add	sp, #76	; 0x4c
 8007ac4:	ecbd 8b04 	vpop	{d8-d9}
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	4b8b      	ldr	r3, [pc, #556]	; (8007cfc <_dtoa_r+0x2dc>)
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	3303      	adds	r3, #3
 8007ad2:	e7f3      	b.n	8007abc <_dtoa_r+0x9c>
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	4650      	mov	r0, sl
 8007ada:	4659      	mov	r1, fp
 8007adc:	f7f9 f814 	bl	8000b08 <__aeabi_dcmpeq>
 8007ae0:	ec4b ab19 	vmov	d9, sl, fp
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	b158      	cbz	r0, 8007b00 <_dtoa_r+0xe0>
 8007ae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aea:	2301      	movs	r3, #1
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 856b 	beq.w	80085cc <_dtoa_r+0xbac>
 8007af6:	4883      	ldr	r0, [pc, #524]	; (8007d04 <_dtoa_r+0x2e4>)
 8007af8:	6018      	str	r0, [r3, #0]
 8007afa:	1e43      	subs	r3, r0, #1
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	e7df      	b.n	8007ac0 <_dtoa_r+0xa0>
 8007b00:	ec4b ab10 	vmov	d0, sl, fp
 8007b04:	aa10      	add	r2, sp, #64	; 0x40
 8007b06:	a911      	add	r1, sp, #68	; 0x44
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f001 f8ab 	bl	8008c64 <__d2b>
 8007b0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b12:	ee08 0a10 	vmov	s16, r0
 8007b16:	2d00      	cmp	r5, #0
 8007b18:	f000 8084 	beq.w	8007c24 <_dtoa_r+0x204>
 8007b1c:	ee19 3a90 	vmov	r3, s19
 8007b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b28:	4656      	mov	r6, sl
 8007b2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b36:	4b74      	ldr	r3, [pc, #464]	; (8007d08 <_dtoa_r+0x2e8>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f8 fbc3 	bl	80002c8 <__aeabi_dsub>
 8007b42:	a365      	add	r3, pc, #404	; (adr r3, 8007cd8 <_dtoa_r+0x2b8>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f7f8 fd76 	bl	8000638 <__aeabi_dmul>
 8007b4c:	a364      	add	r3, pc, #400	; (adr r3, 8007ce0 <_dtoa_r+0x2c0>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fbbb 	bl	80002cc <__adddf3>
 8007b56:	4606      	mov	r6, r0
 8007b58:	4628      	mov	r0, r5
 8007b5a:	460f      	mov	r7, r1
 8007b5c:	f7f8 fd02 	bl	8000564 <__aeabi_i2d>
 8007b60:	a361      	add	r3, pc, #388	; (adr r3, 8007ce8 <_dtoa_r+0x2c8>)
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f7f8 fd67 	bl	8000638 <__aeabi_dmul>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4639      	mov	r1, r7
 8007b72:	f7f8 fbab 	bl	80002cc <__adddf3>
 8007b76:	4606      	mov	r6, r0
 8007b78:	460f      	mov	r7, r1
 8007b7a:	f7f9 f80d 	bl	8000b98 <__aeabi_d2iz>
 8007b7e:	2200      	movs	r2, #0
 8007b80:	9000      	str	r0, [sp, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	4630      	mov	r0, r6
 8007b86:	4639      	mov	r1, r7
 8007b88:	f7f8 ffc8 	bl	8000b1c <__aeabi_dcmplt>
 8007b8c:	b150      	cbz	r0, 8007ba4 <_dtoa_r+0x184>
 8007b8e:	9800      	ldr	r0, [sp, #0]
 8007b90:	f7f8 fce8 	bl	8000564 <__aeabi_i2d>
 8007b94:	4632      	mov	r2, r6
 8007b96:	463b      	mov	r3, r7
 8007b98:	f7f8 ffb6 	bl	8000b08 <__aeabi_dcmpeq>
 8007b9c:	b910      	cbnz	r0, 8007ba4 <_dtoa_r+0x184>
 8007b9e:	9b00      	ldr	r3, [sp, #0]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	9b00      	ldr	r3, [sp, #0]
 8007ba6:	2b16      	cmp	r3, #22
 8007ba8:	d85a      	bhi.n	8007c60 <_dtoa_r+0x240>
 8007baa:	9a00      	ldr	r2, [sp, #0]
 8007bac:	4b57      	ldr	r3, [pc, #348]	; (8007d0c <_dtoa_r+0x2ec>)
 8007bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	ec51 0b19 	vmov	r0, r1, d9
 8007bba:	f7f8 ffaf 	bl	8000b1c <__aeabi_dcmplt>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d050      	beq.n	8007c64 <_dtoa_r+0x244>
 8007bc2:	9b00      	ldr	r3, [sp, #0]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bce:	1b5d      	subs	r5, r3, r5
 8007bd0:	1e6b      	subs	r3, r5, #1
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	bf45      	ittet	mi
 8007bd6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007bda:	9304      	strmi	r3, [sp, #16]
 8007bdc:	2300      	movpl	r3, #0
 8007bde:	2300      	movmi	r3, #0
 8007be0:	bf4c      	ite	mi
 8007be2:	9305      	strmi	r3, [sp, #20]
 8007be4:	9304      	strpl	r3, [sp, #16]
 8007be6:	9b00      	ldr	r3, [sp, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	db3d      	blt.n	8007c68 <_dtoa_r+0x248>
 8007bec:	9b05      	ldr	r3, [sp, #20]
 8007bee:	9a00      	ldr	r2, [sp, #0]
 8007bf0:	920a      	str	r2, [sp, #40]	; 0x28
 8007bf2:	4413      	add	r3, r2
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	9307      	str	r3, [sp, #28]
 8007bfa:	9b06      	ldr	r3, [sp, #24]
 8007bfc:	2b09      	cmp	r3, #9
 8007bfe:	f200 8089 	bhi.w	8007d14 <_dtoa_r+0x2f4>
 8007c02:	2b05      	cmp	r3, #5
 8007c04:	bfc4      	itt	gt
 8007c06:	3b04      	subgt	r3, #4
 8007c08:	9306      	strgt	r3, [sp, #24]
 8007c0a:	9b06      	ldr	r3, [sp, #24]
 8007c0c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c10:	bfcc      	ite	gt
 8007c12:	2500      	movgt	r5, #0
 8007c14:	2501      	movle	r5, #1
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	f200 8087 	bhi.w	8007d2a <_dtoa_r+0x30a>
 8007c1c:	e8df f003 	tbb	[pc, r3]
 8007c20:	59383a2d 	.word	0x59383a2d
 8007c24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c28:	441d      	add	r5, r3
 8007c2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	bfc1      	itttt	gt
 8007c32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c42:	bfda      	itte	le
 8007c44:	f1c3 0320 	rsble	r3, r3, #32
 8007c48:	fa06 f003 	lslle.w	r0, r6, r3
 8007c4c:	4318      	orrgt	r0, r3
 8007c4e:	f7f8 fc79 	bl	8000544 <__aeabi_ui2d>
 8007c52:	2301      	movs	r3, #1
 8007c54:	4606      	mov	r6, r0
 8007c56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c5a:	3d01      	subs	r5, #1
 8007c5c:	930e      	str	r3, [sp, #56]	; 0x38
 8007c5e:	e76a      	b.n	8007b36 <_dtoa_r+0x116>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e7b2      	b.n	8007bca <_dtoa_r+0x1aa>
 8007c64:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c66:	e7b1      	b.n	8007bcc <_dtoa_r+0x1ac>
 8007c68:	9b04      	ldr	r3, [sp, #16]
 8007c6a:	9a00      	ldr	r2, [sp, #0]
 8007c6c:	1a9b      	subs	r3, r3, r2
 8007c6e:	9304      	str	r3, [sp, #16]
 8007c70:	4253      	negs	r3, r2
 8007c72:	9307      	str	r3, [sp, #28]
 8007c74:	2300      	movs	r3, #0
 8007c76:	930a      	str	r3, [sp, #40]	; 0x28
 8007c78:	e7bf      	b.n	8007bfa <_dtoa_r+0x1da>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9308      	str	r3, [sp, #32]
 8007c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dc55      	bgt.n	8007d30 <_dtoa_r+0x310>
 8007c84:	2301      	movs	r3, #1
 8007c86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c8e:	e00c      	b.n	8007caa <_dtoa_r+0x28a>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e7f3      	b.n	8007c7c <_dtoa_r+0x25c>
 8007c94:	2300      	movs	r3, #0
 8007c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c98:	9308      	str	r3, [sp, #32]
 8007c9a:	9b00      	ldr	r3, [sp, #0]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	9302      	str	r3, [sp, #8]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	9303      	str	r3, [sp, #12]
 8007ca6:	bfb8      	it	lt
 8007ca8:	2301      	movlt	r3, #1
 8007caa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007cac:	2200      	movs	r2, #0
 8007cae:	6042      	str	r2, [r0, #4]
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	f102 0614 	add.w	r6, r2, #20
 8007cb6:	429e      	cmp	r6, r3
 8007cb8:	6841      	ldr	r1, [r0, #4]
 8007cba:	d93d      	bls.n	8007d38 <_dtoa_r+0x318>
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fca9 	bl	8008614 <_Balloc>
 8007cc2:	9001      	str	r0, [sp, #4]
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d13b      	bne.n	8007d40 <_dtoa_r+0x320>
 8007cc8:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <_dtoa_r+0x2f0>)
 8007cca:	4602      	mov	r2, r0
 8007ccc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007cd0:	e6c0      	b.n	8007a54 <_dtoa_r+0x34>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e7df      	b.n	8007c96 <_dtoa_r+0x276>
 8007cd6:	bf00      	nop
 8007cd8:	636f4361 	.word	0x636f4361
 8007cdc:	3fd287a7 	.word	0x3fd287a7
 8007ce0:	8b60c8b3 	.word	0x8b60c8b3
 8007ce4:	3fc68a28 	.word	0x3fc68a28
 8007ce8:	509f79fb 	.word	0x509f79fb
 8007cec:	3fd34413 	.word	0x3fd34413
 8007cf0:	08009e61 	.word	0x08009e61
 8007cf4:	08009e78 	.word	0x08009e78
 8007cf8:	7ff00000 	.word	0x7ff00000
 8007cfc:	08009e5d 	.word	0x08009e5d
 8007d00:	08009e54 	.word	0x08009e54
 8007d04:	08009e31 	.word	0x08009e31
 8007d08:	3ff80000 	.word	0x3ff80000
 8007d0c:	08009f68 	.word	0x08009f68
 8007d10:	08009ed3 	.word	0x08009ed3
 8007d14:	2501      	movs	r5, #1
 8007d16:	2300      	movs	r3, #0
 8007d18:	9306      	str	r3, [sp, #24]
 8007d1a:	9508      	str	r5, [sp, #32]
 8007d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d24:	2200      	movs	r2, #0
 8007d26:	2312      	movs	r3, #18
 8007d28:	e7b0      	b.n	8007c8c <_dtoa_r+0x26c>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	9308      	str	r3, [sp, #32]
 8007d2e:	e7f5      	b.n	8007d1c <_dtoa_r+0x2fc>
 8007d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d36:	e7b8      	b.n	8007caa <_dtoa_r+0x28a>
 8007d38:	3101      	adds	r1, #1
 8007d3a:	6041      	str	r1, [r0, #4]
 8007d3c:	0052      	lsls	r2, r2, #1
 8007d3e:	e7b8      	b.n	8007cb2 <_dtoa_r+0x292>
 8007d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d42:	9a01      	ldr	r2, [sp, #4]
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	2b0e      	cmp	r3, #14
 8007d4a:	f200 809d 	bhi.w	8007e88 <_dtoa_r+0x468>
 8007d4e:	2d00      	cmp	r5, #0
 8007d50:	f000 809a 	beq.w	8007e88 <_dtoa_r+0x468>
 8007d54:	9b00      	ldr	r3, [sp, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dd32      	ble.n	8007dc0 <_dtoa_r+0x3a0>
 8007d5a:	4ab7      	ldr	r2, [pc, #732]	; (8008038 <_dtoa_r+0x618>)
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d68:	9b00      	ldr	r3, [sp, #0]
 8007d6a:	05d8      	lsls	r0, r3, #23
 8007d6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007d70:	d516      	bpl.n	8007da0 <_dtoa_r+0x380>
 8007d72:	4bb2      	ldr	r3, [pc, #712]	; (800803c <_dtoa_r+0x61c>)
 8007d74:	ec51 0b19 	vmov	r0, r1, d9
 8007d78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d7c:	f7f8 fd86 	bl	800088c <__aeabi_ddiv>
 8007d80:	f007 070f 	and.w	r7, r7, #15
 8007d84:	4682      	mov	sl, r0
 8007d86:	468b      	mov	fp, r1
 8007d88:	2503      	movs	r5, #3
 8007d8a:	4eac      	ldr	r6, [pc, #688]	; (800803c <_dtoa_r+0x61c>)
 8007d8c:	b957      	cbnz	r7, 8007da4 <_dtoa_r+0x384>
 8007d8e:	4642      	mov	r2, r8
 8007d90:	464b      	mov	r3, r9
 8007d92:	4650      	mov	r0, sl
 8007d94:	4659      	mov	r1, fp
 8007d96:	f7f8 fd79 	bl	800088c <__aeabi_ddiv>
 8007d9a:	4682      	mov	sl, r0
 8007d9c:	468b      	mov	fp, r1
 8007d9e:	e028      	b.n	8007df2 <_dtoa_r+0x3d2>
 8007da0:	2502      	movs	r5, #2
 8007da2:	e7f2      	b.n	8007d8a <_dtoa_r+0x36a>
 8007da4:	07f9      	lsls	r1, r7, #31
 8007da6:	d508      	bpl.n	8007dba <_dtoa_r+0x39a>
 8007da8:	4640      	mov	r0, r8
 8007daa:	4649      	mov	r1, r9
 8007dac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007db0:	f7f8 fc42 	bl	8000638 <__aeabi_dmul>
 8007db4:	3501      	adds	r5, #1
 8007db6:	4680      	mov	r8, r0
 8007db8:	4689      	mov	r9, r1
 8007dba:	107f      	asrs	r7, r7, #1
 8007dbc:	3608      	adds	r6, #8
 8007dbe:	e7e5      	b.n	8007d8c <_dtoa_r+0x36c>
 8007dc0:	f000 809b 	beq.w	8007efa <_dtoa_r+0x4da>
 8007dc4:	9b00      	ldr	r3, [sp, #0]
 8007dc6:	4f9d      	ldr	r7, [pc, #628]	; (800803c <_dtoa_r+0x61c>)
 8007dc8:	425e      	negs	r6, r3
 8007dca:	4b9b      	ldr	r3, [pc, #620]	; (8008038 <_dtoa_r+0x618>)
 8007dcc:	f006 020f 	and.w	r2, r6, #15
 8007dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	ec51 0b19 	vmov	r0, r1, d9
 8007ddc:	f7f8 fc2c 	bl	8000638 <__aeabi_dmul>
 8007de0:	1136      	asrs	r6, r6, #4
 8007de2:	4682      	mov	sl, r0
 8007de4:	468b      	mov	fp, r1
 8007de6:	2300      	movs	r3, #0
 8007de8:	2502      	movs	r5, #2
 8007dea:	2e00      	cmp	r6, #0
 8007dec:	d17a      	bne.n	8007ee4 <_dtoa_r+0x4c4>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1d3      	bne.n	8007d9a <_dtoa_r+0x37a>
 8007df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8082 	beq.w	8007efe <_dtoa_r+0x4de>
 8007dfa:	4b91      	ldr	r3, [pc, #580]	; (8008040 <_dtoa_r+0x620>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4650      	mov	r0, sl
 8007e00:	4659      	mov	r1, fp
 8007e02:	f7f8 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d079      	beq.n	8007efe <_dtoa_r+0x4de>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d076      	beq.n	8007efe <_dtoa_r+0x4de>
 8007e10:	9b02      	ldr	r3, [sp, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	dd36      	ble.n	8007e84 <_dtoa_r+0x464>
 8007e16:	9b00      	ldr	r3, [sp, #0]
 8007e18:	4650      	mov	r0, sl
 8007e1a:	4659      	mov	r1, fp
 8007e1c:	1e5f      	subs	r7, r3, #1
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4b88      	ldr	r3, [pc, #544]	; (8008044 <_dtoa_r+0x624>)
 8007e22:	f7f8 fc09 	bl	8000638 <__aeabi_dmul>
 8007e26:	9e02      	ldr	r6, [sp, #8]
 8007e28:	4682      	mov	sl, r0
 8007e2a:	468b      	mov	fp, r1
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7f8 fb98 	bl	8000564 <__aeabi_i2d>
 8007e34:	4652      	mov	r2, sl
 8007e36:	465b      	mov	r3, fp
 8007e38:	f7f8 fbfe 	bl	8000638 <__aeabi_dmul>
 8007e3c:	4b82      	ldr	r3, [pc, #520]	; (8008048 <_dtoa_r+0x628>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f7f8 fa44 	bl	80002cc <__adddf3>
 8007e44:	46d0      	mov	r8, sl
 8007e46:	46d9      	mov	r9, fp
 8007e48:	4682      	mov	sl, r0
 8007e4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007e4e:	2e00      	cmp	r6, #0
 8007e50:	d158      	bne.n	8007f04 <_dtoa_r+0x4e4>
 8007e52:	4b7e      	ldr	r3, [pc, #504]	; (800804c <_dtoa_r+0x62c>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	4640      	mov	r0, r8
 8007e58:	4649      	mov	r1, r9
 8007e5a:	f7f8 fa35 	bl	80002c8 <__aeabi_dsub>
 8007e5e:	4652      	mov	r2, sl
 8007e60:	465b      	mov	r3, fp
 8007e62:	4680      	mov	r8, r0
 8007e64:	4689      	mov	r9, r1
 8007e66:	f7f8 fe77 	bl	8000b58 <__aeabi_dcmpgt>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f040 8295 	bne.w	800839a <_dtoa_r+0x97a>
 8007e70:	4652      	mov	r2, sl
 8007e72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f7f8 fe4f 	bl	8000b1c <__aeabi_dcmplt>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	f040 8289 	bne.w	8008396 <_dtoa_r+0x976>
 8007e84:	ec5b ab19 	vmov	sl, fp, d9
 8007e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f2c0 8148 	blt.w	8008120 <_dtoa_r+0x700>
 8007e90:	9a00      	ldr	r2, [sp, #0]
 8007e92:	2a0e      	cmp	r2, #14
 8007e94:	f300 8144 	bgt.w	8008120 <_dtoa_r+0x700>
 8007e98:	4b67      	ldr	r3, [pc, #412]	; (8008038 <_dtoa_r+0x618>)
 8007e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f280 80d5 	bge.w	8008054 <_dtoa_r+0x634>
 8007eaa:	9b03      	ldr	r3, [sp, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f300 80d1 	bgt.w	8008054 <_dtoa_r+0x634>
 8007eb2:	f040 826f 	bne.w	8008394 <_dtoa_r+0x974>
 8007eb6:	4b65      	ldr	r3, [pc, #404]	; (800804c <_dtoa_r+0x62c>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	f7f8 fbbb 	bl	8000638 <__aeabi_dmul>
 8007ec2:	4652      	mov	r2, sl
 8007ec4:	465b      	mov	r3, fp
 8007ec6:	f7f8 fe3d 	bl	8000b44 <__aeabi_dcmpge>
 8007eca:	9e03      	ldr	r6, [sp, #12]
 8007ecc:	4637      	mov	r7, r6
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f040 8245 	bne.w	800835e <_dtoa_r+0x93e>
 8007ed4:	9d01      	ldr	r5, [sp, #4]
 8007ed6:	2331      	movs	r3, #49	; 0x31
 8007ed8:	f805 3b01 	strb.w	r3, [r5], #1
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	e240      	b.n	8008366 <_dtoa_r+0x946>
 8007ee4:	07f2      	lsls	r2, r6, #31
 8007ee6:	d505      	bpl.n	8007ef4 <_dtoa_r+0x4d4>
 8007ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eec:	f7f8 fba4 	bl	8000638 <__aeabi_dmul>
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	1076      	asrs	r6, r6, #1
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	e777      	b.n	8007dea <_dtoa_r+0x3ca>
 8007efa:	2502      	movs	r5, #2
 8007efc:	e779      	b.n	8007df2 <_dtoa_r+0x3d2>
 8007efe:	9f00      	ldr	r7, [sp, #0]
 8007f00:	9e03      	ldr	r6, [sp, #12]
 8007f02:	e794      	b.n	8007e2e <_dtoa_r+0x40e>
 8007f04:	9901      	ldr	r1, [sp, #4]
 8007f06:	4b4c      	ldr	r3, [pc, #304]	; (8008038 <_dtoa_r+0x618>)
 8007f08:	4431      	add	r1, r6
 8007f0a:	910d      	str	r1, [sp, #52]	; 0x34
 8007f0c:	9908      	ldr	r1, [sp, #32]
 8007f0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f16:	2900      	cmp	r1, #0
 8007f18:	d043      	beq.n	8007fa2 <_dtoa_r+0x582>
 8007f1a:	494d      	ldr	r1, [pc, #308]	; (8008050 <_dtoa_r+0x630>)
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	f7f8 fcb5 	bl	800088c <__aeabi_ddiv>
 8007f22:	4652      	mov	r2, sl
 8007f24:	465b      	mov	r3, fp
 8007f26:	f7f8 f9cf 	bl	80002c8 <__aeabi_dsub>
 8007f2a:	9d01      	ldr	r5, [sp, #4]
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	468b      	mov	fp, r1
 8007f30:	4649      	mov	r1, r9
 8007f32:	4640      	mov	r0, r8
 8007f34:	f7f8 fe30 	bl	8000b98 <__aeabi_d2iz>
 8007f38:	4606      	mov	r6, r0
 8007f3a:	f7f8 fb13 	bl	8000564 <__aeabi_i2d>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4640      	mov	r0, r8
 8007f44:	4649      	mov	r1, r9
 8007f46:	f7f8 f9bf 	bl	80002c8 <__aeabi_dsub>
 8007f4a:	3630      	adds	r6, #48	; 0x30
 8007f4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f50:	4652      	mov	r2, sl
 8007f52:	465b      	mov	r3, fp
 8007f54:	4680      	mov	r8, r0
 8007f56:	4689      	mov	r9, r1
 8007f58:	f7f8 fde0 	bl	8000b1c <__aeabi_dcmplt>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d163      	bne.n	8008028 <_dtoa_r+0x608>
 8007f60:	4642      	mov	r2, r8
 8007f62:	464b      	mov	r3, r9
 8007f64:	4936      	ldr	r1, [pc, #216]	; (8008040 <_dtoa_r+0x620>)
 8007f66:	2000      	movs	r0, #0
 8007f68:	f7f8 f9ae 	bl	80002c8 <__aeabi_dsub>
 8007f6c:	4652      	mov	r2, sl
 8007f6e:	465b      	mov	r3, fp
 8007f70:	f7f8 fdd4 	bl	8000b1c <__aeabi_dcmplt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f040 80b5 	bne.w	80080e4 <_dtoa_r+0x6c4>
 8007f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f7c:	429d      	cmp	r5, r3
 8007f7e:	d081      	beq.n	8007e84 <_dtoa_r+0x464>
 8007f80:	4b30      	ldr	r3, [pc, #192]	; (8008044 <_dtoa_r+0x624>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	4650      	mov	r0, sl
 8007f86:	4659      	mov	r1, fp
 8007f88:	f7f8 fb56 	bl	8000638 <__aeabi_dmul>
 8007f8c:	4b2d      	ldr	r3, [pc, #180]	; (8008044 <_dtoa_r+0x624>)
 8007f8e:	4682      	mov	sl, r0
 8007f90:	468b      	mov	fp, r1
 8007f92:	4640      	mov	r0, r8
 8007f94:	4649      	mov	r1, r9
 8007f96:	2200      	movs	r2, #0
 8007f98:	f7f8 fb4e 	bl	8000638 <__aeabi_dmul>
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	4689      	mov	r9, r1
 8007fa0:	e7c6      	b.n	8007f30 <_dtoa_r+0x510>
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	f7f8 fb47 	bl	8000638 <__aeabi_dmul>
 8007faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fac:	9d01      	ldr	r5, [sp, #4]
 8007fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fb0:	4682      	mov	sl, r0
 8007fb2:	468b      	mov	fp, r1
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	f7f8 fdee 	bl	8000b98 <__aeabi_d2iz>
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	f7f8 fad1 	bl	8000564 <__aeabi_i2d>
 8007fc2:	3630      	adds	r6, #48	; 0x30
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4640      	mov	r0, r8
 8007fca:	4649      	mov	r1, r9
 8007fcc:	f7f8 f97c 	bl	80002c8 <__aeabi_dsub>
 8007fd0:	f805 6b01 	strb.w	r6, [r5], #1
 8007fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fd6:	429d      	cmp	r5, r3
 8007fd8:	4680      	mov	r8, r0
 8007fda:	4689      	mov	r9, r1
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	d124      	bne.n	800802c <_dtoa_r+0x60c>
 8007fe2:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <_dtoa_r+0x630>)
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	4659      	mov	r1, fp
 8007fe8:	f7f8 f970 	bl	80002cc <__adddf3>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	f7f8 fdb0 	bl	8000b58 <__aeabi_dcmpgt>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d173      	bne.n	80080e4 <_dtoa_r+0x6c4>
 8007ffc:	4652      	mov	r2, sl
 8007ffe:	465b      	mov	r3, fp
 8008000:	4913      	ldr	r1, [pc, #76]	; (8008050 <_dtoa_r+0x630>)
 8008002:	2000      	movs	r0, #0
 8008004:	f7f8 f960 	bl	80002c8 <__aeabi_dsub>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4640      	mov	r0, r8
 800800e:	4649      	mov	r1, r9
 8008010:	f7f8 fd84 	bl	8000b1c <__aeabi_dcmplt>
 8008014:	2800      	cmp	r0, #0
 8008016:	f43f af35 	beq.w	8007e84 <_dtoa_r+0x464>
 800801a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800801c:	1e6b      	subs	r3, r5, #1
 800801e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008020:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008024:	2b30      	cmp	r3, #48	; 0x30
 8008026:	d0f8      	beq.n	800801a <_dtoa_r+0x5fa>
 8008028:	9700      	str	r7, [sp, #0]
 800802a:	e049      	b.n	80080c0 <_dtoa_r+0x6a0>
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <_dtoa_r+0x624>)
 800802e:	f7f8 fb03 	bl	8000638 <__aeabi_dmul>
 8008032:	4680      	mov	r8, r0
 8008034:	4689      	mov	r9, r1
 8008036:	e7bd      	b.n	8007fb4 <_dtoa_r+0x594>
 8008038:	08009f68 	.word	0x08009f68
 800803c:	08009f40 	.word	0x08009f40
 8008040:	3ff00000 	.word	0x3ff00000
 8008044:	40240000 	.word	0x40240000
 8008048:	401c0000 	.word	0x401c0000
 800804c:	40140000 	.word	0x40140000
 8008050:	3fe00000 	.word	0x3fe00000
 8008054:	9d01      	ldr	r5, [sp, #4]
 8008056:	4656      	mov	r6, sl
 8008058:	465f      	mov	r7, fp
 800805a:	4642      	mov	r2, r8
 800805c:	464b      	mov	r3, r9
 800805e:	4630      	mov	r0, r6
 8008060:	4639      	mov	r1, r7
 8008062:	f7f8 fc13 	bl	800088c <__aeabi_ddiv>
 8008066:	f7f8 fd97 	bl	8000b98 <__aeabi_d2iz>
 800806a:	4682      	mov	sl, r0
 800806c:	f7f8 fa7a 	bl	8000564 <__aeabi_i2d>
 8008070:	4642      	mov	r2, r8
 8008072:	464b      	mov	r3, r9
 8008074:	f7f8 fae0 	bl	8000638 <__aeabi_dmul>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4630      	mov	r0, r6
 800807e:	4639      	mov	r1, r7
 8008080:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008084:	f7f8 f920 	bl	80002c8 <__aeabi_dsub>
 8008088:	f805 6b01 	strb.w	r6, [r5], #1
 800808c:	9e01      	ldr	r6, [sp, #4]
 800808e:	9f03      	ldr	r7, [sp, #12]
 8008090:	1bae      	subs	r6, r5, r6
 8008092:	42b7      	cmp	r7, r6
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	d135      	bne.n	8008106 <_dtoa_r+0x6e6>
 800809a:	f7f8 f917 	bl	80002cc <__adddf3>
 800809e:	4642      	mov	r2, r8
 80080a0:	464b      	mov	r3, r9
 80080a2:	4606      	mov	r6, r0
 80080a4:	460f      	mov	r7, r1
 80080a6:	f7f8 fd57 	bl	8000b58 <__aeabi_dcmpgt>
 80080aa:	b9d0      	cbnz	r0, 80080e2 <_dtoa_r+0x6c2>
 80080ac:	4642      	mov	r2, r8
 80080ae:	464b      	mov	r3, r9
 80080b0:	4630      	mov	r0, r6
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 fd28 	bl	8000b08 <__aeabi_dcmpeq>
 80080b8:	b110      	cbz	r0, 80080c0 <_dtoa_r+0x6a0>
 80080ba:	f01a 0f01 	tst.w	sl, #1
 80080be:	d110      	bne.n	80080e2 <_dtoa_r+0x6c2>
 80080c0:	4620      	mov	r0, r4
 80080c2:	ee18 1a10 	vmov	r1, s16
 80080c6:	f000 fae5 	bl	8008694 <_Bfree>
 80080ca:	2300      	movs	r3, #0
 80080cc:	9800      	ldr	r0, [sp, #0]
 80080ce:	702b      	strb	r3, [r5, #0]
 80080d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080d2:	3001      	adds	r0, #1
 80080d4:	6018      	str	r0, [r3, #0]
 80080d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f43f acf1 	beq.w	8007ac0 <_dtoa_r+0xa0>
 80080de:	601d      	str	r5, [r3, #0]
 80080e0:	e4ee      	b.n	8007ac0 <_dtoa_r+0xa0>
 80080e2:	9f00      	ldr	r7, [sp, #0]
 80080e4:	462b      	mov	r3, r5
 80080e6:	461d      	mov	r5, r3
 80080e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ec:	2a39      	cmp	r2, #57	; 0x39
 80080ee:	d106      	bne.n	80080fe <_dtoa_r+0x6de>
 80080f0:	9a01      	ldr	r2, [sp, #4]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d1f7      	bne.n	80080e6 <_dtoa_r+0x6c6>
 80080f6:	9901      	ldr	r1, [sp, #4]
 80080f8:	2230      	movs	r2, #48	; 0x30
 80080fa:	3701      	adds	r7, #1
 80080fc:	700a      	strb	r2, [r1, #0]
 80080fe:	781a      	ldrb	r2, [r3, #0]
 8008100:	3201      	adds	r2, #1
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e790      	b.n	8008028 <_dtoa_r+0x608>
 8008106:	4ba6      	ldr	r3, [pc, #664]	; (80083a0 <_dtoa_r+0x980>)
 8008108:	2200      	movs	r2, #0
 800810a:	f7f8 fa95 	bl	8000638 <__aeabi_dmul>
 800810e:	2200      	movs	r2, #0
 8008110:	2300      	movs	r3, #0
 8008112:	4606      	mov	r6, r0
 8008114:	460f      	mov	r7, r1
 8008116:	f7f8 fcf7 	bl	8000b08 <__aeabi_dcmpeq>
 800811a:	2800      	cmp	r0, #0
 800811c:	d09d      	beq.n	800805a <_dtoa_r+0x63a>
 800811e:	e7cf      	b.n	80080c0 <_dtoa_r+0x6a0>
 8008120:	9a08      	ldr	r2, [sp, #32]
 8008122:	2a00      	cmp	r2, #0
 8008124:	f000 80d7 	beq.w	80082d6 <_dtoa_r+0x8b6>
 8008128:	9a06      	ldr	r2, [sp, #24]
 800812a:	2a01      	cmp	r2, #1
 800812c:	f300 80ba 	bgt.w	80082a4 <_dtoa_r+0x884>
 8008130:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008132:	2a00      	cmp	r2, #0
 8008134:	f000 80b2 	beq.w	800829c <_dtoa_r+0x87c>
 8008138:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800813c:	9e07      	ldr	r6, [sp, #28]
 800813e:	9d04      	ldr	r5, [sp, #16]
 8008140:	9a04      	ldr	r2, [sp, #16]
 8008142:	441a      	add	r2, r3
 8008144:	9204      	str	r2, [sp, #16]
 8008146:	9a05      	ldr	r2, [sp, #20]
 8008148:	2101      	movs	r1, #1
 800814a:	441a      	add	r2, r3
 800814c:	4620      	mov	r0, r4
 800814e:	9205      	str	r2, [sp, #20]
 8008150:	f000 fb58 	bl	8008804 <__i2b>
 8008154:	4607      	mov	r7, r0
 8008156:	2d00      	cmp	r5, #0
 8008158:	dd0c      	ble.n	8008174 <_dtoa_r+0x754>
 800815a:	9b05      	ldr	r3, [sp, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	dd09      	ble.n	8008174 <_dtoa_r+0x754>
 8008160:	42ab      	cmp	r3, r5
 8008162:	9a04      	ldr	r2, [sp, #16]
 8008164:	bfa8      	it	ge
 8008166:	462b      	movge	r3, r5
 8008168:	1ad2      	subs	r2, r2, r3
 800816a:	9204      	str	r2, [sp, #16]
 800816c:	9a05      	ldr	r2, [sp, #20]
 800816e:	1aed      	subs	r5, r5, r3
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	9305      	str	r3, [sp, #20]
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	b31b      	cbz	r3, 80081c0 <_dtoa_r+0x7a0>
 8008178:	9b08      	ldr	r3, [sp, #32]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80af 	beq.w	80082de <_dtoa_r+0x8be>
 8008180:	2e00      	cmp	r6, #0
 8008182:	dd13      	ble.n	80081ac <_dtoa_r+0x78c>
 8008184:	4639      	mov	r1, r7
 8008186:	4632      	mov	r2, r6
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fbfb 	bl	8008984 <__pow5mult>
 800818e:	ee18 2a10 	vmov	r2, s16
 8008192:	4601      	mov	r1, r0
 8008194:	4607      	mov	r7, r0
 8008196:	4620      	mov	r0, r4
 8008198:	f000 fb4a 	bl	8008830 <__multiply>
 800819c:	ee18 1a10 	vmov	r1, s16
 80081a0:	4680      	mov	r8, r0
 80081a2:	4620      	mov	r0, r4
 80081a4:	f000 fa76 	bl	8008694 <_Bfree>
 80081a8:	ee08 8a10 	vmov	s16, r8
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	1b9a      	subs	r2, r3, r6
 80081b0:	d006      	beq.n	80081c0 <_dtoa_r+0x7a0>
 80081b2:	ee18 1a10 	vmov	r1, s16
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 fbe4 	bl	8008984 <__pow5mult>
 80081bc:	ee08 0a10 	vmov	s16, r0
 80081c0:	2101      	movs	r1, #1
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 fb1e 	bl	8008804 <__i2b>
 80081c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	4606      	mov	r6, r0
 80081ce:	f340 8088 	ble.w	80082e2 <_dtoa_r+0x8c2>
 80081d2:	461a      	mov	r2, r3
 80081d4:	4601      	mov	r1, r0
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 fbd4 	bl	8008984 <__pow5mult>
 80081dc:	9b06      	ldr	r3, [sp, #24]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	4606      	mov	r6, r0
 80081e2:	f340 8081 	ble.w	80082e8 <_dtoa_r+0x8c8>
 80081e6:	f04f 0800 	mov.w	r8, #0
 80081ea:	6933      	ldr	r3, [r6, #16]
 80081ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081f0:	6918      	ldr	r0, [r3, #16]
 80081f2:	f000 fab7 	bl	8008764 <__hi0bits>
 80081f6:	f1c0 0020 	rsb	r0, r0, #32
 80081fa:	9b05      	ldr	r3, [sp, #20]
 80081fc:	4418      	add	r0, r3
 80081fe:	f010 001f 	ands.w	r0, r0, #31
 8008202:	f000 8092 	beq.w	800832a <_dtoa_r+0x90a>
 8008206:	f1c0 0320 	rsb	r3, r0, #32
 800820a:	2b04      	cmp	r3, #4
 800820c:	f340 808a 	ble.w	8008324 <_dtoa_r+0x904>
 8008210:	f1c0 001c 	rsb	r0, r0, #28
 8008214:	9b04      	ldr	r3, [sp, #16]
 8008216:	4403      	add	r3, r0
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	9b05      	ldr	r3, [sp, #20]
 800821c:	4403      	add	r3, r0
 800821e:	4405      	add	r5, r0
 8008220:	9305      	str	r3, [sp, #20]
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	dd07      	ble.n	8008238 <_dtoa_r+0x818>
 8008228:	ee18 1a10 	vmov	r1, s16
 800822c:	461a      	mov	r2, r3
 800822e:	4620      	mov	r0, r4
 8008230:	f000 fc02 	bl	8008a38 <__lshift>
 8008234:	ee08 0a10 	vmov	s16, r0
 8008238:	9b05      	ldr	r3, [sp, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	dd05      	ble.n	800824a <_dtoa_r+0x82a>
 800823e:	4631      	mov	r1, r6
 8008240:	461a      	mov	r2, r3
 8008242:	4620      	mov	r0, r4
 8008244:	f000 fbf8 	bl	8008a38 <__lshift>
 8008248:	4606      	mov	r6, r0
 800824a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824c:	2b00      	cmp	r3, #0
 800824e:	d06e      	beq.n	800832e <_dtoa_r+0x90e>
 8008250:	ee18 0a10 	vmov	r0, s16
 8008254:	4631      	mov	r1, r6
 8008256:	f000 fc5f 	bl	8008b18 <__mcmp>
 800825a:	2800      	cmp	r0, #0
 800825c:	da67      	bge.n	800832e <_dtoa_r+0x90e>
 800825e:	9b00      	ldr	r3, [sp, #0]
 8008260:	3b01      	subs	r3, #1
 8008262:	ee18 1a10 	vmov	r1, s16
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	220a      	movs	r2, #10
 800826a:	2300      	movs	r3, #0
 800826c:	4620      	mov	r0, r4
 800826e:	f000 fa33 	bl	80086d8 <__multadd>
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	ee08 0a10 	vmov	s16, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 81b1 	beq.w	80085e0 <_dtoa_r+0xbc0>
 800827e:	2300      	movs	r3, #0
 8008280:	4639      	mov	r1, r7
 8008282:	220a      	movs	r2, #10
 8008284:	4620      	mov	r0, r4
 8008286:	f000 fa27 	bl	80086d8 <__multadd>
 800828a:	9b02      	ldr	r3, [sp, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	4607      	mov	r7, r0
 8008290:	f300 808e 	bgt.w	80083b0 <_dtoa_r+0x990>
 8008294:	9b06      	ldr	r3, [sp, #24]
 8008296:	2b02      	cmp	r3, #2
 8008298:	dc51      	bgt.n	800833e <_dtoa_r+0x91e>
 800829a:	e089      	b.n	80083b0 <_dtoa_r+0x990>
 800829c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800829e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082a2:	e74b      	b.n	800813c <_dtoa_r+0x71c>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	1e5e      	subs	r6, r3, #1
 80082a8:	9b07      	ldr	r3, [sp, #28]
 80082aa:	42b3      	cmp	r3, r6
 80082ac:	bfbf      	itttt	lt
 80082ae:	9b07      	ldrlt	r3, [sp, #28]
 80082b0:	9607      	strlt	r6, [sp, #28]
 80082b2:	1af2      	sublt	r2, r6, r3
 80082b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082b6:	bfb6      	itet	lt
 80082b8:	189b      	addlt	r3, r3, r2
 80082ba:	1b9e      	subge	r6, r3, r6
 80082bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082be:	9b03      	ldr	r3, [sp, #12]
 80082c0:	bfb8      	it	lt
 80082c2:	2600      	movlt	r6, #0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfb7      	itett	lt
 80082c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80082cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80082d0:	1a9d      	sublt	r5, r3, r2
 80082d2:	2300      	movlt	r3, #0
 80082d4:	e734      	b.n	8008140 <_dtoa_r+0x720>
 80082d6:	9e07      	ldr	r6, [sp, #28]
 80082d8:	9d04      	ldr	r5, [sp, #16]
 80082da:	9f08      	ldr	r7, [sp, #32]
 80082dc:	e73b      	b.n	8008156 <_dtoa_r+0x736>
 80082de:	9a07      	ldr	r2, [sp, #28]
 80082e0:	e767      	b.n	80081b2 <_dtoa_r+0x792>
 80082e2:	9b06      	ldr	r3, [sp, #24]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	dc18      	bgt.n	800831a <_dtoa_r+0x8fa>
 80082e8:	f1ba 0f00 	cmp.w	sl, #0
 80082ec:	d115      	bne.n	800831a <_dtoa_r+0x8fa>
 80082ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082f2:	b993      	cbnz	r3, 800831a <_dtoa_r+0x8fa>
 80082f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80082f8:	0d1b      	lsrs	r3, r3, #20
 80082fa:	051b      	lsls	r3, r3, #20
 80082fc:	b183      	cbz	r3, 8008320 <_dtoa_r+0x900>
 80082fe:	9b04      	ldr	r3, [sp, #16]
 8008300:	3301      	adds	r3, #1
 8008302:	9304      	str	r3, [sp, #16]
 8008304:	9b05      	ldr	r3, [sp, #20]
 8008306:	3301      	adds	r3, #1
 8008308:	9305      	str	r3, [sp, #20]
 800830a:	f04f 0801 	mov.w	r8, #1
 800830e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008310:	2b00      	cmp	r3, #0
 8008312:	f47f af6a 	bne.w	80081ea <_dtoa_r+0x7ca>
 8008316:	2001      	movs	r0, #1
 8008318:	e76f      	b.n	80081fa <_dtoa_r+0x7da>
 800831a:	f04f 0800 	mov.w	r8, #0
 800831e:	e7f6      	b.n	800830e <_dtoa_r+0x8ee>
 8008320:	4698      	mov	r8, r3
 8008322:	e7f4      	b.n	800830e <_dtoa_r+0x8ee>
 8008324:	f43f af7d 	beq.w	8008222 <_dtoa_r+0x802>
 8008328:	4618      	mov	r0, r3
 800832a:	301c      	adds	r0, #28
 800832c:	e772      	b.n	8008214 <_dtoa_r+0x7f4>
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	dc37      	bgt.n	80083a4 <_dtoa_r+0x984>
 8008334:	9b06      	ldr	r3, [sp, #24]
 8008336:	2b02      	cmp	r3, #2
 8008338:	dd34      	ble.n	80083a4 <_dtoa_r+0x984>
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	9302      	str	r3, [sp, #8]
 800833e:	9b02      	ldr	r3, [sp, #8]
 8008340:	b96b      	cbnz	r3, 800835e <_dtoa_r+0x93e>
 8008342:	4631      	mov	r1, r6
 8008344:	2205      	movs	r2, #5
 8008346:	4620      	mov	r0, r4
 8008348:	f000 f9c6 	bl	80086d8 <__multadd>
 800834c:	4601      	mov	r1, r0
 800834e:	4606      	mov	r6, r0
 8008350:	ee18 0a10 	vmov	r0, s16
 8008354:	f000 fbe0 	bl	8008b18 <__mcmp>
 8008358:	2800      	cmp	r0, #0
 800835a:	f73f adbb 	bgt.w	8007ed4 <_dtoa_r+0x4b4>
 800835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008360:	9d01      	ldr	r5, [sp, #4]
 8008362:	43db      	mvns	r3, r3
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	f04f 0800 	mov.w	r8, #0
 800836a:	4631      	mov	r1, r6
 800836c:	4620      	mov	r0, r4
 800836e:	f000 f991 	bl	8008694 <_Bfree>
 8008372:	2f00      	cmp	r7, #0
 8008374:	f43f aea4 	beq.w	80080c0 <_dtoa_r+0x6a0>
 8008378:	f1b8 0f00 	cmp.w	r8, #0
 800837c:	d005      	beq.n	800838a <_dtoa_r+0x96a>
 800837e:	45b8      	cmp	r8, r7
 8008380:	d003      	beq.n	800838a <_dtoa_r+0x96a>
 8008382:	4641      	mov	r1, r8
 8008384:	4620      	mov	r0, r4
 8008386:	f000 f985 	bl	8008694 <_Bfree>
 800838a:	4639      	mov	r1, r7
 800838c:	4620      	mov	r0, r4
 800838e:	f000 f981 	bl	8008694 <_Bfree>
 8008392:	e695      	b.n	80080c0 <_dtoa_r+0x6a0>
 8008394:	2600      	movs	r6, #0
 8008396:	4637      	mov	r7, r6
 8008398:	e7e1      	b.n	800835e <_dtoa_r+0x93e>
 800839a:	9700      	str	r7, [sp, #0]
 800839c:	4637      	mov	r7, r6
 800839e:	e599      	b.n	8007ed4 <_dtoa_r+0x4b4>
 80083a0:	40240000 	.word	0x40240000
 80083a4:	9b08      	ldr	r3, [sp, #32]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 80ca 	beq.w	8008540 <_dtoa_r+0xb20>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	9302      	str	r3, [sp, #8]
 80083b0:	2d00      	cmp	r5, #0
 80083b2:	dd05      	ble.n	80083c0 <_dtoa_r+0x9a0>
 80083b4:	4639      	mov	r1, r7
 80083b6:	462a      	mov	r2, r5
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 fb3d 	bl	8008a38 <__lshift>
 80083be:	4607      	mov	r7, r0
 80083c0:	f1b8 0f00 	cmp.w	r8, #0
 80083c4:	d05b      	beq.n	800847e <_dtoa_r+0xa5e>
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 f923 	bl	8008614 <_Balloc>
 80083ce:	4605      	mov	r5, r0
 80083d0:	b928      	cbnz	r0, 80083de <_dtoa_r+0x9be>
 80083d2:	4b87      	ldr	r3, [pc, #540]	; (80085f0 <_dtoa_r+0xbd0>)
 80083d4:	4602      	mov	r2, r0
 80083d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083da:	f7ff bb3b 	b.w	8007a54 <_dtoa_r+0x34>
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	3202      	adds	r2, #2
 80083e2:	0092      	lsls	r2, r2, #2
 80083e4:	f107 010c 	add.w	r1, r7, #12
 80083e8:	300c      	adds	r0, #12
 80083ea:	f7fe fdeb 	bl	8006fc4 <memcpy>
 80083ee:	2201      	movs	r2, #1
 80083f0:	4629      	mov	r1, r5
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 fb20 	bl	8008a38 <__lshift>
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	f103 0901 	add.w	r9, r3, #1
 80083fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008402:	4413      	add	r3, r2
 8008404:	9305      	str	r3, [sp, #20]
 8008406:	f00a 0301 	and.w	r3, sl, #1
 800840a:	46b8      	mov	r8, r7
 800840c:	9304      	str	r3, [sp, #16]
 800840e:	4607      	mov	r7, r0
 8008410:	4631      	mov	r1, r6
 8008412:	ee18 0a10 	vmov	r0, s16
 8008416:	f7ff fa75 	bl	8007904 <quorem>
 800841a:	4641      	mov	r1, r8
 800841c:	9002      	str	r0, [sp, #8]
 800841e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008422:	ee18 0a10 	vmov	r0, s16
 8008426:	f000 fb77 	bl	8008b18 <__mcmp>
 800842a:	463a      	mov	r2, r7
 800842c:	9003      	str	r0, [sp, #12]
 800842e:	4631      	mov	r1, r6
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fb8d 	bl	8008b50 <__mdiff>
 8008436:	68c2      	ldr	r2, [r0, #12]
 8008438:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800843c:	4605      	mov	r5, r0
 800843e:	bb02      	cbnz	r2, 8008482 <_dtoa_r+0xa62>
 8008440:	4601      	mov	r1, r0
 8008442:	ee18 0a10 	vmov	r0, s16
 8008446:	f000 fb67 	bl	8008b18 <__mcmp>
 800844a:	4602      	mov	r2, r0
 800844c:	4629      	mov	r1, r5
 800844e:	4620      	mov	r0, r4
 8008450:	9207      	str	r2, [sp, #28]
 8008452:	f000 f91f 	bl	8008694 <_Bfree>
 8008456:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800845a:	ea43 0102 	orr.w	r1, r3, r2
 800845e:	9b04      	ldr	r3, [sp, #16]
 8008460:	430b      	orrs	r3, r1
 8008462:	464d      	mov	r5, r9
 8008464:	d10f      	bne.n	8008486 <_dtoa_r+0xa66>
 8008466:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800846a:	d02a      	beq.n	80084c2 <_dtoa_r+0xaa2>
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	dd02      	ble.n	8008478 <_dtoa_r+0xa58>
 8008472:	9b02      	ldr	r3, [sp, #8]
 8008474:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008478:	f88b a000 	strb.w	sl, [fp]
 800847c:	e775      	b.n	800836a <_dtoa_r+0x94a>
 800847e:	4638      	mov	r0, r7
 8008480:	e7ba      	b.n	80083f8 <_dtoa_r+0x9d8>
 8008482:	2201      	movs	r2, #1
 8008484:	e7e2      	b.n	800844c <_dtoa_r+0xa2c>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	db04      	blt.n	8008496 <_dtoa_r+0xa76>
 800848c:	9906      	ldr	r1, [sp, #24]
 800848e:	430b      	orrs	r3, r1
 8008490:	9904      	ldr	r1, [sp, #16]
 8008492:	430b      	orrs	r3, r1
 8008494:	d122      	bne.n	80084dc <_dtoa_r+0xabc>
 8008496:	2a00      	cmp	r2, #0
 8008498:	ddee      	ble.n	8008478 <_dtoa_r+0xa58>
 800849a:	ee18 1a10 	vmov	r1, s16
 800849e:	2201      	movs	r2, #1
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fac9 	bl	8008a38 <__lshift>
 80084a6:	4631      	mov	r1, r6
 80084a8:	ee08 0a10 	vmov	s16, r0
 80084ac:	f000 fb34 	bl	8008b18 <__mcmp>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	dc03      	bgt.n	80084bc <_dtoa_r+0xa9c>
 80084b4:	d1e0      	bne.n	8008478 <_dtoa_r+0xa58>
 80084b6:	f01a 0f01 	tst.w	sl, #1
 80084ba:	d0dd      	beq.n	8008478 <_dtoa_r+0xa58>
 80084bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084c0:	d1d7      	bne.n	8008472 <_dtoa_r+0xa52>
 80084c2:	2339      	movs	r3, #57	; 0x39
 80084c4:	f88b 3000 	strb.w	r3, [fp]
 80084c8:	462b      	mov	r3, r5
 80084ca:	461d      	mov	r5, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084d2:	2a39      	cmp	r2, #57	; 0x39
 80084d4:	d071      	beq.n	80085ba <_dtoa_r+0xb9a>
 80084d6:	3201      	adds	r2, #1
 80084d8:	701a      	strb	r2, [r3, #0]
 80084da:	e746      	b.n	800836a <_dtoa_r+0x94a>
 80084dc:	2a00      	cmp	r2, #0
 80084de:	dd07      	ble.n	80084f0 <_dtoa_r+0xad0>
 80084e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084e4:	d0ed      	beq.n	80084c2 <_dtoa_r+0xaa2>
 80084e6:	f10a 0301 	add.w	r3, sl, #1
 80084ea:	f88b 3000 	strb.w	r3, [fp]
 80084ee:	e73c      	b.n	800836a <_dtoa_r+0x94a>
 80084f0:	9b05      	ldr	r3, [sp, #20]
 80084f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80084f6:	4599      	cmp	r9, r3
 80084f8:	d047      	beq.n	800858a <_dtoa_r+0xb6a>
 80084fa:	ee18 1a10 	vmov	r1, s16
 80084fe:	2300      	movs	r3, #0
 8008500:	220a      	movs	r2, #10
 8008502:	4620      	mov	r0, r4
 8008504:	f000 f8e8 	bl	80086d8 <__multadd>
 8008508:	45b8      	cmp	r8, r7
 800850a:	ee08 0a10 	vmov	s16, r0
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	f04f 020a 	mov.w	r2, #10
 8008516:	4641      	mov	r1, r8
 8008518:	4620      	mov	r0, r4
 800851a:	d106      	bne.n	800852a <_dtoa_r+0xb0a>
 800851c:	f000 f8dc 	bl	80086d8 <__multadd>
 8008520:	4680      	mov	r8, r0
 8008522:	4607      	mov	r7, r0
 8008524:	f109 0901 	add.w	r9, r9, #1
 8008528:	e772      	b.n	8008410 <_dtoa_r+0x9f0>
 800852a:	f000 f8d5 	bl	80086d8 <__multadd>
 800852e:	4639      	mov	r1, r7
 8008530:	4680      	mov	r8, r0
 8008532:	2300      	movs	r3, #0
 8008534:	220a      	movs	r2, #10
 8008536:	4620      	mov	r0, r4
 8008538:	f000 f8ce 	bl	80086d8 <__multadd>
 800853c:	4607      	mov	r7, r0
 800853e:	e7f1      	b.n	8008524 <_dtoa_r+0xb04>
 8008540:	9b03      	ldr	r3, [sp, #12]
 8008542:	9302      	str	r3, [sp, #8]
 8008544:	9d01      	ldr	r5, [sp, #4]
 8008546:	ee18 0a10 	vmov	r0, s16
 800854a:	4631      	mov	r1, r6
 800854c:	f7ff f9da 	bl	8007904 <quorem>
 8008550:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	f805 ab01 	strb.w	sl, [r5], #1
 800855a:	1aea      	subs	r2, r5, r3
 800855c:	9b02      	ldr	r3, [sp, #8]
 800855e:	4293      	cmp	r3, r2
 8008560:	dd09      	ble.n	8008576 <_dtoa_r+0xb56>
 8008562:	ee18 1a10 	vmov	r1, s16
 8008566:	2300      	movs	r3, #0
 8008568:	220a      	movs	r2, #10
 800856a:	4620      	mov	r0, r4
 800856c:	f000 f8b4 	bl	80086d8 <__multadd>
 8008570:	ee08 0a10 	vmov	s16, r0
 8008574:	e7e7      	b.n	8008546 <_dtoa_r+0xb26>
 8008576:	9b02      	ldr	r3, [sp, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	bfc8      	it	gt
 800857c:	461d      	movgt	r5, r3
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	bfd8      	it	le
 8008582:	2501      	movle	r5, #1
 8008584:	441d      	add	r5, r3
 8008586:	f04f 0800 	mov.w	r8, #0
 800858a:	ee18 1a10 	vmov	r1, s16
 800858e:	2201      	movs	r2, #1
 8008590:	4620      	mov	r0, r4
 8008592:	f000 fa51 	bl	8008a38 <__lshift>
 8008596:	4631      	mov	r1, r6
 8008598:	ee08 0a10 	vmov	s16, r0
 800859c:	f000 fabc 	bl	8008b18 <__mcmp>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	dc91      	bgt.n	80084c8 <_dtoa_r+0xaa8>
 80085a4:	d102      	bne.n	80085ac <_dtoa_r+0xb8c>
 80085a6:	f01a 0f01 	tst.w	sl, #1
 80085aa:	d18d      	bne.n	80084c8 <_dtoa_r+0xaa8>
 80085ac:	462b      	mov	r3, r5
 80085ae:	461d      	mov	r5, r3
 80085b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085b4:	2a30      	cmp	r2, #48	; 0x30
 80085b6:	d0fa      	beq.n	80085ae <_dtoa_r+0xb8e>
 80085b8:	e6d7      	b.n	800836a <_dtoa_r+0x94a>
 80085ba:	9a01      	ldr	r2, [sp, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d184      	bne.n	80084ca <_dtoa_r+0xaaa>
 80085c0:	9b00      	ldr	r3, [sp, #0]
 80085c2:	3301      	adds	r3, #1
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	2331      	movs	r3, #49	; 0x31
 80085c8:	7013      	strb	r3, [r2, #0]
 80085ca:	e6ce      	b.n	800836a <_dtoa_r+0x94a>
 80085cc:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <_dtoa_r+0xbd4>)
 80085ce:	f7ff ba95 	b.w	8007afc <_dtoa_r+0xdc>
 80085d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f47f aa6e 	bne.w	8007ab6 <_dtoa_r+0x96>
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <_dtoa_r+0xbd8>)
 80085dc:	f7ff ba8e 	b.w	8007afc <_dtoa_r+0xdc>
 80085e0:	9b02      	ldr	r3, [sp, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	dcae      	bgt.n	8008544 <_dtoa_r+0xb24>
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	f73f aea8 	bgt.w	800833e <_dtoa_r+0x91e>
 80085ee:	e7a9      	b.n	8008544 <_dtoa_r+0xb24>
 80085f0:	08009ed3 	.word	0x08009ed3
 80085f4:	08009e30 	.word	0x08009e30
 80085f8:	08009e54 	.word	0x08009e54

080085fc <_localeconv_r>:
 80085fc:	4800      	ldr	r0, [pc, #0]	; (8008600 <_localeconv_r+0x4>)
 80085fe:	4770      	bx	lr
 8008600:	20000160 	.word	0x20000160

08008604 <malloc>:
 8008604:	4b02      	ldr	r3, [pc, #8]	; (8008610 <malloc+0xc>)
 8008606:	4601      	mov	r1, r0
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	f000 bc09 	b.w	8008e20 <_malloc_r>
 800860e:	bf00      	nop
 8008610:	2000000c 	.word	0x2000000c

08008614 <_Balloc>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008618:	4604      	mov	r4, r0
 800861a:	460d      	mov	r5, r1
 800861c:	b976      	cbnz	r6, 800863c <_Balloc+0x28>
 800861e:	2010      	movs	r0, #16
 8008620:	f7ff fff0 	bl	8008604 <malloc>
 8008624:	4602      	mov	r2, r0
 8008626:	6260      	str	r0, [r4, #36]	; 0x24
 8008628:	b920      	cbnz	r0, 8008634 <_Balloc+0x20>
 800862a:	4b18      	ldr	r3, [pc, #96]	; (800868c <_Balloc+0x78>)
 800862c:	4818      	ldr	r0, [pc, #96]	; (8008690 <_Balloc+0x7c>)
 800862e:	2166      	movs	r1, #102	; 0x66
 8008630:	f000 fdd6 	bl	80091e0 <__assert_func>
 8008634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008638:	6006      	str	r6, [r0, #0]
 800863a:	60c6      	str	r6, [r0, #12]
 800863c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800863e:	68f3      	ldr	r3, [r6, #12]
 8008640:	b183      	cbz	r3, 8008664 <_Balloc+0x50>
 8008642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800864a:	b9b8      	cbnz	r0, 800867c <_Balloc+0x68>
 800864c:	2101      	movs	r1, #1
 800864e:	fa01 f605 	lsl.w	r6, r1, r5
 8008652:	1d72      	adds	r2, r6, #5
 8008654:	0092      	lsls	r2, r2, #2
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fb60 	bl	8008d1c <_calloc_r>
 800865c:	b160      	cbz	r0, 8008678 <_Balloc+0x64>
 800865e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008662:	e00e      	b.n	8008682 <_Balloc+0x6e>
 8008664:	2221      	movs	r2, #33	; 0x21
 8008666:	2104      	movs	r1, #4
 8008668:	4620      	mov	r0, r4
 800866a:	f000 fb57 	bl	8008d1c <_calloc_r>
 800866e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008670:	60f0      	str	r0, [r6, #12]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e4      	bne.n	8008642 <_Balloc+0x2e>
 8008678:	2000      	movs	r0, #0
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	6802      	ldr	r2, [r0, #0]
 800867e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008682:	2300      	movs	r3, #0
 8008684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008688:	e7f7      	b.n	800867a <_Balloc+0x66>
 800868a:	bf00      	nop
 800868c:	08009e61 	.word	0x08009e61
 8008690:	08009ee4 	.word	0x08009ee4

08008694 <_Bfree>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008698:	4605      	mov	r5, r0
 800869a:	460c      	mov	r4, r1
 800869c:	b976      	cbnz	r6, 80086bc <_Bfree+0x28>
 800869e:	2010      	movs	r0, #16
 80086a0:	f7ff ffb0 	bl	8008604 <malloc>
 80086a4:	4602      	mov	r2, r0
 80086a6:	6268      	str	r0, [r5, #36]	; 0x24
 80086a8:	b920      	cbnz	r0, 80086b4 <_Bfree+0x20>
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <_Bfree+0x3c>)
 80086ac:	4809      	ldr	r0, [pc, #36]	; (80086d4 <_Bfree+0x40>)
 80086ae:	218a      	movs	r1, #138	; 0x8a
 80086b0:	f000 fd96 	bl	80091e0 <__assert_func>
 80086b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086b8:	6006      	str	r6, [r0, #0]
 80086ba:	60c6      	str	r6, [r0, #12]
 80086bc:	b13c      	cbz	r4, 80086ce <_Bfree+0x3a>
 80086be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086c0:	6862      	ldr	r2, [r4, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086c8:	6021      	str	r1, [r4, #0]
 80086ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	08009e61 	.word	0x08009e61
 80086d4:	08009ee4 	.word	0x08009ee4

080086d8 <__multadd>:
 80086d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086dc:	690d      	ldr	r5, [r1, #16]
 80086de:	4607      	mov	r7, r0
 80086e0:	460c      	mov	r4, r1
 80086e2:	461e      	mov	r6, r3
 80086e4:	f101 0c14 	add.w	ip, r1, #20
 80086e8:	2000      	movs	r0, #0
 80086ea:	f8dc 3000 	ldr.w	r3, [ip]
 80086ee:	b299      	uxth	r1, r3
 80086f0:	fb02 6101 	mla	r1, r2, r1, r6
 80086f4:	0c1e      	lsrs	r6, r3, #16
 80086f6:	0c0b      	lsrs	r3, r1, #16
 80086f8:	fb02 3306 	mla	r3, r2, r6, r3
 80086fc:	b289      	uxth	r1, r1
 80086fe:	3001      	adds	r0, #1
 8008700:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008704:	4285      	cmp	r5, r0
 8008706:	f84c 1b04 	str.w	r1, [ip], #4
 800870a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800870e:	dcec      	bgt.n	80086ea <__multadd+0x12>
 8008710:	b30e      	cbz	r6, 8008756 <__multadd+0x7e>
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	42ab      	cmp	r3, r5
 8008716:	dc19      	bgt.n	800874c <__multadd+0x74>
 8008718:	6861      	ldr	r1, [r4, #4]
 800871a:	4638      	mov	r0, r7
 800871c:	3101      	adds	r1, #1
 800871e:	f7ff ff79 	bl	8008614 <_Balloc>
 8008722:	4680      	mov	r8, r0
 8008724:	b928      	cbnz	r0, 8008732 <__multadd+0x5a>
 8008726:	4602      	mov	r2, r0
 8008728:	4b0c      	ldr	r3, [pc, #48]	; (800875c <__multadd+0x84>)
 800872a:	480d      	ldr	r0, [pc, #52]	; (8008760 <__multadd+0x88>)
 800872c:	21b5      	movs	r1, #181	; 0xb5
 800872e:	f000 fd57 	bl	80091e0 <__assert_func>
 8008732:	6922      	ldr	r2, [r4, #16]
 8008734:	3202      	adds	r2, #2
 8008736:	f104 010c 	add.w	r1, r4, #12
 800873a:	0092      	lsls	r2, r2, #2
 800873c:	300c      	adds	r0, #12
 800873e:	f7fe fc41 	bl	8006fc4 <memcpy>
 8008742:	4621      	mov	r1, r4
 8008744:	4638      	mov	r0, r7
 8008746:	f7ff ffa5 	bl	8008694 <_Bfree>
 800874a:	4644      	mov	r4, r8
 800874c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008750:	3501      	adds	r5, #1
 8008752:	615e      	str	r6, [r3, #20]
 8008754:	6125      	str	r5, [r4, #16]
 8008756:	4620      	mov	r0, r4
 8008758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875c:	08009ed3 	.word	0x08009ed3
 8008760:	08009ee4 	.word	0x08009ee4

08008764 <__hi0bits>:
 8008764:	0c03      	lsrs	r3, r0, #16
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	b9d3      	cbnz	r3, 80087a0 <__hi0bits+0x3c>
 800876a:	0400      	lsls	r0, r0, #16
 800876c:	2310      	movs	r3, #16
 800876e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008772:	bf04      	itt	eq
 8008774:	0200      	lsleq	r0, r0, #8
 8008776:	3308      	addeq	r3, #8
 8008778:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800877c:	bf04      	itt	eq
 800877e:	0100      	lsleq	r0, r0, #4
 8008780:	3304      	addeq	r3, #4
 8008782:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008786:	bf04      	itt	eq
 8008788:	0080      	lsleq	r0, r0, #2
 800878a:	3302      	addeq	r3, #2
 800878c:	2800      	cmp	r0, #0
 800878e:	db05      	blt.n	800879c <__hi0bits+0x38>
 8008790:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008794:	f103 0301 	add.w	r3, r3, #1
 8008798:	bf08      	it	eq
 800879a:	2320      	moveq	r3, #32
 800879c:	4618      	mov	r0, r3
 800879e:	4770      	bx	lr
 80087a0:	2300      	movs	r3, #0
 80087a2:	e7e4      	b.n	800876e <__hi0bits+0xa>

080087a4 <__lo0bits>:
 80087a4:	6803      	ldr	r3, [r0, #0]
 80087a6:	f013 0207 	ands.w	r2, r3, #7
 80087aa:	4601      	mov	r1, r0
 80087ac:	d00b      	beq.n	80087c6 <__lo0bits+0x22>
 80087ae:	07da      	lsls	r2, r3, #31
 80087b0:	d423      	bmi.n	80087fa <__lo0bits+0x56>
 80087b2:	0798      	lsls	r0, r3, #30
 80087b4:	bf49      	itett	mi
 80087b6:	085b      	lsrmi	r3, r3, #1
 80087b8:	089b      	lsrpl	r3, r3, #2
 80087ba:	2001      	movmi	r0, #1
 80087bc:	600b      	strmi	r3, [r1, #0]
 80087be:	bf5c      	itt	pl
 80087c0:	600b      	strpl	r3, [r1, #0]
 80087c2:	2002      	movpl	r0, #2
 80087c4:	4770      	bx	lr
 80087c6:	b298      	uxth	r0, r3
 80087c8:	b9a8      	cbnz	r0, 80087f6 <__lo0bits+0x52>
 80087ca:	0c1b      	lsrs	r3, r3, #16
 80087cc:	2010      	movs	r0, #16
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	b90a      	cbnz	r2, 80087d6 <__lo0bits+0x32>
 80087d2:	3008      	adds	r0, #8
 80087d4:	0a1b      	lsrs	r3, r3, #8
 80087d6:	071a      	lsls	r2, r3, #28
 80087d8:	bf04      	itt	eq
 80087da:	091b      	lsreq	r3, r3, #4
 80087dc:	3004      	addeq	r0, #4
 80087de:	079a      	lsls	r2, r3, #30
 80087e0:	bf04      	itt	eq
 80087e2:	089b      	lsreq	r3, r3, #2
 80087e4:	3002      	addeq	r0, #2
 80087e6:	07da      	lsls	r2, r3, #31
 80087e8:	d403      	bmi.n	80087f2 <__lo0bits+0x4e>
 80087ea:	085b      	lsrs	r3, r3, #1
 80087ec:	f100 0001 	add.w	r0, r0, #1
 80087f0:	d005      	beq.n	80087fe <__lo0bits+0x5a>
 80087f2:	600b      	str	r3, [r1, #0]
 80087f4:	4770      	bx	lr
 80087f6:	4610      	mov	r0, r2
 80087f8:	e7e9      	b.n	80087ce <__lo0bits+0x2a>
 80087fa:	2000      	movs	r0, #0
 80087fc:	4770      	bx	lr
 80087fe:	2020      	movs	r0, #32
 8008800:	4770      	bx	lr
	...

08008804 <__i2b>:
 8008804:	b510      	push	{r4, lr}
 8008806:	460c      	mov	r4, r1
 8008808:	2101      	movs	r1, #1
 800880a:	f7ff ff03 	bl	8008614 <_Balloc>
 800880e:	4602      	mov	r2, r0
 8008810:	b928      	cbnz	r0, 800881e <__i2b+0x1a>
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <__i2b+0x24>)
 8008814:	4805      	ldr	r0, [pc, #20]	; (800882c <__i2b+0x28>)
 8008816:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800881a:	f000 fce1 	bl	80091e0 <__assert_func>
 800881e:	2301      	movs	r3, #1
 8008820:	6144      	str	r4, [r0, #20]
 8008822:	6103      	str	r3, [r0, #16]
 8008824:	bd10      	pop	{r4, pc}
 8008826:	bf00      	nop
 8008828:	08009ed3 	.word	0x08009ed3
 800882c:	08009ee4 	.word	0x08009ee4

08008830 <__multiply>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	4691      	mov	r9, r2
 8008836:	690a      	ldr	r2, [r1, #16]
 8008838:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800883c:	429a      	cmp	r2, r3
 800883e:	bfb8      	it	lt
 8008840:	460b      	movlt	r3, r1
 8008842:	460c      	mov	r4, r1
 8008844:	bfbc      	itt	lt
 8008846:	464c      	movlt	r4, r9
 8008848:	4699      	movlt	r9, r3
 800884a:	6927      	ldr	r7, [r4, #16]
 800884c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008850:	68a3      	ldr	r3, [r4, #8]
 8008852:	6861      	ldr	r1, [r4, #4]
 8008854:	eb07 060a 	add.w	r6, r7, sl
 8008858:	42b3      	cmp	r3, r6
 800885a:	b085      	sub	sp, #20
 800885c:	bfb8      	it	lt
 800885e:	3101      	addlt	r1, #1
 8008860:	f7ff fed8 	bl	8008614 <_Balloc>
 8008864:	b930      	cbnz	r0, 8008874 <__multiply+0x44>
 8008866:	4602      	mov	r2, r0
 8008868:	4b44      	ldr	r3, [pc, #272]	; (800897c <__multiply+0x14c>)
 800886a:	4845      	ldr	r0, [pc, #276]	; (8008980 <__multiply+0x150>)
 800886c:	f240 115d 	movw	r1, #349	; 0x15d
 8008870:	f000 fcb6 	bl	80091e0 <__assert_func>
 8008874:	f100 0514 	add.w	r5, r0, #20
 8008878:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800887c:	462b      	mov	r3, r5
 800887e:	2200      	movs	r2, #0
 8008880:	4543      	cmp	r3, r8
 8008882:	d321      	bcc.n	80088c8 <__multiply+0x98>
 8008884:	f104 0314 	add.w	r3, r4, #20
 8008888:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800888c:	f109 0314 	add.w	r3, r9, #20
 8008890:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008894:	9202      	str	r2, [sp, #8]
 8008896:	1b3a      	subs	r2, r7, r4
 8008898:	3a15      	subs	r2, #21
 800889a:	f022 0203 	bic.w	r2, r2, #3
 800889e:	3204      	adds	r2, #4
 80088a0:	f104 0115 	add.w	r1, r4, #21
 80088a4:	428f      	cmp	r7, r1
 80088a6:	bf38      	it	cc
 80088a8:	2204      	movcc	r2, #4
 80088aa:	9201      	str	r2, [sp, #4]
 80088ac:	9a02      	ldr	r2, [sp, #8]
 80088ae:	9303      	str	r3, [sp, #12]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d80c      	bhi.n	80088ce <__multiply+0x9e>
 80088b4:	2e00      	cmp	r6, #0
 80088b6:	dd03      	ble.n	80088c0 <__multiply+0x90>
 80088b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d05a      	beq.n	8008976 <__multiply+0x146>
 80088c0:	6106      	str	r6, [r0, #16]
 80088c2:	b005      	add	sp, #20
 80088c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c8:	f843 2b04 	str.w	r2, [r3], #4
 80088cc:	e7d8      	b.n	8008880 <__multiply+0x50>
 80088ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80088d2:	f1ba 0f00 	cmp.w	sl, #0
 80088d6:	d024      	beq.n	8008922 <__multiply+0xf2>
 80088d8:	f104 0e14 	add.w	lr, r4, #20
 80088dc:	46a9      	mov	r9, r5
 80088de:	f04f 0c00 	mov.w	ip, #0
 80088e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088e6:	f8d9 1000 	ldr.w	r1, [r9]
 80088ea:	fa1f fb82 	uxth.w	fp, r2
 80088ee:	b289      	uxth	r1, r1
 80088f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80088f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088f8:	f8d9 2000 	ldr.w	r2, [r9]
 80088fc:	4461      	add	r1, ip
 80088fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008902:	fb0a c20b 	mla	r2, sl, fp, ip
 8008906:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800890a:	b289      	uxth	r1, r1
 800890c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008910:	4577      	cmp	r7, lr
 8008912:	f849 1b04 	str.w	r1, [r9], #4
 8008916:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800891a:	d8e2      	bhi.n	80088e2 <__multiply+0xb2>
 800891c:	9a01      	ldr	r2, [sp, #4]
 800891e:	f845 c002 	str.w	ip, [r5, r2]
 8008922:	9a03      	ldr	r2, [sp, #12]
 8008924:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008928:	3304      	adds	r3, #4
 800892a:	f1b9 0f00 	cmp.w	r9, #0
 800892e:	d020      	beq.n	8008972 <__multiply+0x142>
 8008930:	6829      	ldr	r1, [r5, #0]
 8008932:	f104 0c14 	add.w	ip, r4, #20
 8008936:	46ae      	mov	lr, r5
 8008938:	f04f 0a00 	mov.w	sl, #0
 800893c:	f8bc b000 	ldrh.w	fp, [ip]
 8008940:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008944:	fb09 220b 	mla	r2, r9, fp, r2
 8008948:	4492      	add	sl, r2
 800894a:	b289      	uxth	r1, r1
 800894c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008950:	f84e 1b04 	str.w	r1, [lr], #4
 8008954:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008958:	f8be 1000 	ldrh.w	r1, [lr]
 800895c:	0c12      	lsrs	r2, r2, #16
 800895e:	fb09 1102 	mla	r1, r9, r2, r1
 8008962:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008966:	4567      	cmp	r7, ip
 8008968:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800896c:	d8e6      	bhi.n	800893c <__multiply+0x10c>
 800896e:	9a01      	ldr	r2, [sp, #4]
 8008970:	50a9      	str	r1, [r5, r2]
 8008972:	3504      	adds	r5, #4
 8008974:	e79a      	b.n	80088ac <__multiply+0x7c>
 8008976:	3e01      	subs	r6, #1
 8008978:	e79c      	b.n	80088b4 <__multiply+0x84>
 800897a:	bf00      	nop
 800897c:	08009ed3 	.word	0x08009ed3
 8008980:	08009ee4 	.word	0x08009ee4

08008984 <__pow5mult>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	4615      	mov	r5, r2
 800898a:	f012 0203 	ands.w	r2, r2, #3
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	d007      	beq.n	80089a4 <__pow5mult+0x20>
 8008994:	4c25      	ldr	r4, [pc, #148]	; (8008a2c <__pow5mult+0xa8>)
 8008996:	3a01      	subs	r2, #1
 8008998:	2300      	movs	r3, #0
 800899a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800899e:	f7ff fe9b 	bl	80086d8 <__multadd>
 80089a2:	4607      	mov	r7, r0
 80089a4:	10ad      	asrs	r5, r5, #2
 80089a6:	d03d      	beq.n	8008a24 <__pow5mult+0xa0>
 80089a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089aa:	b97c      	cbnz	r4, 80089cc <__pow5mult+0x48>
 80089ac:	2010      	movs	r0, #16
 80089ae:	f7ff fe29 	bl	8008604 <malloc>
 80089b2:	4602      	mov	r2, r0
 80089b4:	6270      	str	r0, [r6, #36]	; 0x24
 80089b6:	b928      	cbnz	r0, 80089c4 <__pow5mult+0x40>
 80089b8:	4b1d      	ldr	r3, [pc, #116]	; (8008a30 <__pow5mult+0xac>)
 80089ba:	481e      	ldr	r0, [pc, #120]	; (8008a34 <__pow5mult+0xb0>)
 80089bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089c0:	f000 fc0e 	bl	80091e0 <__assert_func>
 80089c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089c8:	6004      	str	r4, [r0, #0]
 80089ca:	60c4      	str	r4, [r0, #12]
 80089cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089d4:	b94c      	cbnz	r4, 80089ea <__pow5mult+0x66>
 80089d6:	f240 2171 	movw	r1, #625	; 0x271
 80089da:	4630      	mov	r0, r6
 80089dc:	f7ff ff12 	bl	8008804 <__i2b>
 80089e0:	2300      	movs	r3, #0
 80089e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80089e6:	4604      	mov	r4, r0
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	07eb      	lsls	r3, r5, #31
 80089f0:	d50a      	bpl.n	8008a08 <__pow5mult+0x84>
 80089f2:	4639      	mov	r1, r7
 80089f4:	4622      	mov	r2, r4
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7ff ff1a 	bl	8008830 <__multiply>
 80089fc:	4639      	mov	r1, r7
 80089fe:	4680      	mov	r8, r0
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff fe47 	bl	8008694 <_Bfree>
 8008a06:	4647      	mov	r7, r8
 8008a08:	106d      	asrs	r5, r5, #1
 8008a0a:	d00b      	beq.n	8008a24 <__pow5mult+0xa0>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	b938      	cbnz	r0, 8008a20 <__pow5mult+0x9c>
 8008a10:	4622      	mov	r2, r4
 8008a12:	4621      	mov	r1, r4
 8008a14:	4630      	mov	r0, r6
 8008a16:	f7ff ff0b 	bl	8008830 <__multiply>
 8008a1a:	6020      	str	r0, [r4, #0]
 8008a1c:	f8c0 9000 	str.w	r9, [r0]
 8008a20:	4604      	mov	r4, r0
 8008a22:	e7e4      	b.n	80089ee <__pow5mult+0x6a>
 8008a24:	4638      	mov	r0, r7
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0800a030 	.word	0x0800a030
 8008a30:	08009e61 	.word	0x08009e61
 8008a34:	08009ee4 	.word	0x08009ee4

08008a38 <__lshift>:
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	6849      	ldr	r1, [r1, #4]
 8008a40:	6923      	ldr	r3, [r4, #16]
 8008a42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a46:	68a3      	ldr	r3, [r4, #8]
 8008a48:	4607      	mov	r7, r0
 8008a4a:	4691      	mov	r9, r2
 8008a4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a50:	f108 0601 	add.w	r6, r8, #1
 8008a54:	42b3      	cmp	r3, r6
 8008a56:	db0b      	blt.n	8008a70 <__lshift+0x38>
 8008a58:	4638      	mov	r0, r7
 8008a5a:	f7ff fddb 	bl	8008614 <_Balloc>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b948      	cbnz	r0, 8008a76 <__lshift+0x3e>
 8008a62:	4602      	mov	r2, r0
 8008a64:	4b2a      	ldr	r3, [pc, #168]	; (8008b10 <__lshift+0xd8>)
 8008a66:	482b      	ldr	r0, [pc, #172]	; (8008b14 <__lshift+0xdc>)
 8008a68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a6c:	f000 fbb8 	bl	80091e0 <__assert_func>
 8008a70:	3101      	adds	r1, #1
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	e7ee      	b.n	8008a54 <__lshift+0x1c>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f100 0114 	add.w	r1, r0, #20
 8008a7c:	f100 0210 	add.w	r2, r0, #16
 8008a80:	4618      	mov	r0, r3
 8008a82:	4553      	cmp	r3, sl
 8008a84:	db37      	blt.n	8008af6 <__lshift+0xbe>
 8008a86:	6920      	ldr	r0, [r4, #16]
 8008a88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a8c:	f104 0314 	add.w	r3, r4, #20
 8008a90:	f019 091f 	ands.w	r9, r9, #31
 8008a94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a9c:	d02f      	beq.n	8008afe <__lshift+0xc6>
 8008a9e:	f1c9 0e20 	rsb	lr, r9, #32
 8008aa2:	468a      	mov	sl, r1
 8008aa4:	f04f 0c00 	mov.w	ip, #0
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	fa02 f209 	lsl.w	r2, r2, r9
 8008aae:	ea42 020c 	orr.w	r2, r2, ip
 8008ab2:	f84a 2b04 	str.w	r2, [sl], #4
 8008ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aba:	4298      	cmp	r0, r3
 8008abc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ac0:	d8f2      	bhi.n	8008aa8 <__lshift+0x70>
 8008ac2:	1b03      	subs	r3, r0, r4
 8008ac4:	3b15      	subs	r3, #21
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	3304      	adds	r3, #4
 8008acc:	f104 0215 	add.w	r2, r4, #21
 8008ad0:	4290      	cmp	r0, r2
 8008ad2:	bf38      	it	cc
 8008ad4:	2304      	movcc	r3, #4
 8008ad6:	f841 c003 	str.w	ip, [r1, r3]
 8008ada:	f1bc 0f00 	cmp.w	ip, #0
 8008ade:	d001      	beq.n	8008ae4 <__lshift+0xac>
 8008ae0:	f108 0602 	add.w	r6, r8, #2
 8008ae4:	3e01      	subs	r6, #1
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	612e      	str	r6, [r5, #16]
 8008aea:	4621      	mov	r1, r4
 8008aec:	f7ff fdd2 	bl	8008694 <_Bfree>
 8008af0:	4628      	mov	r0, r5
 8008af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008afa:	3301      	adds	r3, #1
 8008afc:	e7c1      	b.n	8008a82 <__lshift+0x4a>
 8008afe:	3904      	subs	r1, #4
 8008b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b04:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b08:	4298      	cmp	r0, r3
 8008b0a:	d8f9      	bhi.n	8008b00 <__lshift+0xc8>
 8008b0c:	e7ea      	b.n	8008ae4 <__lshift+0xac>
 8008b0e:	bf00      	nop
 8008b10:	08009ed3 	.word	0x08009ed3
 8008b14:	08009ee4 	.word	0x08009ee4

08008b18 <__mcmp>:
 8008b18:	b530      	push	{r4, r5, lr}
 8008b1a:	6902      	ldr	r2, [r0, #16]
 8008b1c:	690c      	ldr	r4, [r1, #16]
 8008b1e:	1b12      	subs	r2, r2, r4
 8008b20:	d10e      	bne.n	8008b40 <__mcmp+0x28>
 8008b22:	f100 0314 	add.w	r3, r0, #20
 8008b26:	3114      	adds	r1, #20
 8008b28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b38:	42a5      	cmp	r5, r4
 8008b3a:	d003      	beq.n	8008b44 <__mcmp+0x2c>
 8008b3c:	d305      	bcc.n	8008b4a <__mcmp+0x32>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	4610      	mov	r0, r2
 8008b42:	bd30      	pop	{r4, r5, pc}
 8008b44:	4283      	cmp	r3, r0
 8008b46:	d3f3      	bcc.n	8008b30 <__mcmp+0x18>
 8008b48:	e7fa      	b.n	8008b40 <__mcmp+0x28>
 8008b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b4e:	e7f7      	b.n	8008b40 <__mcmp+0x28>

08008b50 <__mdiff>:
 8008b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	460c      	mov	r4, r1
 8008b56:	4606      	mov	r6, r0
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	4690      	mov	r8, r2
 8008b5e:	f7ff ffdb 	bl	8008b18 <__mcmp>
 8008b62:	1e05      	subs	r5, r0, #0
 8008b64:	d110      	bne.n	8008b88 <__mdiff+0x38>
 8008b66:	4629      	mov	r1, r5
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f7ff fd53 	bl	8008614 <_Balloc>
 8008b6e:	b930      	cbnz	r0, 8008b7e <__mdiff+0x2e>
 8008b70:	4b3a      	ldr	r3, [pc, #232]	; (8008c5c <__mdiff+0x10c>)
 8008b72:	4602      	mov	r2, r0
 8008b74:	f240 2132 	movw	r1, #562	; 0x232
 8008b78:	4839      	ldr	r0, [pc, #228]	; (8008c60 <__mdiff+0x110>)
 8008b7a:	f000 fb31 	bl	80091e0 <__assert_func>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	bfa4      	itt	ge
 8008b8a:	4643      	movge	r3, r8
 8008b8c:	46a0      	movge	r8, r4
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b94:	bfa6      	itte	ge
 8008b96:	461c      	movge	r4, r3
 8008b98:	2500      	movge	r5, #0
 8008b9a:	2501      	movlt	r5, #1
 8008b9c:	f7ff fd3a 	bl	8008614 <_Balloc>
 8008ba0:	b920      	cbnz	r0, 8008bac <__mdiff+0x5c>
 8008ba2:	4b2e      	ldr	r3, [pc, #184]	; (8008c5c <__mdiff+0x10c>)
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008baa:	e7e5      	b.n	8008b78 <__mdiff+0x28>
 8008bac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008bb0:	6926      	ldr	r6, [r4, #16]
 8008bb2:	60c5      	str	r5, [r0, #12]
 8008bb4:	f104 0914 	add.w	r9, r4, #20
 8008bb8:	f108 0514 	add.w	r5, r8, #20
 8008bbc:	f100 0e14 	add.w	lr, r0, #20
 8008bc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008bc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bc8:	f108 0210 	add.w	r2, r8, #16
 8008bcc:	46f2      	mov	sl, lr
 8008bce:	2100      	movs	r1, #0
 8008bd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bd8:	fa1f f883 	uxth.w	r8, r3
 8008bdc:	fa11 f18b 	uxtah	r1, r1, fp
 8008be0:	0c1b      	lsrs	r3, r3, #16
 8008be2:	eba1 0808 	sub.w	r8, r1, r8
 8008be6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bee:	fa1f f888 	uxth.w	r8, r8
 8008bf2:	1419      	asrs	r1, r3, #16
 8008bf4:	454e      	cmp	r6, r9
 8008bf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bfa:	f84a 3b04 	str.w	r3, [sl], #4
 8008bfe:	d8e7      	bhi.n	8008bd0 <__mdiff+0x80>
 8008c00:	1b33      	subs	r3, r6, r4
 8008c02:	3b15      	subs	r3, #21
 8008c04:	f023 0303 	bic.w	r3, r3, #3
 8008c08:	3304      	adds	r3, #4
 8008c0a:	3415      	adds	r4, #21
 8008c0c:	42a6      	cmp	r6, r4
 8008c0e:	bf38      	it	cc
 8008c10:	2304      	movcc	r3, #4
 8008c12:	441d      	add	r5, r3
 8008c14:	4473      	add	r3, lr
 8008c16:	469e      	mov	lr, r3
 8008c18:	462e      	mov	r6, r5
 8008c1a:	4566      	cmp	r6, ip
 8008c1c:	d30e      	bcc.n	8008c3c <__mdiff+0xec>
 8008c1e:	f10c 0203 	add.w	r2, ip, #3
 8008c22:	1b52      	subs	r2, r2, r5
 8008c24:	f022 0203 	bic.w	r2, r2, #3
 8008c28:	3d03      	subs	r5, #3
 8008c2a:	45ac      	cmp	ip, r5
 8008c2c:	bf38      	it	cc
 8008c2e:	2200      	movcc	r2, #0
 8008c30:	441a      	add	r2, r3
 8008c32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c36:	b17b      	cbz	r3, 8008c58 <__mdiff+0x108>
 8008c38:	6107      	str	r7, [r0, #16]
 8008c3a:	e7a3      	b.n	8008b84 <__mdiff+0x34>
 8008c3c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c40:	fa11 f288 	uxtah	r2, r1, r8
 8008c44:	1414      	asrs	r4, r2, #16
 8008c46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c4a:	b292      	uxth	r2, r2
 8008c4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c50:	f84e 2b04 	str.w	r2, [lr], #4
 8008c54:	1421      	asrs	r1, r4, #16
 8008c56:	e7e0      	b.n	8008c1a <__mdiff+0xca>
 8008c58:	3f01      	subs	r7, #1
 8008c5a:	e7ea      	b.n	8008c32 <__mdiff+0xe2>
 8008c5c:	08009ed3 	.word	0x08009ed3
 8008c60:	08009ee4 	.word	0x08009ee4

08008c64 <__d2b>:
 8008c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c68:	4689      	mov	r9, r1
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	ec57 6b10 	vmov	r6, r7, d0
 8008c70:	4690      	mov	r8, r2
 8008c72:	f7ff fccf 	bl	8008614 <_Balloc>
 8008c76:	4604      	mov	r4, r0
 8008c78:	b930      	cbnz	r0, 8008c88 <__d2b+0x24>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	4b25      	ldr	r3, [pc, #148]	; (8008d14 <__d2b+0xb0>)
 8008c7e:	4826      	ldr	r0, [pc, #152]	; (8008d18 <__d2b+0xb4>)
 8008c80:	f240 310a 	movw	r1, #778	; 0x30a
 8008c84:	f000 faac 	bl	80091e0 <__assert_func>
 8008c88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c90:	bb35      	cbnz	r5, 8008ce0 <__d2b+0x7c>
 8008c92:	2e00      	cmp	r6, #0
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	d028      	beq.n	8008cea <__d2b+0x86>
 8008c98:	4668      	mov	r0, sp
 8008c9a:	9600      	str	r6, [sp, #0]
 8008c9c:	f7ff fd82 	bl	80087a4 <__lo0bits>
 8008ca0:	9900      	ldr	r1, [sp, #0]
 8008ca2:	b300      	cbz	r0, 8008ce6 <__d2b+0x82>
 8008ca4:	9a01      	ldr	r2, [sp, #4]
 8008ca6:	f1c0 0320 	rsb	r3, r0, #32
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	40c2      	lsrs	r2, r0
 8008cb2:	6163      	str	r3, [r4, #20]
 8008cb4:	9201      	str	r2, [sp, #4]
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	61a3      	str	r3, [r4, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bf14      	ite	ne
 8008cbe:	2202      	movne	r2, #2
 8008cc0:	2201      	moveq	r2, #1
 8008cc2:	6122      	str	r2, [r4, #16]
 8008cc4:	b1d5      	cbz	r5, 8008cfc <__d2b+0x98>
 8008cc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cca:	4405      	add	r5, r0
 8008ccc:	f8c9 5000 	str.w	r5, [r9]
 8008cd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cd4:	f8c8 0000 	str.w	r0, [r8]
 8008cd8:	4620      	mov	r0, r4
 8008cda:	b003      	add	sp, #12
 8008cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ce4:	e7d5      	b.n	8008c92 <__d2b+0x2e>
 8008ce6:	6161      	str	r1, [r4, #20]
 8008ce8:	e7e5      	b.n	8008cb6 <__d2b+0x52>
 8008cea:	a801      	add	r0, sp, #4
 8008cec:	f7ff fd5a 	bl	80087a4 <__lo0bits>
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	6163      	str	r3, [r4, #20]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	6122      	str	r2, [r4, #16]
 8008cf8:	3020      	adds	r0, #32
 8008cfa:	e7e3      	b.n	8008cc4 <__d2b+0x60>
 8008cfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d04:	f8c9 0000 	str.w	r0, [r9]
 8008d08:	6918      	ldr	r0, [r3, #16]
 8008d0a:	f7ff fd2b 	bl	8008764 <__hi0bits>
 8008d0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d12:	e7df      	b.n	8008cd4 <__d2b+0x70>
 8008d14:	08009ed3 	.word	0x08009ed3
 8008d18:	08009ee4 	.word	0x08009ee4

08008d1c <_calloc_r>:
 8008d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d1e:	fba1 2402 	umull	r2, r4, r1, r2
 8008d22:	b94c      	cbnz	r4, 8008d38 <_calloc_r+0x1c>
 8008d24:	4611      	mov	r1, r2
 8008d26:	9201      	str	r2, [sp, #4]
 8008d28:	f000 f87a 	bl	8008e20 <_malloc_r>
 8008d2c:	9a01      	ldr	r2, [sp, #4]
 8008d2e:	4605      	mov	r5, r0
 8008d30:	b930      	cbnz	r0, 8008d40 <_calloc_r+0x24>
 8008d32:	4628      	mov	r0, r5
 8008d34:	b003      	add	sp, #12
 8008d36:	bd30      	pop	{r4, r5, pc}
 8008d38:	220c      	movs	r2, #12
 8008d3a:	6002      	str	r2, [r0, #0]
 8008d3c:	2500      	movs	r5, #0
 8008d3e:	e7f8      	b.n	8008d32 <_calloc_r+0x16>
 8008d40:	4621      	mov	r1, r4
 8008d42:	f7fe f94d 	bl	8006fe0 <memset>
 8008d46:	e7f4      	b.n	8008d32 <_calloc_r+0x16>

08008d48 <_free_r>:
 8008d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d4a:	2900      	cmp	r1, #0
 8008d4c:	d044      	beq.n	8008dd8 <_free_r+0x90>
 8008d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d52:	9001      	str	r0, [sp, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f1a1 0404 	sub.w	r4, r1, #4
 8008d5a:	bfb8      	it	lt
 8008d5c:	18e4      	addlt	r4, r4, r3
 8008d5e:	f000 fa9b 	bl	8009298 <__malloc_lock>
 8008d62:	4a1e      	ldr	r2, [pc, #120]	; (8008ddc <_free_r+0x94>)
 8008d64:	9801      	ldr	r0, [sp, #4]
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	b933      	cbnz	r3, 8008d78 <_free_r+0x30>
 8008d6a:	6063      	str	r3, [r4, #4]
 8008d6c:	6014      	str	r4, [r2, #0]
 8008d6e:	b003      	add	sp, #12
 8008d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d74:	f000 ba96 	b.w	80092a4 <__malloc_unlock>
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	d908      	bls.n	8008d8e <_free_r+0x46>
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	1961      	adds	r1, r4, r5
 8008d80:	428b      	cmp	r3, r1
 8008d82:	bf01      	itttt	eq
 8008d84:	6819      	ldreq	r1, [r3, #0]
 8008d86:	685b      	ldreq	r3, [r3, #4]
 8008d88:	1949      	addeq	r1, r1, r5
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	e7ed      	b.n	8008d6a <_free_r+0x22>
 8008d8e:	461a      	mov	r2, r3
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	b10b      	cbz	r3, 8008d98 <_free_r+0x50>
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	d9fa      	bls.n	8008d8e <_free_r+0x46>
 8008d98:	6811      	ldr	r1, [r2, #0]
 8008d9a:	1855      	adds	r5, r2, r1
 8008d9c:	42a5      	cmp	r5, r4
 8008d9e:	d10b      	bne.n	8008db8 <_free_r+0x70>
 8008da0:	6824      	ldr	r4, [r4, #0]
 8008da2:	4421      	add	r1, r4
 8008da4:	1854      	adds	r4, r2, r1
 8008da6:	42a3      	cmp	r3, r4
 8008da8:	6011      	str	r1, [r2, #0]
 8008daa:	d1e0      	bne.n	8008d6e <_free_r+0x26>
 8008dac:	681c      	ldr	r4, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	6053      	str	r3, [r2, #4]
 8008db2:	4421      	add	r1, r4
 8008db4:	6011      	str	r1, [r2, #0]
 8008db6:	e7da      	b.n	8008d6e <_free_r+0x26>
 8008db8:	d902      	bls.n	8008dc0 <_free_r+0x78>
 8008dba:	230c      	movs	r3, #12
 8008dbc:	6003      	str	r3, [r0, #0]
 8008dbe:	e7d6      	b.n	8008d6e <_free_r+0x26>
 8008dc0:	6825      	ldr	r5, [r4, #0]
 8008dc2:	1961      	adds	r1, r4, r5
 8008dc4:	428b      	cmp	r3, r1
 8008dc6:	bf04      	itt	eq
 8008dc8:	6819      	ldreq	r1, [r3, #0]
 8008dca:	685b      	ldreq	r3, [r3, #4]
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	bf04      	itt	eq
 8008dd0:	1949      	addeq	r1, r1, r5
 8008dd2:	6021      	streq	r1, [r4, #0]
 8008dd4:	6054      	str	r4, [r2, #4]
 8008dd6:	e7ca      	b.n	8008d6e <_free_r+0x26>
 8008dd8:	b003      	add	sp, #12
 8008dda:	bd30      	pop	{r4, r5, pc}
 8008ddc:	20000408 	.word	0x20000408

08008de0 <sbrk_aligned>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	4e0e      	ldr	r6, [pc, #56]	; (8008e1c <sbrk_aligned+0x3c>)
 8008de4:	460c      	mov	r4, r1
 8008de6:	6831      	ldr	r1, [r6, #0]
 8008de8:	4605      	mov	r5, r0
 8008dea:	b911      	cbnz	r1, 8008df2 <sbrk_aligned+0x12>
 8008dec:	f000 f9e8 	bl	80091c0 <_sbrk_r>
 8008df0:	6030      	str	r0, [r6, #0]
 8008df2:	4621      	mov	r1, r4
 8008df4:	4628      	mov	r0, r5
 8008df6:	f000 f9e3 	bl	80091c0 <_sbrk_r>
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	d00a      	beq.n	8008e14 <sbrk_aligned+0x34>
 8008dfe:	1cc4      	adds	r4, r0, #3
 8008e00:	f024 0403 	bic.w	r4, r4, #3
 8008e04:	42a0      	cmp	r0, r4
 8008e06:	d007      	beq.n	8008e18 <sbrk_aligned+0x38>
 8008e08:	1a21      	subs	r1, r4, r0
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f000 f9d8 	bl	80091c0 <_sbrk_r>
 8008e10:	3001      	adds	r0, #1
 8008e12:	d101      	bne.n	8008e18 <sbrk_aligned+0x38>
 8008e14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008e18:	4620      	mov	r0, r4
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	2000040c 	.word	0x2000040c

08008e20 <_malloc_r>:
 8008e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e24:	1ccd      	adds	r5, r1, #3
 8008e26:	f025 0503 	bic.w	r5, r5, #3
 8008e2a:	3508      	adds	r5, #8
 8008e2c:	2d0c      	cmp	r5, #12
 8008e2e:	bf38      	it	cc
 8008e30:	250c      	movcc	r5, #12
 8008e32:	2d00      	cmp	r5, #0
 8008e34:	4607      	mov	r7, r0
 8008e36:	db01      	blt.n	8008e3c <_malloc_r+0x1c>
 8008e38:	42a9      	cmp	r1, r5
 8008e3a:	d905      	bls.n	8008e48 <_malloc_r+0x28>
 8008e3c:	230c      	movs	r3, #12
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	2600      	movs	r6, #0
 8008e42:	4630      	mov	r0, r6
 8008e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e48:	4e2e      	ldr	r6, [pc, #184]	; (8008f04 <_malloc_r+0xe4>)
 8008e4a:	f000 fa25 	bl	8009298 <__malloc_lock>
 8008e4e:	6833      	ldr	r3, [r6, #0]
 8008e50:	461c      	mov	r4, r3
 8008e52:	bb34      	cbnz	r4, 8008ea2 <_malloc_r+0x82>
 8008e54:	4629      	mov	r1, r5
 8008e56:	4638      	mov	r0, r7
 8008e58:	f7ff ffc2 	bl	8008de0 <sbrk_aligned>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	4604      	mov	r4, r0
 8008e60:	d14d      	bne.n	8008efe <_malloc_r+0xde>
 8008e62:	6834      	ldr	r4, [r6, #0]
 8008e64:	4626      	mov	r6, r4
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	d140      	bne.n	8008eec <_malloc_r+0xcc>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4638      	mov	r0, r7
 8008e70:	eb04 0803 	add.w	r8, r4, r3
 8008e74:	f000 f9a4 	bl	80091c0 <_sbrk_r>
 8008e78:	4580      	cmp	r8, r0
 8008e7a:	d13a      	bne.n	8008ef2 <_malloc_r+0xd2>
 8008e7c:	6821      	ldr	r1, [r4, #0]
 8008e7e:	3503      	adds	r5, #3
 8008e80:	1a6d      	subs	r5, r5, r1
 8008e82:	f025 0503 	bic.w	r5, r5, #3
 8008e86:	3508      	adds	r5, #8
 8008e88:	2d0c      	cmp	r5, #12
 8008e8a:	bf38      	it	cc
 8008e8c:	250c      	movcc	r5, #12
 8008e8e:	4629      	mov	r1, r5
 8008e90:	4638      	mov	r0, r7
 8008e92:	f7ff ffa5 	bl	8008de0 <sbrk_aligned>
 8008e96:	3001      	adds	r0, #1
 8008e98:	d02b      	beq.n	8008ef2 <_malloc_r+0xd2>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	442b      	add	r3, r5
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	e00e      	b.n	8008ec0 <_malloc_r+0xa0>
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	1b52      	subs	r2, r2, r5
 8008ea6:	d41e      	bmi.n	8008ee6 <_malloc_r+0xc6>
 8008ea8:	2a0b      	cmp	r2, #11
 8008eaa:	d916      	bls.n	8008eda <_malloc_r+0xba>
 8008eac:	1961      	adds	r1, r4, r5
 8008eae:	42a3      	cmp	r3, r4
 8008eb0:	6025      	str	r5, [r4, #0]
 8008eb2:	bf18      	it	ne
 8008eb4:	6059      	strne	r1, [r3, #4]
 8008eb6:	6863      	ldr	r3, [r4, #4]
 8008eb8:	bf08      	it	eq
 8008eba:	6031      	streq	r1, [r6, #0]
 8008ebc:	5162      	str	r2, [r4, r5]
 8008ebe:	604b      	str	r3, [r1, #4]
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f104 060b 	add.w	r6, r4, #11
 8008ec6:	f000 f9ed 	bl	80092a4 <__malloc_unlock>
 8008eca:	f026 0607 	bic.w	r6, r6, #7
 8008ece:	1d23      	adds	r3, r4, #4
 8008ed0:	1af2      	subs	r2, r6, r3
 8008ed2:	d0b6      	beq.n	8008e42 <_malloc_r+0x22>
 8008ed4:	1b9b      	subs	r3, r3, r6
 8008ed6:	50a3      	str	r3, [r4, r2]
 8008ed8:	e7b3      	b.n	8008e42 <_malloc_r+0x22>
 8008eda:	6862      	ldr	r2, [r4, #4]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	bf0c      	ite	eq
 8008ee0:	6032      	streq	r2, [r6, #0]
 8008ee2:	605a      	strne	r2, [r3, #4]
 8008ee4:	e7ec      	b.n	8008ec0 <_malloc_r+0xa0>
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	6864      	ldr	r4, [r4, #4]
 8008eea:	e7b2      	b.n	8008e52 <_malloc_r+0x32>
 8008eec:	4634      	mov	r4, r6
 8008eee:	6876      	ldr	r6, [r6, #4]
 8008ef0:	e7b9      	b.n	8008e66 <_malloc_r+0x46>
 8008ef2:	230c      	movs	r3, #12
 8008ef4:	603b      	str	r3, [r7, #0]
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	f000 f9d4 	bl	80092a4 <__malloc_unlock>
 8008efc:	e7a1      	b.n	8008e42 <_malloc_r+0x22>
 8008efe:	6025      	str	r5, [r4, #0]
 8008f00:	e7de      	b.n	8008ec0 <_malloc_r+0xa0>
 8008f02:	bf00      	nop
 8008f04:	20000408 	.word	0x20000408

08008f08 <__ssputs_r>:
 8008f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0c:	688e      	ldr	r6, [r1, #8]
 8008f0e:	429e      	cmp	r6, r3
 8008f10:	4682      	mov	sl, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	4690      	mov	r8, r2
 8008f16:	461f      	mov	r7, r3
 8008f18:	d838      	bhi.n	8008f8c <__ssputs_r+0x84>
 8008f1a:	898a      	ldrh	r2, [r1, #12]
 8008f1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f20:	d032      	beq.n	8008f88 <__ssputs_r+0x80>
 8008f22:	6825      	ldr	r5, [r4, #0]
 8008f24:	6909      	ldr	r1, [r1, #16]
 8008f26:	eba5 0901 	sub.w	r9, r5, r1
 8008f2a:	6965      	ldr	r5, [r4, #20]
 8008f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f34:	3301      	adds	r3, #1
 8008f36:	444b      	add	r3, r9
 8008f38:	106d      	asrs	r5, r5, #1
 8008f3a:	429d      	cmp	r5, r3
 8008f3c:	bf38      	it	cc
 8008f3e:	461d      	movcc	r5, r3
 8008f40:	0553      	lsls	r3, r2, #21
 8008f42:	d531      	bpl.n	8008fa8 <__ssputs_r+0xa0>
 8008f44:	4629      	mov	r1, r5
 8008f46:	f7ff ff6b 	bl	8008e20 <_malloc_r>
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	b950      	cbnz	r0, 8008f64 <__ssputs_r+0x5c>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	f8ca 3000 	str.w	r3, [sl]
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f5a:	81a3      	strh	r3, [r4, #12]
 8008f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f64:	6921      	ldr	r1, [r4, #16]
 8008f66:	464a      	mov	r2, r9
 8008f68:	f7fe f82c 	bl	8006fc4 <memcpy>
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f76:	81a3      	strh	r3, [r4, #12]
 8008f78:	6126      	str	r6, [r4, #16]
 8008f7a:	6165      	str	r5, [r4, #20]
 8008f7c:	444e      	add	r6, r9
 8008f7e:	eba5 0509 	sub.w	r5, r5, r9
 8008f82:	6026      	str	r6, [r4, #0]
 8008f84:	60a5      	str	r5, [r4, #8]
 8008f86:	463e      	mov	r6, r7
 8008f88:	42be      	cmp	r6, r7
 8008f8a:	d900      	bls.n	8008f8e <__ssputs_r+0x86>
 8008f8c:	463e      	mov	r6, r7
 8008f8e:	6820      	ldr	r0, [r4, #0]
 8008f90:	4632      	mov	r2, r6
 8008f92:	4641      	mov	r1, r8
 8008f94:	f000 f966 	bl	8009264 <memmove>
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	1b9b      	subs	r3, r3, r6
 8008f9c:	60a3      	str	r3, [r4, #8]
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	4433      	add	r3, r6
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	e7db      	b.n	8008f60 <__ssputs_r+0x58>
 8008fa8:	462a      	mov	r2, r5
 8008faa:	f000 f981 	bl	80092b0 <_realloc_r>
 8008fae:	4606      	mov	r6, r0
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d1e1      	bne.n	8008f78 <__ssputs_r+0x70>
 8008fb4:	6921      	ldr	r1, [r4, #16]
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	f7ff fec6 	bl	8008d48 <_free_r>
 8008fbc:	e7c7      	b.n	8008f4e <__ssputs_r+0x46>
	...

08008fc0 <_svfiprintf_r>:
 8008fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	4698      	mov	r8, r3
 8008fc6:	898b      	ldrh	r3, [r1, #12]
 8008fc8:	061b      	lsls	r3, r3, #24
 8008fca:	b09d      	sub	sp, #116	; 0x74
 8008fcc:	4607      	mov	r7, r0
 8008fce:	460d      	mov	r5, r1
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	d50e      	bpl.n	8008ff2 <_svfiprintf_r+0x32>
 8008fd4:	690b      	ldr	r3, [r1, #16]
 8008fd6:	b963      	cbnz	r3, 8008ff2 <_svfiprintf_r+0x32>
 8008fd8:	2140      	movs	r1, #64	; 0x40
 8008fda:	f7ff ff21 	bl	8008e20 <_malloc_r>
 8008fde:	6028      	str	r0, [r5, #0]
 8008fe0:	6128      	str	r0, [r5, #16]
 8008fe2:	b920      	cbnz	r0, 8008fee <_svfiprintf_r+0x2e>
 8008fe4:	230c      	movs	r3, #12
 8008fe6:	603b      	str	r3, [r7, #0]
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fec:	e0d1      	b.n	8009192 <_svfiprintf_r+0x1d2>
 8008fee:	2340      	movs	r3, #64	; 0x40
 8008ff0:	616b      	str	r3, [r5, #20]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff6:	2320      	movs	r3, #32
 8008ff8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009000:	2330      	movs	r3, #48	; 0x30
 8009002:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091ac <_svfiprintf_r+0x1ec>
 8009006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800900a:	f04f 0901 	mov.w	r9, #1
 800900e:	4623      	mov	r3, r4
 8009010:	469a      	mov	sl, r3
 8009012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009016:	b10a      	cbz	r2, 800901c <_svfiprintf_r+0x5c>
 8009018:	2a25      	cmp	r2, #37	; 0x25
 800901a:	d1f9      	bne.n	8009010 <_svfiprintf_r+0x50>
 800901c:	ebba 0b04 	subs.w	fp, sl, r4
 8009020:	d00b      	beq.n	800903a <_svfiprintf_r+0x7a>
 8009022:	465b      	mov	r3, fp
 8009024:	4622      	mov	r2, r4
 8009026:	4629      	mov	r1, r5
 8009028:	4638      	mov	r0, r7
 800902a:	f7ff ff6d 	bl	8008f08 <__ssputs_r>
 800902e:	3001      	adds	r0, #1
 8009030:	f000 80aa 	beq.w	8009188 <_svfiprintf_r+0x1c8>
 8009034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009036:	445a      	add	r2, fp
 8009038:	9209      	str	r2, [sp, #36]	; 0x24
 800903a:	f89a 3000 	ldrb.w	r3, [sl]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 80a2 	beq.w	8009188 <_svfiprintf_r+0x1c8>
 8009044:	2300      	movs	r3, #0
 8009046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800904a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800904e:	f10a 0a01 	add.w	sl, sl, #1
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	9307      	str	r3, [sp, #28]
 8009056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800905a:	931a      	str	r3, [sp, #104]	; 0x68
 800905c:	4654      	mov	r4, sl
 800905e:	2205      	movs	r2, #5
 8009060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009064:	4851      	ldr	r0, [pc, #324]	; (80091ac <_svfiprintf_r+0x1ec>)
 8009066:	f7f7 f8db 	bl	8000220 <memchr>
 800906a:	9a04      	ldr	r2, [sp, #16]
 800906c:	b9d8      	cbnz	r0, 80090a6 <_svfiprintf_r+0xe6>
 800906e:	06d0      	lsls	r0, r2, #27
 8009070:	bf44      	itt	mi
 8009072:	2320      	movmi	r3, #32
 8009074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009078:	0711      	lsls	r1, r2, #28
 800907a:	bf44      	itt	mi
 800907c:	232b      	movmi	r3, #43	; 0x2b
 800907e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009082:	f89a 3000 	ldrb.w	r3, [sl]
 8009086:	2b2a      	cmp	r3, #42	; 0x2a
 8009088:	d015      	beq.n	80090b6 <_svfiprintf_r+0xf6>
 800908a:	9a07      	ldr	r2, [sp, #28]
 800908c:	4654      	mov	r4, sl
 800908e:	2000      	movs	r0, #0
 8009090:	f04f 0c0a 	mov.w	ip, #10
 8009094:	4621      	mov	r1, r4
 8009096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800909a:	3b30      	subs	r3, #48	; 0x30
 800909c:	2b09      	cmp	r3, #9
 800909e:	d94e      	bls.n	800913e <_svfiprintf_r+0x17e>
 80090a0:	b1b0      	cbz	r0, 80090d0 <_svfiprintf_r+0x110>
 80090a2:	9207      	str	r2, [sp, #28]
 80090a4:	e014      	b.n	80090d0 <_svfiprintf_r+0x110>
 80090a6:	eba0 0308 	sub.w	r3, r0, r8
 80090aa:	fa09 f303 	lsl.w	r3, r9, r3
 80090ae:	4313      	orrs	r3, r2
 80090b0:	9304      	str	r3, [sp, #16]
 80090b2:	46a2      	mov	sl, r4
 80090b4:	e7d2      	b.n	800905c <_svfiprintf_r+0x9c>
 80090b6:	9b03      	ldr	r3, [sp, #12]
 80090b8:	1d19      	adds	r1, r3, #4
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	9103      	str	r1, [sp, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bfbb      	ittet	lt
 80090c2:	425b      	neglt	r3, r3
 80090c4:	f042 0202 	orrlt.w	r2, r2, #2
 80090c8:	9307      	strge	r3, [sp, #28]
 80090ca:	9307      	strlt	r3, [sp, #28]
 80090cc:	bfb8      	it	lt
 80090ce:	9204      	strlt	r2, [sp, #16]
 80090d0:	7823      	ldrb	r3, [r4, #0]
 80090d2:	2b2e      	cmp	r3, #46	; 0x2e
 80090d4:	d10c      	bne.n	80090f0 <_svfiprintf_r+0x130>
 80090d6:	7863      	ldrb	r3, [r4, #1]
 80090d8:	2b2a      	cmp	r3, #42	; 0x2a
 80090da:	d135      	bne.n	8009148 <_svfiprintf_r+0x188>
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	1d1a      	adds	r2, r3, #4
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	9203      	str	r2, [sp, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfb8      	it	lt
 80090e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090ec:	3402      	adds	r4, #2
 80090ee:	9305      	str	r3, [sp, #20]
 80090f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091bc <_svfiprintf_r+0x1fc>
 80090f4:	7821      	ldrb	r1, [r4, #0]
 80090f6:	2203      	movs	r2, #3
 80090f8:	4650      	mov	r0, sl
 80090fa:	f7f7 f891 	bl	8000220 <memchr>
 80090fe:	b140      	cbz	r0, 8009112 <_svfiprintf_r+0x152>
 8009100:	2340      	movs	r3, #64	; 0x40
 8009102:	eba0 000a 	sub.w	r0, r0, sl
 8009106:	fa03 f000 	lsl.w	r0, r3, r0
 800910a:	9b04      	ldr	r3, [sp, #16]
 800910c:	4303      	orrs	r3, r0
 800910e:	3401      	adds	r4, #1
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009116:	4826      	ldr	r0, [pc, #152]	; (80091b0 <_svfiprintf_r+0x1f0>)
 8009118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800911c:	2206      	movs	r2, #6
 800911e:	f7f7 f87f 	bl	8000220 <memchr>
 8009122:	2800      	cmp	r0, #0
 8009124:	d038      	beq.n	8009198 <_svfiprintf_r+0x1d8>
 8009126:	4b23      	ldr	r3, [pc, #140]	; (80091b4 <_svfiprintf_r+0x1f4>)
 8009128:	bb1b      	cbnz	r3, 8009172 <_svfiprintf_r+0x1b2>
 800912a:	9b03      	ldr	r3, [sp, #12]
 800912c:	3307      	adds	r3, #7
 800912e:	f023 0307 	bic.w	r3, r3, #7
 8009132:	3308      	adds	r3, #8
 8009134:	9303      	str	r3, [sp, #12]
 8009136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009138:	4433      	add	r3, r6
 800913a:	9309      	str	r3, [sp, #36]	; 0x24
 800913c:	e767      	b.n	800900e <_svfiprintf_r+0x4e>
 800913e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009142:	460c      	mov	r4, r1
 8009144:	2001      	movs	r0, #1
 8009146:	e7a5      	b.n	8009094 <_svfiprintf_r+0xd4>
 8009148:	2300      	movs	r3, #0
 800914a:	3401      	adds	r4, #1
 800914c:	9305      	str	r3, [sp, #20]
 800914e:	4619      	mov	r1, r3
 8009150:	f04f 0c0a 	mov.w	ip, #10
 8009154:	4620      	mov	r0, r4
 8009156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800915a:	3a30      	subs	r2, #48	; 0x30
 800915c:	2a09      	cmp	r2, #9
 800915e:	d903      	bls.n	8009168 <_svfiprintf_r+0x1a8>
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0c5      	beq.n	80090f0 <_svfiprintf_r+0x130>
 8009164:	9105      	str	r1, [sp, #20]
 8009166:	e7c3      	b.n	80090f0 <_svfiprintf_r+0x130>
 8009168:	fb0c 2101 	mla	r1, ip, r1, r2
 800916c:	4604      	mov	r4, r0
 800916e:	2301      	movs	r3, #1
 8009170:	e7f0      	b.n	8009154 <_svfiprintf_r+0x194>
 8009172:	ab03      	add	r3, sp, #12
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	462a      	mov	r2, r5
 8009178:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <_svfiprintf_r+0x1f8>)
 800917a:	a904      	add	r1, sp, #16
 800917c:	4638      	mov	r0, r7
 800917e:	f7fd ffd7 	bl	8007130 <_printf_float>
 8009182:	1c42      	adds	r2, r0, #1
 8009184:	4606      	mov	r6, r0
 8009186:	d1d6      	bne.n	8009136 <_svfiprintf_r+0x176>
 8009188:	89ab      	ldrh	r3, [r5, #12]
 800918a:	065b      	lsls	r3, r3, #25
 800918c:	f53f af2c 	bmi.w	8008fe8 <_svfiprintf_r+0x28>
 8009190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009192:	b01d      	add	sp, #116	; 0x74
 8009194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009198:	ab03      	add	r3, sp, #12
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	462a      	mov	r2, r5
 800919e:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <_svfiprintf_r+0x1f8>)
 80091a0:	a904      	add	r1, sp, #16
 80091a2:	4638      	mov	r0, r7
 80091a4:	f7fe fa68 	bl	8007678 <_printf_i>
 80091a8:	e7eb      	b.n	8009182 <_svfiprintf_r+0x1c2>
 80091aa:	bf00      	nop
 80091ac:	0800a03c 	.word	0x0800a03c
 80091b0:	0800a046 	.word	0x0800a046
 80091b4:	08007131 	.word	0x08007131
 80091b8:	08008f09 	.word	0x08008f09
 80091bc:	0800a042 	.word	0x0800a042

080091c0 <_sbrk_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4d06      	ldr	r5, [pc, #24]	; (80091dc <_sbrk_r+0x1c>)
 80091c4:	2300      	movs	r3, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	602b      	str	r3, [r5, #0]
 80091cc:	f7f9 f81e 	bl	800220c <_sbrk>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_sbrk_r+0x1a>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_sbrk_r+0x1a>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	20000410 	.word	0x20000410

080091e0 <__assert_func>:
 80091e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091e2:	4614      	mov	r4, r2
 80091e4:	461a      	mov	r2, r3
 80091e6:	4b09      	ldr	r3, [pc, #36]	; (800920c <__assert_func+0x2c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4605      	mov	r5, r0
 80091ec:	68d8      	ldr	r0, [r3, #12]
 80091ee:	b14c      	cbz	r4, 8009204 <__assert_func+0x24>
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <__assert_func+0x30>)
 80091f2:	9100      	str	r1, [sp, #0]
 80091f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091f8:	4906      	ldr	r1, [pc, #24]	; (8009214 <__assert_func+0x34>)
 80091fa:	462b      	mov	r3, r5
 80091fc:	f000 f80e 	bl	800921c <fiprintf>
 8009200:	f000 faac 	bl	800975c <abort>
 8009204:	4b04      	ldr	r3, [pc, #16]	; (8009218 <__assert_func+0x38>)
 8009206:	461c      	mov	r4, r3
 8009208:	e7f3      	b.n	80091f2 <__assert_func+0x12>
 800920a:	bf00      	nop
 800920c:	2000000c 	.word	0x2000000c
 8009210:	0800a04d 	.word	0x0800a04d
 8009214:	0800a05a 	.word	0x0800a05a
 8009218:	0800a088 	.word	0x0800a088

0800921c <fiprintf>:
 800921c:	b40e      	push	{r1, r2, r3}
 800921e:	b503      	push	{r0, r1, lr}
 8009220:	4601      	mov	r1, r0
 8009222:	ab03      	add	r3, sp, #12
 8009224:	4805      	ldr	r0, [pc, #20]	; (800923c <fiprintf+0x20>)
 8009226:	f853 2b04 	ldr.w	r2, [r3], #4
 800922a:	6800      	ldr	r0, [r0, #0]
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	f000 f897 	bl	8009360 <_vfiprintf_r>
 8009232:	b002      	add	sp, #8
 8009234:	f85d eb04 	ldr.w	lr, [sp], #4
 8009238:	b003      	add	sp, #12
 800923a:	4770      	bx	lr
 800923c:	2000000c 	.word	0x2000000c

08009240 <__ascii_mbtowc>:
 8009240:	b082      	sub	sp, #8
 8009242:	b901      	cbnz	r1, 8009246 <__ascii_mbtowc+0x6>
 8009244:	a901      	add	r1, sp, #4
 8009246:	b142      	cbz	r2, 800925a <__ascii_mbtowc+0x1a>
 8009248:	b14b      	cbz	r3, 800925e <__ascii_mbtowc+0x1e>
 800924a:	7813      	ldrb	r3, [r2, #0]
 800924c:	600b      	str	r3, [r1, #0]
 800924e:	7812      	ldrb	r2, [r2, #0]
 8009250:	1e10      	subs	r0, r2, #0
 8009252:	bf18      	it	ne
 8009254:	2001      	movne	r0, #1
 8009256:	b002      	add	sp, #8
 8009258:	4770      	bx	lr
 800925a:	4610      	mov	r0, r2
 800925c:	e7fb      	b.n	8009256 <__ascii_mbtowc+0x16>
 800925e:	f06f 0001 	mvn.w	r0, #1
 8009262:	e7f8      	b.n	8009256 <__ascii_mbtowc+0x16>

08009264 <memmove>:
 8009264:	4288      	cmp	r0, r1
 8009266:	b510      	push	{r4, lr}
 8009268:	eb01 0402 	add.w	r4, r1, r2
 800926c:	d902      	bls.n	8009274 <memmove+0x10>
 800926e:	4284      	cmp	r4, r0
 8009270:	4623      	mov	r3, r4
 8009272:	d807      	bhi.n	8009284 <memmove+0x20>
 8009274:	1e43      	subs	r3, r0, #1
 8009276:	42a1      	cmp	r1, r4
 8009278:	d008      	beq.n	800928c <memmove+0x28>
 800927a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800927e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009282:	e7f8      	b.n	8009276 <memmove+0x12>
 8009284:	4402      	add	r2, r0
 8009286:	4601      	mov	r1, r0
 8009288:	428a      	cmp	r2, r1
 800928a:	d100      	bne.n	800928e <memmove+0x2a>
 800928c:	bd10      	pop	{r4, pc}
 800928e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009296:	e7f7      	b.n	8009288 <memmove+0x24>

08009298 <__malloc_lock>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__malloc_lock+0x8>)
 800929a:	f000 bc1f 	b.w	8009adc <__retarget_lock_acquire_recursive>
 800929e:	bf00      	nop
 80092a0:	20000414 	.word	0x20000414

080092a4 <__malloc_unlock>:
 80092a4:	4801      	ldr	r0, [pc, #4]	; (80092ac <__malloc_unlock+0x8>)
 80092a6:	f000 bc1a 	b.w	8009ade <__retarget_lock_release_recursive>
 80092aa:	bf00      	nop
 80092ac:	20000414 	.word	0x20000414

080092b0 <_realloc_r>:
 80092b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b4:	4680      	mov	r8, r0
 80092b6:	4614      	mov	r4, r2
 80092b8:	460e      	mov	r6, r1
 80092ba:	b921      	cbnz	r1, 80092c6 <_realloc_r+0x16>
 80092bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c0:	4611      	mov	r1, r2
 80092c2:	f7ff bdad 	b.w	8008e20 <_malloc_r>
 80092c6:	b92a      	cbnz	r2, 80092d4 <_realloc_r+0x24>
 80092c8:	f7ff fd3e 	bl	8008d48 <_free_r>
 80092cc:	4625      	mov	r5, r4
 80092ce:	4628      	mov	r0, r5
 80092d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d4:	f000 fc6a 	bl	8009bac <_malloc_usable_size_r>
 80092d8:	4284      	cmp	r4, r0
 80092da:	4607      	mov	r7, r0
 80092dc:	d802      	bhi.n	80092e4 <_realloc_r+0x34>
 80092de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092e2:	d812      	bhi.n	800930a <_realloc_r+0x5a>
 80092e4:	4621      	mov	r1, r4
 80092e6:	4640      	mov	r0, r8
 80092e8:	f7ff fd9a 	bl	8008e20 <_malloc_r>
 80092ec:	4605      	mov	r5, r0
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d0ed      	beq.n	80092ce <_realloc_r+0x1e>
 80092f2:	42bc      	cmp	r4, r7
 80092f4:	4622      	mov	r2, r4
 80092f6:	4631      	mov	r1, r6
 80092f8:	bf28      	it	cs
 80092fa:	463a      	movcs	r2, r7
 80092fc:	f7fd fe62 	bl	8006fc4 <memcpy>
 8009300:	4631      	mov	r1, r6
 8009302:	4640      	mov	r0, r8
 8009304:	f7ff fd20 	bl	8008d48 <_free_r>
 8009308:	e7e1      	b.n	80092ce <_realloc_r+0x1e>
 800930a:	4635      	mov	r5, r6
 800930c:	e7df      	b.n	80092ce <_realloc_r+0x1e>

0800930e <__sfputc_r>:
 800930e:	6893      	ldr	r3, [r2, #8]
 8009310:	3b01      	subs	r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	b410      	push	{r4}
 8009316:	6093      	str	r3, [r2, #8]
 8009318:	da08      	bge.n	800932c <__sfputc_r+0x1e>
 800931a:	6994      	ldr	r4, [r2, #24]
 800931c:	42a3      	cmp	r3, r4
 800931e:	db01      	blt.n	8009324 <__sfputc_r+0x16>
 8009320:	290a      	cmp	r1, #10
 8009322:	d103      	bne.n	800932c <__sfputc_r+0x1e>
 8009324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009328:	f000 b94a 	b.w	80095c0 <__swbuf_r>
 800932c:	6813      	ldr	r3, [r2, #0]
 800932e:	1c58      	adds	r0, r3, #1
 8009330:	6010      	str	r0, [r2, #0]
 8009332:	7019      	strb	r1, [r3, #0]
 8009334:	4608      	mov	r0, r1
 8009336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800933a:	4770      	bx	lr

0800933c <__sfputs_r>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	4606      	mov	r6, r0
 8009340:	460f      	mov	r7, r1
 8009342:	4614      	mov	r4, r2
 8009344:	18d5      	adds	r5, r2, r3
 8009346:	42ac      	cmp	r4, r5
 8009348:	d101      	bne.n	800934e <__sfputs_r+0x12>
 800934a:	2000      	movs	r0, #0
 800934c:	e007      	b.n	800935e <__sfputs_r+0x22>
 800934e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009352:	463a      	mov	r2, r7
 8009354:	4630      	mov	r0, r6
 8009356:	f7ff ffda 	bl	800930e <__sfputc_r>
 800935a:	1c43      	adds	r3, r0, #1
 800935c:	d1f3      	bne.n	8009346 <__sfputs_r+0xa>
 800935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009360 <_vfiprintf_r>:
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	460d      	mov	r5, r1
 8009366:	b09d      	sub	sp, #116	; 0x74
 8009368:	4614      	mov	r4, r2
 800936a:	4698      	mov	r8, r3
 800936c:	4606      	mov	r6, r0
 800936e:	b118      	cbz	r0, 8009378 <_vfiprintf_r+0x18>
 8009370:	6983      	ldr	r3, [r0, #24]
 8009372:	b90b      	cbnz	r3, 8009378 <_vfiprintf_r+0x18>
 8009374:	f000 fb14 	bl	80099a0 <__sinit>
 8009378:	4b89      	ldr	r3, [pc, #548]	; (80095a0 <_vfiprintf_r+0x240>)
 800937a:	429d      	cmp	r5, r3
 800937c:	d11b      	bne.n	80093b6 <_vfiprintf_r+0x56>
 800937e:	6875      	ldr	r5, [r6, #4]
 8009380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009382:	07d9      	lsls	r1, r3, #31
 8009384:	d405      	bmi.n	8009392 <_vfiprintf_r+0x32>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	059a      	lsls	r2, r3, #22
 800938a:	d402      	bmi.n	8009392 <_vfiprintf_r+0x32>
 800938c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800938e:	f000 fba5 	bl	8009adc <__retarget_lock_acquire_recursive>
 8009392:	89ab      	ldrh	r3, [r5, #12]
 8009394:	071b      	lsls	r3, r3, #28
 8009396:	d501      	bpl.n	800939c <_vfiprintf_r+0x3c>
 8009398:	692b      	ldr	r3, [r5, #16]
 800939a:	b9eb      	cbnz	r3, 80093d8 <_vfiprintf_r+0x78>
 800939c:	4629      	mov	r1, r5
 800939e:	4630      	mov	r0, r6
 80093a0:	f000 f96e 	bl	8009680 <__swsetup_r>
 80093a4:	b1c0      	cbz	r0, 80093d8 <_vfiprintf_r+0x78>
 80093a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093a8:	07dc      	lsls	r4, r3, #31
 80093aa:	d50e      	bpl.n	80093ca <_vfiprintf_r+0x6a>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093b0:	b01d      	add	sp, #116	; 0x74
 80093b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b6:	4b7b      	ldr	r3, [pc, #492]	; (80095a4 <_vfiprintf_r+0x244>)
 80093b8:	429d      	cmp	r5, r3
 80093ba:	d101      	bne.n	80093c0 <_vfiprintf_r+0x60>
 80093bc:	68b5      	ldr	r5, [r6, #8]
 80093be:	e7df      	b.n	8009380 <_vfiprintf_r+0x20>
 80093c0:	4b79      	ldr	r3, [pc, #484]	; (80095a8 <_vfiprintf_r+0x248>)
 80093c2:	429d      	cmp	r5, r3
 80093c4:	bf08      	it	eq
 80093c6:	68f5      	ldreq	r5, [r6, #12]
 80093c8:	e7da      	b.n	8009380 <_vfiprintf_r+0x20>
 80093ca:	89ab      	ldrh	r3, [r5, #12]
 80093cc:	0598      	lsls	r0, r3, #22
 80093ce:	d4ed      	bmi.n	80093ac <_vfiprintf_r+0x4c>
 80093d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093d2:	f000 fb84 	bl	8009ade <__retarget_lock_release_recursive>
 80093d6:	e7e9      	b.n	80093ac <_vfiprintf_r+0x4c>
 80093d8:	2300      	movs	r3, #0
 80093da:	9309      	str	r3, [sp, #36]	; 0x24
 80093dc:	2320      	movs	r3, #32
 80093de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093e6:	2330      	movs	r3, #48	; 0x30
 80093e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095ac <_vfiprintf_r+0x24c>
 80093ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093f0:	f04f 0901 	mov.w	r9, #1
 80093f4:	4623      	mov	r3, r4
 80093f6:	469a      	mov	sl, r3
 80093f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093fc:	b10a      	cbz	r2, 8009402 <_vfiprintf_r+0xa2>
 80093fe:	2a25      	cmp	r2, #37	; 0x25
 8009400:	d1f9      	bne.n	80093f6 <_vfiprintf_r+0x96>
 8009402:	ebba 0b04 	subs.w	fp, sl, r4
 8009406:	d00b      	beq.n	8009420 <_vfiprintf_r+0xc0>
 8009408:	465b      	mov	r3, fp
 800940a:	4622      	mov	r2, r4
 800940c:	4629      	mov	r1, r5
 800940e:	4630      	mov	r0, r6
 8009410:	f7ff ff94 	bl	800933c <__sfputs_r>
 8009414:	3001      	adds	r0, #1
 8009416:	f000 80aa 	beq.w	800956e <_vfiprintf_r+0x20e>
 800941a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800941c:	445a      	add	r2, fp
 800941e:	9209      	str	r2, [sp, #36]	; 0x24
 8009420:	f89a 3000 	ldrb.w	r3, [sl]
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 80a2 	beq.w	800956e <_vfiprintf_r+0x20e>
 800942a:	2300      	movs	r3, #0
 800942c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009434:	f10a 0a01 	add.w	sl, sl, #1
 8009438:	9304      	str	r3, [sp, #16]
 800943a:	9307      	str	r3, [sp, #28]
 800943c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009440:	931a      	str	r3, [sp, #104]	; 0x68
 8009442:	4654      	mov	r4, sl
 8009444:	2205      	movs	r2, #5
 8009446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944a:	4858      	ldr	r0, [pc, #352]	; (80095ac <_vfiprintf_r+0x24c>)
 800944c:	f7f6 fee8 	bl	8000220 <memchr>
 8009450:	9a04      	ldr	r2, [sp, #16]
 8009452:	b9d8      	cbnz	r0, 800948c <_vfiprintf_r+0x12c>
 8009454:	06d1      	lsls	r1, r2, #27
 8009456:	bf44      	itt	mi
 8009458:	2320      	movmi	r3, #32
 800945a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800945e:	0713      	lsls	r3, r2, #28
 8009460:	bf44      	itt	mi
 8009462:	232b      	movmi	r3, #43	; 0x2b
 8009464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009468:	f89a 3000 	ldrb.w	r3, [sl]
 800946c:	2b2a      	cmp	r3, #42	; 0x2a
 800946e:	d015      	beq.n	800949c <_vfiprintf_r+0x13c>
 8009470:	9a07      	ldr	r2, [sp, #28]
 8009472:	4654      	mov	r4, sl
 8009474:	2000      	movs	r0, #0
 8009476:	f04f 0c0a 	mov.w	ip, #10
 800947a:	4621      	mov	r1, r4
 800947c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009480:	3b30      	subs	r3, #48	; 0x30
 8009482:	2b09      	cmp	r3, #9
 8009484:	d94e      	bls.n	8009524 <_vfiprintf_r+0x1c4>
 8009486:	b1b0      	cbz	r0, 80094b6 <_vfiprintf_r+0x156>
 8009488:	9207      	str	r2, [sp, #28]
 800948a:	e014      	b.n	80094b6 <_vfiprintf_r+0x156>
 800948c:	eba0 0308 	sub.w	r3, r0, r8
 8009490:	fa09 f303 	lsl.w	r3, r9, r3
 8009494:	4313      	orrs	r3, r2
 8009496:	9304      	str	r3, [sp, #16]
 8009498:	46a2      	mov	sl, r4
 800949a:	e7d2      	b.n	8009442 <_vfiprintf_r+0xe2>
 800949c:	9b03      	ldr	r3, [sp, #12]
 800949e:	1d19      	adds	r1, r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	9103      	str	r1, [sp, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bfbb      	ittet	lt
 80094a8:	425b      	neglt	r3, r3
 80094aa:	f042 0202 	orrlt.w	r2, r2, #2
 80094ae:	9307      	strge	r3, [sp, #28]
 80094b0:	9307      	strlt	r3, [sp, #28]
 80094b2:	bfb8      	it	lt
 80094b4:	9204      	strlt	r2, [sp, #16]
 80094b6:	7823      	ldrb	r3, [r4, #0]
 80094b8:	2b2e      	cmp	r3, #46	; 0x2e
 80094ba:	d10c      	bne.n	80094d6 <_vfiprintf_r+0x176>
 80094bc:	7863      	ldrb	r3, [r4, #1]
 80094be:	2b2a      	cmp	r3, #42	; 0x2a
 80094c0:	d135      	bne.n	800952e <_vfiprintf_r+0x1ce>
 80094c2:	9b03      	ldr	r3, [sp, #12]
 80094c4:	1d1a      	adds	r2, r3, #4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	9203      	str	r2, [sp, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	bfb8      	it	lt
 80094ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094d2:	3402      	adds	r4, #2
 80094d4:	9305      	str	r3, [sp, #20]
 80094d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095bc <_vfiprintf_r+0x25c>
 80094da:	7821      	ldrb	r1, [r4, #0]
 80094dc:	2203      	movs	r2, #3
 80094de:	4650      	mov	r0, sl
 80094e0:	f7f6 fe9e 	bl	8000220 <memchr>
 80094e4:	b140      	cbz	r0, 80094f8 <_vfiprintf_r+0x198>
 80094e6:	2340      	movs	r3, #64	; 0x40
 80094e8:	eba0 000a 	sub.w	r0, r0, sl
 80094ec:	fa03 f000 	lsl.w	r0, r3, r0
 80094f0:	9b04      	ldr	r3, [sp, #16]
 80094f2:	4303      	orrs	r3, r0
 80094f4:	3401      	adds	r4, #1
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fc:	482c      	ldr	r0, [pc, #176]	; (80095b0 <_vfiprintf_r+0x250>)
 80094fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009502:	2206      	movs	r2, #6
 8009504:	f7f6 fe8c 	bl	8000220 <memchr>
 8009508:	2800      	cmp	r0, #0
 800950a:	d03f      	beq.n	800958c <_vfiprintf_r+0x22c>
 800950c:	4b29      	ldr	r3, [pc, #164]	; (80095b4 <_vfiprintf_r+0x254>)
 800950e:	bb1b      	cbnz	r3, 8009558 <_vfiprintf_r+0x1f8>
 8009510:	9b03      	ldr	r3, [sp, #12]
 8009512:	3307      	adds	r3, #7
 8009514:	f023 0307 	bic.w	r3, r3, #7
 8009518:	3308      	adds	r3, #8
 800951a:	9303      	str	r3, [sp, #12]
 800951c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951e:	443b      	add	r3, r7
 8009520:	9309      	str	r3, [sp, #36]	; 0x24
 8009522:	e767      	b.n	80093f4 <_vfiprintf_r+0x94>
 8009524:	fb0c 3202 	mla	r2, ip, r2, r3
 8009528:	460c      	mov	r4, r1
 800952a:	2001      	movs	r0, #1
 800952c:	e7a5      	b.n	800947a <_vfiprintf_r+0x11a>
 800952e:	2300      	movs	r3, #0
 8009530:	3401      	adds	r4, #1
 8009532:	9305      	str	r3, [sp, #20]
 8009534:	4619      	mov	r1, r3
 8009536:	f04f 0c0a 	mov.w	ip, #10
 800953a:	4620      	mov	r0, r4
 800953c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009540:	3a30      	subs	r2, #48	; 0x30
 8009542:	2a09      	cmp	r2, #9
 8009544:	d903      	bls.n	800954e <_vfiprintf_r+0x1ee>
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0c5      	beq.n	80094d6 <_vfiprintf_r+0x176>
 800954a:	9105      	str	r1, [sp, #20]
 800954c:	e7c3      	b.n	80094d6 <_vfiprintf_r+0x176>
 800954e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009552:	4604      	mov	r4, r0
 8009554:	2301      	movs	r3, #1
 8009556:	e7f0      	b.n	800953a <_vfiprintf_r+0x1da>
 8009558:	ab03      	add	r3, sp, #12
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	462a      	mov	r2, r5
 800955e:	4b16      	ldr	r3, [pc, #88]	; (80095b8 <_vfiprintf_r+0x258>)
 8009560:	a904      	add	r1, sp, #16
 8009562:	4630      	mov	r0, r6
 8009564:	f7fd fde4 	bl	8007130 <_printf_float>
 8009568:	4607      	mov	r7, r0
 800956a:	1c78      	adds	r0, r7, #1
 800956c:	d1d6      	bne.n	800951c <_vfiprintf_r+0x1bc>
 800956e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009570:	07d9      	lsls	r1, r3, #31
 8009572:	d405      	bmi.n	8009580 <_vfiprintf_r+0x220>
 8009574:	89ab      	ldrh	r3, [r5, #12]
 8009576:	059a      	lsls	r2, r3, #22
 8009578:	d402      	bmi.n	8009580 <_vfiprintf_r+0x220>
 800957a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800957c:	f000 faaf 	bl	8009ade <__retarget_lock_release_recursive>
 8009580:	89ab      	ldrh	r3, [r5, #12]
 8009582:	065b      	lsls	r3, r3, #25
 8009584:	f53f af12 	bmi.w	80093ac <_vfiprintf_r+0x4c>
 8009588:	9809      	ldr	r0, [sp, #36]	; 0x24
 800958a:	e711      	b.n	80093b0 <_vfiprintf_r+0x50>
 800958c:	ab03      	add	r3, sp, #12
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	462a      	mov	r2, r5
 8009592:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <_vfiprintf_r+0x258>)
 8009594:	a904      	add	r1, sp, #16
 8009596:	4630      	mov	r0, r6
 8009598:	f7fe f86e 	bl	8007678 <_printf_i>
 800959c:	e7e4      	b.n	8009568 <_vfiprintf_r+0x208>
 800959e:	bf00      	nop
 80095a0:	0800a1b4 	.word	0x0800a1b4
 80095a4:	0800a1d4 	.word	0x0800a1d4
 80095a8:	0800a194 	.word	0x0800a194
 80095ac:	0800a03c 	.word	0x0800a03c
 80095b0:	0800a046 	.word	0x0800a046
 80095b4:	08007131 	.word	0x08007131
 80095b8:	0800933d 	.word	0x0800933d
 80095bc:	0800a042 	.word	0x0800a042

080095c0 <__swbuf_r>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	460e      	mov	r6, r1
 80095c4:	4614      	mov	r4, r2
 80095c6:	4605      	mov	r5, r0
 80095c8:	b118      	cbz	r0, 80095d2 <__swbuf_r+0x12>
 80095ca:	6983      	ldr	r3, [r0, #24]
 80095cc:	b90b      	cbnz	r3, 80095d2 <__swbuf_r+0x12>
 80095ce:	f000 f9e7 	bl	80099a0 <__sinit>
 80095d2:	4b21      	ldr	r3, [pc, #132]	; (8009658 <__swbuf_r+0x98>)
 80095d4:	429c      	cmp	r4, r3
 80095d6:	d12b      	bne.n	8009630 <__swbuf_r+0x70>
 80095d8:	686c      	ldr	r4, [r5, #4]
 80095da:	69a3      	ldr	r3, [r4, #24]
 80095dc:	60a3      	str	r3, [r4, #8]
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	071a      	lsls	r2, r3, #28
 80095e2:	d52f      	bpl.n	8009644 <__swbuf_r+0x84>
 80095e4:	6923      	ldr	r3, [r4, #16]
 80095e6:	b36b      	cbz	r3, 8009644 <__swbuf_r+0x84>
 80095e8:	6923      	ldr	r3, [r4, #16]
 80095ea:	6820      	ldr	r0, [r4, #0]
 80095ec:	1ac0      	subs	r0, r0, r3
 80095ee:	6963      	ldr	r3, [r4, #20]
 80095f0:	b2f6      	uxtb	r6, r6
 80095f2:	4283      	cmp	r3, r0
 80095f4:	4637      	mov	r7, r6
 80095f6:	dc04      	bgt.n	8009602 <__swbuf_r+0x42>
 80095f8:	4621      	mov	r1, r4
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 f93c 	bl	8009878 <_fflush_r>
 8009600:	bb30      	cbnz	r0, 8009650 <__swbuf_r+0x90>
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	3b01      	subs	r3, #1
 8009606:	60a3      	str	r3, [r4, #8]
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	6022      	str	r2, [r4, #0]
 800960e:	701e      	strb	r6, [r3, #0]
 8009610:	6963      	ldr	r3, [r4, #20]
 8009612:	3001      	adds	r0, #1
 8009614:	4283      	cmp	r3, r0
 8009616:	d004      	beq.n	8009622 <__swbuf_r+0x62>
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	07db      	lsls	r3, r3, #31
 800961c:	d506      	bpl.n	800962c <__swbuf_r+0x6c>
 800961e:	2e0a      	cmp	r6, #10
 8009620:	d104      	bne.n	800962c <__swbuf_r+0x6c>
 8009622:	4621      	mov	r1, r4
 8009624:	4628      	mov	r0, r5
 8009626:	f000 f927 	bl	8009878 <_fflush_r>
 800962a:	b988      	cbnz	r0, 8009650 <__swbuf_r+0x90>
 800962c:	4638      	mov	r0, r7
 800962e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009630:	4b0a      	ldr	r3, [pc, #40]	; (800965c <__swbuf_r+0x9c>)
 8009632:	429c      	cmp	r4, r3
 8009634:	d101      	bne.n	800963a <__swbuf_r+0x7a>
 8009636:	68ac      	ldr	r4, [r5, #8]
 8009638:	e7cf      	b.n	80095da <__swbuf_r+0x1a>
 800963a:	4b09      	ldr	r3, [pc, #36]	; (8009660 <__swbuf_r+0xa0>)
 800963c:	429c      	cmp	r4, r3
 800963e:	bf08      	it	eq
 8009640:	68ec      	ldreq	r4, [r5, #12]
 8009642:	e7ca      	b.n	80095da <__swbuf_r+0x1a>
 8009644:	4621      	mov	r1, r4
 8009646:	4628      	mov	r0, r5
 8009648:	f000 f81a 	bl	8009680 <__swsetup_r>
 800964c:	2800      	cmp	r0, #0
 800964e:	d0cb      	beq.n	80095e8 <__swbuf_r+0x28>
 8009650:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009654:	e7ea      	b.n	800962c <__swbuf_r+0x6c>
 8009656:	bf00      	nop
 8009658:	0800a1b4 	.word	0x0800a1b4
 800965c:	0800a1d4 	.word	0x0800a1d4
 8009660:	0800a194 	.word	0x0800a194

08009664 <__ascii_wctomb>:
 8009664:	b149      	cbz	r1, 800967a <__ascii_wctomb+0x16>
 8009666:	2aff      	cmp	r2, #255	; 0xff
 8009668:	bf85      	ittet	hi
 800966a:	238a      	movhi	r3, #138	; 0x8a
 800966c:	6003      	strhi	r3, [r0, #0]
 800966e:	700a      	strbls	r2, [r1, #0]
 8009670:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009674:	bf98      	it	ls
 8009676:	2001      	movls	r0, #1
 8009678:	4770      	bx	lr
 800967a:	4608      	mov	r0, r1
 800967c:	4770      	bx	lr
	...

08009680 <__swsetup_r>:
 8009680:	4b32      	ldr	r3, [pc, #200]	; (800974c <__swsetup_r+0xcc>)
 8009682:	b570      	push	{r4, r5, r6, lr}
 8009684:	681d      	ldr	r5, [r3, #0]
 8009686:	4606      	mov	r6, r0
 8009688:	460c      	mov	r4, r1
 800968a:	b125      	cbz	r5, 8009696 <__swsetup_r+0x16>
 800968c:	69ab      	ldr	r3, [r5, #24]
 800968e:	b913      	cbnz	r3, 8009696 <__swsetup_r+0x16>
 8009690:	4628      	mov	r0, r5
 8009692:	f000 f985 	bl	80099a0 <__sinit>
 8009696:	4b2e      	ldr	r3, [pc, #184]	; (8009750 <__swsetup_r+0xd0>)
 8009698:	429c      	cmp	r4, r3
 800969a:	d10f      	bne.n	80096bc <__swsetup_r+0x3c>
 800969c:	686c      	ldr	r4, [r5, #4]
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096a4:	0719      	lsls	r1, r3, #28
 80096a6:	d42c      	bmi.n	8009702 <__swsetup_r+0x82>
 80096a8:	06dd      	lsls	r5, r3, #27
 80096aa:	d411      	bmi.n	80096d0 <__swsetup_r+0x50>
 80096ac:	2309      	movs	r3, #9
 80096ae:	6033      	str	r3, [r6, #0]
 80096b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096ba:	e03e      	b.n	800973a <__swsetup_r+0xba>
 80096bc:	4b25      	ldr	r3, [pc, #148]	; (8009754 <__swsetup_r+0xd4>)
 80096be:	429c      	cmp	r4, r3
 80096c0:	d101      	bne.n	80096c6 <__swsetup_r+0x46>
 80096c2:	68ac      	ldr	r4, [r5, #8]
 80096c4:	e7eb      	b.n	800969e <__swsetup_r+0x1e>
 80096c6:	4b24      	ldr	r3, [pc, #144]	; (8009758 <__swsetup_r+0xd8>)
 80096c8:	429c      	cmp	r4, r3
 80096ca:	bf08      	it	eq
 80096cc:	68ec      	ldreq	r4, [r5, #12]
 80096ce:	e7e6      	b.n	800969e <__swsetup_r+0x1e>
 80096d0:	0758      	lsls	r0, r3, #29
 80096d2:	d512      	bpl.n	80096fa <__swsetup_r+0x7a>
 80096d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096d6:	b141      	cbz	r1, 80096ea <__swsetup_r+0x6a>
 80096d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096dc:	4299      	cmp	r1, r3
 80096de:	d002      	beq.n	80096e6 <__swsetup_r+0x66>
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff fb31 	bl	8008d48 <_free_r>
 80096e6:	2300      	movs	r3, #0
 80096e8:	6363      	str	r3, [r4, #52]	; 0x34
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096f0:	81a3      	strh	r3, [r4, #12]
 80096f2:	2300      	movs	r3, #0
 80096f4:	6063      	str	r3, [r4, #4]
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f043 0308 	orr.w	r3, r3, #8
 8009700:	81a3      	strh	r3, [r4, #12]
 8009702:	6923      	ldr	r3, [r4, #16]
 8009704:	b94b      	cbnz	r3, 800971a <__swsetup_r+0x9a>
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800970c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009710:	d003      	beq.n	800971a <__swsetup_r+0x9a>
 8009712:	4621      	mov	r1, r4
 8009714:	4630      	mov	r0, r6
 8009716:	f000 fa09 	bl	8009b2c <__smakebuf_r>
 800971a:	89a0      	ldrh	r0, [r4, #12]
 800971c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009720:	f010 0301 	ands.w	r3, r0, #1
 8009724:	d00a      	beq.n	800973c <__swsetup_r+0xbc>
 8009726:	2300      	movs	r3, #0
 8009728:	60a3      	str	r3, [r4, #8]
 800972a:	6963      	ldr	r3, [r4, #20]
 800972c:	425b      	negs	r3, r3
 800972e:	61a3      	str	r3, [r4, #24]
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	b943      	cbnz	r3, 8009746 <__swsetup_r+0xc6>
 8009734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009738:	d1ba      	bne.n	80096b0 <__swsetup_r+0x30>
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	0781      	lsls	r1, r0, #30
 800973e:	bf58      	it	pl
 8009740:	6963      	ldrpl	r3, [r4, #20]
 8009742:	60a3      	str	r3, [r4, #8]
 8009744:	e7f4      	b.n	8009730 <__swsetup_r+0xb0>
 8009746:	2000      	movs	r0, #0
 8009748:	e7f7      	b.n	800973a <__swsetup_r+0xba>
 800974a:	bf00      	nop
 800974c:	2000000c 	.word	0x2000000c
 8009750:	0800a1b4 	.word	0x0800a1b4
 8009754:	0800a1d4 	.word	0x0800a1d4
 8009758:	0800a194 	.word	0x0800a194

0800975c <abort>:
 800975c:	b508      	push	{r3, lr}
 800975e:	2006      	movs	r0, #6
 8009760:	f000 fa54 	bl	8009c0c <raise>
 8009764:	2001      	movs	r0, #1
 8009766:	f7f8 fcd9 	bl	800211c <_exit>
	...

0800976c <__sflush_r>:
 800976c:	898a      	ldrh	r2, [r1, #12]
 800976e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009772:	4605      	mov	r5, r0
 8009774:	0710      	lsls	r0, r2, #28
 8009776:	460c      	mov	r4, r1
 8009778:	d458      	bmi.n	800982c <__sflush_r+0xc0>
 800977a:	684b      	ldr	r3, [r1, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	dc05      	bgt.n	800978c <__sflush_r+0x20>
 8009780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009782:	2b00      	cmp	r3, #0
 8009784:	dc02      	bgt.n	800978c <__sflush_r+0x20>
 8009786:	2000      	movs	r0, #0
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800978e:	2e00      	cmp	r6, #0
 8009790:	d0f9      	beq.n	8009786 <__sflush_r+0x1a>
 8009792:	2300      	movs	r3, #0
 8009794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009798:	682f      	ldr	r7, [r5, #0]
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	d032      	beq.n	8009804 <__sflush_r+0x98>
 800979e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	075a      	lsls	r2, r3, #29
 80097a4:	d505      	bpl.n	80097b2 <__sflush_r+0x46>
 80097a6:	6863      	ldr	r3, [r4, #4]
 80097a8:	1ac0      	subs	r0, r0, r3
 80097aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097ac:	b10b      	cbz	r3, 80097b2 <__sflush_r+0x46>
 80097ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097b0:	1ac0      	subs	r0, r0, r3
 80097b2:	2300      	movs	r3, #0
 80097b4:	4602      	mov	r2, r0
 80097b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097b8:	6a21      	ldr	r1, [r4, #32]
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b0      	blx	r6
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	d106      	bne.n	80097d2 <__sflush_r+0x66>
 80097c4:	6829      	ldr	r1, [r5, #0]
 80097c6:	291d      	cmp	r1, #29
 80097c8:	d82c      	bhi.n	8009824 <__sflush_r+0xb8>
 80097ca:	4a2a      	ldr	r2, [pc, #168]	; (8009874 <__sflush_r+0x108>)
 80097cc:	40ca      	lsrs	r2, r1
 80097ce:	07d6      	lsls	r6, r2, #31
 80097d0:	d528      	bpl.n	8009824 <__sflush_r+0xb8>
 80097d2:	2200      	movs	r2, #0
 80097d4:	6062      	str	r2, [r4, #4]
 80097d6:	04d9      	lsls	r1, r3, #19
 80097d8:	6922      	ldr	r2, [r4, #16]
 80097da:	6022      	str	r2, [r4, #0]
 80097dc:	d504      	bpl.n	80097e8 <__sflush_r+0x7c>
 80097de:	1c42      	adds	r2, r0, #1
 80097e0:	d101      	bne.n	80097e6 <__sflush_r+0x7a>
 80097e2:	682b      	ldr	r3, [r5, #0]
 80097e4:	b903      	cbnz	r3, 80097e8 <__sflush_r+0x7c>
 80097e6:	6560      	str	r0, [r4, #84]	; 0x54
 80097e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ea:	602f      	str	r7, [r5, #0]
 80097ec:	2900      	cmp	r1, #0
 80097ee:	d0ca      	beq.n	8009786 <__sflush_r+0x1a>
 80097f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097f4:	4299      	cmp	r1, r3
 80097f6:	d002      	beq.n	80097fe <__sflush_r+0x92>
 80097f8:	4628      	mov	r0, r5
 80097fa:	f7ff faa5 	bl	8008d48 <_free_r>
 80097fe:	2000      	movs	r0, #0
 8009800:	6360      	str	r0, [r4, #52]	; 0x34
 8009802:	e7c1      	b.n	8009788 <__sflush_r+0x1c>
 8009804:	6a21      	ldr	r1, [r4, #32]
 8009806:	2301      	movs	r3, #1
 8009808:	4628      	mov	r0, r5
 800980a:	47b0      	blx	r6
 800980c:	1c41      	adds	r1, r0, #1
 800980e:	d1c7      	bne.n	80097a0 <__sflush_r+0x34>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0c4      	beq.n	80097a0 <__sflush_r+0x34>
 8009816:	2b1d      	cmp	r3, #29
 8009818:	d001      	beq.n	800981e <__sflush_r+0xb2>
 800981a:	2b16      	cmp	r3, #22
 800981c:	d101      	bne.n	8009822 <__sflush_r+0xb6>
 800981e:	602f      	str	r7, [r5, #0]
 8009820:	e7b1      	b.n	8009786 <__sflush_r+0x1a>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009828:	81a3      	strh	r3, [r4, #12]
 800982a:	e7ad      	b.n	8009788 <__sflush_r+0x1c>
 800982c:	690f      	ldr	r7, [r1, #16]
 800982e:	2f00      	cmp	r7, #0
 8009830:	d0a9      	beq.n	8009786 <__sflush_r+0x1a>
 8009832:	0793      	lsls	r3, r2, #30
 8009834:	680e      	ldr	r6, [r1, #0]
 8009836:	bf08      	it	eq
 8009838:	694b      	ldreq	r3, [r1, #20]
 800983a:	600f      	str	r7, [r1, #0]
 800983c:	bf18      	it	ne
 800983e:	2300      	movne	r3, #0
 8009840:	eba6 0807 	sub.w	r8, r6, r7
 8009844:	608b      	str	r3, [r1, #8]
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	dd9c      	ble.n	8009786 <__sflush_r+0x1a>
 800984c:	6a21      	ldr	r1, [r4, #32]
 800984e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009850:	4643      	mov	r3, r8
 8009852:	463a      	mov	r2, r7
 8009854:	4628      	mov	r0, r5
 8009856:	47b0      	blx	r6
 8009858:	2800      	cmp	r0, #0
 800985a:	dc06      	bgt.n	800986a <__sflush_r+0xfe>
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009868:	e78e      	b.n	8009788 <__sflush_r+0x1c>
 800986a:	4407      	add	r7, r0
 800986c:	eba8 0800 	sub.w	r8, r8, r0
 8009870:	e7e9      	b.n	8009846 <__sflush_r+0xda>
 8009872:	bf00      	nop
 8009874:	20400001 	.word	0x20400001

08009878 <_fflush_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	690b      	ldr	r3, [r1, #16]
 800987c:	4605      	mov	r5, r0
 800987e:	460c      	mov	r4, r1
 8009880:	b913      	cbnz	r3, 8009888 <_fflush_r+0x10>
 8009882:	2500      	movs	r5, #0
 8009884:	4628      	mov	r0, r5
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	b118      	cbz	r0, 8009892 <_fflush_r+0x1a>
 800988a:	6983      	ldr	r3, [r0, #24]
 800988c:	b90b      	cbnz	r3, 8009892 <_fflush_r+0x1a>
 800988e:	f000 f887 	bl	80099a0 <__sinit>
 8009892:	4b14      	ldr	r3, [pc, #80]	; (80098e4 <_fflush_r+0x6c>)
 8009894:	429c      	cmp	r4, r3
 8009896:	d11b      	bne.n	80098d0 <_fflush_r+0x58>
 8009898:	686c      	ldr	r4, [r5, #4]
 800989a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0ef      	beq.n	8009882 <_fflush_r+0xa>
 80098a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098a4:	07d0      	lsls	r0, r2, #31
 80098a6:	d404      	bmi.n	80098b2 <_fflush_r+0x3a>
 80098a8:	0599      	lsls	r1, r3, #22
 80098aa:	d402      	bmi.n	80098b2 <_fflush_r+0x3a>
 80098ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ae:	f000 f915 	bl	8009adc <__retarget_lock_acquire_recursive>
 80098b2:	4628      	mov	r0, r5
 80098b4:	4621      	mov	r1, r4
 80098b6:	f7ff ff59 	bl	800976c <__sflush_r>
 80098ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098bc:	07da      	lsls	r2, r3, #31
 80098be:	4605      	mov	r5, r0
 80098c0:	d4e0      	bmi.n	8009884 <_fflush_r+0xc>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	059b      	lsls	r3, r3, #22
 80098c6:	d4dd      	bmi.n	8009884 <_fflush_r+0xc>
 80098c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ca:	f000 f908 	bl	8009ade <__retarget_lock_release_recursive>
 80098ce:	e7d9      	b.n	8009884 <_fflush_r+0xc>
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <_fflush_r+0x70>)
 80098d2:	429c      	cmp	r4, r3
 80098d4:	d101      	bne.n	80098da <_fflush_r+0x62>
 80098d6:	68ac      	ldr	r4, [r5, #8]
 80098d8:	e7df      	b.n	800989a <_fflush_r+0x22>
 80098da:	4b04      	ldr	r3, [pc, #16]	; (80098ec <_fflush_r+0x74>)
 80098dc:	429c      	cmp	r4, r3
 80098de:	bf08      	it	eq
 80098e0:	68ec      	ldreq	r4, [r5, #12]
 80098e2:	e7da      	b.n	800989a <_fflush_r+0x22>
 80098e4:	0800a1b4 	.word	0x0800a1b4
 80098e8:	0800a1d4 	.word	0x0800a1d4
 80098ec:	0800a194 	.word	0x0800a194

080098f0 <std>:
 80098f0:	2300      	movs	r3, #0
 80098f2:	b510      	push	{r4, lr}
 80098f4:	4604      	mov	r4, r0
 80098f6:	e9c0 3300 	strd	r3, r3, [r0]
 80098fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098fe:	6083      	str	r3, [r0, #8]
 8009900:	8181      	strh	r1, [r0, #12]
 8009902:	6643      	str	r3, [r0, #100]	; 0x64
 8009904:	81c2      	strh	r2, [r0, #14]
 8009906:	6183      	str	r3, [r0, #24]
 8009908:	4619      	mov	r1, r3
 800990a:	2208      	movs	r2, #8
 800990c:	305c      	adds	r0, #92	; 0x5c
 800990e:	f7fd fb67 	bl	8006fe0 <memset>
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <std+0x38>)
 8009914:	6263      	str	r3, [r4, #36]	; 0x24
 8009916:	4b05      	ldr	r3, [pc, #20]	; (800992c <std+0x3c>)
 8009918:	62a3      	str	r3, [r4, #40]	; 0x28
 800991a:	4b05      	ldr	r3, [pc, #20]	; (8009930 <std+0x40>)
 800991c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800991e:	4b05      	ldr	r3, [pc, #20]	; (8009934 <std+0x44>)
 8009920:	6224      	str	r4, [r4, #32]
 8009922:	6323      	str	r3, [r4, #48]	; 0x30
 8009924:	bd10      	pop	{r4, pc}
 8009926:	bf00      	nop
 8009928:	08009c45 	.word	0x08009c45
 800992c:	08009c67 	.word	0x08009c67
 8009930:	08009c9f 	.word	0x08009c9f
 8009934:	08009cc3 	.word	0x08009cc3

08009938 <_cleanup_r>:
 8009938:	4901      	ldr	r1, [pc, #4]	; (8009940 <_cleanup_r+0x8>)
 800993a:	f000 b8af 	b.w	8009a9c <_fwalk_reent>
 800993e:	bf00      	nop
 8009940:	08009879 	.word	0x08009879

08009944 <__sfmoreglue>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	2268      	movs	r2, #104	; 0x68
 8009948:	1e4d      	subs	r5, r1, #1
 800994a:	4355      	muls	r5, r2
 800994c:	460e      	mov	r6, r1
 800994e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009952:	f7ff fa65 	bl	8008e20 <_malloc_r>
 8009956:	4604      	mov	r4, r0
 8009958:	b140      	cbz	r0, 800996c <__sfmoreglue+0x28>
 800995a:	2100      	movs	r1, #0
 800995c:	e9c0 1600 	strd	r1, r6, [r0]
 8009960:	300c      	adds	r0, #12
 8009962:	60a0      	str	r0, [r4, #8]
 8009964:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009968:	f7fd fb3a 	bl	8006fe0 <memset>
 800996c:	4620      	mov	r0, r4
 800996e:	bd70      	pop	{r4, r5, r6, pc}

08009970 <__sfp_lock_acquire>:
 8009970:	4801      	ldr	r0, [pc, #4]	; (8009978 <__sfp_lock_acquire+0x8>)
 8009972:	f000 b8b3 	b.w	8009adc <__retarget_lock_acquire_recursive>
 8009976:	bf00      	nop
 8009978:	20000415 	.word	0x20000415

0800997c <__sfp_lock_release>:
 800997c:	4801      	ldr	r0, [pc, #4]	; (8009984 <__sfp_lock_release+0x8>)
 800997e:	f000 b8ae 	b.w	8009ade <__retarget_lock_release_recursive>
 8009982:	bf00      	nop
 8009984:	20000415 	.word	0x20000415

08009988 <__sinit_lock_acquire>:
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <__sinit_lock_acquire+0x8>)
 800998a:	f000 b8a7 	b.w	8009adc <__retarget_lock_acquire_recursive>
 800998e:	bf00      	nop
 8009990:	20000416 	.word	0x20000416

08009994 <__sinit_lock_release>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__sinit_lock_release+0x8>)
 8009996:	f000 b8a2 	b.w	8009ade <__retarget_lock_release_recursive>
 800999a:	bf00      	nop
 800999c:	20000416 	.word	0x20000416

080099a0 <__sinit>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	4604      	mov	r4, r0
 80099a4:	f7ff fff0 	bl	8009988 <__sinit_lock_acquire>
 80099a8:	69a3      	ldr	r3, [r4, #24]
 80099aa:	b11b      	cbz	r3, 80099b4 <__sinit+0x14>
 80099ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b0:	f7ff bff0 	b.w	8009994 <__sinit_lock_release>
 80099b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099b8:	6523      	str	r3, [r4, #80]	; 0x50
 80099ba:	4b13      	ldr	r3, [pc, #76]	; (8009a08 <__sinit+0x68>)
 80099bc:	4a13      	ldr	r2, [pc, #76]	; (8009a0c <__sinit+0x6c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80099c2:	42a3      	cmp	r3, r4
 80099c4:	bf04      	itt	eq
 80099c6:	2301      	moveq	r3, #1
 80099c8:	61a3      	streq	r3, [r4, #24]
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 f820 	bl	8009a10 <__sfp>
 80099d0:	6060      	str	r0, [r4, #4]
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 f81c 	bl	8009a10 <__sfp>
 80099d8:	60a0      	str	r0, [r4, #8]
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 f818 	bl	8009a10 <__sfp>
 80099e0:	2200      	movs	r2, #0
 80099e2:	60e0      	str	r0, [r4, #12]
 80099e4:	2104      	movs	r1, #4
 80099e6:	6860      	ldr	r0, [r4, #4]
 80099e8:	f7ff ff82 	bl	80098f0 <std>
 80099ec:	68a0      	ldr	r0, [r4, #8]
 80099ee:	2201      	movs	r2, #1
 80099f0:	2109      	movs	r1, #9
 80099f2:	f7ff ff7d 	bl	80098f0 <std>
 80099f6:	68e0      	ldr	r0, [r4, #12]
 80099f8:	2202      	movs	r2, #2
 80099fa:	2112      	movs	r1, #18
 80099fc:	f7ff ff78 	bl	80098f0 <std>
 8009a00:	2301      	movs	r3, #1
 8009a02:	61a3      	str	r3, [r4, #24]
 8009a04:	e7d2      	b.n	80099ac <__sinit+0xc>
 8009a06:	bf00      	nop
 8009a08:	08009e1c 	.word	0x08009e1c
 8009a0c:	08009939 	.word	0x08009939

08009a10 <__sfp>:
 8009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a12:	4607      	mov	r7, r0
 8009a14:	f7ff ffac 	bl	8009970 <__sfp_lock_acquire>
 8009a18:	4b1e      	ldr	r3, [pc, #120]	; (8009a94 <__sfp+0x84>)
 8009a1a:	681e      	ldr	r6, [r3, #0]
 8009a1c:	69b3      	ldr	r3, [r6, #24]
 8009a1e:	b913      	cbnz	r3, 8009a26 <__sfp+0x16>
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7ff ffbd 	bl	80099a0 <__sinit>
 8009a26:	3648      	adds	r6, #72	; 0x48
 8009a28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	d503      	bpl.n	8009a38 <__sfp+0x28>
 8009a30:	6833      	ldr	r3, [r6, #0]
 8009a32:	b30b      	cbz	r3, 8009a78 <__sfp+0x68>
 8009a34:	6836      	ldr	r6, [r6, #0]
 8009a36:	e7f7      	b.n	8009a28 <__sfp+0x18>
 8009a38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a3c:	b9d5      	cbnz	r5, 8009a74 <__sfp+0x64>
 8009a3e:	4b16      	ldr	r3, [pc, #88]	; (8009a98 <__sfp+0x88>)
 8009a40:	60e3      	str	r3, [r4, #12]
 8009a42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a46:	6665      	str	r5, [r4, #100]	; 0x64
 8009a48:	f000 f847 	bl	8009ada <__retarget_lock_init_recursive>
 8009a4c:	f7ff ff96 	bl	800997c <__sfp_lock_release>
 8009a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a58:	6025      	str	r5, [r4, #0]
 8009a5a:	61a5      	str	r5, [r4, #24]
 8009a5c:	2208      	movs	r2, #8
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a64:	f7fd fabc 	bl	8006fe0 <memset>
 8009a68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a70:	4620      	mov	r0, r4
 8009a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a74:	3468      	adds	r4, #104	; 0x68
 8009a76:	e7d9      	b.n	8009a2c <__sfp+0x1c>
 8009a78:	2104      	movs	r1, #4
 8009a7a:	4638      	mov	r0, r7
 8009a7c:	f7ff ff62 	bl	8009944 <__sfmoreglue>
 8009a80:	4604      	mov	r4, r0
 8009a82:	6030      	str	r0, [r6, #0]
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d1d5      	bne.n	8009a34 <__sfp+0x24>
 8009a88:	f7ff ff78 	bl	800997c <__sfp_lock_release>
 8009a8c:	230c      	movs	r3, #12
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	e7ee      	b.n	8009a70 <__sfp+0x60>
 8009a92:	bf00      	nop
 8009a94:	08009e1c 	.word	0x08009e1c
 8009a98:	ffff0001 	.word	0xffff0001

08009a9c <_fwalk_reent>:
 8009a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	4688      	mov	r8, r1
 8009aa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009aa8:	2700      	movs	r7, #0
 8009aaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aae:	f1b9 0901 	subs.w	r9, r9, #1
 8009ab2:	d505      	bpl.n	8009ac0 <_fwalk_reent+0x24>
 8009ab4:	6824      	ldr	r4, [r4, #0]
 8009ab6:	2c00      	cmp	r4, #0
 8009ab8:	d1f7      	bne.n	8009aaa <_fwalk_reent+0xe>
 8009aba:	4638      	mov	r0, r7
 8009abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac0:	89ab      	ldrh	r3, [r5, #12]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d907      	bls.n	8009ad6 <_fwalk_reent+0x3a>
 8009ac6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009aca:	3301      	adds	r3, #1
 8009acc:	d003      	beq.n	8009ad6 <_fwalk_reent+0x3a>
 8009ace:	4629      	mov	r1, r5
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	47c0      	blx	r8
 8009ad4:	4307      	orrs	r7, r0
 8009ad6:	3568      	adds	r5, #104	; 0x68
 8009ad8:	e7e9      	b.n	8009aae <_fwalk_reent+0x12>

08009ada <__retarget_lock_init_recursive>:
 8009ada:	4770      	bx	lr

08009adc <__retarget_lock_acquire_recursive>:
 8009adc:	4770      	bx	lr

08009ade <__retarget_lock_release_recursive>:
 8009ade:	4770      	bx	lr

08009ae0 <__swhatbuf_r>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	460e      	mov	r6, r1
 8009ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	b096      	sub	sp, #88	; 0x58
 8009aec:	4614      	mov	r4, r2
 8009aee:	461d      	mov	r5, r3
 8009af0:	da08      	bge.n	8009b04 <__swhatbuf_r+0x24>
 8009af2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	602a      	str	r2, [r5, #0]
 8009afa:	061a      	lsls	r2, r3, #24
 8009afc:	d410      	bmi.n	8009b20 <__swhatbuf_r+0x40>
 8009afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b02:	e00e      	b.n	8009b22 <__swhatbuf_r+0x42>
 8009b04:	466a      	mov	r2, sp
 8009b06:	f000 f903 	bl	8009d10 <_fstat_r>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	dbf1      	blt.n	8009af2 <__swhatbuf_r+0x12>
 8009b0e:	9a01      	ldr	r2, [sp, #4]
 8009b10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b18:	425a      	negs	r2, r3
 8009b1a:	415a      	adcs	r2, r3
 8009b1c:	602a      	str	r2, [r5, #0]
 8009b1e:	e7ee      	b.n	8009afe <__swhatbuf_r+0x1e>
 8009b20:	2340      	movs	r3, #64	; 0x40
 8009b22:	2000      	movs	r0, #0
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	b016      	add	sp, #88	; 0x58
 8009b28:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b2c <__smakebuf_r>:
 8009b2c:	898b      	ldrh	r3, [r1, #12]
 8009b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b30:	079d      	lsls	r5, r3, #30
 8009b32:	4606      	mov	r6, r0
 8009b34:	460c      	mov	r4, r1
 8009b36:	d507      	bpl.n	8009b48 <__smakebuf_r+0x1c>
 8009b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	2301      	movs	r3, #1
 8009b42:	6163      	str	r3, [r4, #20]
 8009b44:	b002      	add	sp, #8
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	ab01      	add	r3, sp, #4
 8009b4a:	466a      	mov	r2, sp
 8009b4c:	f7ff ffc8 	bl	8009ae0 <__swhatbuf_r>
 8009b50:	9900      	ldr	r1, [sp, #0]
 8009b52:	4605      	mov	r5, r0
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff f963 	bl	8008e20 <_malloc_r>
 8009b5a:	b948      	cbnz	r0, 8009b70 <__smakebuf_r+0x44>
 8009b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b60:	059a      	lsls	r2, r3, #22
 8009b62:	d4ef      	bmi.n	8009b44 <__smakebuf_r+0x18>
 8009b64:	f023 0303 	bic.w	r3, r3, #3
 8009b68:	f043 0302 	orr.w	r3, r3, #2
 8009b6c:	81a3      	strh	r3, [r4, #12]
 8009b6e:	e7e3      	b.n	8009b38 <__smakebuf_r+0xc>
 8009b70:	4b0d      	ldr	r3, [pc, #52]	; (8009ba8 <__smakebuf_r+0x7c>)
 8009b72:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	6020      	str	r0, [r4, #0]
 8009b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	9b00      	ldr	r3, [sp, #0]
 8009b80:	6163      	str	r3, [r4, #20]
 8009b82:	9b01      	ldr	r3, [sp, #4]
 8009b84:	6120      	str	r0, [r4, #16]
 8009b86:	b15b      	cbz	r3, 8009ba0 <__smakebuf_r+0x74>
 8009b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 f8d1 	bl	8009d34 <_isatty_r>
 8009b92:	b128      	cbz	r0, 8009ba0 <__smakebuf_r+0x74>
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f023 0303 	bic.w	r3, r3, #3
 8009b9a:	f043 0301 	orr.w	r3, r3, #1
 8009b9e:	81a3      	strh	r3, [r4, #12]
 8009ba0:	89a0      	ldrh	r0, [r4, #12]
 8009ba2:	4305      	orrs	r5, r0
 8009ba4:	81a5      	strh	r5, [r4, #12]
 8009ba6:	e7cd      	b.n	8009b44 <__smakebuf_r+0x18>
 8009ba8:	08009939 	.word	0x08009939

08009bac <_malloc_usable_size_r>:
 8009bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bb0:	1f18      	subs	r0, r3, #4
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	bfbc      	itt	lt
 8009bb6:	580b      	ldrlt	r3, [r1, r0]
 8009bb8:	18c0      	addlt	r0, r0, r3
 8009bba:	4770      	bx	lr

08009bbc <_raise_r>:
 8009bbc:	291f      	cmp	r1, #31
 8009bbe:	b538      	push	{r3, r4, r5, lr}
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	d904      	bls.n	8009bd0 <_raise_r+0x14>
 8009bc6:	2316      	movs	r3, #22
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bd2:	b112      	cbz	r2, 8009bda <_raise_r+0x1e>
 8009bd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bd8:	b94b      	cbnz	r3, 8009bee <_raise_r+0x32>
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 f830 	bl	8009c40 <_getpid_r>
 8009be0:	462a      	mov	r2, r5
 8009be2:	4601      	mov	r1, r0
 8009be4:	4620      	mov	r0, r4
 8009be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bea:	f000 b817 	b.w	8009c1c <_kill_r>
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d00a      	beq.n	8009c08 <_raise_r+0x4c>
 8009bf2:	1c59      	adds	r1, r3, #1
 8009bf4:	d103      	bne.n	8009bfe <_raise_r+0x42>
 8009bf6:	2316      	movs	r3, #22
 8009bf8:	6003      	str	r3, [r0, #0]
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	e7e7      	b.n	8009bce <_raise_r+0x12>
 8009bfe:	2400      	movs	r4, #0
 8009c00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c04:	4628      	mov	r0, r5
 8009c06:	4798      	blx	r3
 8009c08:	2000      	movs	r0, #0
 8009c0a:	e7e0      	b.n	8009bce <_raise_r+0x12>

08009c0c <raise>:
 8009c0c:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <raise+0xc>)
 8009c0e:	4601      	mov	r1, r0
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f7ff bfd3 	b.w	8009bbc <_raise_r>
 8009c16:	bf00      	nop
 8009c18:	2000000c 	.word	0x2000000c

08009c1c <_kill_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d07      	ldr	r5, [pc, #28]	; (8009c3c <_kill_r+0x20>)
 8009c20:	2300      	movs	r3, #0
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	4611      	mov	r1, r2
 8009c28:	602b      	str	r3, [r5, #0]
 8009c2a:	f7f8 fa67 	bl	80020fc <_kill>
 8009c2e:	1c43      	adds	r3, r0, #1
 8009c30:	d102      	bne.n	8009c38 <_kill_r+0x1c>
 8009c32:	682b      	ldr	r3, [r5, #0]
 8009c34:	b103      	cbz	r3, 8009c38 <_kill_r+0x1c>
 8009c36:	6023      	str	r3, [r4, #0]
 8009c38:	bd38      	pop	{r3, r4, r5, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20000410 	.word	0x20000410

08009c40 <_getpid_r>:
 8009c40:	f7f8 ba54 	b.w	80020ec <_getpid>

08009c44 <__sread>:
 8009c44:	b510      	push	{r4, lr}
 8009c46:	460c      	mov	r4, r1
 8009c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4c:	f000 f894 	bl	8009d78 <_read_r>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	bfab      	itete	ge
 8009c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c56:	89a3      	ldrhlt	r3, [r4, #12]
 8009c58:	181b      	addge	r3, r3, r0
 8009c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c5e:	bfac      	ite	ge
 8009c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c62:	81a3      	strhlt	r3, [r4, #12]
 8009c64:	bd10      	pop	{r4, pc}

08009c66 <__swrite>:
 8009c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6a:	461f      	mov	r7, r3
 8009c6c:	898b      	ldrh	r3, [r1, #12]
 8009c6e:	05db      	lsls	r3, r3, #23
 8009c70:	4605      	mov	r5, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	4616      	mov	r6, r2
 8009c76:	d505      	bpl.n	8009c84 <__swrite+0x1e>
 8009c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f000 f868 	bl	8009d54 <_lseek_r>
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c8e:	81a3      	strh	r3, [r4, #12]
 8009c90:	4632      	mov	r2, r6
 8009c92:	463b      	mov	r3, r7
 8009c94:	4628      	mov	r0, r5
 8009c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9a:	f000 b817 	b.w	8009ccc <_write_r>

08009c9e <__sseek>:
 8009c9e:	b510      	push	{r4, lr}
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca6:	f000 f855 	bl	8009d54 <_lseek_r>
 8009caa:	1c43      	adds	r3, r0, #1
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	bf15      	itete	ne
 8009cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cba:	81a3      	strheq	r3, [r4, #12]
 8009cbc:	bf18      	it	ne
 8009cbe:	81a3      	strhne	r3, [r4, #12]
 8009cc0:	bd10      	pop	{r4, pc}

08009cc2 <__sclose>:
 8009cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc6:	f000 b813 	b.w	8009cf0 <_close_r>
	...

08009ccc <_write_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d07      	ldr	r5, [pc, #28]	; (8009cec <_write_r+0x20>)
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	4608      	mov	r0, r1
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	602a      	str	r2, [r5, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f7f8 fa45 	bl	800216a <_write>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d102      	bne.n	8009cea <_write_r+0x1e>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b103      	cbz	r3, 8009cea <_write_r+0x1e>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	20000410 	.word	0x20000410

08009cf0 <_close_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d06      	ldr	r5, [pc, #24]	; (8009d0c <_close_r+0x1c>)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	602b      	str	r3, [r5, #0]
 8009cfc:	f7f8 fa51 	bl	80021a2 <_close>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_close_r+0x1a>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_close_r+0x1a>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	20000410 	.word	0x20000410

08009d10 <_fstat_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d07      	ldr	r5, [pc, #28]	; (8009d30 <_fstat_r+0x20>)
 8009d14:	2300      	movs	r3, #0
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	602b      	str	r3, [r5, #0]
 8009d1e:	f7f8 fa4c 	bl	80021ba <_fstat>
 8009d22:	1c43      	adds	r3, r0, #1
 8009d24:	d102      	bne.n	8009d2c <_fstat_r+0x1c>
 8009d26:	682b      	ldr	r3, [r5, #0]
 8009d28:	b103      	cbz	r3, 8009d2c <_fstat_r+0x1c>
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	bd38      	pop	{r3, r4, r5, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000410 	.word	0x20000410

08009d34 <_isatty_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d06      	ldr	r5, [pc, #24]	; (8009d50 <_isatty_r+0x1c>)
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	602b      	str	r3, [r5, #0]
 8009d40:	f7f8 fa4b 	bl	80021da <_isatty>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_isatty_r+0x1a>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_isatty_r+0x1a>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	20000410 	.word	0x20000410

08009d54 <_lseek_r>:
 8009d54:	b538      	push	{r3, r4, r5, lr}
 8009d56:	4d07      	ldr	r5, [pc, #28]	; (8009d74 <_lseek_r+0x20>)
 8009d58:	4604      	mov	r4, r0
 8009d5a:	4608      	mov	r0, r1
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	2200      	movs	r2, #0
 8009d60:	602a      	str	r2, [r5, #0]
 8009d62:	461a      	mov	r2, r3
 8009d64:	f7f8 fa44 	bl	80021f0 <_lseek>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_lseek_r+0x1e>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_lseek_r+0x1e>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	20000410 	.word	0x20000410

08009d78 <_read_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4d07      	ldr	r5, [pc, #28]	; (8009d98 <_read_r+0x20>)
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	4608      	mov	r0, r1
 8009d80:	4611      	mov	r1, r2
 8009d82:	2200      	movs	r2, #0
 8009d84:	602a      	str	r2, [r5, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	f7f8 f9d2 	bl	8002130 <_read>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_read_r+0x1e>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_read_r+0x1e>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	20000410 	.word	0x20000410

08009d9c <_init>:
 8009d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9e:	bf00      	nop
 8009da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da2:	bc08      	pop	{r3}
 8009da4:	469e      	mov	lr, r3
 8009da6:	4770      	bx	lr

08009da8 <_fini>:
 8009da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009daa:	bf00      	nop
 8009dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dae:	bc08      	pop	{r3}
 8009db0:	469e      	mov	lr, r3
 8009db2:	4770      	bx	lr
