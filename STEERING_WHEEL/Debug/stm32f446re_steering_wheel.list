
stm32f446re_steering_wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005648  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005894  08005894  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800589c  0800589c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a0  080058a0  000158a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08005914  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005914  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012651  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c9  00000000  00000000  000326f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  000347c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bf9  00000000  00000000  00036830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001389c  00000000  00000000  00059429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d634c  00000000  00000000  0006ccc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143011  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  00143064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005800 	.word	0x08005800

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005800 	.word	0x08005800

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <assign_filter_array>:
const FilterArrayLength APPS_RX_NUM = 1;

const AddressIdType RMS_RX_ID[] = {SW_ID};
const FilterArrayLength RMS_RX_NUM = 1;

const AddressIdType* assign_filter_array(AddressIdType NODE_ID) {
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3b01      	subs	r3, #1
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d813      	bhi.n	80005ec <assign_filter_array+0x38>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <assign_filter_array+0x18>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	080005e1 	.word	0x080005e1
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	080005e9 	.word	0x080005e9
        case BMS_ID:
            return BMS_RX_ID;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <assign_filter_array+0x48>)
 80005de:	e006      	b.n	80005ee <assign_filter_array+0x3a>
            break;
        case SW_ID:
            return SW_RX_ID;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <assign_filter_array+0x4c>)
 80005e2:	e004      	b.n	80005ee <assign_filter_array+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_ID;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <assign_filter_array+0x50>)
 80005e6:	e002      	b.n	80005ee <assign_filter_array+0x3a>
            break;
        case RMS_ID:
            return RMS_RX_ID;
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <assign_filter_array+0x54>)
 80005ea:	e000      	b.n	80005ee <assign_filter_array+0x3a>
            break;
    }
    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	08005834 	.word	0x08005834
 8000600:	08005838 	.word	0x08005838
 8000604:	08005840 	.word	0x08005840
 8000608:	08005844 	.word	0x08005844

0800060c <assign_filter_array_legnth>:

FilterArrayLength assign_filter_array_legnth(AddressIdType NODE_ID) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    switch(NODE_ID) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b01      	subs	r3, #1
 8000618:	2b03      	cmp	r3, #3
 800061a:	d813      	bhi.n	8000644 <assign_filter_array_legnth+0x38>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <assign_filter_array_legnth+0x18>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000635 	.word	0x08000635
 8000628:	08000639 	.word	0x08000639
 800062c:	0800063d 	.word	0x0800063d
 8000630:	08000641 	.word	0x08000641
        case BMS_ID:
            return BMS_RX_NUM;
 8000634:	2301      	movs	r3, #1
 8000636:	e006      	b.n	8000646 <assign_filter_array_legnth+0x3a>
            break;
        case SW_ID:
            return SW_RX_NUM;
 8000638:	2302      	movs	r3, #2
 800063a:	e004      	b.n	8000646 <assign_filter_array_legnth+0x3a>
            break;
        case APPS_ID:
            return APPS_RX_NUM;
 800063c:	2301      	movs	r3, #1
 800063e:	e002      	b.n	8000646 <assign_filter_array_legnth+0x3a>
            break;
        case RMS_ID:
            return RMS_RX_NUM;
 8000640:	2301      	movs	r3, #1
 8000642:	e000      	b.n	8000646 <assign_filter_array_legnth+0x3a>
            break;
    }
    return 0;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <FEB_CAN_Filter_Config>:
uint8_t TxData[8];
uint8_t RxData[8];
uint32_t TxMailbox;
uint8_t CAN_Flag = 0;

void FEB_CAN_Filter_Config(CAN_HandleTypeDef* hcan, const AddressIdType* filter_array, uint8_t filter_array_len, uint8_t FIFO_Assignment) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b090      	sub	sp, #64	; 0x40
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	460b      	mov	r3, r1
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	4613      	mov	r3, r2
 8000668:	71bb      	strb	r3, [r7, #6]
	for (int i = 0; i < filter_array_len; i++) {
 800066a:	2300      	movs	r3, #0
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800066e:	e027      	b.n	80006c0 <FEB_CAN_Filter_Config+0x6c>
		CAN_FilterTypeDef filter_config;

		filter_config.FilterActivation = CAN_FILTER_ENABLE;
 8000670:	2301      	movs	r3, #1
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
		filter_config.FilterBank = i;
 8000674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
		filter_config.FilterFIFOAssignment = FIFO_Assignment;
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
		filter_config.FilterIdHigh = filter_array[i] << (16 - BITS_PER_ID);
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	4413      	add	r3, r2
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	025b      	lsls	r3, r3, #9
 8000688:	617b      	str	r3, [r7, #20]
		filter_config.FilterIdLow = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdHigh = 0x7F << (16 - BITS_PER_ID);
 800068e:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000692:	61fb      	str	r3, [r7, #28]
		filter_config.FilterMaskIdLow = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
		filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8000698:	2300      	movs	r3, #0
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
		filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800069c:	2301      	movs	r3, #1
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
		filter_config.SlaveStartFilterBank = 27;
 80006a0:	231b      	movs	r3, #27
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38

		if(HAL_CAN_ConfigFilter(hcan, &filter_config))
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f000 ff76 	bl	800159c <HAL_CAN_ConfigFilter>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <FEB_CAN_Filter_Config+0x66>
		{
		  Error_Handler();
 80006b6:	f000 fb97 	bl	8000de8 <Error_Handler>
	for (int i = 0; i < filter_array_len; i++) {
 80006ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006bc:	3301      	adds	r3, #1
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006c4:	429a      	cmp	r2, r3
 80006c6:	dbd3      	blt.n	8000670 <FEB_CAN_Filter_Config+0x1c>
		}
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3740      	adds	r7, #64	; 0x40
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <FEB_CAN_Init>:

void FEB_CAN_Init(CAN_HandleTypeDef* hcan, uint32_t NODE_ID) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	// Select Rx FIFO
	uint8_t FIFO_Assignment;
	uint32_t FIFO_Interrupt;
	if (hcan->Instance == CAN1) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <FEB_CAN_Init+0x80>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d104      	bne.n	80006f2 <FEB_CAN_Init+0x1e>
		FIFO_Assignment = CAN_RX_FIFO0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO0_MSG_PENDING;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	e008      	b.n	8000704 <FEB_CAN_Init+0x30>
	} else if (hcan->Instance == CAN2) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <FEB_CAN_Init+0x84>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d103      	bne.n	8000704 <FEB_CAN_Init+0x30>
		FIFO_Assignment = CAN_RX_FIFO1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	75fb      	strb	r3, [r7, #23]
		FIFO_Interrupt = CAN_IT_RX_FIFO1_MSG_PENDING;
 8000700:	2310      	movs	r3, #16
 8000702:	613b      	str	r3, [r7, #16]
	}

	// Initialize transmission header
	TxHeader.IDE = CAN_ID_STD;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <FEB_CAN_Init+0x88>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <FEB_CAN_Init+0x88>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <FEB_CAN_Init+0x88>)
 8000712:	2200      	movs	r2, #0
 8000714:	751a      	strb	r2, [r3, #20]

	// Initialize CAN filters
	const AddressIdType* filter_array;
	FilterArrayLength filter_num;
	filter_array  = assign_filter_array(NODE_ID);
 8000716:	6838      	ldr	r0, [r7, #0]
 8000718:	f7ff ff4c 	bl	80005b4 <assign_filter_array>
 800071c:	60f8      	str	r0, [r7, #12]
	filter_num = assign_filter_array_legnth(NODE_ID);
 800071e:	6838      	ldr	r0, [r7, #0]
 8000720:	f7ff ff74 	bl	800060c <assign_filter_array_legnth>
 8000724:	4603      	mov	r3, r0
 8000726:	72fb      	strb	r3, [r7, #11]
	FEB_CAN_Filter_Config(hcan, filter_array, filter_num, FIFO_Assignment);
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	7afa      	ldrb	r2, [r7, #11]
 800072c:	68f9      	ldr	r1, [r7, #12]
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff90 	bl	8000654 <FEB_CAN_Filter_Config>

	// Start CAN peripheral
	if (HAL_CAN_Start(hcan) != HAL_OK) {
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f001 f811 	bl	800175c <HAL_CAN_Start>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <FEB_CAN_Init+0x70>
	  Error_Handler();
 8000740:	f000 fb52 	bl	8000de8 <Error_Handler>
	}

	// Activate receive interrupt
	HAL_CAN_ActivateNotification(hcan, FIFO_Interrupt);
 8000744:	6939      	ldr	r1, [r7, #16]
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f001 f95c 	bl	8001a04 <HAL_CAN_ActivateNotification>

}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40006400 	.word	0x40006400
 8000758:	40006800 	.word	0x40006800
 800075c:	2000008c 	.word	0x2000008c

08000760 <FEB_CAN_Transmit>:
		Error_Handler();
	}
	store_msg(&RxHeader, RxData);
}

void FEB_CAN_Transmit(CAN_HandleTypeDef* hcan, AddressIdType Msg_ID, void* pData, uint8_t size) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	70fb      	strb	r3, [r7, #3]
	// Copy data to Tx buffer
	memcpy(TxData, pData, size);
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	461a      	mov	r2, r3
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	480f      	ldr	r0, [pc, #60]	; (80007b4 <FEB_CAN_Transmit+0x54>)
 8000776:	f004 fbcd 	bl	8004f14 <memcpy>

	// Update Tx header
	TxHeader.StdId = Msg_ID;
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <FEB_CAN_Transmit+0x58>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = size;
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <FEB_CAN_Transmit+0x58>)
 8000784:	6113      	str	r3, [r2, #16]

	// Delay until mailbox available
	while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) == 0) {}
 8000786:	bf00      	nop
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f001 f906 	bl	800199a <HAL_CAN_GetTxMailboxesFreeLevel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f9      	beq.n	8000788 <FEB_CAN_Transmit+0x28>

	// Add Tx data to mailbox
	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <FEB_CAN_Transmit+0x5c>)
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <FEB_CAN_Transmit+0x54>)
 8000798:	4907      	ldr	r1, [pc, #28]	; (80007b8 <FEB_CAN_Transmit+0x58>)
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f001 f822 	bl	80017e4 <HAL_CAN_AddTxMessage>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <FEB_CAN_Transmit+0x4a>
	{
	  Error_Handler();
 80007a6:	f000 fb1f 	bl	8000de8 <Error_Handler>
	}
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000a4 	.word	0x200000a4
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	200000ac 	.word	0x200000ac

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0a6      	sub	sp, #152	; 0x98
 80007c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fd57 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f8b9 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 fa6d 	bl	8000cac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 fa41 	bl	8000c58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007d6:	f000 f955 	bl	8000a84 <MX_I2C1_Init>
  MX_TIM14_Init();
 80007da:	f000 fa19 	bl	8000c10 <MX_TIM14_Init>
  MX_TIM2_Init();
 80007de:	f000 f97f 	bl	8000ae0 <MX_TIM2_Init>
  MX_CAN1_Init();
 80007e2:	f000 f919 	bl	8000a18 <MX_CAN1_Init>
  MX_TIM13_Init();
 80007e6:	f000 f9ef 	bl	8000bc8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  bool ready_to_drive = false;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  int buf_len;
  //uint8_t data1;
  uint8_t data2;
  HAL_StatusTypeDef ret;

  HAL_TIM_Base_Start_IT(&htim13);
 80007f0:	4848      	ldr	r0, [pc, #288]	; (8000914 <main+0x154>)
 80007f2:	f002 ff89 	bl	8003708 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Stop_IT(&htim13);
 80007f6:	4847      	ldr	r0, [pc, #284]	; (8000914 <main+0x154>)
 80007f8:	f002 fff6 	bl	80037e8 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 80007fc:	4846      	ldr	r0, [pc, #280]	; (8000918 <main+0x158>)
 80007fe:	f002 ff83 	bl	8003708 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim14);
 8000802:	4845      	ldr	r0, [pc, #276]	; (8000918 <main+0x158>)
 8000804:	f002 fff0 	bl	80037e8 <HAL_TIM_Base_Stop_IT>
  Button_Checking = false;
 8000808:	4b44      	ldr	r3, [pc, #272]	; (800091c <main+0x15c>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
  Button_Timer_Flag = false;
 800080e:	4b44      	ldr	r3, [pc, #272]	; (8000920 <main+0x160>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
  // 0% PWM cycle to turnoff buzzer
  htim2.Instance->CCR2 = 0;
 8000814:	4b43      	ldr	r3, [pc, #268]	; (8000924 <main+0x164>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800081c:	2104      	movs	r1, #4
 800081e:	4841      	ldr	r0, [pc, #260]	; (8000924 <main+0x164>)
 8000820:	f003 f86a 	bl	80038f8 <HAL_TIM_PWM_Start>


  FEB_CAN_Init(&hcan1, SW_ID);
 8000824:	2102      	movs	r1, #2
 8000826:	4840      	ldr	r0, [pc, #256]	; (8000928 <main+0x168>)
 8000828:	f7ff ff54 	bl	80006d4 <FEB_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(50);
 800082c:	2032      	movs	r0, #50	; 0x32
 800082e:	f000 fd95 	bl	800135c <HAL_Delay>
	  // read both IOexpanders
//	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP1_ADDR, &data1, 1, HAL_MAX_DELAY);
//	  if ( ret != HAL_OK ) {
//		  buf_len = sprintf((char*)buf, "IO_1 Error\r\n");
//	  }
	  ret = HAL_I2C_Master_Receive(&hi2c1, IOEXP2_ADDR, &data2, 1, HAL_MAX_DELAY);
 8000832:	2342      	movs	r3, #66	; 0x42
 8000834:	b299      	uxth	r1, r3
 8000836:	1cfa      	adds	r2, r7, #3
 8000838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	483a      	ldr	r0, [pc, #232]	; (800092c <main+0x16c>)
 8000842:	f001 fd09 	bl	8002258 <HAL_I2C_Master_Receive>
 8000846:	4603      	mov	r3, r0
 8000848:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  if ( ret != HAL_OK ) {
 800084c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000850:	2b00      	cmp	r3, #0
 8000852:	d006      	beq.n	8000862 <main+0xa2>
		  buf_len = sprintf((char*)buf, "IO_2 Error\r\n");
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4936      	ldr	r1, [pc, #216]	; (8000930 <main+0x170>)
 8000858:	4618      	mov	r0, r3
 800085a:	f004 fb71 	bl	8004f40 <siprintf>
 800085e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  if (!(data2 & (1<<3))) { // BUT_6 -> IO2 P3
		  buf_len = sprintf((char*)buf, "BUT_6\r\n");
	  }
	  ***/

	  if (!(data2 & (1<<0))) { // BUT_3 -> IO2 P0
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	2b00      	cmp	r3, #0
 800086a:	d13b      	bne.n	80008e4 <main+0x124>
//		  buf_len = sprintf((char*)buf, "BUT_3\r\n");
//		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);

		  // if the system is not checking a button, start the timer to check the timer
		  if (!Button_Checking && !Init_Blocking) {
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <main+0x15c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	f083 0301 	eor.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d00c      	beq.n	8000894 <main+0xd4>
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <main+0x174>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	f083 0301 	eor.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <main+0xd4>
			  // Start timer to count 1 sec hold time
			  HAL_TIM_Base_Start_IT(&htim13);
 8000888:	4822      	ldr	r0, [pc, #136]	; (8000914 <main+0x154>)
 800088a:	f002 ff3d 	bl	8003708 <HAL_TIM_Base_Start_IT>
			  Button_Checking = true;
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <main+0x15c>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
//			  buf_len = sprintf((char*)buf, "starting timer 13\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }
		  // if 1 sec has elapsed, and this button is still pressed, it is a valid action
		  // turn on buzzer and send CAN msg, reset states
		  if (Button_Timer_Flag) {
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <main+0x160>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d026      	beq.n	80008ea <main+0x12a>
			  ready_to_drive = !ready_to_drive;
 800089c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bf14      	ite	ne
 80008a4:	2301      	movne	r3, #1
 80008a6:	2300      	moveq	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f083 0301 	eor.w	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			  Init_Blocking = true;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <main+0x174>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
			  // start timer for buzzer
			  HAL_TIM_Base_Start_IT(&htim14);
 80008c0:	4815      	ldr	r0, [pc, #84]	; (8000918 <main+0x158>)
 80008c2:	f002 ff21 	bl	8003708 <HAL_TIM_Base_Start_IT>
			  // turn on buzzer at VOLUME
			  htim2.Instance->CCR2 = VOLUME;
 80008c6:	2202      	movs	r2, #2
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <main+0x164>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	639a      	str	r2, [r3, #56]	; 0x38

			  FEB_CAN_Transmit(&hcan1, SW_COMMAND_1, (uint8_t *) &ready_to_drive, 1);
 80008ce:	f107 0287 	add.w	r2, r7, #135	; 0x87
 80008d2:	2301      	movs	r3, #1
 80008d4:	2120      	movs	r1, #32
 80008d6:	4814      	ldr	r0, [pc, #80]	; (8000928 <main+0x168>)
 80008d8:	f7ff ff42 	bl	8000760 <FEB_CAN_Transmit>

			  Button_Timer_Flag = false;
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <main+0x160>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	e002      	b.n	80008ea <main+0x12a>
//			  buf_len = sprintf((char*)buf, "staring timer 14\r\n");
//			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
		  }

	  } else {
		  Button_Timer_Flag = false;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <main+0x160>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	  }
//	  buf_len = sprintf((char*)buf, "check:%d flag:%d\r\n", Button_Checking, Button_Timer_Flag);
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	  buf_len = sprintf((char*)buf, "ready: %d\r\n", ready_to_drive);
 80008ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80008ee:	461a      	mov	r2, r3
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4911      	ldr	r1, [pc, #68]	; (8000938 <main+0x178>)
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 fb23 	bl	8004f40 <siprintf>
 80008fa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
 80008fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000902:	b29a      	uxth	r2, r3
 8000904:	1d39      	adds	r1, r7, #4
 8000906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <main+0x17c>)
 800090c:	f003 ff63 	bl	80047d6 <HAL_UART_Transmit>
	  HAL_Delay(50);
 8000910:	e78c      	b.n	800082c <main+0x6c>
 8000912:	bf00      	nop
 8000914:	20000174 	.word	0x20000174
 8000918:	200001bc 	.word	0x200001bc
 800091c:	20000248 	.word	0x20000248
 8000920:	20000249 	.word	0x20000249
 8000924:	2000012c 	.word	0x2000012c
 8000928:	200000b0 	.word	0x200000b0
 800092c:	200000d8 	.word	0x200000d8
 8000930:	08005818 	.word	0x08005818
 8000934:	2000024a 	.word	0x2000024a
 8000938:	08005828 	.word	0x08005828
 800093c:	20000204 	.word	0x20000204

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	; 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2234      	movs	r2, #52	; 0x34
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f004 faee 	bl	8004f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <SystemClock_Config+0xd0>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <SystemClock_Config+0xd0>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	; 0x40
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <SystemClock_Config+0xd0>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <SystemClock_Config+0xd4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <SystemClock_Config+0xd4>)
 800098a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <SystemClock_Config+0xd4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80009b4:	23a0      	movs	r3, #160	; 0xa0
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fbaf 	bl	800312c <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009d4:	f000 fa08 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2302      	movs	r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	2105      	movs	r1, #5
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 f84e 	bl	8002a98 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a02:	f000 f9f1 	bl	8000de8 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <MX_CAN1_Init+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a24:	2210      	movs	r2, #16
 8000a26:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a3a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_CAN1_Init+0x64>)
 8000a68:	f000 fc9c 	bl	80013a4 <HAL_CAN_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a72:	f000 f9b9 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000b0 	.word	0x200000b0
 8000a80:	40006400 	.word	0x40006400

08000a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <MX_I2C1_Init+0x54>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a90:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_I2C1_Init+0x58>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_I2C1_Init+0x50>)
 8000ac2:	f001 fa85 	bl	8001fd0 <HAL_I2C_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 f98c 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000d8 	.word	0x200000d8
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	000186a0 	.word	0x000186a0

08000ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000b18:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b1a:	229f      	movs	r2, #159	; 0x9f
 8000b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b26:	2263      	movs	r2, #99	; 0x63
 8000b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b36:	4823      	ldr	r0, [pc, #140]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b38:	f002 fd96 	bl	8003668 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b42:	f000 f951 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b50:	4619      	mov	r1, r3
 8000b52:	481c      	ldr	r0, [pc, #112]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b54:	f003 f962 	bl	8003e1c <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b5e:	f000 f943 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b62:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b64:	f002 fe6f 	bl	8003846 <HAL_TIM_PWM_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b6e:	f000 f93b 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000b82:	f003 fd4b 	bl	800461c <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b8c:	f000 f92c 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b90:	2360      	movs	r3, #96	; 0x60
 8000b92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000ba8:	f003 f876 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000bb2:	f000 f919 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <MX_TIM2_Init+0xe4>)
 8000bb8:	f000 fa2e 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000bbc:	bf00      	nop
 8000bbe:	3738      	adds	r7, #56	; 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000012c 	.word	0x2000012c

08000bc8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_TIM13_Init+0x40>)
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <MX_TIM13_Init+0x44>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 16000-1;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_TIM13_Init+0x40>)
 8000bd4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000bd8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_TIM13_Init+0x40>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_TIM13_Init+0x40>)
 8000be2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000be6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_TIM13_Init+0x40>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_TIM13_Init+0x40>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_TIM13_Init+0x40>)
 8000bf6:	f002 fd37 	bl	8003668 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000c00:	f000 f8f2 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000174 	.word	0x20000174
 8000c0c:	40001c00 	.word	0x40001c00

08000c10 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_TIM14_Init+0x40>)
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <MX_TIM14_Init+0x44>)
 8000c18:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_TIM14_Init+0x40>)
 8000c1c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000c20:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_TIM14_Init+0x40>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_TIM14_Init+0x40>)
 8000c2a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c2e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_TIM14_Init+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_TIM14_Init+0x40>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_TIM14_Init+0x40>)
 8000c3e:	f002 fd13 	bl	8003668 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000c48:	f000 f8ce 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200001bc 	.word	0x200001bc
 8000c54:	40002000 	.word	0x40002000

08000c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <MX_USART2_UART_Init+0x50>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c90:	f003 fd54 	bl	800473c <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c9a:	f000 f8a5 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000204 	.word	0x20000204
 8000ca8:	40004400 	.word	0x40004400

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a2c      	ldr	r2, [pc, #176]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a25      	ldr	r2, [pc, #148]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_GPIO_Init+0xd0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2120      	movs	r1, #32
 8000d36:	4812      	ldr	r0, [pc, #72]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d38:	f001 f930 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_GPIO_Init+0xd8>)
 8000d54:	f000 ff8e 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d58:	2320      	movs	r3, #32
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d70:	f000 ff80 	bl	8001c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020800 	.word	0x40020800

08000d88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
//	char buf[10];
//	int buf_len;

	// timer for button
	// if 1 sec has passed since the first detection of button pressed, go back to not checking state
	if (htim == &htim13) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d108      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x22>
	  Button_Checking = false;
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
	  Button_Timer_Flag = true;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
	  HAL_TIM_Base_Stop_IT(&htim13);
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000da6:	f002 fd1f 	bl	80037e8 <HAL_TIM_Base_Stop_IT>
//	  buf_len = sprintf((char*)buf, "Timer13\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}

	// timer for buzzer
	if (htim == &htim14)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d109      	bne.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
	  // turn off initialize blocking
	  Init_Blocking = false;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
	  // turn off buzzer
	  htim2.Instance->CCR2 = 0;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	639a      	str	r2, [r3, #56]	; 0x38
	  // Stop timer
	  HAL_TIM_Base_Stop_IT(&htim14);
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000dc2:	f002 fd11 	bl	80037e8 <HAL_TIM_Base_Stop_IT>

//	  buf_len = sprintf((char*)buf, "Timer14\r\n");
//	  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, HAL_MAX_DELAY);
	}
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000174 	.word	0x20000174
 8000dd4:	20000248 	.word	0x20000248
 8000dd8:	20000249 	.word	0x20000249
 8000ddc:	200001bc 	.word	0x200001bc
 8000de0:	2000024a 	.word	0x2000024a
 8000de4:	2000012c 	.word	0x2000012c

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e32:	2007      	movs	r0, #7
 8000e34:	f000 fedc 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_CAN_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12c      	bne.n	8000ec0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_CAN_MspInit+0x88>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_CAN_MspInit+0x88>)
 8000e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_CAN_MspInit+0x88>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_CAN_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_CAN_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_CAN_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_CAN_MspInit+0x8c>)
 8000ebc:	f000 feda 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40006400 	.word	0x40006400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_I2C_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12c      	bne.n	8000f50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f18:	2312      	movs	r3, #18
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f24:	2304      	movs	r3, #4
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <HAL_I2C_MspInit+0x8c>)
 8000f30:	f000 fea0 	bl	8001c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f42:	6413      	str	r3, [r2, #64]	; 0x40
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_I2C_MspInit+0x88>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400

08000f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f74:	d10e      	bne.n	8000f94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_TIM_Base_MspInit+0xa8>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_TIM_Base_MspInit+0xa8>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <HAL_TIM_Base_MspInit+0xa8>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f92:	e036      	b.n	8001002 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_TIM_Base_MspInit+0xac>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d116      	bne.n	8000fcc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_TIM_Base_MspInit+0xa8>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_TIM_Base_MspInit+0xa8>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_TIM_Base_MspInit+0xa8>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	202c      	movs	r0, #44	; 0x2c
 8000fc0:	f000 fe21 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000fc4:	202c      	movs	r0, #44	; 0x2c
 8000fc6:	f000 fe3a 	bl	8001c3e <HAL_NVIC_EnableIRQ>
}
 8000fca:	e01a      	b.n	8001002 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_TIM_Base_MspInit+0xb0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d115      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_TIM_Base_MspInit+0xa8>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_TIM_Base_MspInit+0xa8>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_TIM_Base_MspInit+0xa8>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	202d      	movs	r0, #45	; 0x2d
 8000ff8:	f000 fe05 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ffc:	202d      	movs	r0, #45	; 0x2d
 8000ffe:	f000 fe1e 	bl	8001c3e <HAL_NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40001c00 	.word	0x40001c00
 8001014:	40002000 	.word	0x40002000

08001018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001038:	d11d      	bne.n	8001076 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_TIM_MspPostInit+0x68>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_TIM_MspPostInit+0x68>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_TIM_MspPostInit+0x68>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001056:	2302      	movs	r3, #2
 8001058:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001066:	2301      	movs	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <HAL_TIM_MspPostInit+0x6c>)
 8001072:	f000 fdff 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_UART_MspInit+0x84>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d12b      	bne.n	8001102 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_UART_MspInit+0x88>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010e2:	230c      	movs	r3, #12
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f2:	2307      	movs	r3, #7
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_UART_MspInit+0x8c>)
 80010fe:	f000 fdb9 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40004400 	.word	0x40004400
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800111c:	e7fe      	b.n	800111c <NMI_Handler+0x4>

0800111e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <MemManage_Handler+0x4>

0800112a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <UsageFault_Handler+0x4>

08001136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001164:	f000 f8da 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001172:	f002 fc89 	bl	8003a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000174 	.word	0x20000174

08001180 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001186:	f002 fc7f 	bl	8003a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001bc 	.word	0x200001bc

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f003 fe7c 	bl	8004ec0 <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20020000 	.word	0x20020000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	2000024c 	.word	0x2000024c
 80011fc:	20000268 	.word	0x20000268

08001200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <SystemInit+0x20>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <SystemInit+0x20>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800125c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122a:	490e      	ldr	r1, [pc, #56]	; (8001264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001240:	4c0b      	ldr	r4, [pc, #44]	; (8001270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800124e:	f7ff ffd7 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001252:	f003 fe3b 	bl	8004ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001256:	f7ff fab3 	bl	80007c0 <main>
  bx  lr    
 800125a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001268:	080058a4 	.word	0x080058a4
  ldr r2, =_sbss
 800126c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001270:	20000264 	.word	0x20000264

08001274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC_IRQHandler>
	...

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_Init+0x40>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_Init+0x40>)
 800128e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_Init+0x40>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 fca5 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f808 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff fda2 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fcbd 	bl	8001c5a <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f8:	f000 fc85 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	20000008 	.word	0x20000008
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000008 	.word	0x20000008
 8001340:	20000250 	.word	0x20000250

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000250 	.word	0x20000250

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff ffee 	bl	8001344 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffde 	bl	8001344 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008

080013a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0ed      	b.n	8001592 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fd3e 	bl	8000e44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d8:	f7ff ffb4 	bl	8001344 <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013de:	e012      	b.n	8001406 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013e0:	f7ff ffb0 	bl	8001344 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b0a      	cmp	r3, #10
 80013ec:	d90b      	bls.n	8001406 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2205      	movs	r2, #5
 80013fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0c5      	b.n	8001592 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0e5      	beq.n	80013e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0202 	bic.w	r2, r2, #2
 8001422:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001424:	f7ff ff8e 	bl	8001344 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800142a:	e012      	b.n	8001452 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800142c:	f7ff ff8a 	bl	8001344 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b0a      	cmp	r3, #10
 8001438:	d90b      	bls.n	8001452 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e09f      	b.n	8001592 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1e5      	bne.n	800142c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e1b      	ldrb	r3, [r3, #24]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d108      	bne.n	800147a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e007      	b.n	800148a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e5b      	ldrb	r3, [r3, #25]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d108      	bne.n	80014a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e007      	b.n	80014b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e9b      	ldrb	r3, [r3, #26]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d108      	bne.n	80014ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0220 	orr.w	r2, r2, #32
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e007      	b.n	80014de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0220 	bic.w	r2, r2, #32
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7edb      	ldrb	r3, [r3, #27]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0210 	bic.w	r2, r2, #16
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e007      	b.n	8001508 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0210 	orr.w	r2, r2, #16
 8001506:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7f1b      	ldrb	r3, [r3, #28]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0208 	orr.w	r2, r2, #8
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0208 	bic.w	r2, r2, #8
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7f5b      	ldrb	r3, [r3, #29]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d108      	bne.n	800154c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0204 	orr.w	r2, r2, #4
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e007      	b.n	800155c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0204 	bic.w	r2, r2, #4
 800155a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	ea42 0103 	orr.w	r1, r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015b4:	7cfb      	ldrb	r3, [r7, #19]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d003      	beq.n	80015c2 <HAL_CAN_ConfigFilter+0x26>
 80015ba:	7cfb      	ldrb	r3, [r7, #19]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	f040 80be 	bne.w	800173e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80015c2:	4b65      	ldr	r3, [pc, #404]	; (8001758 <HAL_CAN_ConfigFilter+0x1bc>)
 80015c4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	431a      	orrs	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	2201      	movs	r2, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43db      	mvns	r3, r3
 8001614:	401a      	ands	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d123      	bne.n	800166c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001646:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3248      	adds	r2, #72	; 0x48
 800164c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001660:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001662:	6979      	ldr	r1, [r7, #20]
 8001664:	3348      	adds	r3, #72	; 0x48
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d122      	bne.n	80016ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	431a      	orrs	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001694:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3248      	adds	r2, #72	; 0x48
 800169a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016b0:	6979      	ldr	r1, [r7, #20]
 80016b2:	3348      	adds	r3, #72	; 0x48
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	401a      	ands	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016d4:	e007      	b.n	80016e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	431a      	orrs	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	401a      	ands	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001700:	e007      	b.n	8001712 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	431a      	orrs	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	431a      	orrs	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001730:	f023 0201 	bic.w	r2, r3, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e006      	b.n	800174c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
  }
}
 800174c:	4618      	mov	r0, r3
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40006400 	.word	0x40006400

0800175c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d12e      	bne.n	80017ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001788:	f7ff fddc 	bl	8001344 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800178e:	e012      	b.n	80017b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001790:	f7ff fdd8 	bl	8001344 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d90b      	bls.n	80017b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2205      	movs	r2, #5
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e012      	b.n	80017dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e5      	bne.n	8001790 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e006      	b.n	80017dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
  }
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001802:	7ffb      	ldrb	r3, [r7, #31]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d003      	beq.n	8001810 <HAL_CAN_AddTxMessage+0x2c>
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	2b02      	cmp	r3, #2
 800180c:	f040 80b8 	bne.w	8001980 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10a      	bne.n	8001830 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80a0 	beq.w	8001970 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	0e1b      	lsrs	r3, r3, #24
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d907      	bls.n	8001850 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e09e      	b.n	800198e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001850:	2201      	movs	r2, #1
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	409a      	lsls	r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10d      	bne.n	800187e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	6809      	ldr	r1, [r1, #0]
 8001870:	431a      	orrs	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3318      	adds	r3, #24
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	440b      	add	r3, r1
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e00f      	b.n	800189e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001888:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800188e:	68f9      	ldr	r1, [r7, #12]
 8001890:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001892:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3318      	adds	r3, #24
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	440b      	add	r3, r1
 800189c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6819      	ldr	r1, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3318      	adds	r3, #24
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	440b      	add	r3, r1
 80018ae:	3304      	adds	r3, #4
 80018b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	7d1b      	ldrb	r3, [r3, #20]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d111      	bne.n	80018de <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3318      	adds	r3, #24
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	4413      	add	r3, r2
 80018c6:	3304      	adds	r3, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	6811      	ldr	r1, [r2, #0]
 80018ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3318      	adds	r3, #24
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	440b      	add	r3, r1
 80018da:	3304      	adds	r3, #4
 80018dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3307      	adds	r3, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	061a      	lsls	r2, r3, #24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3306      	adds	r3, #6
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3305      	adds	r3, #5
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	4313      	orrs	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	3204      	adds	r2, #4
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	4610      	mov	r0, r2
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	6811      	ldr	r1, [r2, #0]
 8001906:	ea43 0200 	orr.w	r2, r3, r0
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	440b      	add	r3, r1
 8001910:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001914:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3303      	adds	r3, #3
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	061a      	lsls	r2, r3, #24
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3302      	adds	r3, #2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3301      	adds	r3, #1
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	4313      	orrs	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	7812      	ldrb	r2, [r2, #0]
 8001936:	4610      	mov	r0, r2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	6811      	ldr	r1, [r2, #0]
 800193c:	ea43 0200 	orr.w	r2, r3, r0
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	440b      	add	r3, r1
 8001946:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800194a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3318      	adds	r3, #24
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	6811      	ldr	r1, [r2, #0]
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3318      	adds	r3, #24
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	440b      	add	r3, r1
 800196a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	e00e      	b.n	800198e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e006      	b.n	800198e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
  }
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ac:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80019ae:	7afb      	ldrb	r3, [r7, #11]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d002      	beq.n	80019ba <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d11d      	bne.n	80019f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a14:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d002      	beq.n	8001a22 <HAL_CAN_ActivateNotification+0x1e>
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d109      	bne.n	8001a36 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6959      	ldr	r1, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e006      	b.n	8001a44 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
  }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	e165      	b.n	8001f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f040 8154 	bne.w	8001f56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d017      	beq.n	8001d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d123      	bne.n	8001db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	08da      	lsrs	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3208      	adds	r2, #8
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3208      	adds	r2, #8
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80ae 	beq.w	8001f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e16:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_GPIO_Init+0x304>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4f      	ldr	r2, [pc, #316]	; (8001f7c <HAL_GPIO_Init+0x308>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4e      	ldr	r2, [pc, #312]	; (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_Init+0x216>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4d      	ldr	r2, [pc, #308]	; (8001f84 <HAL_GPIO_Init+0x310>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4c      	ldr	r2, [pc, #304]	; (8001f88 <HAL_GPIO_Init+0x314>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x20e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_GPIO_Init+0x318>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x20a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4a      	ldr	r2, [pc, #296]	; (8001f90 <HAL_GPIO_Init+0x31c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x206>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a49      	ldr	r2, [pc, #292]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x202>
 8001e72:	2306      	movs	r3, #6
 8001e74:	e00c      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e00a      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x21c>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	69fa      	ldr	r2, [r7, #28]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea0:	4935      	ldr	r1, [pc, #212]	; (8001f78 <HAL_GPIO_Init+0x304>)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f26:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f50:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_GPIO_Init+0x324>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	2b0f      	cmp	r3, #15
 8001f60:	f67f ae96 	bls.w	8001c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40013800 	.word	0x40013800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40021400 	.word	0x40021400
 8001f94:	40021800 	.word	0x40021800
 8001f98:	40013c00 	.word	0x40013c00

08001f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fac:	787b      	ldrb	r3, [r7, #1]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb8:	e003      	b.n	8001fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	041a      	lsls	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	619a      	str	r2, [r3, #24]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e12b      	b.n	800223a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe ff6c 	bl	8000ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2224      	movs	r2, #36	; 0x24
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002034:	f000 fe22 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8002038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a81      	ldr	r2, [pc, #516]	; (8002244 <HAL_I2C_Init+0x274>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d807      	bhi.n	8002054 <HAL_I2C_Init+0x84>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a80      	ldr	r2, [pc, #512]	; (8002248 <HAL_I2C_Init+0x278>)
 8002048:	4293      	cmp	r3, r2
 800204a:	bf94      	ite	ls
 800204c:	2301      	movls	r3, #1
 800204e:	2300      	movhi	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e006      	b.n	8002062 <HAL_I2C_Init+0x92>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a7d      	ldr	r2, [pc, #500]	; (800224c <HAL_I2C_Init+0x27c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bf94      	ite	ls
 800205c:	2301      	movls	r3, #1
 800205e:	2300      	movhi	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0e7      	b.n	800223a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4a78      	ldr	r2, [pc, #480]	; (8002250 <HAL_I2C_Init+0x280>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a6a      	ldr	r2, [pc, #424]	; (8002244 <HAL_I2C_Init+0x274>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d802      	bhi.n	80020a4 <HAL_I2C_Init+0xd4>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3301      	adds	r3, #1
 80020a2:	e009      	b.n	80020b8 <HAL_I2C_Init+0xe8>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	4a69      	ldr	r2, [pc, #420]	; (8002254 <HAL_I2C_Init+0x284>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	3301      	adds	r3, #1
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	430b      	orrs	r3, r1
 80020be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	495c      	ldr	r1, [pc, #368]	; (8002244 <HAL_I2C_Init+0x274>)
 80020d4:	428b      	cmp	r3, r1
 80020d6:	d819      	bhi.n	800210c <HAL_I2C_Init+0x13c>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1e59      	subs	r1, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e6:	1c59      	adds	r1, r3, #1
 80020e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020ec:	400b      	ands	r3, r1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_I2C_Init+0x138>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1e59      	subs	r1, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002106:	e051      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 8002108:	2304      	movs	r3, #4
 800210a:	e04f      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d111      	bne.n	8002138 <HAL_I2C_Init+0x168>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e58      	subs	r0, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	440b      	add	r3, r1
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e012      	b.n	800215e <HAL_I2C_Init+0x18e>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Init+0x196>
 8002162:	2301      	movs	r3, #1
 8002164:	e022      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10e      	bne.n	800218c <HAL_I2C_Init+0x1bc>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1e58      	subs	r0, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	440b      	add	r3, r1
 800217c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218a:	e00f      	b.n	80021ac <HAL_I2C_Init+0x1dc>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e58      	subs	r0, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	0099      	lsls	r1, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	6809      	ldr	r1, [r1, #0]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6911      	ldr	r1, [r2, #16]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68d2      	ldr	r2, [r2, #12]
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	000186a0 	.word	0x000186a0
 8002248:	001e847f 	.word	0x001e847f
 800224c:	003d08ff 	.word	0x003d08ff
 8002250:	431bde83 	.word	0x431bde83
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	461a      	mov	r2, r3
 8002264:	460b      	mov	r3, r1
 8002266:	817b      	strh	r3, [r7, #10]
 8002268:	4613      	mov	r3, r2
 800226a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff f86a 	bl	8001344 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b20      	cmp	r3, #32
 800227c:	f040 820b 	bne.w	8002696 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2319      	movs	r3, #25
 8002286:	2201      	movs	r2, #1
 8002288:	497c      	ldr	r1, [pc, #496]	; (800247c <HAL_I2C_Master_Receive+0x224>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fad8 	bl	8002840 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002296:	2302      	movs	r3, #2
 8002298:	e1fe      	b.n	8002698 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_I2C_Master_Receive+0x50>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e1f7      	b.n	8002698 <HAL_I2C_Master_Receive+0x440>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d007      	beq.n	80022ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2222      	movs	r2, #34	; 0x22
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2210      	movs	r2, #16
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	893a      	ldrh	r2, [r7, #8]
 80022fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a5c      	ldr	r2, [pc, #368]	; (8002480 <HAL_I2C_Master_Receive+0x228>)
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002310:	8979      	ldrh	r1, [r7, #10]
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f9c4 	bl	80026a4 <I2C_MasterRequestRead>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e1b8      	b.n	8002698 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	2b00      	cmp	r3, #0
 800232c:	d113      	bne.n	8002356 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	623b      	str	r3, [r7, #32]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e18c      	b.n	8002670 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	2b01      	cmp	r3, #1
 800235c:	d11b      	bne.n	8002396 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800236c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e16c      	b.n	8002670 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	2b02      	cmp	r3, #2
 800239c:	d11b      	bne.n	80023d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	e14c      	b.n	8002670 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023fc:	e138      	b.n	8002670 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b03      	cmp	r3, #3
 8002404:	f200 80f1 	bhi.w	80025ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	2b01      	cmp	r3, #1
 800240e:	d123      	bne.n	8002458 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fae9 	bl	80029ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e139      	b.n	8002698 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002456:	e10b      	b.n	8002670 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	2b02      	cmp	r3, #2
 800245e:	d14e      	bne.n	80024fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	2200      	movs	r2, #0
 8002468:	4906      	ldr	r1, [pc, #24]	; (8002484 <HAL_I2C_Master_Receive+0x22c>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f9e8 	bl	8002840 <I2C_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e10e      	b.n	8002698 <HAL_I2C_Master_Receive+0x440>
 800247a:	bf00      	nop
 800247c:	00100002 	.word	0x00100002
 8002480:	ffff0000 	.word	0xffff0000
 8002484:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024fc:	e0b8      	b.n	8002670 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	2200      	movs	r2, #0
 8002506:	4966      	ldr	r1, [pc, #408]	; (80026a0 <HAL_I2C_Master_Receive+0x448>)
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f999 	bl	8002840 <I2C_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0bf      	b.n	8002698 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	2200      	movs	r2, #0
 8002562:	494f      	ldr	r1, [pc, #316]	; (80026a0 <HAL_I2C_Master_Receive+0x448>)
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f96b 	bl	8002840 <I2C_WaitOnFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e091      	b.n	8002698 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025e8:	e042      	b.n	8002670 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f9fc 	bl	80029ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e04c      	b.n	8002698 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b04      	cmp	r3, #4
 800263c:	d118      	bne.n	8002670 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f aec2 	bne.w	80023fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3728      	adds	r7, #40	; 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	00010004 	.word	0x00010004

080026a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	460b      	mov	r3, r1
 80026b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d006      	beq.n	80026de <I2C_MasterRequestRead+0x3a>
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d003      	beq.n	80026de <I2C_MasterRequestRead+0x3a>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026dc:	d108      	bne.n	80026f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e00b      	b.n	8002708 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2b11      	cmp	r3, #17
 80026f6:	d107      	bne.n	8002708 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f893 	bl	8002840 <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00d      	beq.n	800273c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272e:	d103      	bne.n	8002738 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e079      	b.n	8002830 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002744:	d108      	bne.n	8002758 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]
 8002756:	e05f      	b.n	8002818 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002758:	897b      	ldrh	r3, [r7, #10]
 800275a:	11db      	asrs	r3, r3, #7
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0306 	and.w	r3, r3, #6
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f063 030f 	orn	r3, r3, #15
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4930      	ldr	r1, [pc, #192]	; (8002838 <I2C_MasterRequestRead+0x194>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f8b9 	bl	80028ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e054      	b.n	8002830 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002786:	897b      	ldrh	r3, [r7, #10]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4929      	ldr	r1, [pc, #164]	; (800283c <I2C_MasterRequestRead+0x198>)
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f8a9 	bl	80028ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e044      	b.n	8002830 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f831 	bl	8002840 <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f2:	d103      	bne.n	80027fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e017      	b.n	8002830 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002800:	897b      	ldrh	r3, [r7, #10]
 8002802:	11db      	asrs	r3, r3, #7
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 0306 	and.w	r3, r3, #6
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f063 030e 	orn	r3, r3, #14
 8002810:	b2da      	uxtb	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <I2C_MasterRequestRead+0x198>)
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f865 	bl	80028ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	00010008 	.word	0x00010008
 800283c:	00010002 	.word	0x00010002

08002840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002850:	e025      	b.n	800289e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002858:	d021      	beq.n	800289e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285a:	f7fe fd73 	bl	8001344 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d116      	bne.n	800289e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e023      	b.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d10d      	bne.n	80028c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4013      	ands	r3, r2
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	e00c      	b.n	80028de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf0c      	ite	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	2300      	movne	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d0b6      	beq.n	8002852 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028fc:	e051      	b.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290c:	d123      	bne.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002926:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e046      	b.n	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295c:	d021      	beq.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7fe fcf1 	bl	8001344 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e020      	b.n	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10c      	bne.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf14      	ite	ne
 80029be:	2301      	movne	r3, #1
 80029c0:	2300      	moveq	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	e00b      	b.n	80029de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	43da      	mvns	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d18d      	bne.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029f8:	e042      	b.n	8002a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d119      	bne.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0210 	mvn.w	r2, #16
 8002a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e029      	b.n	8002a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7fe fc82 	bl	8001344 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d302      	bcc.n	8002a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d116      	bne.n	8002a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e007      	b.n	8002a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d1b5      	bne.n	80029fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0cc      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d90c      	bls.n	8002ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0b8      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b10:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	494d      	ldr	r1, [pc, #308]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d044      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d119      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e07f      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d003      	beq.n	8002b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e06f      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b66:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e067      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f023 0203 	bic.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4934      	ldr	r1, [pc, #208]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b88:	f7fe fbdc 	bl	8001344 <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7fe fbd8 	bl	8001344 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e04f      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 020c 	and.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d1eb      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d20c      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e032      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4916      	ldr	r1, [pc, #88]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	490e      	ldr	r1, [pc, #56]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c1e:	f000 f855 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	490a      	ldr	r1, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	5ccb      	ldrb	r3, [r1, r3]
 8002c32:	fa22 f303 	lsr.w	r3, r2, r3
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe fb3c 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023c00 	.word	0x40023c00
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08005848 	.word	0x08005848
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff0 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08005858 	.word	0x08005858

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ca8:	f7ff ffdc 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0b5b      	lsrs	r3, r3, #13
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08005858 	.word	0x08005858

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd0:	b0ae      	sub	sp, #184	; 0xb8
 8002cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf2:	4bcb      	ldr	r3, [pc, #812]	; (8003020 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	f200 8206 	bhi.w	800310c <HAL_RCC_GetSysClockFreq+0x440>
 8002d00:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d3d 	.word	0x08002d3d
 8002d0c:	0800310d 	.word	0x0800310d
 8002d10:	0800310d 	.word	0x0800310d
 8002d14:	0800310d 	.word	0x0800310d
 8002d18:	08002d45 	.word	0x08002d45
 8002d1c:	0800310d 	.word	0x0800310d
 8002d20:	0800310d 	.word	0x0800310d
 8002d24:	0800310d 	.word	0x0800310d
 8002d28:	08002d4d 	.word	0x08002d4d
 8002d2c:	0800310d 	.word	0x0800310d
 8002d30:	0800310d 	.word	0x0800310d
 8002d34:	0800310d 	.word	0x0800310d
 8002d38:	08002f3d 	.word	0x08002f3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d3c:	4bb9      	ldr	r3, [pc, #740]	; (8003024 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d42:	e1e7      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d44:	4bb8      	ldr	r3, [pc, #736]	; (8003028 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d4a:	e1e3      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d4c:	4bb4      	ldr	r3, [pc, #720]	; (8003020 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d58:	4bb1      	ldr	r3, [pc, #708]	; (8003020 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d071      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d64:	4bae      	ldr	r3, [pc, #696]	; (8003020 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d70:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	f04f 0000 	mov.w	r0, #0
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	0159      	lsls	r1, r3, #5
 8002d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9c:	0150      	lsls	r0, r2, #5
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4621      	mov	r1, r4
 8002da4:	1a51      	subs	r1, r2, r1
 8002da6:	6439      	str	r1, [r7, #64]	; 0x40
 8002da8:	4629      	mov	r1, r5
 8002daa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	018b      	lsls	r3, r1, #6
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc6:	4641      	mov	r1, r8
 8002dc8:	018a      	lsls	r2, r1, #6
 8002dca:	4641      	mov	r1, r8
 8002dcc:	1a51      	subs	r1, r2, r1
 8002dce:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002de4:	4649      	mov	r1, r9
 8002de6:	00cb      	lsls	r3, r1, #3
 8002de8:	4641      	mov	r1, r8
 8002dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dee:	4641      	mov	r1, r8
 8002df0:	00ca      	lsls	r2, r1, #3
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	4622      	mov	r2, r4
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dfe:	462b      	mov	r3, r5
 8002e00:	460a      	mov	r2, r1
 8002e02:	eb42 0303 	adc.w	r3, r2, r3
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e14:	4629      	mov	r1, r5
 8002e16:	024b      	lsls	r3, r1, #9
 8002e18:	4621      	mov	r1, r4
 8002e1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e1e:	4621      	mov	r1, r4
 8002e20:	024a      	lsls	r2, r1, #9
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e38:	f7fd fa3a 	bl	80002b0 <__aeabi_uldivmod>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4613      	mov	r3, r2
 8002e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e46:	e067      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e48:	4b75      	ldr	r3, [pc, #468]	; (8003020 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e62:	2300      	movs	r3, #0
 8002e64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	f04f 0000 	mov.w	r0, #0
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	0159      	lsls	r1, r3, #5
 8002e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e7c:	0150      	lsls	r0, r2, #5
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4621      	mov	r1, r4
 8002e84:	1a51      	subs	r1, r2, r1
 8002e86:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e88:	4629      	mov	r1, r5
 8002e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	018b      	lsls	r3, r1, #6
 8002ea0:	4641      	mov	r1, r8
 8002ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ea6:	4641      	mov	r1, r8
 8002ea8:	018a      	lsls	r2, r1, #6
 8002eaa:	4641      	mov	r1, r8
 8002eac:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ec2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eca:	4692      	mov	sl, r2
 8002ecc:	469b      	mov	fp, r3
 8002ece:	4623      	mov	r3, r4
 8002ed0:	eb1a 0303 	adds.w	r3, sl, r3
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	462b      	mov	r3, r5
 8002ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002eea:	4629      	mov	r1, r5
 8002eec:	028b      	lsls	r3, r1, #10
 8002eee:	4621      	mov	r1, r4
 8002ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	028a      	lsls	r2, r1, #10
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f00:	2200      	movs	r2, #0
 8002f02:	673b      	str	r3, [r7, #112]	; 0x70
 8002f04:	677a      	str	r2, [r7, #116]	; 0x74
 8002f06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f0a:	f7fd f9d1 	bl	80002b0 <__aeabi_uldivmod>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4613      	mov	r3, r2
 8002f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f18:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	3301      	adds	r3, #1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f3a:	e0eb      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f3c:	4b38      	ldr	r3, [pc, #224]	; (8003020 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f48:	4b35      	ldr	r3, [pc, #212]	; (8003020 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d06b      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	663b      	str	r3, [r7, #96]	; 0x60
 8002f68:	2300      	movs	r3, #0
 8002f6a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f70:	4622      	mov	r2, r4
 8002f72:	462b      	mov	r3, r5
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	0159      	lsls	r1, r3, #5
 8002f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f82:	0150      	lsls	r0, r2, #5
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4621      	mov	r1, r4
 8002f8a:	1a51      	subs	r1, r2, r1
 8002f8c:	61b9      	str	r1, [r7, #24]
 8002f8e:	4629      	mov	r1, r5
 8002f90:	eb63 0301 	sbc.w	r3, r3, r1
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fa2:	4659      	mov	r1, fp
 8002fa4:	018b      	lsls	r3, r1, #6
 8002fa6:	4651      	mov	r1, sl
 8002fa8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fac:	4651      	mov	r1, sl
 8002fae:	018a      	lsls	r2, r1, #6
 8002fb0:	4651      	mov	r1, sl
 8002fb2:	ebb2 0801 	subs.w	r8, r2, r1
 8002fb6:	4659      	mov	r1, fp
 8002fb8:	eb63 0901 	sbc.w	r9, r3, r1
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd0:	4690      	mov	r8, r2
 8002fd2:	4699      	mov	r9, r3
 8002fd4:	4623      	mov	r3, r4
 8002fd6:	eb18 0303 	adds.w	r3, r8, r3
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	462b      	mov	r3, r5
 8002fde:	eb49 0303 	adc.w	r3, r9, r3
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	024b      	lsls	r3, r1, #9
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	024a      	lsls	r2, r1, #9
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003006:	2200      	movs	r2, #0
 8003008:	65bb      	str	r3, [r7, #88]	; 0x58
 800300a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800300c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003010:	f7fd f94e 	bl	80002b0 <__aeabi_uldivmod>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4613      	mov	r3, r2
 800301a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800301e:	e065      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x420>
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302c:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <HAL_RCC_GetSysClockFreq+0x458>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	2200      	movs	r2, #0
 8003034:	4618      	mov	r0, r3
 8003036:	4611      	mov	r1, r2
 8003038:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800303c:	653b      	str	r3, [r7, #80]	; 0x50
 800303e:	2300      	movs	r3, #0
 8003040:	657b      	str	r3, [r7, #84]	; 0x54
 8003042:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003046:	4642      	mov	r2, r8
 8003048:	464b      	mov	r3, r9
 800304a:	f04f 0000 	mov.w	r0, #0
 800304e:	f04f 0100 	mov.w	r1, #0
 8003052:	0159      	lsls	r1, r3, #5
 8003054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003058:	0150      	lsls	r0, r2, #5
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4641      	mov	r1, r8
 8003060:	1a51      	subs	r1, r2, r1
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	4649      	mov	r1, r9
 8003066:	eb63 0301 	sbc.w	r3, r3, r1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003078:	4659      	mov	r1, fp
 800307a:	018b      	lsls	r3, r1, #6
 800307c:	4651      	mov	r1, sl
 800307e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003082:	4651      	mov	r1, sl
 8003084:	018a      	lsls	r2, r1, #6
 8003086:	4651      	mov	r1, sl
 8003088:	1a54      	subs	r4, r2, r1
 800308a:	4659      	mov	r1, fp
 800308c:	eb63 0501 	sbc.w	r5, r3, r1
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	00eb      	lsls	r3, r5, #3
 800309a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309e:	00e2      	lsls	r2, r4, #3
 80030a0:	4614      	mov	r4, r2
 80030a2:	461d      	mov	r5, r3
 80030a4:	4643      	mov	r3, r8
 80030a6:	18e3      	adds	r3, r4, r3
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	464b      	mov	r3, r9
 80030ac:	eb45 0303 	adc.w	r3, r5, r3
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030be:	4629      	mov	r1, r5
 80030c0:	028b      	lsls	r3, r1, #10
 80030c2:	4621      	mov	r1, r4
 80030c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030c8:	4621      	mov	r1, r4
 80030ca:	028a      	lsls	r2, r1, #10
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030d4:	2200      	movs	r2, #0
 80030d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030de:	f7fd f8e7 	bl	80002b0 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4613      	mov	r3, r2
 80030e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_RCC_GetSysClockFreq+0x458>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0f1b      	lsrs	r3, r3, #28
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80030fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800310a:	e003      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_GetSysClockFreq+0x45c>)
 800310e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003112:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003114:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003118:	4618      	mov	r0, r3
 800311a:	37b8      	adds	r7, #184	; 0xb8
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	00f42400 	.word	0x00f42400

0800312c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e28d      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8083 	beq.w	8003252 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800314c:	4b94      	ldr	r3, [pc, #592]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b04      	cmp	r3, #4
 8003156:	d019      	beq.n	800318c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003158:	4b91      	ldr	r3, [pc, #580]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003160:	2b08      	cmp	r3, #8
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003164:	4b8e      	ldr	r3, [pc, #568]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003170:	d00c      	beq.n	800318c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b8b      	ldr	r3, [pc, #556]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d112      	bne.n	80031a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800318a:	d10b      	bne.n	80031a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	4b84      	ldr	r3, [pc, #528]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d05b      	beq.n	8003250 <HAL_RCC_OscConfig+0x124>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d157      	bne.n	8003250 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e25a      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x90>
 80031ae:	4b7c      	ldr	r3, [pc, #496]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a7b      	ldr	r2, [pc, #492]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e01d      	b.n	80031f8 <HAL_RCC_OscConfig+0xcc>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0xb4>
 80031c6:	4b76      	ldr	r3, [pc, #472]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a75      	ldr	r2, [pc, #468]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a72      	ldr	r2, [pc, #456]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xcc>
 80031e0:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a6e      	ldr	r2, [pc, #440]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b6c      	ldr	r3, [pc, #432]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6b      	ldr	r2, [pc, #428]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe f8a0 	bl	8001344 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe f89c 	bl	8001344 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e21f      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0xdc>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe f88c 	bl	8001344 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe f888 	bl	8001344 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e20b      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x104>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d06f      	beq.n	800333e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800325e:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b00      	cmp	r3, #0
 8003268:	d017      	beq.n	800329a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800326a:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003272:	2b08      	cmp	r3, #8
 8003274:	d105      	bne.n	8003282 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003276:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003282:	4b47      	ldr	r3, [pc, #284]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d11c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328e:	4b44      	ldr	r3, [pc, #272]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x186>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1d3      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b2:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4937      	ldr	r1, [pc, #220]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	e03a      	b.n	800333e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d0:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_RCC_OscConfig+0x278>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe f835 	bl	8001344 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032de:	f7fe f831 	bl	8001344 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1b4      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4925      	ldr	r1, [pc, #148]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
 8003310:	e015      	b.n	800333e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003312:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <HAL_RCC_OscConfig+0x278>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe f814 	bl	8001344 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003320:	f7fe f810 	bl	8001344 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e193      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d036      	beq.n	80033b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <HAL_RCC_OscConfig+0x27c>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fd fff4 	bl	8001344 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003360:	f7fd fff0 	bl	8001344 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e173      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_OscConfig+0x274>)
 8003374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x234>
 800337e:	e01b      	b.n	80033b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_OscConfig+0x27c>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7fd ffdd 	bl	8001344 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	e00e      	b.n	80033ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338e:	f7fd ffd9 	bl	8001344 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d907      	bls.n	80033ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e15c      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
 80033a0:	40023800 	.word	0x40023800
 80033a4:	42470000 	.word	0x42470000
 80033a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	4b8a      	ldr	r3, [pc, #552]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80033ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ea      	bne.n	800338e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8097 	beq.w	80034f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b83      	ldr	r3, [pc, #524]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	4b7f      	ldr	r3, [pc, #508]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a7e      	ldr	r2, [pc, #504]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b7c      	ldr	r3, [pc, #496]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b79      	ldr	r3, [pc, #484]	; (80035dc <HAL_RCC_OscConfig+0x4b0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003402:	4b76      	ldr	r3, [pc, #472]	; (80035dc <HAL_RCC_OscConfig+0x4b0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a75      	ldr	r2, [pc, #468]	; (80035dc <HAL_RCC_OscConfig+0x4b0>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340e:	f7fd ff99 	bl	8001344 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003416:	f7fd ff95 	bl	8001344 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e118      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	4b6c      	ldr	r3, [pc, #432]	; (80035dc <HAL_RCC_OscConfig+0x4b0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x31e>
 800343c:	4b66      	ldr	r3, [pc, #408]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4a65      	ldr	r2, [pc, #404]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6713      	str	r3, [r2, #112]	; 0x70
 8003448:	e01c      	b.n	8003484 <HAL_RCC_OscConfig+0x358>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b05      	cmp	r3, #5
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x340>
 8003452:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	4a60      	ldr	r2, [pc, #384]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	6713      	str	r3, [r2, #112]	; 0x70
 800345e:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a5d      	ldr	r2, [pc, #372]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6713      	str	r3, [r2, #112]	; 0x70
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0x358>
 800346c:	4b5a      	ldr	r3, [pc, #360]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a59      	ldr	r2, [pc, #356]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
 8003478:	4b57      	ldr	r3, [pc, #348]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4a56      	ldr	r2, [pc, #344]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 800347e:	f023 0304 	bic.w	r3, r3, #4
 8003482:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d015      	beq.n	80034b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fd ff5a 	bl	8001344 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fd ff56 	bl	8001344 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0d7      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ee      	beq.n	8003494 <HAL_RCC_OscConfig+0x368>
 80034b6:	e014      	b.n	80034e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fd ff44 	bl	8001344 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fd ff40 	bl	8001344 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0c1      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	4b40      	ldr	r3, [pc, #256]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ee      	bne.n	80034c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	4a3a      	ldr	r2, [pc, #232]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80ad 	beq.w	8003658 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fe:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d060      	beq.n	80035cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d145      	bne.n	800359e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_RCC_OscConfig+0x4b4>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd ff14 	bl	8001344 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7fd ff10 	bl	8001344 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e093      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	3b01      	subs	r3, #1
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	071b      	lsls	r3, r3, #28
 800356a:	491b      	ldr	r1, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCC_OscConfig+0x4b4>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd fee5 	bl	8001344 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357e:	f7fd fee1 	bl	8001344 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e064      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x452>
 800359c:	e05c      	b.n	8003658 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <HAL_RCC_OscConfig+0x4b4>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fd fece 	bl	8001344 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fd feca 	bl	8001344 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e04d      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x480>
 80035ca:	e045      	b.n	8003658 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e040      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40007000 	.word	0x40007000
 80035e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035e4:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <HAL_RCC_OscConfig+0x538>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d030      	beq.n	8003654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d129      	bne.n	8003654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d122      	bne.n	8003654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800361a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800361c:	4293      	cmp	r3, r2
 800361e:	d119      	bne.n	8003654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	3b01      	subs	r3, #1
 800362e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d10f      	bne.n	8003654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d107      	bne.n	8003654 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800

08003668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e041      	b.n	80036fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fd fc68 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 fca8 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d001      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e04e      	b.n	80037be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_TIM_Base_Start_IT+0xc4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d01d      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d111      	bne.n	80037ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b06      	cmp	r3, #6
 8003798:	d010      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037aa:	e007      	b.n	80037bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40010000 	.word	0x40010000
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	40010400 	.word	0x40010400
 80037e0:	40014000 	.word	0x40014000
 80037e4:	40001800 	.word	0x40001800

080037e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	f241 1311 	movw	r3, #4369	; 0x1111
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <HAL_TIM_Base_Stop_IT+0x48>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6a1a      	ldr	r2, [r3, #32]
 8003816:	f240 4344 	movw	r3, #1092	; 0x444
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <HAL_TIM_Base_Stop_IT+0x48>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e041      	b.n	80038dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f839 	bl	80038e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f000 fbb9 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_TIM_PWM_Start+0x24>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e022      	b.n	8003962 <HAL_TIM_PWM_Start+0x6a>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b04      	cmp	r3, #4
 8003920:	d109      	bne.n	8003936 <HAL_TIM_PWM_Start+0x3e>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e015      	b.n	8003962 <HAL_TIM_PWM_Start+0x6a>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d109      	bne.n	8003950 <HAL_TIM_PWM_Start+0x58>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e008      	b.n	8003962 <HAL_TIM_PWM_Start+0x6a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07c      	b.n	8003a64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d104      	bne.n	800397a <HAL_TIM_PWM_Start+0x82>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003978:	e013      	b.n	80039a2 <HAL_TIM_PWM_Start+0xaa>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0x92>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003988:	e00b      	b.n	80039a2 <HAL_TIM_PWM_Start+0xaa>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d104      	bne.n	800399a <HAL_TIM_PWM_Start+0xa2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003998:	e003      	b.n	80039a2 <HAL_TIM_PWM_Start+0xaa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2201      	movs	r2, #1
 80039a8:	6839      	ldr	r1, [r7, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fe10 	bl	80045d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <HAL_TIM_PWM_Start+0x174>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_TIM_PWM_Start+0xcc>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2c      	ldr	r2, [pc, #176]	; (8003a70 <HAL_TIM_PWM_Start+0x178>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_PWM_Start+0xd0>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_TIM_PWM_Start+0xd2>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <HAL_TIM_PWM_Start+0x174>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x136>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d01d      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x136>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_TIM_PWM_Start+0x17c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x136>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <HAL_TIM_PWM_Start+0x180>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x136>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_TIM_PWM_Start+0x184>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x136>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <HAL_TIM_PWM_Start+0x178>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x136>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_TIM_PWM_Start+0x188>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x136>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_TIM_PWM_Start+0x18c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d111      	bne.n	8003a52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b06      	cmp	r3, #6
 8003a3e:	d010      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a50:	e007      	b.n	8003a62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40010400 	.word	0x40010400
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40001800 	.word	0x40001800

08003a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d122      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0202 	mvn.w	r2, #2
 8003ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa77 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fa69 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fa7a 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0204 	mvn.w	r2, #4
 8003b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa4d 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fa3f 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa50 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0208 	mvn.w	r2, #8
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2204      	movs	r2, #4
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa23 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa15 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fa26 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0210 	mvn.w	r2, #16
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f9f9 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f9eb 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f9fc 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0201 	mvn.w	r2, #1
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd f8be 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d10e      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d107      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fd78 	bl	8004728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d10e      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d107      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9c1 	bl	8003fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d10e      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d107      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0220 	mvn.w	r2, #32
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fd42 	bl	8004714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0ae      	b.n	8003e14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	f200 809f 	bhi.w	8003e04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003e05 	.word	0x08003e05
 8003cd4:	08003e05 	.word	0x08003e05
 8003cd8:	08003e05 	.word	0x08003e05
 8003cdc:	08003d41 	.word	0x08003d41
 8003ce0:	08003e05 	.word	0x08003e05
 8003ce4:	08003e05 	.word	0x08003e05
 8003ce8:	08003e05 	.word	0x08003e05
 8003cec:	08003d83 	.word	0x08003d83
 8003cf0:	08003e05 	.word	0x08003e05
 8003cf4:	08003e05 	.word	0x08003e05
 8003cf8:	08003e05 	.word	0x08003e05
 8003cfc:	08003dc3 	.word	0x08003dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa18 	bl	800413c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]
      break;
 8003d3e:	e064      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fa68 	bl	800421c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
      break;
 8003d80:	e043      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fabd 	bl	8004308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0208 	orr.w	r2, r2, #8
 8003d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0204 	bic.w	r2, r2, #4
 8003dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
      break;
 8003dc0:	e023      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fb11 	bl	80043f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	61da      	str	r2, [r3, #28]
      break;
 8003e02:	e002      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
      break;
 8003e08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_ConfigClockSource+0x1c>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e0b4      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x186>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e70:	d03e      	beq.n	8003ef0 <HAL_TIM_ConfigClockSource+0xd4>
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e76:	f200 8087 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7e:	f000 8086 	beq.w	8003f8e <HAL_TIM_ConfigClockSource+0x172>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e86:	d87f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b70      	cmp	r3, #112	; 0x70
 8003e8a:	d01a      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0xa6>
 8003e8c:	2b70      	cmp	r3, #112	; 0x70
 8003e8e:	d87b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b60      	cmp	r3, #96	; 0x60
 8003e92:	d050      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x11a>
 8003e94:	2b60      	cmp	r3, #96	; 0x60
 8003e96:	d877      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b50      	cmp	r3, #80	; 0x50
 8003e9a:	d03c      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0xfa>
 8003e9c:	2b50      	cmp	r3, #80	; 0x50
 8003e9e:	d873      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d058      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x13a>
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d86f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b30      	cmp	r3, #48	; 0x30
 8003eaa:	d064      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003eac:	2b30      	cmp	r3, #48	; 0x30
 8003eae:	d86b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d060      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d867      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05c      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d05a      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec0:	e062      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6899      	ldr	r1, [r3, #8]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f000 fb5d 	bl	8004590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	609a      	str	r2, [r3, #8]
      break;
 8003eee:	e04f      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6899      	ldr	r1, [r3, #8]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f000 fb46 	bl	8004590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f12:	609a      	str	r2, [r3, #8]
      break;
 8003f14:	e03c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 faba 	bl	800449c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2150      	movs	r1, #80	; 0x50
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fb13 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003f34:	e02c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 fad9 	bl	80044fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2160      	movs	r1, #96	; 0x60
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fb03 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003f54:	e01c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 fa9a 	bl	800449c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 faf3 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003f74:	e00c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f000 faea 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8003f86:	e003      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8c:	e000      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a40      	ldr	r2, [pc, #256]	; (8004110 <TIM_Base_SetConfig+0x114>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401a:	d00f      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3d      	ldr	r2, [pc, #244]	; (8004114 <TIM_Base_SetConfig+0x118>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3c      	ldr	r2, [pc, #240]	; (8004118 <TIM_Base_SetConfig+0x11c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3b      	ldr	r2, [pc, #236]	; (800411c <TIM_Base_SetConfig+0x120>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a3a      	ldr	r2, [pc, #232]	; (8004120 <TIM_Base_SetConfig+0x124>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d108      	bne.n	800404e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2f      	ldr	r2, [pc, #188]	; (8004110 <TIM_Base_SetConfig+0x114>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d02b      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d027      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <TIM_Base_SetConfig+0x118>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d023      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <TIM_Base_SetConfig+0x11c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01f      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2a      	ldr	r2, [pc, #168]	; (800411c <TIM_Base_SetConfig+0x120>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01b      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a29      	ldr	r2, [pc, #164]	; (8004120 <TIM_Base_SetConfig+0x124>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d017      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <TIM_Base_SetConfig+0x128>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <TIM_Base_SetConfig+0x12c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00f      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <TIM_Base_SetConfig+0x130>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00b      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <TIM_Base_SetConfig+0x134>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a24      	ldr	r2, [pc, #144]	; (8004134 <TIM_Base_SetConfig+0x138>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <TIM_Base_SetConfig+0x13c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d108      	bne.n	80040c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <TIM_Base_SetConfig+0x114>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0xf8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <TIM_Base_SetConfig+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d103      	bne.n	80040fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	615a      	str	r2, [r3, #20]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40010400 	.word	0x40010400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800
 8004130:	40001800 	.word	0x40001800
 8004134:	40001c00 	.word	0x40001c00
 8004138:	40002000 	.word	0x40002000

0800413c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 0302 	bic.w	r3, r3, #2
 8004184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a20      	ldr	r2, [pc, #128]	; (8004214 <TIM_OC1_SetConfig+0xd8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_OC1_SetConfig+0x64>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a1f      	ldr	r2, [pc, #124]	; (8004218 <TIM_OC1_SetConfig+0xdc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10c      	bne.n	80041ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0308 	bic.w	r3, r3, #8
 80041a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a15      	ldr	r2, [pc, #84]	; (8004214 <TIM_OC1_SetConfig+0xd8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_OC1_SetConfig+0x8e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <TIM_OC1_SetConfig+0xdc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d111      	bne.n	80041ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40010000 	.word	0x40010000
 8004218:	40010400 	.word	0x40010400

0800421c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0210 	bic.w	r2, r3, #16
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0320 	bic.w	r3, r3, #32
 8004266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a22      	ldr	r2, [pc, #136]	; (8004300 <TIM_OC2_SetConfig+0xe4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_OC2_SetConfig+0x68>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a21      	ldr	r2, [pc, #132]	; (8004304 <TIM_OC2_SetConfig+0xe8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d10d      	bne.n	80042a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a17      	ldr	r2, [pc, #92]	; (8004300 <TIM_OC2_SetConfig+0xe4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_OC2_SetConfig+0x94>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC2_SetConfig+0xe8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d113      	bne.n	80042d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40010400 	.word	0x40010400

08004308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <TIM_OC3_SetConfig+0xe0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d003      	beq.n	800436e <TIM_OC3_SetConfig+0x66>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a20      	ldr	r2, [pc, #128]	; (80043ec <TIM_OC3_SetConfig+0xe4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d10d      	bne.n	800438a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <TIM_OC3_SetConfig+0xe0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_OC3_SetConfig+0x92>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a15      	ldr	r2, [pc, #84]	; (80043ec <TIM_OC3_SetConfig+0xe4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d113      	bne.n	80043c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	621a      	str	r2, [r3, #32]
}
 80043dc:	bf00      	nop
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40010400 	.word	0x40010400

080043f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800443a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	031b      	lsls	r3, r3, #12
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a12      	ldr	r2, [pc, #72]	; (8004494 <TIM_OC4_SetConfig+0xa4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_OC4_SetConfig+0x68>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a11      	ldr	r2, [pc, #68]	; (8004498 <TIM_OC4_SetConfig+0xa8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d109      	bne.n	800446c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800445e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	019b      	lsls	r3, r3, #6
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40010400 	.word	0x40010400

0800449c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 030a 	bic.w	r3, r3, #10
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0210 	bic.w	r2, r3, #16
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	f043 0307 	orr.w	r3, r3, #7
 800457c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	021a      	lsls	r2, r3, #8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	2201      	movs	r2, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a1a      	ldr	r2, [r3, #32]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004630:	2302      	movs	r3, #2
 8004632:	e05a      	b.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a21      	ldr	r2, [pc, #132]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d022      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004680:	d01d      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d018      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a15      	ldr	r2, [pc, #84]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10c      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800
 8004704:	40000c00 	.word	0x40000c00
 8004708:	40010400 	.word	0x40010400
 800470c:	40014000 	.word	0x40014000
 8004710:	40001800 	.word	0x40001800

08004714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e03f      	b.n	80047ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fc fc90 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	; 0x24
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800477e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f929 	bl	80049d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08a      	sub	sp, #40	; 0x28
 80047da:	af02      	add	r7, sp, #8
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d17c      	bne.n	80048f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_UART_Transmit+0x2c>
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e075      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UART_Transmit+0x3e>
 8004810:	2302      	movs	r3, #2
 8004812:	e06e      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2221      	movs	r2, #33	; 0x21
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800482a:	f7fc fd8b 	bl	8001344 <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	88fa      	ldrh	r2, [r7, #6]
 800483a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d108      	bne.n	8004858 <HAL_UART_Transmit+0x82>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	e003      	b.n	8004860 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004868:	e02a      	b.n	80048c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f840 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e036      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	3302      	adds	r3, #2
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	e007      	b.n	80048b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	3301      	adds	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1cf      	bne.n	800486a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	2140      	movs	r1, #64	; 0x40
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f810 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e006      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e000      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b090      	sub	sp, #64	; 0x40
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490a:	e050      	b.n	80049ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004912:	d04c      	beq.n	80049ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0x30>
 800491a:	f7fc fd13 	bl	8001344 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004926:	429a      	cmp	r2, r3
 8004928:	d241      	bcs.n	80049ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800494a:	637a      	str	r2, [r7, #52]	; 0x34
 800494c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e5      	bne.n	800492a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	613b      	str	r3, [r7, #16]
   return(result);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	63bb      	str	r3, [r7, #56]	; 0x38
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3314      	adds	r3, #20
 800497c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800497e:	623a      	str	r2, [r7, #32]
 8004980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	69f9      	ldr	r1, [r7, #28]
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	61bb      	str	r3, [r7, #24]
   return(result);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e00f      	b.n	80049ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	bf0c      	ite	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	2300      	movne	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d09f      	beq.n	800490c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3740      	adds	r7, #64	; 0x40
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049dc:	b0c0      	sub	sp, #256	; 0x100
 80049de:	af00      	add	r7, sp, #0
 80049e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	68d9      	ldr	r1, [r3, #12]
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	ea40 0301 	orr.w	r3, r0, r1
 8004a00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a30:	f021 010c 	bic.w	r1, r1, #12
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a52:	6999      	ldr	r1, [r3, #24]
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	ea40 0301 	orr.w	r3, r0, r1
 8004a5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b8f      	ldr	r3, [pc, #572]	; (8004ca4 <UART_SetConfig+0x2cc>)
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d005      	beq.n	8004a78 <UART_SetConfig+0xa0>
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b8d      	ldr	r3, [pc, #564]	; (8004ca8 <UART_SetConfig+0x2d0>)
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d104      	bne.n	8004a82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a78:	f7fe f914 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8004a7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a80:	e003      	b.n	8004a8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a82:	f7fe f8fb 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8004a86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a94:	f040 810c 	bne.w	8004cb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aa2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004aa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	1891      	adds	r1, r2, r2
 8004ab0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aba:	4621      	mov	r1, r4
 8004abc:	eb12 0801 	adds.w	r8, r2, r1
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	eb43 0901 	adc.w	r9, r3, r1
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ada:	4690      	mov	r8, r2
 8004adc:	4699      	mov	r9, r3
 8004ade:	4623      	mov	r3, r4
 8004ae0:	eb18 0303 	adds.w	r3, r8, r3
 8004ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ae8:	462b      	mov	r3, r5
 8004aea:	eb49 0303 	adc.w	r3, r9, r3
 8004aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004afe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b06:	460b      	mov	r3, r1
 8004b08:	18db      	adds	r3, r3, r3
 8004b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	eb42 0303 	adc.w	r3, r2, r3
 8004b12:	657b      	str	r3, [r7, #84]	; 0x54
 8004b14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b1c:	f7fb fbc8 	bl	80002b0 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4b61      	ldr	r3, [pc, #388]	; (8004cac <UART_SetConfig+0x2d4>)
 8004b26:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	011c      	lsls	r4, r3, #4
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b50:	4641      	mov	r1, r8
 8004b52:	eb12 0a01 	adds.w	sl, r2, r1
 8004b56:	4649      	mov	r1, r9
 8004b58:	eb43 0b01 	adc.w	fp, r3, r1
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b70:	4692      	mov	sl, r2
 8004b72:	469b      	mov	fp, r3
 8004b74:	4643      	mov	r3, r8
 8004b76:	eb1a 0303 	adds.w	r3, sl, r3
 8004b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	eb4b 0303 	adc.w	r3, fp, r3
 8004b84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	18db      	adds	r3, r3, r3
 8004ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	eb42 0303 	adc.w	r3, r2, r3
 8004ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8004baa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bb2:	f7fb fb7d 	bl	80002b0 <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4b3b      	ldr	r3, [pc, #236]	; (8004cac <UART_SetConfig+0x2d4>)
 8004bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2264      	movs	r2, #100	; 0x64
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	1acb      	subs	r3, r1, r3
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bd2:	4b36      	ldr	r3, [pc, #216]	; (8004cac <UART_SetConfig+0x2d4>)
 8004bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004be0:	441c      	add	r4, r3
 8004be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	1891      	adds	r1, r2, r2
 8004bfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bfc:	415b      	adcs	r3, r3
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c04:	4641      	mov	r1, r8
 8004c06:	1851      	adds	r1, r2, r1
 8004c08:	6339      	str	r1, [r7, #48]	; 0x30
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	414b      	adcs	r3, r1
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	00cb      	lsls	r3, r1, #3
 8004c20:	4651      	mov	r1, sl
 8004c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c26:	4651      	mov	r1, sl
 8004c28:	00ca      	lsls	r2, r1, #3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4642      	mov	r2, r8
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c38:	464b      	mov	r3, r9
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	eb42 0303 	adc.w	r3, r2, r3
 8004c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c58:	460b      	mov	r3, r1
 8004c5a:	18db      	adds	r3, r3, r3
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5e:	4613      	mov	r3, r2
 8004c60:	eb42 0303 	adc.w	r3, r2, r3
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c6e:	f7fb fb1f 	bl	80002b0 <__aeabi_uldivmod>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <UART_SetConfig+0x2d4>)
 8004c78:	fba3 1302 	umull	r1, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	2164      	movs	r1, #100	; 0x64
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	3332      	adds	r3, #50	; 0x32
 8004c8a:	4a08      	ldr	r2, [pc, #32]	; (8004cac <UART_SetConfig+0x2d4>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	f003 0207 	and.w	r2, r3, #7
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4422      	add	r2, r4
 8004c9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ca0:	e105      	b.n	8004eae <UART_SetConfig+0x4d6>
 8004ca2:	bf00      	nop
 8004ca4:	40011000 	.word	0x40011000
 8004ca8:	40011400 	.word	0x40011400
 8004cac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cc2:	4642      	mov	r2, r8
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	6239      	str	r1, [r7, #32]
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cd2:	4641      	mov	r1, r8
 8004cd4:	1854      	adds	r4, r2, r1
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	eb43 0501 	adc.w	r5, r3, r1
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	00eb      	lsls	r3, r5, #3
 8004ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cea:	00e2      	lsls	r2, r4, #3
 8004cec:	4614      	mov	r4, r2
 8004cee:	461d      	mov	r5, r3
 8004cf0:	4643      	mov	r3, r8
 8004cf2:	18e3      	adds	r3, r4, r3
 8004cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	eb45 0303 	adc.w	r3, r5, r3
 8004cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d1e:	4629      	mov	r1, r5
 8004d20:	008b      	lsls	r3, r1, #2
 8004d22:	4621      	mov	r1, r4
 8004d24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d28:	4621      	mov	r1, r4
 8004d2a:	008a      	lsls	r2, r1, #2
 8004d2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d30:	f7fb fabe 	bl	80002b0 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4b60      	ldr	r3, [pc, #384]	; (8004ebc <UART_SetConfig+0x4e4>)
 8004d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	011c      	lsls	r4, r3, #4
 8004d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d54:	4642      	mov	r2, r8
 8004d56:	464b      	mov	r3, r9
 8004d58:	1891      	adds	r1, r2, r2
 8004d5a:	61b9      	str	r1, [r7, #24]
 8004d5c:	415b      	adcs	r3, r3
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d64:	4641      	mov	r1, r8
 8004d66:	1851      	adds	r1, r2, r1
 8004d68:	6139      	str	r1, [r7, #16]
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	414b      	adcs	r3, r1
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	00cb      	lsls	r3, r1, #3
 8004d80:	4651      	mov	r1, sl
 8004d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d86:	4651      	mov	r1, sl
 8004d88:	00ca      	lsls	r2, r1, #3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4642      	mov	r2, r8
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d98:	464b      	mov	r3, r9
 8004d9a:	460a      	mov	r2, r1
 8004d9c:	eb42 0303 	adc.w	r3, r2, r3
 8004da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	008b      	lsls	r3, r1, #2
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc6:	4641      	mov	r1, r8
 8004dc8:	008a      	lsls	r2, r1, #2
 8004dca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dce:	f7fb fa6f 	bl	80002b0 <__aeabi_uldivmod>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <UART_SetConfig+0x4e4>)
 8004dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	2164      	movs	r1, #100	; 0x64
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	3332      	adds	r3, #50	; 0x32
 8004dea:	4a34      	ldr	r2, [pc, #208]	; (8004ebc <UART_SetConfig+0x4e4>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df6:	441c      	add	r4, r3
 8004df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8004e00:	677a      	str	r2, [r7, #116]	; 0x74
 8004e02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e06:	4642      	mov	r2, r8
 8004e08:	464b      	mov	r3, r9
 8004e0a:	1891      	adds	r1, r2, r2
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	415b      	adcs	r3, r3
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e16:	4641      	mov	r1, r8
 8004e18:	1851      	adds	r1, r2, r1
 8004e1a:	6039      	str	r1, [r7, #0]
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	414b      	adcs	r3, r1
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e2e:	4659      	mov	r1, fp
 8004e30:	00cb      	lsls	r3, r1, #3
 8004e32:	4651      	mov	r1, sl
 8004e34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e38:	4651      	mov	r1, sl
 8004e3a:	00ca      	lsls	r2, r1, #3
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4603      	mov	r3, r0
 8004e42:	4642      	mov	r2, r8
 8004e44:	189b      	adds	r3, r3, r2
 8004e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e48:	464b      	mov	r3, r9
 8004e4a:	460a      	mov	r2, r1
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e5c:	667a      	str	r2, [r7, #100]	; 0x64
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	008b      	lsls	r3, r1, #2
 8004e6e:	4641      	mov	r1, r8
 8004e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e74:	4641      	mov	r1, r8
 8004e76:	008a      	lsls	r2, r1, #2
 8004e78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e7c:	f7fb fa18 	bl	80002b0 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <UART_SetConfig+0x4e4>)
 8004e86:	fba3 1302 	umull	r1, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2164      	movs	r1, #100	; 0x64
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	3332      	adds	r3, #50	; 0x32
 8004e98:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <UART_SetConfig+0x4e4>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	f003 020f 	and.w	r2, r3, #15
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4422      	add	r2, r4
 8004eac:	609a      	str	r2, [r3, #8]
}
 8004eae:	bf00      	nop
 8004eb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eba:	bf00      	nop
 8004ebc:	51eb851f 	.word	0x51eb851f

08004ec0 <__errno>:
 8004ec0:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <__errno+0x8>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	2000000c 	.word	0x2000000c

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4d0d      	ldr	r5, [pc, #52]	; (8004f04 <__libc_init_array+0x38>)
 8004ed0:	4c0d      	ldr	r4, [pc, #52]	; (8004f08 <__libc_init_array+0x3c>)
 8004ed2:	1b64      	subs	r4, r4, r5
 8004ed4:	10a4      	asrs	r4, r4, #2
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	42a6      	cmp	r6, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	4d0b      	ldr	r5, [pc, #44]	; (8004f0c <__libc_init_array+0x40>)
 8004ede:	4c0c      	ldr	r4, [pc, #48]	; (8004f10 <__libc_init_array+0x44>)
 8004ee0:	f000 fc8e 	bl	8005800 <_init>
 8004ee4:	1b64      	subs	r4, r4, r5
 8004ee6:	10a4      	asrs	r4, r4, #2
 8004ee8:	2600      	movs	r6, #0
 8004eea:	42a6      	cmp	r6, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef4:	4798      	blx	r3
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efe:	4798      	blx	r3
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	0800589c 	.word	0x0800589c
 8004f08:	0800589c 	.word	0x0800589c
 8004f0c:	0800589c 	.word	0x0800589c
 8004f10:	080058a0 	.word	0x080058a0

08004f14 <memcpy>:
 8004f14:	440a      	add	r2, r1
 8004f16:	4291      	cmp	r1, r2
 8004f18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xc>
 8004f1e:	4770      	bx	lr
 8004f20:	b510      	push	{r4, lr}
 8004f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d1f9      	bne.n	8004f22 <memcpy+0xe>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <memset>:
 8004f30:	4402      	add	r2, r0
 8004f32:	4603      	mov	r3, r0
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d100      	bne.n	8004f3a <memset+0xa>
 8004f38:	4770      	bx	lr
 8004f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3e:	e7f9      	b.n	8004f34 <memset+0x4>

08004f40 <siprintf>:
 8004f40:	b40e      	push	{r1, r2, r3}
 8004f42:	b500      	push	{lr}
 8004f44:	b09c      	sub	sp, #112	; 0x70
 8004f46:	ab1d      	add	r3, sp, #116	; 0x74
 8004f48:	9002      	str	r0, [sp, #8]
 8004f4a:	9006      	str	r0, [sp, #24]
 8004f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f50:	4809      	ldr	r0, [pc, #36]	; (8004f78 <siprintf+0x38>)
 8004f52:	9107      	str	r1, [sp, #28]
 8004f54:	9104      	str	r1, [sp, #16]
 8004f56:	4909      	ldr	r1, [pc, #36]	; (8004f7c <siprintf+0x3c>)
 8004f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f5c:	9105      	str	r1, [sp, #20]
 8004f5e:	6800      	ldr	r0, [r0, #0]
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	a902      	add	r1, sp, #8
 8004f64:	f000 f868 	bl	8005038 <_svfiprintf_r>
 8004f68:	9b02      	ldr	r3, [sp, #8]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	b01c      	add	sp, #112	; 0x70
 8004f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f74:	b003      	add	sp, #12
 8004f76:	4770      	bx	lr
 8004f78:	2000000c 	.word	0x2000000c
 8004f7c:	ffff0208 	.word	0xffff0208

08004f80 <__ssputs_r>:
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	688e      	ldr	r6, [r1, #8]
 8004f86:	429e      	cmp	r6, r3
 8004f88:	4682      	mov	sl, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	4690      	mov	r8, r2
 8004f8e:	461f      	mov	r7, r3
 8004f90:	d838      	bhi.n	8005004 <__ssputs_r+0x84>
 8004f92:	898a      	ldrh	r2, [r1, #12]
 8004f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f98:	d032      	beq.n	8005000 <__ssputs_r+0x80>
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	6909      	ldr	r1, [r1, #16]
 8004f9e:	eba5 0901 	sub.w	r9, r5, r1
 8004fa2:	6965      	ldr	r5, [r4, #20]
 8004fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fac:	3301      	adds	r3, #1
 8004fae:	444b      	add	r3, r9
 8004fb0:	106d      	asrs	r5, r5, #1
 8004fb2:	429d      	cmp	r5, r3
 8004fb4:	bf38      	it	cc
 8004fb6:	461d      	movcc	r5, r3
 8004fb8:	0553      	lsls	r3, r2, #21
 8004fba:	d531      	bpl.n	8005020 <__ssputs_r+0xa0>
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f000 fb55 	bl	800566c <_malloc_r>
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	b950      	cbnz	r0, 8004fdc <__ssputs_r+0x5c>
 8004fc6:	230c      	movs	r3, #12
 8004fc8:	f8ca 3000 	str.w	r3, [sl]
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fdc:	6921      	ldr	r1, [r4, #16]
 8004fde:	464a      	mov	r2, r9
 8004fe0:	f7ff ff98 	bl	8004f14 <memcpy>
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fee:	81a3      	strh	r3, [r4, #12]
 8004ff0:	6126      	str	r6, [r4, #16]
 8004ff2:	6165      	str	r5, [r4, #20]
 8004ff4:	444e      	add	r6, r9
 8004ff6:	eba5 0509 	sub.w	r5, r5, r9
 8004ffa:	6026      	str	r6, [r4, #0]
 8004ffc:	60a5      	str	r5, [r4, #8]
 8004ffe:	463e      	mov	r6, r7
 8005000:	42be      	cmp	r6, r7
 8005002:	d900      	bls.n	8005006 <__ssputs_r+0x86>
 8005004:	463e      	mov	r6, r7
 8005006:	6820      	ldr	r0, [r4, #0]
 8005008:	4632      	mov	r2, r6
 800500a:	4641      	mov	r1, r8
 800500c:	f000 faa8 	bl	8005560 <memmove>
 8005010:	68a3      	ldr	r3, [r4, #8]
 8005012:	1b9b      	subs	r3, r3, r6
 8005014:	60a3      	str	r3, [r4, #8]
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	4433      	add	r3, r6
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	2000      	movs	r0, #0
 800501e:	e7db      	b.n	8004fd8 <__ssputs_r+0x58>
 8005020:	462a      	mov	r2, r5
 8005022:	f000 fb97 	bl	8005754 <_realloc_r>
 8005026:	4606      	mov	r6, r0
 8005028:	2800      	cmp	r0, #0
 800502a:	d1e1      	bne.n	8004ff0 <__ssputs_r+0x70>
 800502c:	6921      	ldr	r1, [r4, #16]
 800502e:	4650      	mov	r0, sl
 8005030:	f000 fab0 	bl	8005594 <_free_r>
 8005034:	e7c7      	b.n	8004fc6 <__ssputs_r+0x46>
	...

08005038 <_svfiprintf_r>:
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	4698      	mov	r8, r3
 800503e:	898b      	ldrh	r3, [r1, #12]
 8005040:	061b      	lsls	r3, r3, #24
 8005042:	b09d      	sub	sp, #116	; 0x74
 8005044:	4607      	mov	r7, r0
 8005046:	460d      	mov	r5, r1
 8005048:	4614      	mov	r4, r2
 800504a:	d50e      	bpl.n	800506a <_svfiprintf_r+0x32>
 800504c:	690b      	ldr	r3, [r1, #16]
 800504e:	b963      	cbnz	r3, 800506a <_svfiprintf_r+0x32>
 8005050:	2140      	movs	r1, #64	; 0x40
 8005052:	f000 fb0b 	bl	800566c <_malloc_r>
 8005056:	6028      	str	r0, [r5, #0]
 8005058:	6128      	str	r0, [r5, #16]
 800505a:	b920      	cbnz	r0, 8005066 <_svfiprintf_r+0x2e>
 800505c:	230c      	movs	r3, #12
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005064:	e0d1      	b.n	800520a <_svfiprintf_r+0x1d2>
 8005066:	2340      	movs	r3, #64	; 0x40
 8005068:	616b      	str	r3, [r5, #20]
 800506a:	2300      	movs	r3, #0
 800506c:	9309      	str	r3, [sp, #36]	; 0x24
 800506e:	2320      	movs	r3, #32
 8005070:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005074:	f8cd 800c 	str.w	r8, [sp, #12]
 8005078:	2330      	movs	r3, #48	; 0x30
 800507a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005224 <_svfiprintf_r+0x1ec>
 800507e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005082:	f04f 0901 	mov.w	r9, #1
 8005086:	4623      	mov	r3, r4
 8005088:	469a      	mov	sl, r3
 800508a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800508e:	b10a      	cbz	r2, 8005094 <_svfiprintf_r+0x5c>
 8005090:	2a25      	cmp	r2, #37	; 0x25
 8005092:	d1f9      	bne.n	8005088 <_svfiprintf_r+0x50>
 8005094:	ebba 0b04 	subs.w	fp, sl, r4
 8005098:	d00b      	beq.n	80050b2 <_svfiprintf_r+0x7a>
 800509a:	465b      	mov	r3, fp
 800509c:	4622      	mov	r2, r4
 800509e:	4629      	mov	r1, r5
 80050a0:	4638      	mov	r0, r7
 80050a2:	f7ff ff6d 	bl	8004f80 <__ssputs_r>
 80050a6:	3001      	adds	r0, #1
 80050a8:	f000 80aa 	beq.w	8005200 <_svfiprintf_r+0x1c8>
 80050ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ae:	445a      	add	r2, fp
 80050b0:	9209      	str	r2, [sp, #36]	; 0x24
 80050b2:	f89a 3000 	ldrb.w	r3, [sl]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80a2 	beq.w	8005200 <_svfiprintf_r+0x1c8>
 80050bc:	2300      	movs	r3, #0
 80050be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c6:	f10a 0a01 	add.w	sl, sl, #1
 80050ca:	9304      	str	r3, [sp, #16]
 80050cc:	9307      	str	r3, [sp, #28]
 80050ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050d2:	931a      	str	r3, [sp, #104]	; 0x68
 80050d4:	4654      	mov	r4, sl
 80050d6:	2205      	movs	r2, #5
 80050d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050dc:	4851      	ldr	r0, [pc, #324]	; (8005224 <_svfiprintf_r+0x1ec>)
 80050de:	f7fb f897 	bl	8000210 <memchr>
 80050e2:	9a04      	ldr	r2, [sp, #16]
 80050e4:	b9d8      	cbnz	r0, 800511e <_svfiprintf_r+0xe6>
 80050e6:	06d0      	lsls	r0, r2, #27
 80050e8:	bf44      	itt	mi
 80050ea:	2320      	movmi	r3, #32
 80050ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050f0:	0711      	lsls	r1, r2, #28
 80050f2:	bf44      	itt	mi
 80050f4:	232b      	movmi	r3, #43	; 0x2b
 80050f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050fa:	f89a 3000 	ldrb.w	r3, [sl]
 80050fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005100:	d015      	beq.n	800512e <_svfiprintf_r+0xf6>
 8005102:	9a07      	ldr	r2, [sp, #28]
 8005104:	4654      	mov	r4, sl
 8005106:	2000      	movs	r0, #0
 8005108:	f04f 0c0a 	mov.w	ip, #10
 800510c:	4621      	mov	r1, r4
 800510e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005112:	3b30      	subs	r3, #48	; 0x30
 8005114:	2b09      	cmp	r3, #9
 8005116:	d94e      	bls.n	80051b6 <_svfiprintf_r+0x17e>
 8005118:	b1b0      	cbz	r0, 8005148 <_svfiprintf_r+0x110>
 800511a:	9207      	str	r2, [sp, #28]
 800511c:	e014      	b.n	8005148 <_svfiprintf_r+0x110>
 800511e:	eba0 0308 	sub.w	r3, r0, r8
 8005122:	fa09 f303 	lsl.w	r3, r9, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	9304      	str	r3, [sp, #16]
 800512a:	46a2      	mov	sl, r4
 800512c:	e7d2      	b.n	80050d4 <_svfiprintf_r+0x9c>
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	1d19      	adds	r1, r3, #4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	9103      	str	r1, [sp, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	bfbb      	ittet	lt
 800513a:	425b      	neglt	r3, r3
 800513c:	f042 0202 	orrlt.w	r2, r2, #2
 8005140:	9307      	strge	r3, [sp, #28]
 8005142:	9307      	strlt	r3, [sp, #28]
 8005144:	bfb8      	it	lt
 8005146:	9204      	strlt	r2, [sp, #16]
 8005148:	7823      	ldrb	r3, [r4, #0]
 800514a:	2b2e      	cmp	r3, #46	; 0x2e
 800514c:	d10c      	bne.n	8005168 <_svfiprintf_r+0x130>
 800514e:	7863      	ldrb	r3, [r4, #1]
 8005150:	2b2a      	cmp	r3, #42	; 0x2a
 8005152:	d135      	bne.n	80051c0 <_svfiprintf_r+0x188>
 8005154:	9b03      	ldr	r3, [sp, #12]
 8005156:	1d1a      	adds	r2, r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	9203      	str	r2, [sp, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	bfb8      	it	lt
 8005160:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005164:	3402      	adds	r4, #2
 8005166:	9305      	str	r3, [sp, #20]
 8005168:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005234 <_svfiprintf_r+0x1fc>
 800516c:	7821      	ldrb	r1, [r4, #0]
 800516e:	2203      	movs	r2, #3
 8005170:	4650      	mov	r0, sl
 8005172:	f7fb f84d 	bl	8000210 <memchr>
 8005176:	b140      	cbz	r0, 800518a <_svfiprintf_r+0x152>
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	eba0 000a 	sub.w	r0, r0, sl
 800517e:	fa03 f000 	lsl.w	r0, r3, r0
 8005182:	9b04      	ldr	r3, [sp, #16]
 8005184:	4303      	orrs	r3, r0
 8005186:	3401      	adds	r4, #1
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518e:	4826      	ldr	r0, [pc, #152]	; (8005228 <_svfiprintf_r+0x1f0>)
 8005190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005194:	2206      	movs	r2, #6
 8005196:	f7fb f83b 	bl	8000210 <memchr>
 800519a:	2800      	cmp	r0, #0
 800519c:	d038      	beq.n	8005210 <_svfiprintf_r+0x1d8>
 800519e:	4b23      	ldr	r3, [pc, #140]	; (800522c <_svfiprintf_r+0x1f4>)
 80051a0:	bb1b      	cbnz	r3, 80051ea <_svfiprintf_r+0x1b2>
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	3307      	adds	r3, #7
 80051a6:	f023 0307 	bic.w	r3, r3, #7
 80051aa:	3308      	adds	r3, #8
 80051ac:	9303      	str	r3, [sp, #12]
 80051ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b0:	4433      	add	r3, r6
 80051b2:	9309      	str	r3, [sp, #36]	; 0x24
 80051b4:	e767      	b.n	8005086 <_svfiprintf_r+0x4e>
 80051b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ba:	460c      	mov	r4, r1
 80051bc:	2001      	movs	r0, #1
 80051be:	e7a5      	b.n	800510c <_svfiprintf_r+0xd4>
 80051c0:	2300      	movs	r3, #0
 80051c2:	3401      	adds	r4, #1
 80051c4:	9305      	str	r3, [sp, #20]
 80051c6:	4619      	mov	r1, r3
 80051c8:	f04f 0c0a 	mov.w	ip, #10
 80051cc:	4620      	mov	r0, r4
 80051ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051d2:	3a30      	subs	r2, #48	; 0x30
 80051d4:	2a09      	cmp	r2, #9
 80051d6:	d903      	bls.n	80051e0 <_svfiprintf_r+0x1a8>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0c5      	beq.n	8005168 <_svfiprintf_r+0x130>
 80051dc:	9105      	str	r1, [sp, #20]
 80051de:	e7c3      	b.n	8005168 <_svfiprintf_r+0x130>
 80051e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80051e4:	4604      	mov	r4, r0
 80051e6:	2301      	movs	r3, #1
 80051e8:	e7f0      	b.n	80051cc <_svfiprintf_r+0x194>
 80051ea:	ab03      	add	r3, sp, #12
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	462a      	mov	r2, r5
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <_svfiprintf_r+0x1f8>)
 80051f2:	a904      	add	r1, sp, #16
 80051f4:	4638      	mov	r0, r7
 80051f6:	f3af 8000 	nop.w
 80051fa:	1c42      	adds	r2, r0, #1
 80051fc:	4606      	mov	r6, r0
 80051fe:	d1d6      	bne.n	80051ae <_svfiprintf_r+0x176>
 8005200:	89ab      	ldrh	r3, [r5, #12]
 8005202:	065b      	lsls	r3, r3, #25
 8005204:	f53f af2c 	bmi.w	8005060 <_svfiprintf_r+0x28>
 8005208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800520a:	b01d      	add	sp, #116	; 0x74
 800520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005210:	ab03      	add	r3, sp, #12
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	462a      	mov	r2, r5
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <_svfiprintf_r+0x1f8>)
 8005218:	a904      	add	r1, sp, #16
 800521a:	4638      	mov	r0, r7
 800521c:	f000 f87a 	bl	8005314 <_printf_i>
 8005220:	e7eb      	b.n	80051fa <_svfiprintf_r+0x1c2>
 8005222:	bf00      	nop
 8005224:	08005860 	.word	0x08005860
 8005228:	0800586a 	.word	0x0800586a
 800522c:	00000000 	.word	0x00000000
 8005230:	08004f81 	.word	0x08004f81
 8005234:	08005866 	.word	0x08005866

08005238 <_printf_common>:
 8005238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800523c:	4616      	mov	r6, r2
 800523e:	4699      	mov	r9, r3
 8005240:	688a      	ldr	r2, [r1, #8]
 8005242:	690b      	ldr	r3, [r1, #16]
 8005244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005248:	4293      	cmp	r3, r2
 800524a:	bfb8      	it	lt
 800524c:	4613      	movlt	r3, r2
 800524e:	6033      	str	r3, [r6, #0]
 8005250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005254:	4607      	mov	r7, r0
 8005256:	460c      	mov	r4, r1
 8005258:	b10a      	cbz	r2, 800525e <_printf_common+0x26>
 800525a:	3301      	adds	r3, #1
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	0699      	lsls	r1, r3, #26
 8005262:	bf42      	ittt	mi
 8005264:	6833      	ldrmi	r3, [r6, #0]
 8005266:	3302      	addmi	r3, #2
 8005268:	6033      	strmi	r3, [r6, #0]
 800526a:	6825      	ldr	r5, [r4, #0]
 800526c:	f015 0506 	ands.w	r5, r5, #6
 8005270:	d106      	bne.n	8005280 <_printf_common+0x48>
 8005272:	f104 0a19 	add.w	sl, r4, #25
 8005276:	68e3      	ldr	r3, [r4, #12]
 8005278:	6832      	ldr	r2, [r6, #0]
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	42ab      	cmp	r3, r5
 800527e:	dc26      	bgt.n	80052ce <_printf_common+0x96>
 8005280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005284:	1e13      	subs	r3, r2, #0
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	bf18      	it	ne
 800528a:	2301      	movne	r3, #1
 800528c:	0692      	lsls	r2, r2, #26
 800528e:	d42b      	bmi.n	80052e8 <_printf_common+0xb0>
 8005290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005294:	4649      	mov	r1, r9
 8005296:	4638      	mov	r0, r7
 8005298:	47c0      	blx	r8
 800529a:	3001      	adds	r0, #1
 800529c:	d01e      	beq.n	80052dc <_printf_common+0xa4>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	68e5      	ldr	r5, [r4, #12]
 80052a2:	6832      	ldr	r2, [r6, #0]
 80052a4:	f003 0306 	and.w	r3, r3, #6
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	bf08      	it	eq
 80052ac:	1aad      	subeq	r5, r5, r2
 80052ae:	68a3      	ldr	r3, [r4, #8]
 80052b0:	6922      	ldr	r2, [r4, #16]
 80052b2:	bf0c      	ite	eq
 80052b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b8:	2500      	movne	r5, #0
 80052ba:	4293      	cmp	r3, r2
 80052bc:	bfc4      	itt	gt
 80052be:	1a9b      	subgt	r3, r3, r2
 80052c0:	18ed      	addgt	r5, r5, r3
 80052c2:	2600      	movs	r6, #0
 80052c4:	341a      	adds	r4, #26
 80052c6:	42b5      	cmp	r5, r6
 80052c8:	d11a      	bne.n	8005300 <_printf_common+0xc8>
 80052ca:	2000      	movs	r0, #0
 80052cc:	e008      	b.n	80052e0 <_printf_common+0xa8>
 80052ce:	2301      	movs	r3, #1
 80052d0:	4652      	mov	r2, sl
 80052d2:	4649      	mov	r1, r9
 80052d4:	4638      	mov	r0, r7
 80052d6:	47c0      	blx	r8
 80052d8:	3001      	adds	r0, #1
 80052da:	d103      	bne.n	80052e4 <_printf_common+0xac>
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e4:	3501      	adds	r5, #1
 80052e6:	e7c6      	b.n	8005276 <_printf_common+0x3e>
 80052e8:	18e1      	adds	r1, r4, r3
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	2030      	movs	r0, #48	; 0x30
 80052ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052f2:	4422      	add	r2, r4
 80052f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052fc:	3302      	adds	r3, #2
 80052fe:	e7c7      	b.n	8005290 <_printf_common+0x58>
 8005300:	2301      	movs	r3, #1
 8005302:	4622      	mov	r2, r4
 8005304:	4649      	mov	r1, r9
 8005306:	4638      	mov	r0, r7
 8005308:	47c0      	blx	r8
 800530a:	3001      	adds	r0, #1
 800530c:	d0e6      	beq.n	80052dc <_printf_common+0xa4>
 800530e:	3601      	adds	r6, #1
 8005310:	e7d9      	b.n	80052c6 <_printf_common+0x8e>
	...

08005314 <_printf_i>:
 8005314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005318:	7e0f      	ldrb	r7, [r1, #24]
 800531a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800531c:	2f78      	cmp	r7, #120	; 0x78
 800531e:	4691      	mov	r9, r2
 8005320:	4680      	mov	r8, r0
 8005322:	460c      	mov	r4, r1
 8005324:	469a      	mov	sl, r3
 8005326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800532a:	d807      	bhi.n	800533c <_printf_i+0x28>
 800532c:	2f62      	cmp	r7, #98	; 0x62
 800532e:	d80a      	bhi.n	8005346 <_printf_i+0x32>
 8005330:	2f00      	cmp	r7, #0
 8005332:	f000 80d8 	beq.w	80054e6 <_printf_i+0x1d2>
 8005336:	2f58      	cmp	r7, #88	; 0x58
 8005338:	f000 80a3 	beq.w	8005482 <_printf_i+0x16e>
 800533c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005344:	e03a      	b.n	80053bc <_printf_i+0xa8>
 8005346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800534a:	2b15      	cmp	r3, #21
 800534c:	d8f6      	bhi.n	800533c <_printf_i+0x28>
 800534e:	a101      	add	r1, pc, #4	; (adr r1, 8005354 <_printf_i+0x40>)
 8005350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005354:	080053ad 	.word	0x080053ad
 8005358:	080053c1 	.word	0x080053c1
 800535c:	0800533d 	.word	0x0800533d
 8005360:	0800533d 	.word	0x0800533d
 8005364:	0800533d 	.word	0x0800533d
 8005368:	0800533d 	.word	0x0800533d
 800536c:	080053c1 	.word	0x080053c1
 8005370:	0800533d 	.word	0x0800533d
 8005374:	0800533d 	.word	0x0800533d
 8005378:	0800533d 	.word	0x0800533d
 800537c:	0800533d 	.word	0x0800533d
 8005380:	080054cd 	.word	0x080054cd
 8005384:	080053f1 	.word	0x080053f1
 8005388:	080054af 	.word	0x080054af
 800538c:	0800533d 	.word	0x0800533d
 8005390:	0800533d 	.word	0x0800533d
 8005394:	080054ef 	.word	0x080054ef
 8005398:	0800533d 	.word	0x0800533d
 800539c:	080053f1 	.word	0x080053f1
 80053a0:	0800533d 	.word	0x0800533d
 80053a4:	0800533d 	.word	0x0800533d
 80053a8:	080054b7 	.word	0x080054b7
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	1d1a      	adds	r2, r3, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053bc:	2301      	movs	r3, #1
 80053be:	e0a3      	b.n	8005508 <_printf_i+0x1f4>
 80053c0:	6820      	ldr	r0, [r4, #0]
 80053c2:	6829      	ldr	r1, [r5, #0]
 80053c4:	0606      	lsls	r6, r0, #24
 80053c6:	f101 0304 	add.w	r3, r1, #4
 80053ca:	d50a      	bpl.n	80053e2 <_printf_i+0xce>
 80053cc:	680e      	ldr	r6, [r1, #0]
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	2e00      	cmp	r6, #0
 80053d2:	da03      	bge.n	80053dc <_printf_i+0xc8>
 80053d4:	232d      	movs	r3, #45	; 0x2d
 80053d6:	4276      	negs	r6, r6
 80053d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053dc:	485e      	ldr	r0, [pc, #376]	; (8005558 <_printf_i+0x244>)
 80053de:	230a      	movs	r3, #10
 80053e0:	e019      	b.n	8005416 <_printf_i+0x102>
 80053e2:	680e      	ldr	r6, [r1, #0]
 80053e4:	602b      	str	r3, [r5, #0]
 80053e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053ea:	bf18      	it	ne
 80053ec:	b236      	sxthne	r6, r6
 80053ee:	e7ef      	b.n	80053d0 <_printf_i+0xbc>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	6820      	ldr	r0, [r4, #0]
 80053f4:	1d19      	adds	r1, r3, #4
 80053f6:	6029      	str	r1, [r5, #0]
 80053f8:	0601      	lsls	r1, r0, #24
 80053fa:	d501      	bpl.n	8005400 <_printf_i+0xec>
 80053fc:	681e      	ldr	r6, [r3, #0]
 80053fe:	e002      	b.n	8005406 <_printf_i+0xf2>
 8005400:	0646      	lsls	r6, r0, #25
 8005402:	d5fb      	bpl.n	80053fc <_printf_i+0xe8>
 8005404:	881e      	ldrh	r6, [r3, #0]
 8005406:	4854      	ldr	r0, [pc, #336]	; (8005558 <_printf_i+0x244>)
 8005408:	2f6f      	cmp	r7, #111	; 0x6f
 800540a:	bf0c      	ite	eq
 800540c:	2308      	moveq	r3, #8
 800540e:	230a      	movne	r3, #10
 8005410:	2100      	movs	r1, #0
 8005412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005416:	6865      	ldr	r5, [r4, #4]
 8005418:	60a5      	str	r5, [r4, #8]
 800541a:	2d00      	cmp	r5, #0
 800541c:	bfa2      	ittt	ge
 800541e:	6821      	ldrge	r1, [r4, #0]
 8005420:	f021 0104 	bicge.w	r1, r1, #4
 8005424:	6021      	strge	r1, [r4, #0]
 8005426:	b90e      	cbnz	r6, 800542c <_printf_i+0x118>
 8005428:	2d00      	cmp	r5, #0
 800542a:	d04d      	beq.n	80054c8 <_printf_i+0x1b4>
 800542c:	4615      	mov	r5, r2
 800542e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005432:	fb03 6711 	mls	r7, r3, r1, r6
 8005436:	5dc7      	ldrb	r7, [r0, r7]
 8005438:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800543c:	4637      	mov	r7, r6
 800543e:	42bb      	cmp	r3, r7
 8005440:	460e      	mov	r6, r1
 8005442:	d9f4      	bls.n	800542e <_printf_i+0x11a>
 8005444:	2b08      	cmp	r3, #8
 8005446:	d10b      	bne.n	8005460 <_printf_i+0x14c>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	07de      	lsls	r6, r3, #31
 800544c:	d508      	bpl.n	8005460 <_printf_i+0x14c>
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	6861      	ldr	r1, [r4, #4]
 8005452:	4299      	cmp	r1, r3
 8005454:	bfde      	ittt	le
 8005456:	2330      	movle	r3, #48	; 0x30
 8005458:	f805 3c01 	strble.w	r3, [r5, #-1]
 800545c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005460:	1b52      	subs	r2, r2, r5
 8005462:	6122      	str	r2, [r4, #16]
 8005464:	f8cd a000 	str.w	sl, [sp]
 8005468:	464b      	mov	r3, r9
 800546a:	aa03      	add	r2, sp, #12
 800546c:	4621      	mov	r1, r4
 800546e:	4640      	mov	r0, r8
 8005470:	f7ff fee2 	bl	8005238 <_printf_common>
 8005474:	3001      	adds	r0, #1
 8005476:	d14c      	bne.n	8005512 <_printf_i+0x1fe>
 8005478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800547c:	b004      	add	sp, #16
 800547e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005482:	4835      	ldr	r0, [pc, #212]	; (8005558 <_printf_i+0x244>)
 8005484:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005488:	6829      	ldr	r1, [r5, #0]
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005490:	6029      	str	r1, [r5, #0]
 8005492:	061d      	lsls	r5, r3, #24
 8005494:	d514      	bpl.n	80054c0 <_printf_i+0x1ac>
 8005496:	07df      	lsls	r7, r3, #31
 8005498:	bf44      	itt	mi
 800549a:	f043 0320 	orrmi.w	r3, r3, #32
 800549e:	6023      	strmi	r3, [r4, #0]
 80054a0:	b91e      	cbnz	r6, 80054aa <_printf_i+0x196>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	f023 0320 	bic.w	r3, r3, #32
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	2310      	movs	r3, #16
 80054ac:	e7b0      	b.n	8005410 <_printf_i+0xfc>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	f043 0320 	orr.w	r3, r3, #32
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	2378      	movs	r3, #120	; 0x78
 80054b8:	4828      	ldr	r0, [pc, #160]	; (800555c <_printf_i+0x248>)
 80054ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054be:	e7e3      	b.n	8005488 <_printf_i+0x174>
 80054c0:	0659      	lsls	r1, r3, #25
 80054c2:	bf48      	it	mi
 80054c4:	b2b6      	uxthmi	r6, r6
 80054c6:	e7e6      	b.n	8005496 <_printf_i+0x182>
 80054c8:	4615      	mov	r5, r2
 80054ca:	e7bb      	b.n	8005444 <_printf_i+0x130>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	6826      	ldr	r6, [r4, #0]
 80054d0:	6961      	ldr	r1, [r4, #20]
 80054d2:	1d18      	adds	r0, r3, #4
 80054d4:	6028      	str	r0, [r5, #0]
 80054d6:	0635      	lsls	r5, r6, #24
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	d501      	bpl.n	80054e0 <_printf_i+0x1cc>
 80054dc:	6019      	str	r1, [r3, #0]
 80054de:	e002      	b.n	80054e6 <_printf_i+0x1d2>
 80054e0:	0670      	lsls	r0, r6, #25
 80054e2:	d5fb      	bpl.n	80054dc <_printf_i+0x1c8>
 80054e4:	8019      	strh	r1, [r3, #0]
 80054e6:	2300      	movs	r3, #0
 80054e8:	6123      	str	r3, [r4, #16]
 80054ea:	4615      	mov	r5, r2
 80054ec:	e7ba      	b.n	8005464 <_printf_i+0x150>
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	1d1a      	adds	r2, r3, #4
 80054f2:	602a      	str	r2, [r5, #0]
 80054f4:	681d      	ldr	r5, [r3, #0]
 80054f6:	6862      	ldr	r2, [r4, #4]
 80054f8:	2100      	movs	r1, #0
 80054fa:	4628      	mov	r0, r5
 80054fc:	f7fa fe88 	bl	8000210 <memchr>
 8005500:	b108      	cbz	r0, 8005506 <_printf_i+0x1f2>
 8005502:	1b40      	subs	r0, r0, r5
 8005504:	6060      	str	r0, [r4, #4]
 8005506:	6863      	ldr	r3, [r4, #4]
 8005508:	6123      	str	r3, [r4, #16]
 800550a:	2300      	movs	r3, #0
 800550c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005510:	e7a8      	b.n	8005464 <_printf_i+0x150>
 8005512:	6923      	ldr	r3, [r4, #16]
 8005514:	462a      	mov	r2, r5
 8005516:	4649      	mov	r1, r9
 8005518:	4640      	mov	r0, r8
 800551a:	47d0      	blx	sl
 800551c:	3001      	adds	r0, #1
 800551e:	d0ab      	beq.n	8005478 <_printf_i+0x164>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	079b      	lsls	r3, r3, #30
 8005524:	d413      	bmi.n	800554e <_printf_i+0x23a>
 8005526:	68e0      	ldr	r0, [r4, #12]
 8005528:	9b03      	ldr	r3, [sp, #12]
 800552a:	4298      	cmp	r0, r3
 800552c:	bfb8      	it	lt
 800552e:	4618      	movlt	r0, r3
 8005530:	e7a4      	b.n	800547c <_printf_i+0x168>
 8005532:	2301      	movs	r3, #1
 8005534:	4632      	mov	r2, r6
 8005536:	4649      	mov	r1, r9
 8005538:	4640      	mov	r0, r8
 800553a:	47d0      	blx	sl
 800553c:	3001      	adds	r0, #1
 800553e:	d09b      	beq.n	8005478 <_printf_i+0x164>
 8005540:	3501      	adds	r5, #1
 8005542:	68e3      	ldr	r3, [r4, #12]
 8005544:	9903      	ldr	r1, [sp, #12]
 8005546:	1a5b      	subs	r3, r3, r1
 8005548:	42ab      	cmp	r3, r5
 800554a:	dcf2      	bgt.n	8005532 <_printf_i+0x21e>
 800554c:	e7eb      	b.n	8005526 <_printf_i+0x212>
 800554e:	2500      	movs	r5, #0
 8005550:	f104 0619 	add.w	r6, r4, #25
 8005554:	e7f5      	b.n	8005542 <_printf_i+0x22e>
 8005556:	bf00      	nop
 8005558:	08005871 	.word	0x08005871
 800555c:	08005882 	.word	0x08005882

08005560 <memmove>:
 8005560:	4288      	cmp	r0, r1
 8005562:	b510      	push	{r4, lr}
 8005564:	eb01 0402 	add.w	r4, r1, r2
 8005568:	d902      	bls.n	8005570 <memmove+0x10>
 800556a:	4284      	cmp	r4, r0
 800556c:	4623      	mov	r3, r4
 800556e:	d807      	bhi.n	8005580 <memmove+0x20>
 8005570:	1e43      	subs	r3, r0, #1
 8005572:	42a1      	cmp	r1, r4
 8005574:	d008      	beq.n	8005588 <memmove+0x28>
 8005576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800557a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800557e:	e7f8      	b.n	8005572 <memmove+0x12>
 8005580:	4402      	add	r2, r0
 8005582:	4601      	mov	r1, r0
 8005584:	428a      	cmp	r2, r1
 8005586:	d100      	bne.n	800558a <memmove+0x2a>
 8005588:	bd10      	pop	{r4, pc}
 800558a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800558e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005592:	e7f7      	b.n	8005584 <memmove+0x24>

08005594 <_free_r>:
 8005594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005596:	2900      	cmp	r1, #0
 8005598:	d044      	beq.n	8005624 <_free_r+0x90>
 800559a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800559e:	9001      	str	r0, [sp, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f1a1 0404 	sub.w	r4, r1, #4
 80055a6:	bfb8      	it	lt
 80055a8:	18e4      	addlt	r4, r4, r3
 80055aa:	f000 f913 	bl	80057d4 <__malloc_lock>
 80055ae:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <_free_r+0x94>)
 80055b0:	9801      	ldr	r0, [sp, #4]
 80055b2:	6813      	ldr	r3, [r2, #0]
 80055b4:	b933      	cbnz	r3, 80055c4 <_free_r+0x30>
 80055b6:	6063      	str	r3, [r4, #4]
 80055b8:	6014      	str	r4, [r2, #0]
 80055ba:	b003      	add	sp, #12
 80055bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055c0:	f000 b90e 	b.w	80057e0 <__malloc_unlock>
 80055c4:	42a3      	cmp	r3, r4
 80055c6:	d908      	bls.n	80055da <_free_r+0x46>
 80055c8:	6825      	ldr	r5, [r4, #0]
 80055ca:	1961      	adds	r1, r4, r5
 80055cc:	428b      	cmp	r3, r1
 80055ce:	bf01      	itttt	eq
 80055d0:	6819      	ldreq	r1, [r3, #0]
 80055d2:	685b      	ldreq	r3, [r3, #4]
 80055d4:	1949      	addeq	r1, r1, r5
 80055d6:	6021      	streq	r1, [r4, #0]
 80055d8:	e7ed      	b.n	80055b6 <_free_r+0x22>
 80055da:	461a      	mov	r2, r3
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	b10b      	cbz	r3, 80055e4 <_free_r+0x50>
 80055e0:	42a3      	cmp	r3, r4
 80055e2:	d9fa      	bls.n	80055da <_free_r+0x46>
 80055e4:	6811      	ldr	r1, [r2, #0]
 80055e6:	1855      	adds	r5, r2, r1
 80055e8:	42a5      	cmp	r5, r4
 80055ea:	d10b      	bne.n	8005604 <_free_r+0x70>
 80055ec:	6824      	ldr	r4, [r4, #0]
 80055ee:	4421      	add	r1, r4
 80055f0:	1854      	adds	r4, r2, r1
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	6011      	str	r1, [r2, #0]
 80055f6:	d1e0      	bne.n	80055ba <_free_r+0x26>
 80055f8:	681c      	ldr	r4, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	6053      	str	r3, [r2, #4]
 80055fe:	4421      	add	r1, r4
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	e7da      	b.n	80055ba <_free_r+0x26>
 8005604:	d902      	bls.n	800560c <_free_r+0x78>
 8005606:	230c      	movs	r3, #12
 8005608:	6003      	str	r3, [r0, #0]
 800560a:	e7d6      	b.n	80055ba <_free_r+0x26>
 800560c:	6825      	ldr	r5, [r4, #0]
 800560e:	1961      	adds	r1, r4, r5
 8005610:	428b      	cmp	r3, r1
 8005612:	bf04      	itt	eq
 8005614:	6819      	ldreq	r1, [r3, #0]
 8005616:	685b      	ldreq	r3, [r3, #4]
 8005618:	6063      	str	r3, [r4, #4]
 800561a:	bf04      	itt	eq
 800561c:	1949      	addeq	r1, r1, r5
 800561e:	6021      	streq	r1, [r4, #0]
 8005620:	6054      	str	r4, [r2, #4]
 8005622:	e7ca      	b.n	80055ba <_free_r+0x26>
 8005624:	b003      	add	sp, #12
 8005626:	bd30      	pop	{r4, r5, pc}
 8005628:	20000254 	.word	0x20000254

0800562c <sbrk_aligned>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4e0e      	ldr	r6, [pc, #56]	; (8005668 <sbrk_aligned+0x3c>)
 8005630:	460c      	mov	r4, r1
 8005632:	6831      	ldr	r1, [r6, #0]
 8005634:	4605      	mov	r5, r0
 8005636:	b911      	cbnz	r1, 800563e <sbrk_aligned+0x12>
 8005638:	f000 f8bc 	bl	80057b4 <_sbrk_r>
 800563c:	6030      	str	r0, [r6, #0]
 800563e:	4621      	mov	r1, r4
 8005640:	4628      	mov	r0, r5
 8005642:	f000 f8b7 	bl	80057b4 <_sbrk_r>
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	d00a      	beq.n	8005660 <sbrk_aligned+0x34>
 800564a:	1cc4      	adds	r4, r0, #3
 800564c:	f024 0403 	bic.w	r4, r4, #3
 8005650:	42a0      	cmp	r0, r4
 8005652:	d007      	beq.n	8005664 <sbrk_aligned+0x38>
 8005654:	1a21      	subs	r1, r4, r0
 8005656:	4628      	mov	r0, r5
 8005658:	f000 f8ac 	bl	80057b4 <_sbrk_r>
 800565c:	3001      	adds	r0, #1
 800565e:	d101      	bne.n	8005664 <sbrk_aligned+0x38>
 8005660:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005664:	4620      	mov	r0, r4
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	20000258 	.word	0x20000258

0800566c <_malloc_r>:
 800566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005670:	1ccd      	adds	r5, r1, #3
 8005672:	f025 0503 	bic.w	r5, r5, #3
 8005676:	3508      	adds	r5, #8
 8005678:	2d0c      	cmp	r5, #12
 800567a:	bf38      	it	cc
 800567c:	250c      	movcc	r5, #12
 800567e:	2d00      	cmp	r5, #0
 8005680:	4607      	mov	r7, r0
 8005682:	db01      	blt.n	8005688 <_malloc_r+0x1c>
 8005684:	42a9      	cmp	r1, r5
 8005686:	d905      	bls.n	8005694 <_malloc_r+0x28>
 8005688:	230c      	movs	r3, #12
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	2600      	movs	r6, #0
 800568e:	4630      	mov	r0, r6
 8005690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005694:	4e2e      	ldr	r6, [pc, #184]	; (8005750 <_malloc_r+0xe4>)
 8005696:	f000 f89d 	bl	80057d4 <__malloc_lock>
 800569a:	6833      	ldr	r3, [r6, #0]
 800569c:	461c      	mov	r4, r3
 800569e:	bb34      	cbnz	r4, 80056ee <_malloc_r+0x82>
 80056a0:	4629      	mov	r1, r5
 80056a2:	4638      	mov	r0, r7
 80056a4:	f7ff ffc2 	bl	800562c <sbrk_aligned>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	4604      	mov	r4, r0
 80056ac:	d14d      	bne.n	800574a <_malloc_r+0xde>
 80056ae:	6834      	ldr	r4, [r6, #0]
 80056b0:	4626      	mov	r6, r4
 80056b2:	2e00      	cmp	r6, #0
 80056b4:	d140      	bne.n	8005738 <_malloc_r+0xcc>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	4631      	mov	r1, r6
 80056ba:	4638      	mov	r0, r7
 80056bc:	eb04 0803 	add.w	r8, r4, r3
 80056c0:	f000 f878 	bl	80057b4 <_sbrk_r>
 80056c4:	4580      	cmp	r8, r0
 80056c6:	d13a      	bne.n	800573e <_malloc_r+0xd2>
 80056c8:	6821      	ldr	r1, [r4, #0]
 80056ca:	3503      	adds	r5, #3
 80056cc:	1a6d      	subs	r5, r5, r1
 80056ce:	f025 0503 	bic.w	r5, r5, #3
 80056d2:	3508      	adds	r5, #8
 80056d4:	2d0c      	cmp	r5, #12
 80056d6:	bf38      	it	cc
 80056d8:	250c      	movcc	r5, #12
 80056da:	4629      	mov	r1, r5
 80056dc:	4638      	mov	r0, r7
 80056de:	f7ff ffa5 	bl	800562c <sbrk_aligned>
 80056e2:	3001      	adds	r0, #1
 80056e4:	d02b      	beq.n	800573e <_malloc_r+0xd2>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	442b      	add	r3, r5
 80056ea:	6023      	str	r3, [r4, #0]
 80056ec:	e00e      	b.n	800570c <_malloc_r+0xa0>
 80056ee:	6822      	ldr	r2, [r4, #0]
 80056f0:	1b52      	subs	r2, r2, r5
 80056f2:	d41e      	bmi.n	8005732 <_malloc_r+0xc6>
 80056f4:	2a0b      	cmp	r2, #11
 80056f6:	d916      	bls.n	8005726 <_malloc_r+0xba>
 80056f8:	1961      	adds	r1, r4, r5
 80056fa:	42a3      	cmp	r3, r4
 80056fc:	6025      	str	r5, [r4, #0]
 80056fe:	bf18      	it	ne
 8005700:	6059      	strne	r1, [r3, #4]
 8005702:	6863      	ldr	r3, [r4, #4]
 8005704:	bf08      	it	eq
 8005706:	6031      	streq	r1, [r6, #0]
 8005708:	5162      	str	r2, [r4, r5]
 800570a:	604b      	str	r3, [r1, #4]
 800570c:	4638      	mov	r0, r7
 800570e:	f104 060b 	add.w	r6, r4, #11
 8005712:	f000 f865 	bl	80057e0 <__malloc_unlock>
 8005716:	f026 0607 	bic.w	r6, r6, #7
 800571a:	1d23      	adds	r3, r4, #4
 800571c:	1af2      	subs	r2, r6, r3
 800571e:	d0b6      	beq.n	800568e <_malloc_r+0x22>
 8005720:	1b9b      	subs	r3, r3, r6
 8005722:	50a3      	str	r3, [r4, r2]
 8005724:	e7b3      	b.n	800568e <_malloc_r+0x22>
 8005726:	6862      	ldr	r2, [r4, #4]
 8005728:	42a3      	cmp	r3, r4
 800572a:	bf0c      	ite	eq
 800572c:	6032      	streq	r2, [r6, #0]
 800572e:	605a      	strne	r2, [r3, #4]
 8005730:	e7ec      	b.n	800570c <_malloc_r+0xa0>
 8005732:	4623      	mov	r3, r4
 8005734:	6864      	ldr	r4, [r4, #4]
 8005736:	e7b2      	b.n	800569e <_malloc_r+0x32>
 8005738:	4634      	mov	r4, r6
 800573a:	6876      	ldr	r6, [r6, #4]
 800573c:	e7b9      	b.n	80056b2 <_malloc_r+0x46>
 800573e:	230c      	movs	r3, #12
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	4638      	mov	r0, r7
 8005744:	f000 f84c 	bl	80057e0 <__malloc_unlock>
 8005748:	e7a1      	b.n	800568e <_malloc_r+0x22>
 800574a:	6025      	str	r5, [r4, #0]
 800574c:	e7de      	b.n	800570c <_malloc_r+0xa0>
 800574e:	bf00      	nop
 8005750:	20000254 	.word	0x20000254

08005754 <_realloc_r>:
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	4680      	mov	r8, r0
 800575a:	4614      	mov	r4, r2
 800575c:	460e      	mov	r6, r1
 800575e:	b921      	cbnz	r1, 800576a <_realloc_r+0x16>
 8005760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005764:	4611      	mov	r1, r2
 8005766:	f7ff bf81 	b.w	800566c <_malloc_r>
 800576a:	b92a      	cbnz	r2, 8005778 <_realloc_r+0x24>
 800576c:	f7ff ff12 	bl	8005594 <_free_r>
 8005770:	4625      	mov	r5, r4
 8005772:	4628      	mov	r0, r5
 8005774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005778:	f000 f838 	bl	80057ec <_malloc_usable_size_r>
 800577c:	4284      	cmp	r4, r0
 800577e:	4607      	mov	r7, r0
 8005780:	d802      	bhi.n	8005788 <_realloc_r+0x34>
 8005782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005786:	d812      	bhi.n	80057ae <_realloc_r+0x5a>
 8005788:	4621      	mov	r1, r4
 800578a:	4640      	mov	r0, r8
 800578c:	f7ff ff6e 	bl	800566c <_malloc_r>
 8005790:	4605      	mov	r5, r0
 8005792:	2800      	cmp	r0, #0
 8005794:	d0ed      	beq.n	8005772 <_realloc_r+0x1e>
 8005796:	42bc      	cmp	r4, r7
 8005798:	4622      	mov	r2, r4
 800579a:	4631      	mov	r1, r6
 800579c:	bf28      	it	cs
 800579e:	463a      	movcs	r2, r7
 80057a0:	f7ff fbb8 	bl	8004f14 <memcpy>
 80057a4:	4631      	mov	r1, r6
 80057a6:	4640      	mov	r0, r8
 80057a8:	f7ff fef4 	bl	8005594 <_free_r>
 80057ac:	e7e1      	b.n	8005772 <_realloc_r+0x1e>
 80057ae:	4635      	mov	r5, r6
 80057b0:	e7df      	b.n	8005772 <_realloc_r+0x1e>
	...

080057b4 <_sbrk_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4d06      	ldr	r5, [pc, #24]	; (80057d0 <_sbrk_r+0x1c>)
 80057b8:	2300      	movs	r3, #0
 80057ba:	4604      	mov	r4, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	602b      	str	r3, [r5, #0]
 80057c0:	f7fb fce8 	bl	8001194 <_sbrk>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_sbrk_r+0x1a>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_sbrk_r+0x1a>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	2000025c 	.word	0x2000025c

080057d4 <__malloc_lock>:
 80057d4:	4801      	ldr	r0, [pc, #4]	; (80057dc <__malloc_lock+0x8>)
 80057d6:	f000 b811 	b.w	80057fc <__retarget_lock_acquire_recursive>
 80057da:	bf00      	nop
 80057dc:	20000260 	.word	0x20000260

080057e0 <__malloc_unlock>:
 80057e0:	4801      	ldr	r0, [pc, #4]	; (80057e8 <__malloc_unlock+0x8>)
 80057e2:	f000 b80c 	b.w	80057fe <__retarget_lock_release_recursive>
 80057e6:	bf00      	nop
 80057e8:	20000260 	.word	0x20000260

080057ec <_malloc_usable_size_r>:
 80057ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f0:	1f18      	subs	r0, r3, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bfbc      	itt	lt
 80057f6:	580b      	ldrlt	r3, [r1, r0]
 80057f8:	18c0      	addlt	r0, r0, r3
 80057fa:	4770      	bx	lr

080057fc <__retarget_lock_acquire_recursive>:
 80057fc:	4770      	bx	lr

080057fe <__retarget_lock_release_recursive>:
 80057fe:	4770      	bx	lr

08005800 <_init>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr

0800580c <_fini>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	bf00      	nop
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr
